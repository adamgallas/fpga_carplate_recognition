// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Dilate203 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [10:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [11:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln118_12_reg_1178;
reg   [0:0] icmp_ln899_reg_1134;
reg   [0:0] icmp_ln887_reg_1125;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] and_ln512_reg_1201;
reg   [0:0] and_ln512_reg_1201_pp0_iter4_reg;
reg   [31:0] t_V_10_reg_279;
wire  signed [31:0] stop_row_fu_290_p1;
reg  signed [31:0] stop_row_reg_1072;
reg    ap_block_state1;
wire  signed [31:0] cols_fu_298_p1;
reg  signed [31:0] cols_reg_1081;
wire  signed [31:0] sext_ln443_fu_312_p1;
reg  signed [31:0] sext_ln443_reg_1086;
wire  signed [31:0] sext_ln443_4_fu_322_p1;
reg  signed [31:0] sext_ln443_4_reg_1091;
wire   [12:0] add_ln458_fu_330_p2;
reg   [12:0] add_ln458_reg_1096;
wire   [1:0] add_ln507_fu_340_p2;
reg   [1:0] add_ln507_reg_1101;
wire   [1:0] add_ln458_4_fu_346_p2;
reg   [1:0] add_ln458_4_reg_1111;
wire   [0:0] icmp_ln443_fu_352_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_357_p2;
reg   [31:0] i_V_reg_1120;
wire   [0:0] icmp_ln887_fu_363_p2;
wire   [0:0] xor_ln457_fu_368_p2;
reg   [0:0] xor_ln457_reg_1129;
wire   [0:0] icmp_ln899_fu_384_p2;
wire   [0:0] icmp_ln879_fu_390_p2;
reg   [0:0] icmp_ln879_reg_1139;
wire   [0:0] icmp_ln879_5_fu_396_p2;
reg   [0:0] icmp_ln879_5_reg_1143;
wire   [0:0] icmp_ln899_5_fu_402_p2;
reg   [0:0] icmp_ln899_5_reg_1147;
wire   [1:0] sub_ln493_fu_549_p2;
reg   [1:0] sub_ln493_reg_1154;
wire   [1:0] sub_ln493_7_fu_575_p2;
reg   [1:0] sub_ln493_7_reg_1159;
wire   [1:0] sub_ln493_8_fu_601_p2;
reg   [1:0] sub_ln493_8_reg_1164;
wire   [0:0] icmp_ln444_fu_606_p2;
reg   [0:0] icmp_ln444_reg_1169;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op127_read_state4;
reg    ap_predicate_op133_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln444_reg_1169_pp0_iter1_reg;
reg   [0:0] icmp_ln444_reg_1169_pp0_iter2_reg;
reg   [0:0] icmp_ln444_reg_1169_pp0_iter3_reg;
wire   [31:0] j_V_fu_611_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln118_12_fu_668_p2;
reg   [0:0] and_ln118_12_reg_1178_pp0_iter1_reg;
wire  signed [12:0] x_fu_689_p3;
reg  signed [12:0] x_reg_1182;
wire   [0:0] or_ln457_fu_701_p2;
reg   [0:0] or_ln457_reg_1187;
reg   [0:0] or_ln457_reg_1187_pp0_iter1_reg;
wire   [1:0] sub_ln493_9_fu_706_p2;
reg   [1:0] sub_ln493_9_reg_1194;
reg   [1:0] sub_ln493_9_reg_1194_pp0_iter1_reg;
wire   [0:0] and_ln512_fu_711_p2;
reg   [0:0] and_ln512_reg_1201_pp0_iter1_reg;
reg   [0:0] and_ln512_reg_1201_pp0_iter2_reg;
reg   [0:0] and_ln512_reg_1201_pp0_iter3_reg;
reg   [10:0] k_buf_0_val_4_addr_reg_1210;
reg   [10:0] k_buf_0_val_5_addr_reg_1216;
wire   [7:0] src_kernel_win_0_va_75_fu_815_p3;
reg   [7:0] src_kernel_win_0_va_75_reg_1222;
reg   [7:0] src_kernel_win_0_va_75_reg_1222_pp0_iter3_reg;
wire   [7:0] src_kernel_win_0_va_76_fu_833_p3;
reg   [7:0] src_kernel_win_0_va_76_reg_1229;
wire   [7:0] src_kernel_win_0_va_77_fu_851_p3;
reg   [7:0] src_kernel_win_0_va_77_reg_1236;
wire   [7:0] select_ln188_fu_870_p3;
reg   [7:0] select_ln188_reg_1242;
wire   [0:0] icmp_ln188_22_fu_878_p2;
reg   [0:0] icmp_ln188_22_reg_1247;
wire   [7:0] select_ln188_25_fu_928_p3;
reg   [7:0] select_ln188_25_reg_1252;
wire   [7:0] tmp_86_fu_996_p3;
reg   [7:0] tmp_86_reg_1258;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [10:0] k_buf_0_val_3_address0;
reg    k_buf_0_val_3_ce0;
reg    k_buf_0_val_3_we0;
wire   [7:0] k_buf_0_val_3_q0;
wire   [10:0] k_buf_0_val_3_address1;
reg    k_buf_0_val_3_ce1;
reg    k_buf_0_val_3_we1;
wire   [10:0] k_buf_0_val_4_address0;
reg    k_buf_0_val_4_ce0;
reg    k_buf_0_val_4_we0;
wire   [7:0] k_buf_0_val_4_q0;
wire   [10:0] k_buf_0_val_4_address1;
reg    k_buf_0_val_4_ce1;
reg    k_buf_0_val_4_we1;
wire   [10:0] k_buf_0_val_5_address0;
reg    k_buf_0_val_5_ce0;
reg    k_buf_0_val_5_we0;
wire   [7:0] k_buf_0_val_5_q0;
wire   [10:0] k_buf_0_val_5_address1;
reg    k_buf_0_val_5_ce1;
reg    k_buf_0_val_5_we1;
reg   [31:0] t_V_reg_268;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln835_fu_719_p1;
reg   [7:0] src_kernel_win_0_va_fu_140;
reg   [7:0] src_kernel_win_0_va_70_fu_144;
reg   [7:0] src_kernel_win_0_va_71_fu_148;
reg   [7:0] src_kernel_win_0_va_72_fu_152;
reg   [7:0] src_kernel_win_0_va_73_fu_156;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_82;
reg   [7:0] src_kernel_win_0_va_74_fu_160;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_83;
reg   [7:0] right_border_buf_0_s_fu_164;
wire   [7:0] col_buf_0_val_0_0_fu_746_p3;
reg   [7:0] right_border_buf_0_19_fu_168;
wire   [7:0] col_buf_0_val_2_0_fu_782_p3;
reg   [7:0] right_border_buf_0_20_fu_172;
wire   [7:0] col_buf_0_val_1_0_fu_764_p3;
reg    ap_block_pp0_stage0_01001;
wire  signed [10:0] stop_row_fu_290_p0;
wire  signed [10:0] sext_ln113_fu_294_p0;
wire  signed [11:0] cols_fu_298_p0;
wire  signed [11:0] sext_ln1174_fu_302_p0;
wire  signed [12:0] sext_ln1174_fu_302_p1;
wire   [12:0] add_ln443_fu_306_p2;
wire  signed [11:0] sext_ln113_fu_294_p1;
wire   [11:0] add_ln443_4_fu_316_p2;
wire  signed [11:0] trunc_ln458_fu_326_p0;
wire  signed [10:0] trunc_ln506_fu_336_p0;
wire   [1:0] trunc_ln506_fu_336_p1;
wire   [1:0] trunc_ln458_fu_326_p1;
wire   [30:0] tmp_fu_374_p4;
wire   [31:0] add_ln506_fu_411_p2;
wire   [0:0] tmp_75_fu_417_p3;
wire   [0:0] icmp_ln118_fu_431_p2;
wire   [0:0] xor_ln118_13_fu_425_p2;
wire   [31:0] add_ln506_7_fu_450_p2;
wire   [0:0] tmp_77_fu_456_p3;
wire   [0:0] icmp_ln118_10_fu_470_p2;
wire   [0:0] xor_ln118_14_fu_464_p2;
wire   [31:0] add_ln506_8_fu_489_p2;
wire   [0:0] tmp_79_fu_495_p3;
wire   [0:0] icmp_ln118_11_fu_509_p2;
wire   [0:0] xor_ln118_15_fu_503_p2;
wire   [1:0] trunc_ln506_4_fu_407_p1;
wire   [0:0] tmp_76_fu_442_p3;
wire   [0:0] and_ln118_fu_436_p2;
wire   [1:0] add_ln118_fu_528_p2;
wire   [1:0] select_ln118_fu_534_p3;
wire   [1:0] select_ln118_16_fu_541_p3;
wire   [0:0] tmp_78_fu_481_p3;
wire   [0:0] and_ln118_10_fu_475_p2;
wire   [1:0] xor_ln118_fu_554_p2;
wire   [1:0] select_ln118_17_fu_560_p3;
wire   [1:0] select_ln118_18_fu_567_p3;
wire   [0:0] tmp_80_fu_520_p3;
wire   [0:0] and_ln118_11_fu_514_p2;
wire   [1:0] add_ln118_4_fu_580_p2;
wire   [1:0] select_ln118_19_fu_586_p3;
wire   [1:0] select_ln118_20_fu_593_p3;
wire   [30:0] tmp_81_fu_617_p4;
wire   [12:0] trunc_ln451_fu_633_p1;
wire   [31:0] ImagLoc_x_fu_637_p2;
wire   [0:0] tmp_82_fu_649_p3;
wire   [0:0] icmp_ln118_12_fu_663_p2;
wire   [0:0] xor_ln118_16_fu_657_p2;
wire   [0:0] tmp_83_fu_674_p3;
wire   [12:0] add_ln451_4_fu_643_p2;
wire   [12:0] select_ln121_fu_682_p3;
wire   [1:0] trunc_ln458_4_fu_697_p1;
wire   [0:0] icmp_ln891_fu_627_p2;
wire  signed [31:0] sext_ln118_fu_716_p1;
wire   [7:0] tmp_33_fu_735_p5;
wire   [7:0] tmp_34_fu_753_p5;
wire   [7:0] tmp_35_fu_771_p5;
wire   [7:0] tmp_s_fu_804_p5;
wire   [7:0] tmp_36_fu_822_p5;
wire   [7:0] tmp_37_fu_840_p5;
wire   [0:0] icmp_ln188_fu_864_p2;
wire   [7:0] select_ln188_22_fu_890_p3;
wire   [0:0] icmp_ln188_23_fu_895_p2;
wire   [7:0] select_ln188_23_fu_901_p3;
wire   [0:0] icmp_ln188_24_fu_909_p2;
wire   [7:0] select_ln188_24_fu_915_p3;
wire   [0:0] icmp_ln188_25_fu_923_p2;
wire   [0:0] icmp_ln188_26_fu_965_p2;
wire   [7:0] select_ln188_26_fu_970_p3;
wire   [0:0] icmp_ln188_27_fu_977_p2;
wire   [7:0] select_ln188_27_fu_983_p3;
wire   [0:0] icmp_ln188_28_fu_991_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op128_store_state4;
reg    ap_enable_operation_128;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_enable_operation_126;
reg    ap_enable_operation_144;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_predicate_op147_store_state5;
reg    ap_enable_operation_147;
reg    ap_predicate_op129_store_state4;
reg    ap_enable_operation_129;
wire    ap_enable_operation_124;
wire    ap_enable_operation_141;
reg    ap_predicate_op148_store_state5;
reg    ap_enable_operation_148;
reg    ap_predicate_op131_store_state4;
reg    ap_enable_operation_131;
wire    ap_enable_operation_122;
wire    ap_enable_operation_138;
reg    ap_predicate_op134_store_state4;
reg    ap_enable_operation_134;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_3_address0),
    .ce0(k_buf_0_val_3_ce0),
    .we0(k_buf_0_val_3_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_3_q0),
    .address1(k_buf_0_val_3_address1),
    .ce1(k_buf_0_val_3_ce1),
    .we1(k_buf_0_val_3_we1),
    .d1(p_src_data_stream_V_dout)
);

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_4_address0),
    .ce0(k_buf_0_val_4_ce0),
    .we0(k_buf_0_val_4_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_4_q0),
    .address1(k_buf_0_val_4_address1),
    .ce1(k_buf_0_val_4_ce1),
    .we1(k_buf_0_val_4_we1),
    .d1(k_buf_0_val_3_q0)
);

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_5_address0),
    .ce0(k_buf_0_val_5_ce0),
    .we0(k_buf_0_val_5_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_5_q0),
    .address1(k_buf_0_val_5_address1),
    .ce1(k_buf_0_val_5_ce1),
    .we1(k_buf_0_val_5_we1),
    .d1(k_buf_0_val_4_q0)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U72(
    .din0(right_border_buf_0_s_fu_164),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_9_reg_1194_pp0_iter1_reg),
    .dout(tmp_33_fu_735_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U73(
    .din0(right_border_buf_0_20_fu_172),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_9_reg_1194_pp0_iter1_reg),
    .dout(tmp_34_fu_753_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U74(
    .din0(right_border_buf_0_19_fu_168),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_9_reg_1194_pp0_iter1_reg),
    .dout(tmp_35_fu_771_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U75(
    .din0(col_buf_0_val_0_0_fu_746_p3),
    .din1(col_buf_0_val_1_0_fu_764_p3),
    .din2(col_buf_0_val_2_0_fu_782_p3),
    .din3(sub_ln493_reg_1154),
    .dout(tmp_s_fu_804_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U76(
    .din0(col_buf_0_val_0_0_fu_746_p3),
    .din1(col_buf_0_val_1_0_fu_764_p3),
    .din2(col_buf_0_val_2_0_fu_782_p3),
    .din3(sub_ln493_7_reg_1159),
    .dout(tmp_36_fu_822_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U77(
    .din0(col_buf_0_val_0_0_fu_746_p3),
    .din1(col_buf_0_val_1_0_fu_764_p3),
    .din2(col_buf_0_val_2_0_fu_782_p3),
    .din3(sub_ln493_8_reg_1164),
    .dout(tmp_37_fu_840_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln443_fu_352_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln443_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((icmp_ln443_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_10_reg_279 <= j_V_fu_611_p2;
    end else if (((icmp_ln443_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_10_reg_279 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_268 <= i_V_reg_1120;
    end else if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_268 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln458_4_reg_1111 <= add_ln458_4_fu_346_p2;
        add_ln458_reg_1096 <= add_ln458_fu_330_p2;
        add_ln507_reg_1101 <= add_ln507_fu_340_p2;
        cols_reg_1081 <= cols_fu_298_p1;
        sext_ln443_4_reg_1091 <= sext_ln443_4_fu_322_p1;
        sext_ln443_reg_1086 <= sext_ln443_fu_312_p1;
        stop_row_reg_1072 <= stop_row_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_12_reg_1178 <= and_ln118_12_fu_668_p2;
        and_ln512_reg_1201 <= and_ln512_fu_711_p2;
        or_ln457_reg_1187 <= or_ln457_fu_701_p2;
        sub_ln493_9_reg_1194 <= sub_ln493_9_fu_706_p2;
        x_reg_1182 <= x_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_12_reg_1178_pp0_iter1_reg <= and_ln118_12_reg_1178;
        and_ln512_reg_1201_pp0_iter1_reg <= and_ln512_reg_1201;
        icmp_ln444_reg_1169 <= icmp_ln444_fu_606_p2;
        icmp_ln444_reg_1169_pp0_iter1_reg <= icmp_ln444_reg_1169;
        k_buf_0_val_4_addr_reg_1210 <= zext_ln835_fu_719_p1;
        k_buf_0_val_5_addr_reg_1216 <= zext_ln835_fu_719_p1;
        or_ln457_reg_1187_pp0_iter1_reg <= or_ln457_reg_1187;
        sub_ln493_9_reg_1194_pp0_iter1_reg <= sub_ln493_9_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln512_reg_1201_pp0_iter2_reg <= and_ln512_reg_1201_pp0_iter1_reg;
        and_ln512_reg_1201_pp0_iter3_reg <= and_ln512_reg_1201_pp0_iter2_reg;
        and_ln512_reg_1201_pp0_iter4_reg <= and_ln512_reg_1201_pp0_iter3_reg;
        icmp_ln444_reg_1169_pp0_iter2_reg <= icmp_ln444_reg_1169_pp0_iter1_reg;
        icmp_ln444_reg_1169_pp0_iter3_reg <= icmp_ln444_reg_1169_pp0_iter2_reg;
        src_kernel_win_0_va_75_reg_1222 <= src_kernel_win_0_va_75_fu_815_p3;
        src_kernel_win_0_va_75_reg_1222_pp0_iter3_reg <= src_kernel_win_0_va_75_reg_1222;
        src_kernel_win_0_va_76_reg_1229 <= src_kernel_win_0_va_76_fu_833_p3;
        src_kernel_win_0_va_77_reg_1236 <= src_kernel_win_0_va_77_fu_851_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_1120 <= i_V_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1201_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln188_22_reg_1247 <= icmp_ln188_22_fu_878_p2;
        select_ln188_reg_1242 <= select_ln188_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln879_5_reg_1143 <= icmp_ln879_5_fu_396_p2;
        icmp_ln879_reg_1139 <= icmp_ln879_fu_390_p2;
        icmp_ln887_reg_1125 <= icmp_ln887_fu_363_p2;
        icmp_ln899_5_reg_1147 <= icmp_ln899_5_fu_402_p2;
        icmp_ln899_reg_1134 <= icmp_ln899_fu_384_p2;
        sub_ln493_7_reg_1159 <= sub_ln493_7_fu_575_p2;
        sub_ln493_8_reg_1164 <= sub_ln493_8_fu_601_p2;
        sub_ln493_reg_1154 <= sub_ln493_fu_549_p2;
        xor_ln457_reg_1129 <= xor_ln457_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        right_border_buf_0_19_fu_168 <= col_buf_0_val_2_0_fu_782_p3;
        right_border_buf_0_20_fu_172 <= col_buf_0_val_1_0_fu_764_p3;
        right_border_buf_0_s_fu_164 <= col_buf_0_val_0_0_fu_746_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1201_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln188_25_reg_1252 <= select_ln188_25_fu_928_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1169_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_kernel_win_0_va_70_fu_144 <= src_kernel_win_0_va_fu_140;
        src_kernel_win_0_va_fu_140 <= src_kernel_win_0_va_75_reg_1222_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1169_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_kernel_win_0_va_71_fu_148 <= src_kernel_win_0_va_76_reg_1229;
        src_kernel_win_0_va_72_fu_152 <= src_kernel_win_0_va_71_fu_148;
        src_kernel_win_0_va_73_fu_156 <= src_kernel_win_0_va_77_reg_1236;
        src_kernel_win_0_va_74_fu_160 <= src_kernel_win_0_va_73_fu_156;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1201_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_86_reg_1258 <= tmp_86_fu_996_p3;
    end
end

always @ (*) begin
    if ((icmp_ln444_fu_606_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_352_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_352_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1169_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_82 = src_kernel_win_0_va_77_reg_1236;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_82 = src_kernel_win_0_va_73_fu_156;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1169_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_83 = src_kernel_win_0_va_73_fu_156;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_83 = src_kernel_win_0_va_74_fu_160;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce0 = 1'b1;
    end else begin
        k_buf_0_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce1 = 1'b1;
    end else begin
        k_buf_0_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_5_reg_1143 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we0 = 1'b1;
    end else begin
        k_buf_0_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we1 = 1'b1;
    end else begin
        k_buf_0_val_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce0 = 1'b1;
    end else begin
        k_buf_0_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce1 = 1'b1;
    end else begin
        k_buf_0_val_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_reg_1139 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we0 = 1'b1;
    end else begin
        k_buf_0_val_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we1 = 1'b1;
    end else begin
        k_buf_0_val_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_reg_1139 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((or_ln457_reg_1187 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        k_buf_0_val_5_ce0 = 1'b1;
    end else begin
        k_buf_0_val_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_ce1 = 1'b1;
    end else begin
        k_buf_0_val_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_reg_1139 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we0 = 1'b1;
    end else begin
        k_buf_0_val_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we1 = 1'b1;
    end else begin
        k_buf_0_val_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln899_reg_1134 == 1'd0) & (1'd1 == and_ln118_12_reg_1178) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op133_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op127_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln443_fu_352_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln444_fu_606_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((icmp_ln444_fu_606_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ImagLoc_x_fu_637_p2 = ($signed(32'd4294967295) + $signed(t_V_10_reg_279));

assign add_ln118_4_fu_580_p2 = (2'd1 + trunc_ln506_4_fu_407_p1);

assign add_ln118_fu_528_p2 = ($signed(2'd3) + $signed(trunc_ln506_4_fu_407_p1));

assign add_ln443_4_fu_316_p2 = ($signed(12'd2) + $signed(sext_ln113_fu_294_p1));

assign add_ln443_fu_306_p2 = ($signed(13'd2) + $signed(sext_ln1174_fu_302_p1));

assign add_ln451_4_fu_643_p2 = ($signed(13'd8191) + $signed(trunc_ln451_fu_633_p1));

assign add_ln458_4_fu_346_p2 = ($signed(2'd3) + $signed(trunc_ln458_fu_326_p1));

assign add_ln458_fu_330_p2 = ($signed(13'd8191) + $signed(sext_ln1174_fu_302_p1));

assign add_ln506_7_fu_450_p2 = ($signed(32'd4294967294) + $signed(t_V_reg_268));

assign add_ln506_8_fu_489_p2 = ($signed(32'd4294967293) + $signed(t_V_reg_268));

assign add_ln506_fu_411_p2 = ($signed(32'd4294967295) + $signed(t_V_reg_268));

assign add_ln507_fu_340_p2 = ($signed(2'd3) + $signed(trunc_ln506_fu_336_p1));

assign and_ln118_10_fu_475_p2 = (xor_ln118_14_fu_464_p2 & icmp_ln118_10_fu_470_p2);

assign and_ln118_11_fu_514_p2 = (xor_ln118_15_fu_503_p2 & icmp_ln118_11_fu_509_p2);

assign and_ln118_12_fu_668_p2 = (xor_ln118_16_fu_657_p2 & icmp_ln118_12_fu_663_p2);

assign and_ln118_fu_436_p2 = (xor_ln118_13_fu_425_p2 & icmp_ln118_fu_431_p2);

assign and_ln512_fu_711_p2 = (icmp_ln899_reg_1134 & icmp_ln891_fu_627_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op133_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op127_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op133_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op127_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op133_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op127_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op133_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op127_read_state4 == 1'b1)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((1'd1 == and_ln512_reg_1201_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_operation_122 = (1'b1 == 1'b1);

assign ap_enable_operation_124 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_126 = (or_ln457_reg_1187 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_128 = (ap_predicate_op128_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_129 = (ap_predicate_op129_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_131 = (ap_predicate_op131_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_134 = (ap_predicate_op134_store_state4 == 1'b1);
end

assign ap_enable_operation_138 = (1'b1 == 1'b1);

assign ap_enable_operation_141 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_144 = (or_ln457_reg_1187_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_147 = (ap_predicate_op147_store_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_148 = (ap_predicate_op148_store_state5 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op127_read_state4 = ((icmp_ln899_reg_1134 == 1'd0) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op128_store_state4 = ((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_reg_1139 == 1'd1) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op129_store_state4 = ((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_reg_1139 == 1'd1) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op131_store_state4 = ((icmp_ln899_reg_1134 == 1'd0) & (icmp_ln879_5_reg_1143 == 1'd1) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op133_read_state4 = ((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op134_store_state4 = ((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178));
end

always @ (*) begin
    ap_predicate_op147_store_state5 = ((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178_pp0_iter1_reg));
end

always @ (*) begin
    ap_predicate_op148_store_state5 = ((icmp_ln887_reg_1125 == 1'd1) & (icmp_ln899_reg_1134 == 1'd1) & (1'd1 == and_ln118_12_reg_1178_pp0_iter1_reg));
end

assign col_buf_0_val_0_0_fu_746_p3 = ((or_ln457_reg_1187_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_3_q0 : tmp_33_fu_735_p5);

assign col_buf_0_val_1_0_fu_764_p3 = ((or_ln457_reg_1187_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_4_q0 : tmp_34_fu_753_p5);

assign col_buf_0_val_2_0_fu_782_p3 = ((or_ln457_reg_1187_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_5_q0 : tmp_35_fu_771_p5);

assign cols_fu_298_p0 = p_src_cols_V_dout;

assign cols_fu_298_p1 = cols_fu_298_p0;

assign i_V_fu_357_p2 = (t_V_reg_268 + 32'd1);

assign icmp_ln118_10_fu_470_p2 = (($signed(add_ln506_7_fu_450_p2) < $signed(stop_row_reg_1072)) ? 1'b1 : 1'b0);

assign icmp_ln118_11_fu_509_p2 = (($signed(add_ln506_8_fu_489_p2) < $signed(stop_row_reg_1072)) ? 1'b1 : 1'b0);

assign icmp_ln118_12_fu_663_p2 = (($signed(ImagLoc_x_fu_637_p2) < $signed(cols_reg_1081)) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_431_p2 = (($signed(add_ln506_fu_411_p2) < $signed(stop_row_reg_1072)) ? 1'b1 : 1'b0);

assign icmp_ln188_22_fu_878_p2 = ((src_kernel_win_0_va_77_fu_851_p3 > select_ln188_fu_870_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_23_fu_895_p2 = ((src_kernel_win_0_va_72_fu_152 > select_ln188_22_fu_890_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_24_fu_909_p2 = ((src_kernel_win_0_va_71_fu_148 > select_ln188_23_fu_901_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_25_fu_923_p2 = ((src_kernel_win_0_va_76_reg_1229 > select_ln188_24_fu_915_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_26_fu_965_p2 = ((src_kernel_win_0_va_70_fu_144 > select_ln188_25_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln188_27_fu_977_p2 = ((src_kernel_win_0_va_fu_140 > select_ln188_26_fu_970_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_28_fu_991_p2 = ((src_kernel_win_0_va_75_reg_1222_pp0_iter3_reg > select_ln188_27_fu_983_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_864_p2 = ((ap_sig_allocacmp_src_kernel_win_0_va_82 > ap_sig_allocacmp_src_kernel_win_0_va_83) ? 1'b1 : 1'b0);

assign icmp_ln443_fu_352_p2 = ((t_V_reg_268 == sext_ln443_4_reg_1091) ? 1'b1 : 1'b0);

assign icmp_ln444_fu_606_p2 = ((t_V_10_reg_279 == sext_ln443_reg_1086) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_396_p2 = ((t_V_reg_268 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_390_p2 = ((t_V_reg_268 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_363_p2 = ((t_V_reg_268 < stop_row_reg_1072) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_627_p2 = ((tmp_81_fu_617_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_5_fu_402_p2 = ((t_V_reg_268 > stop_row_reg_1072) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_384_p2 = ((tmp_fu_374_p4 != 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_611_p2 = (t_V_10_reg_279 + 32'd1);

assign k_buf_0_val_3_address0 = zext_ln835_fu_719_p1;

assign k_buf_0_val_3_address1 = zext_ln835_fu_719_p1;

assign k_buf_0_val_4_address0 = zext_ln835_fu_719_p1;

assign k_buf_0_val_4_address1 = k_buf_0_val_4_addr_reg_1210;

assign k_buf_0_val_5_address0 = zext_ln835_fu_719_p1;

assign k_buf_0_val_5_address1 = k_buf_0_val_5_addr_reg_1216;

assign or_ln457_fu_701_p2 = (xor_ln457_reg_1129 | icmp_ln118_12_fu_663_p2);

assign p_dst_data_stream_V_din = tmp_86_reg_1258;

assign select_ln118_16_fu_541_p3 = ((and_ln118_fu_436_p2[0:0] === 1'b1) ? add_ln118_fu_528_p2 : select_ln118_fu_534_p3);

assign select_ln118_17_fu_560_p3 = ((tmp_78_fu_481_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1101);

assign select_ln118_18_fu_567_p3 = ((and_ln118_10_fu_475_p2[0:0] === 1'b1) ? xor_ln118_fu_554_p2 : select_ln118_17_fu_560_p3);

assign select_ln118_19_fu_586_p3 = ((tmp_80_fu_520_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1101);

assign select_ln118_20_fu_593_p3 = ((and_ln118_11_fu_514_p2[0:0] === 1'b1) ? add_ln118_4_fu_580_p2 : select_ln118_19_fu_586_p3);

assign select_ln118_fu_534_p3 = ((tmp_76_fu_442_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1101);

assign select_ln121_fu_682_p3 = ((tmp_83_fu_674_p3[0:0] === 1'b1) ? 13'd0 : add_ln458_reg_1096);

assign select_ln188_22_fu_890_p3 = ((icmp_ln188_22_reg_1247[0:0] === 1'b1) ? src_kernel_win_0_va_77_reg_1236 : select_ln188_reg_1242);

assign select_ln188_23_fu_901_p3 = ((icmp_ln188_23_fu_895_p2[0:0] === 1'b1) ? src_kernel_win_0_va_72_fu_152 : select_ln188_22_fu_890_p3);

assign select_ln188_24_fu_915_p3 = ((icmp_ln188_24_fu_909_p2[0:0] === 1'b1) ? src_kernel_win_0_va_71_fu_148 : select_ln188_23_fu_901_p3);

assign select_ln188_25_fu_928_p3 = ((icmp_ln188_25_fu_923_p2[0:0] === 1'b1) ? src_kernel_win_0_va_76_reg_1229 : select_ln188_24_fu_915_p3);

assign select_ln188_26_fu_970_p3 = ((icmp_ln188_26_fu_965_p2[0:0] === 1'b1) ? src_kernel_win_0_va_70_fu_144 : select_ln188_25_reg_1252);

assign select_ln188_27_fu_983_p3 = ((icmp_ln188_27_fu_977_p2[0:0] === 1'b1) ? src_kernel_win_0_va_fu_140 : select_ln188_26_fu_970_p3);

assign select_ln188_fu_870_p3 = ((icmp_ln188_fu_864_p2[0:0] === 1'b1) ? ap_sig_allocacmp_src_kernel_win_0_va_82 : ap_sig_allocacmp_src_kernel_win_0_va_83);

assign sext_ln113_fu_294_p0 = p_src_rows_V_dout;

assign sext_ln113_fu_294_p1 = sext_ln113_fu_294_p0;

assign sext_ln1174_fu_302_p0 = p_src_cols_V_dout;

assign sext_ln1174_fu_302_p1 = sext_ln1174_fu_302_p0;

assign sext_ln118_fu_716_p1 = x_reg_1182;

assign sext_ln443_4_fu_322_p1 = $signed(add_ln443_4_fu_316_p2);

assign sext_ln443_fu_312_p1 = $signed(add_ln443_fu_306_p2);

assign src_kernel_win_0_va_75_fu_815_p3 = ((icmp_ln899_5_reg_1147[0:0] === 1'b1) ? tmp_s_fu_804_p5 : col_buf_0_val_0_0_fu_746_p3);

assign src_kernel_win_0_va_76_fu_833_p3 = ((icmp_ln899_5_reg_1147[0:0] === 1'b1) ? tmp_36_fu_822_p5 : col_buf_0_val_1_0_fu_764_p3);

assign src_kernel_win_0_va_77_fu_851_p3 = ((icmp_ln899_5_reg_1147[0:0] === 1'b1) ? tmp_37_fu_840_p5 : col_buf_0_val_2_0_fu_782_p3);

assign stop_row_fu_290_p0 = p_src_rows_V_dout;

assign stop_row_fu_290_p1 = stop_row_fu_290_p0;

assign sub_ln493_7_fu_575_p2 = (add_ln507_reg_1101 - select_ln118_18_fu_567_p3);

assign sub_ln493_8_fu_601_p2 = (add_ln507_reg_1101 - select_ln118_20_fu_593_p3);

assign sub_ln493_9_fu_706_p2 = (add_ln458_4_reg_1111 - trunc_ln458_4_fu_697_p1);

assign sub_ln493_fu_549_p2 = (add_ln507_reg_1101 - select_ln118_16_fu_541_p3);

assign tmp_75_fu_417_p3 = add_ln506_fu_411_p2[32'd31];

assign tmp_76_fu_442_p3 = add_ln506_fu_411_p2[32'd31];

assign tmp_77_fu_456_p3 = add_ln506_7_fu_450_p2[32'd31];

assign tmp_78_fu_481_p3 = add_ln506_7_fu_450_p2[32'd31];

assign tmp_79_fu_495_p3 = add_ln506_8_fu_489_p2[32'd31];

assign tmp_80_fu_520_p3 = add_ln506_8_fu_489_p2[32'd31];

assign tmp_81_fu_617_p4 = {{t_V_10_reg_279[31:1]}};

assign tmp_82_fu_649_p3 = ImagLoc_x_fu_637_p2[32'd31];

assign tmp_83_fu_674_p3 = ImagLoc_x_fu_637_p2[32'd31];

assign tmp_86_fu_996_p3 = ((icmp_ln188_28_fu_991_p2[0:0] === 1'b1) ? src_kernel_win_0_va_75_reg_1222_pp0_iter3_reg : select_ln188_27_fu_983_p3);

assign tmp_fu_374_p4 = {{t_V_reg_268[31:1]}};

assign trunc_ln451_fu_633_p1 = t_V_10_reg_279[12:0];

assign trunc_ln458_4_fu_697_p1 = x_fu_689_p3[1:0];

assign trunc_ln458_fu_326_p0 = p_src_cols_V_dout;

assign trunc_ln458_fu_326_p1 = trunc_ln458_fu_326_p0[1:0];

assign trunc_ln506_4_fu_407_p1 = t_V_reg_268[1:0];

assign trunc_ln506_fu_336_p0 = p_src_rows_V_dout;

assign trunc_ln506_fu_336_p1 = trunc_ln506_fu_336_p0[1:0];

assign x_fu_689_p3 = ((and_ln118_12_fu_668_p2[0:0] === 1'b1) ? add_ln451_4_fu_643_p2 : select_ln121_fu_682_p3);

assign xor_ln118_13_fu_425_p2 = (tmp_75_fu_417_p3 ^ 1'd1);

assign xor_ln118_14_fu_464_p2 = (tmp_77_fu_456_p3 ^ 1'd1);

assign xor_ln118_15_fu_503_p2 = (tmp_79_fu_495_p3 ^ 1'd1);

assign xor_ln118_16_fu_657_p2 = (tmp_82_fu_649_p3 ^ 1'd1);

assign xor_ln118_fu_554_p2 = (trunc_ln506_4_fu_407_p1 ^ 2'd2);

assign xor_ln457_fu_368_p2 = (icmp_ln887_fu_363_p2 ^ 1'd1);

assign zext_ln835_fu_719_p1 = $unsigned(sext_ln118_fu_716_p1);

endmodule //Dilate203
