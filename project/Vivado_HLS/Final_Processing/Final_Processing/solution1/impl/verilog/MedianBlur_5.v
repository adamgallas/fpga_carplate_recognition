// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MedianBlur_5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [10:0] line_buffer_1_address0;
reg    line_buffer_1_ce0;
wire   [7:0] line_buffer_1_q0;
reg    line_buffer_1_ce1;
reg    line_buffer_1_we1;
wire   [10:0] line_buffer_2_address0;
reg    line_buffer_2_ce0;
wire   [7:0] line_buffer_2_q0;
reg    line_buffer_2_ce1;
reg    line_buffer_2_we1;
wire   [10:0] line_buffer_3_address0;
reg    line_buffer_3_ce0;
wire   [7:0] line_buffer_3_q0;
reg    line_buffer_3_ce1;
reg    line_buffer_3_we1;
wire   [10:0] line_buffer_4_address0;
reg    line_buffer_4_ce0;
wire   [7:0] line_buffer_4_q0;
reg    line_buffer_4_ce1;
reg    line_buffer_4_we1;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln149_reg_464;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] icmp_ln149_reg_464_pp0_iter10_reg;
reg   [19:0] indvar_flatten_reg_221;
reg   [9:0] r_0_reg_232;
reg   [10:0] c_0_reg_243;
wire   [0:0] icmp_ln149_fu_259_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln149_reg_464_pp0_iter1_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter2_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter3_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter4_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter5_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter6_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter7_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter8_reg;
reg   [0:0] icmp_ln149_reg_464_pp0_iter9_reg;
wire   [19:0] add_ln149_fu_265_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln151_fu_271_p2;
reg   [0:0] icmp_ln151_reg_473;
reg   [0:0] icmp_ln151_reg_473_pp0_iter1_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter2_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter3_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter4_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter5_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter6_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter7_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter8_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter9_reg;
reg   [0:0] icmp_ln151_reg_473_pp0_iter10_reg;
wire   [0:0] icmp_ln172_fu_301_p2;
reg   [0:0] icmp_ln172_reg_478;
reg   [0:0] icmp_ln172_reg_478_pp0_iter1_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter2_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter3_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter4_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter5_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter6_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter7_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter8_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter9_reg;
reg   [0:0] icmp_ln172_reg_478_pp0_iter10_reg;
wire   [0:0] icmp_ln172_1_fu_317_p2;
reg   [0:0] icmp_ln172_1_reg_483;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter1_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter2_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter3_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter4_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter5_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter6_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter7_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter8_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter9_reg;
reg   [0:0] icmp_ln172_1_reg_483_pp0_iter10_reg;
wire   [9:0] select_ln149_fu_323_p3;
reg   [10:0] line_buffer_1_addr_reg_493;
reg   [10:0] line_buffer_2_addr_reg_499;
reg   [10:0] line_buffer_3_addr_reg_505;
reg   [10:0] line_buffer_4_addr_reg_511;
wire   [0:0] icmp_ln172_2_fu_349_p2;
reg   [0:0] icmp_ln172_2_reg_517;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter1_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter2_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter3_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter4_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter5_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter6_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter7_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter8_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter9_reg;
reg   [0:0] icmp_ln172_2_reg_517_pp0_iter10_reg;
wire   [10:0] c_fu_355_p2;
reg   [7:0] line_buffer_1_load_reg_527;
reg   [7:0] line_buffer_2_load_reg_532;
reg   [7:0] line_buffer_3_load_reg_537;
reg   [7:0] line_buffer_4_load_reg_542;
reg   [7:0] tmp_19_reg_547;
wire   [199:0] window_fu_414_p11;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
wire   [199:0] grp_median_5_fu_254_window_read;
wire   [7:0] grp_median_5_fu_254_ap_return;
reg    grp_median_5_fu_254_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call38;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call38;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call38;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call38;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call38;
wire    ap_block_state7_pp0_stage0_iter5_ignore_call38;
wire    ap_block_state8_pp0_stage0_iter6_ignore_call38;
wire    ap_block_state9_pp0_stage0_iter7_ignore_call38;
wire    ap_block_state10_pp0_stage0_iter8_ignore_call38;
wire    ap_block_state11_pp0_stage0_iter9_ignore_call38;
wire    ap_block_state12_pp0_stage0_iter10_ignore_call38;
reg    ap_block_state13_pp0_stage0_iter11_ignore_call38;
reg    ap_block_pp0_stage0_11001_ignoreCallOp64;
wire   [63:0] zext_ln157_fu_331_p1;
reg   [199:0] window_1_fu_132;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] add_ln149_1_fu_285_p2;
wire   [7:0] tmp_fu_291_p4;
wire   [7:0] tmp_18_fu_307_p4;
wire   [10:0] select_ln172_fu_277_p3;
wire   [8:0] tmp_20_fu_339_p4;
wire   [31:0] tmp_27_fu_364_p4;
wire   [31:0] tmp_28_fu_374_p4;
wire   [31:0] tmp_29_fu_384_p4;
wire   [31:0] tmp_30_fu_394_p4;
wire   [31:0] tmp_31_fu_404_p4;
wire   [0:0] select_ln172_1_fu_439_p3;
wire   [0:0] and_ln172_fu_444_p2;
wire    ap_CS_fsm_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

MedianBlur_5_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_address0),
    .ce0(line_buffer_1_ce0),
    .q0(line_buffer_1_q0),
    .address1(line_buffer_1_addr_reg_493),
    .ce1(line_buffer_1_ce1),
    .we1(line_buffer_1_we1),
    .d1(line_buffer_2_q0)
);

MedianBlur_5_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_2_address0),
    .ce0(line_buffer_2_ce0),
    .q0(line_buffer_2_q0),
    .address1(line_buffer_2_addr_reg_499),
    .ce1(line_buffer_2_ce1),
    .we1(line_buffer_2_we1),
    .d1(line_buffer_3_q0)
);

MedianBlur_5_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_3_address0),
    .ce0(line_buffer_3_ce0),
    .q0(line_buffer_3_q0),
    .address1(line_buffer_3_addr_reg_505),
    .ce1(line_buffer_3_ce1),
    .we1(line_buffer_3_we1),
    .d1(line_buffer_4_q0)
);

MedianBlur_5_linedEe #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_4_address0),
    .ce0(line_buffer_4_ce0),
    .q0(line_buffer_4_q0),
    .address1(line_buffer_4_addr_reg_511),
    .ce1(line_buffer_4_ce1),
    .we1(line_buffer_4_we1),
    .d1(src_data_stream_V_dout)
);

median_5 grp_median_5_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .window_read(grp_median_5_fu_254_window_read),
    .ap_return(grp_median_5_fu_254_ap_return),
    .ap_ce(grp_median_5_fu_254_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_fu_259_p2 == 1'd0))) begin
        c_0_reg_243 <= c_fu_355_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_243 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_fu_259_p2 == 1'd0))) begin
        indvar_flatten_reg_221 <= add_ln149_fu_265_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_221 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_fu_259_p2 == 1'd0))) begin
        r_0_reg_232 <= select_ln149_fu_323_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_232 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln149_reg_464 <= icmp_ln149_fu_259_p2;
        icmp_ln149_reg_464_pp0_iter1_reg <= icmp_ln149_reg_464;
        icmp_ln151_reg_473_pp0_iter1_reg <= icmp_ln151_reg_473;
        icmp_ln172_1_reg_483_pp0_iter1_reg <= icmp_ln172_1_reg_483;
        icmp_ln172_2_reg_517_pp0_iter1_reg <= icmp_ln172_2_reg_517;
        icmp_ln172_reg_478_pp0_iter1_reg <= icmp_ln172_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln149_reg_464_pp0_iter10_reg <= icmp_ln149_reg_464_pp0_iter9_reg;
        icmp_ln149_reg_464_pp0_iter2_reg <= icmp_ln149_reg_464_pp0_iter1_reg;
        icmp_ln149_reg_464_pp0_iter3_reg <= icmp_ln149_reg_464_pp0_iter2_reg;
        icmp_ln149_reg_464_pp0_iter4_reg <= icmp_ln149_reg_464_pp0_iter3_reg;
        icmp_ln149_reg_464_pp0_iter5_reg <= icmp_ln149_reg_464_pp0_iter4_reg;
        icmp_ln149_reg_464_pp0_iter6_reg <= icmp_ln149_reg_464_pp0_iter5_reg;
        icmp_ln149_reg_464_pp0_iter7_reg <= icmp_ln149_reg_464_pp0_iter6_reg;
        icmp_ln149_reg_464_pp0_iter8_reg <= icmp_ln149_reg_464_pp0_iter7_reg;
        icmp_ln149_reg_464_pp0_iter9_reg <= icmp_ln149_reg_464_pp0_iter8_reg;
        icmp_ln151_reg_473_pp0_iter10_reg <= icmp_ln151_reg_473_pp0_iter9_reg;
        icmp_ln151_reg_473_pp0_iter2_reg <= icmp_ln151_reg_473_pp0_iter1_reg;
        icmp_ln151_reg_473_pp0_iter3_reg <= icmp_ln151_reg_473_pp0_iter2_reg;
        icmp_ln151_reg_473_pp0_iter4_reg <= icmp_ln151_reg_473_pp0_iter3_reg;
        icmp_ln151_reg_473_pp0_iter5_reg <= icmp_ln151_reg_473_pp0_iter4_reg;
        icmp_ln151_reg_473_pp0_iter6_reg <= icmp_ln151_reg_473_pp0_iter5_reg;
        icmp_ln151_reg_473_pp0_iter7_reg <= icmp_ln151_reg_473_pp0_iter6_reg;
        icmp_ln151_reg_473_pp0_iter8_reg <= icmp_ln151_reg_473_pp0_iter7_reg;
        icmp_ln151_reg_473_pp0_iter9_reg <= icmp_ln151_reg_473_pp0_iter8_reg;
        icmp_ln172_1_reg_483_pp0_iter10_reg <= icmp_ln172_1_reg_483_pp0_iter9_reg;
        icmp_ln172_1_reg_483_pp0_iter2_reg <= icmp_ln172_1_reg_483_pp0_iter1_reg;
        icmp_ln172_1_reg_483_pp0_iter3_reg <= icmp_ln172_1_reg_483_pp0_iter2_reg;
        icmp_ln172_1_reg_483_pp0_iter4_reg <= icmp_ln172_1_reg_483_pp0_iter3_reg;
        icmp_ln172_1_reg_483_pp0_iter5_reg <= icmp_ln172_1_reg_483_pp0_iter4_reg;
        icmp_ln172_1_reg_483_pp0_iter6_reg <= icmp_ln172_1_reg_483_pp0_iter5_reg;
        icmp_ln172_1_reg_483_pp0_iter7_reg <= icmp_ln172_1_reg_483_pp0_iter6_reg;
        icmp_ln172_1_reg_483_pp0_iter8_reg <= icmp_ln172_1_reg_483_pp0_iter7_reg;
        icmp_ln172_1_reg_483_pp0_iter9_reg <= icmp_ln172_1_reg_483_pp0_iter8_reg;
        icmp_ln172_2_reg_517_pp0_iter10_reg <= icmp_ln172_2_reg_517_pp0_iter9_reg;
        icmp_ln172_2_reg_517_pp0_iter2_reg <= icmp_ln172_2_reg_517_pp0_iter1_reg;
        icmp_ln172_2_reg_517_pp0_iter3_reg <= icmp_ln172_2_reg_517_pp0_iter2_reg;
        icmp_ln172_2_reg_517_pp0_iter4_reg <= icmp_ln172_2_reg_517_pp0_iter3_reg;
        icmp_ln172_2_reg_517_pp0_iter5_reg <= icmp_ln172_2_reg_517_pp0_iter4_reg;
        icmp_ln172_2_reg_517_pp0_iter6_reg <= icmp_ln172_2_reg_517_pp0_iter5_reg;
        icmp_ln172_2_reg_517_pp0_iter7_reg <= icmp_ln172_2_reg_517_pp0_iter6_reg;
        icmp_ln172_2_reg_517_pp0_iter8_reg <= icmp_ln172_2_reg_517_pp0_iter7_reg;
        icmp_ln172_2_reg_517_pp0_iter9_reg <= icmp_ln172_2_reg_517_pp0_iter8_reg;
        icmp_ln172_reg_478_pp0_iter10_reg <= icmp_ln172_reg_478_pp0_iter9_reg;
        icmp_ln172_reg_478_pp0_iter2_reg <= icmp_ln172_reg_478_pp0_iter1_reg;
        icmp_ln172_reg_478_pp0_iter3_reg <= icmp_ln172_reg_478_pp0_iter2_reg;
        icmp_ln172_reg_478_pp0_iter4_reg <= icmp_ln172_reg_478_pp0_iter3_reg;
        icmp_ln172_reg_478_pp0_iter5_reg <= icmp_ln172_reg_478_pp0_iter4_reg;
        icmp_ln172_reg_478_pp0_iter6_reg <= icmp_ln172_reg_478_pp0_iter5_reg;
        icmp_ln172_reg_478_pp0_iter7_reg <= icmp_ln172_reg_478_pp0_iter6_reg;
        icmp_ln172_reg_478_pp0_iter8_reg <= icmp_ln172_reg_478_pp0_iter7_reg;
        icmp_ln172_reg_478_pp0_iter9_reg <= icmp_ln172_reg_478_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_fu_259_p2 == 1'd0))) begin
        icmp_ln151_reg_473 <= icmp_ln151_fu_271_p2;
        icmp_ln172_1_reg_483 <= icmp_ln172_1_fu_317_p2;
        icmp_ln172_2_reg_517 <= icmp_ln172_2_fu_349_p2;
        icmp_ln172_reg_478 <= icmp_ln172_fu_301_p2;
        line_buffer_1_addr_reg_493 <= zext_ln157_fu_331_p1;
        line_buffer_2_addr_reg_499 <= zext_ln157_fu_331_p1;
        line_buffer_3_addr_reg_505 <= zext_ln157_fu_331_p1;
        line_buffer_4_addr_reg_511 <= zext_ln157_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        line_buffer_1_load_reg_527 <= line_buffer_1_q0;
        line_buffer_2_load_reg_532 <= line_buffer_2_q0;
        line_buffer_3_load_reg_537 <= line_buffer_3_q0;
        line_buffer_4_load_reg_542 <= line_buffer_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        tmp_19_reg_547 <= src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464_pp0_iter1_reg == 1'd0))) begin
        window_1_fu_132 <= window_fu_414_p11;
    end
end

always @ (*) begin
    if ((icmp_ln149_fu_259_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp64) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_median_5_fu_254_ap_ce = 1'b1;
    end else begin
        grp_median_5_fu_254_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_1_ce1 = 1'b1;
    end else begin
        line_buffer_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        line_buffer_1_we1 = 1'b1;
    end else begin
        line_buffer_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_2_ce0 = 1'b1;
    end else begin
        line_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_2_ce1 = 1'b1;
    end else begin
        line_buffer_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        line_buffer_2_we1 = 1'b1;
    end else begin
        line_buffer_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_3_ce0 = 1'b1;
    end else begin
        line_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_3_ce1 = 1'b1;
    end else begin
        line_buffer_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        line_buffer_3_we1 = 1'b1;
    end else begin
        line_buffer_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_4_ce0 = 1'b1;
    end else begin
        line_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_4_ce1 = 1'b1;
    end else begin
        line_buffer_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        line_buffer_4_we1 = 1'b1;
    end else begin
        line_buffer_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln149_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln149_reg_464 == 1'd0))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln149_fu_259_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln149_fu_259_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln149_1_fu_285_p2 = (r_0_reg_232 + 10'd1);

assign add_ln149_fu_265_p2 = (indvar_flatten_reg_221 + 20'd1);

assign and_ln172_fu_444_p2 = (select_ln172_1_fu_439_p3 & icmp_ln172_2_reg_517_pp0_iter10_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln149_reg_464 == 1'd0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln149_reg_464 == 1'd0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp64 = (((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln149_reg_464 == 1'd0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln149_reg_464 == 1'd0)) | ((dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10_ignore_call38 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter11 = ((dst_data_stream_V_full_n == 1'b0) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter11_ignore_call38 = ((dst_data_stream_V_full_n == 1'b0) & (icmp_ln149_reg_464_pp0_iter10_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call38 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((src_data_stream_V_empty_n == 1'b0) & (icmp_ln149_reg_464 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call38 = ((src_data_stream_V_empty_n == 1'b0) & (icmp_ln149_reg_464 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7_ignore_call38 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign c_fu_355_p2 = (select_ln172_fu_277_p3 + 11'd1);

assign dst_data_stream_V_din = ((and_ln172_fu_444_p2[0:0] === 1'b1) ? grp_median_5_fu_254_ap_return : 8'd0);

assign grp_median_5_fu_254_window_read = {{{{{{{{{{tmp_19_reg_547}, {tmp_27_fu_364_p4}}, {line_buffer_4_load_reg_542}}, {tmp_28_fu_374_p4}}, {line_buffer_3_load_reg_537}}, {tmp_29_fu_384_p4}}, {line_buffer_2_load_reg_532}}, {tmp_30_fu_394_p4}}, {line_buffer_1_load_reg_527}}, {tmp_31_fu_404_p4}};

assign icmp_ln149_fu_259_p2 = ((indvar_flatten_reg_221 == 20'd921600) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_271_p2 = ((c_0_reg_243 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln172_1_fu_317_p2 = ((tmp_18_fu_307_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln172_2_fu_349_p2 = ((tmp_20_fu_339_p4 != 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln172_fu_301_p2 = ((tmp_fu_291_p4 != 8'd0) ? 1'b1 : 1'b0);

assign line_buffer_1_address0 = zext_ln157_fu_331_p1;

assign line_buffer_2_address0 = zext_ln157_fu_331_p1;

assign line_buffer_3_address0 = zext_ln157_fu_331_p1;

assign line_buffer_4_address0 = zext_ln157_fu_331_p1;

assign select_ln149_fu_323_p3 = ((icmp_ln151_fu_271_p2[0:0] === 1'b1) ? add_ln149_1_fu_285_p2 : r_0_reg_232);

assign select_ln172_1_fu_439_p3 = ((icmp_ln151_reg_473_pp0_iter10_reg[0:0] === 1'b1) ? icmp_ln172_reg_478_pp0_iter10_reg : icmp_ln172_1_reg_483_pp0_iter10_reg);

assign select_ln172_fu_277_p3 = ((icmp_ln151_fu_271_p2[0:0] === 1'b1) ? 11'd0 : c_0_reg_243);

assign start_out = real_start;

assign tmp_18_fu_307_p4 = {{r_0_reg_232[9:2]}};

assign tmp_20_fu_339_p4 = {{select_ln172_fu_277_p3[10:2]}};

assign tmp_27_fu_364_p4 = {{window_1_fu_132[199:168]}};

assign tmp_28_fu_374_p4 = {{window_1_fu_132[159:128]}};

assign tmp_29_fu_384_p4 = {{window_1_fu_132[119:88]}};

assign tmp_30_fu_394_p4 = {{window_1_fu_132[79:48]}};

assign tmp_31_fu_404_p4 = {{window_1_fu_132[39:8]}};

assign tmp_fu_291_p4 = {{add_ln149_1_fu_285_p2[9:2]}};

assign window_fu_414_p11 = {{{{{{{{{{tmp_19_reg_547}, {tmp_27_fu_364_p4}}, {line_buffer_4_load_reg_542}}, {tmp_28_fu_374_p4}}, {line_buffer_3_load_reg_537}}, {tmp_29_fu_384_p4}}, {line_buffer_2_load_reg_532}}, {tmp_30_fu_394_p4}}, {line_buffer_1_load_reg_527}}, {tmp_31_fu_404_p4}};

assign zext_ln157_fu_331_p1 = select_ln172_fu_277_p3;

endmodule //MedianBlur_5
