-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Erode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of Erode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D2 : STD_LOGIC_VECTOR (9 downto 0) := "1011010010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_502 : STD_LOGIC_VECTOR (10 downto 0) := "10100000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_500 : STD_LOGIC_VECTOR (11 downto 0) := "010100000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_4FF : STD_LOGIC_VECTOR (11 downto 0) := "010011111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln118_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal and_ln512_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln512_reg_867_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_5_reg_247 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln443_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_264_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_781 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln457_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln899_1_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln493_reg_814 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln493_fu_326_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln493_reg_819 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln444_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op91_read_state4 : BOOLEAN;
    signal ap_predicate_op99_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln444_reg_824_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln444_reg_824_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_342_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln118_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln458_fu_420_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln458_reg_837 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln457_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln457_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_buf_0_val_3_addr_reg_849 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_addr_reg_855 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_addr_reg_861 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln512_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln512_reg_867_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln512_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_buf_0_val_0_0_fu_467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_0_0_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_0_0_reg_871_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_8_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_8_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_9_fu_556_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_9_reg_885 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln162_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln162_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_1_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_1_reg_896 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_4_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln162_4_reg_901 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal k_buf_0_val_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce0 : STD_LOGIC;
    signal k_buf_0_val_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_3_ce1 : STD_LOGIC;
    signal k_buf_0_val_3_we1 : STD_LOGIC;
    signal k_buf_0_val_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce0 : STD_LOGIC;
    signal k_buf_0_val_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_4_ce1 : STD_LOGIC;
    signal k_buf_0_val_4_we1 : STD_LOGIC;
    signal k_buf_0_val_4_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce0 : STD_LOGIC;
    signal k_buf_0_val_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_buf_0_val_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_buf_0_val_5_ce1 : STD_LOGIC;
    signal k_buf_0_val_5_we1 : STD_LOGIC;
    signal k_buf_0_val_5_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_236 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln835_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_kernel_win_0_va_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_1_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_2_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_3_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_4_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_src_kernel_win_0_va_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_5_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_src_kernel_win_0_va_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_kernel_win_0_va_6_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_s_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_2_0_fu_505_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal right_border_buf_0_1_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_buf_0_val_1_0_fu_486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_282_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln506_fu_316_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_348_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln444_fu_332_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ImagLoc_x_fu_364_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln118_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln118_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_396_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln121_fu_404_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_fu_412_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln891_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln493_1_fu_450_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_455_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_474_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_493_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_527_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_545_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_1_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_2_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_2_fu_606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_3_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_3_fu_620_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_4_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_5_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_5_fu_675_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_6_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_6_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln162_7_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_65 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_81 : BOOLEAN;
    signal ap_enable_state4_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op95_store_state4 : BOOLEAN;
    signal ap_enable_operation_95 : BOOLEAN;
    signal ap_predicate_op100_store_state4 : BOOLEAN;
    signal ap_enable_operation_100 : BOOLEAN;
    signal ap_enable_operation_67 : BOOLEAN;
    signal ap_enable_operation_85 : BOOLEAN;
    signal ap_predicate_op93_store_state4 : BOOLEAN;
    signal ap_enable_operation_93 : BOOLEAN;
    signal ap_predicate_op98_store_state4 : BOOLEAN;
    signal ap_enable_operation_98 : BOOLEAN;
    signal ap_enable_operation_69 : BOOLEAN;
    signal ap_enable_operation_88 : BOOLEAN;
    signal ap_predicate_op92_store_state4 : BOOLEAN;
    signal ap_enable_operation_92 : BOOLEAN;
    signal ap_predicate_op97_store_state4 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_634 : BOOLEAN;

    component top_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Erode_k_buf_0_val_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    k_buf_0_val_3_U : component Erode_k_buf_0_val_3
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_3_address0,
        ce0 => k_buf_0_val_3_ce0,
        q0 => k_buf_0_val_3_q0,
        address1 => k_buf_0_val_3_address1,
        ce1 => k_buf_0_val_3_ce1,
        we1 => k_buf_0_val_3_we1,
        d1 => p_src_data_stream_V_dout);

    k_buf_0_val_4_U : component Erode_k_buf_0_val_3
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_4_address0,
        ce0 => k_buf_0_val_4_ce0,
        q0 => k_buf_0_val_4_q0,
        address1 => k_buf_0_val_4_address1,
        ce1 => k_buf_0_val_4_ce1,
        we1 => k_buf_0_val_4_we1,
        d1 => k_buf_0_val_4_d1);

    k_buf_0_val_5_U : component Erode_k_buf_0_val_3
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_buf_0_val_5_address0,
        ce0 => k_buf_0_val_5_ce0,
        q0 => k_buf_0_val_5_q0,
        address1 => k_buf_0_val_5_address1,
        ce1 => k_buf_0_val_5_ce1,
        we1 => k_buf_0_val_5_we1,
        d1 => k_buf_0_val_5_d1);

    top_mux_32_8_1_1_U63 : component top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => src_kernel_win_0_va_6_fu_146,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_1_fu_450_p2,
        dout => tmp_6_fu_455_p5);

    top_mux_32_8_1_1_U64 : component top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_1_fu_154,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_1_fu_450_p2,
        dout => tmp_7_fu_474_p5);

    top_mux_32_8_1_1_U65 : component top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => right_border_buf_0_s_fu_150,
        din1 => ap_const_lv8_0,
        din2 => ap_const_lv8_0,
        din3 => xor_ln493_1_fu_450_p2,
        dout => tmp_8_fu_493_p5);

    top_mux_32_8_1_1_U66 : component top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_467_p3,
        din1 => col_buf_0_val_1_0_fu_486_p3,
        din2 => col_buf_0_val_2_0_fu_505_p3,
        din3 => xor_ln493_reg_814,
        dout => tmp_9_fu_527_p5);

    top_mux_32_8_1_1_U67 : component top_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => col_buf_0_val_0_0_fu_467_p3,
        din1 => col_buf_0_val_1_0_fu_486_p3,
        din2 => col_buf_0_val_2_0_fu_505_p3,
        din3 => sub_ln493_reg_819,
        dout => tmp_10_fu_545_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln443_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln443_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((icmp_ln443_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_5_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_5_reg_247 <= j_V_fu_342_p2;
            elsif (((icmp_ln443_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_5_reg_247 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_reg_236 <= i_V_reg_781;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_236 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln118_reg_833 <= and_ln118_fu_390_p2;
                and_ln512_reg_867 <= and_ln512_fu_436_p2;
                k_buf_0_val_3_addr_reg_849 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
                k_buf_0_val_4_addr_reg_855 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
                k_buf_0_val_5_addr_reg_861 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
                or_ln457_reg_842 <= or_ln457_fu_424_p2;
                trunc_ln458_reg_837 <= trunc_ln458_fu_420_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln512_reg_867_pp0_iter1_reg <= and_ln512_reg_867;
                col_buf_0_val_0_0_reg_871 <= col_buf_0_val_0_0_fu_467_p3;
                icmp_ln444_reg_824 <= icmp_ln444_fu_336_p2;
                icmp_ln444_reg_824_pp0_iter1_reg <= icmp_ln444_reg_824;
                src_kernel_win_0_va_8_reg_878 <= src_kernel_win_0_va_8_fu_538_p3;
                src_kernel_win_0_va_9_reg_885 <= src_kernel_win_0_va_9_fu_556_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln512_reg_867_pp0_iter2_reg <= and_ln512_reg_867_pp0_iter1_reg;
                and_ln512_reg_867_pp0_iter3_reg <= and_ln512_reg_867_pp0_iter2_reg;
                col_buf_0_val_0_0_reg_871_pp0_iter2_reg <= col_buf_0_val_0_0_reg_871;
                icmp_ln444_reg_824_pp0_iter2_reg <= icmp_ln444_reg_824_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_781 <= i_V_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln512_reg_867) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln162_1_reg_896 <= icmp_ln162_1_fu_583_p2;
                select_ln162_reg_891 <= select_ln162_fu_575_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln879_1_reg_804 <= icmp_ln879_1_fu_304_p2;
                icmp_ln879_reg_800 <= icmp_ln879_fu_298_p2;
                icmp_ln887_reg_786 <= icmp_ln887_fu_270_p2;
                icmp_ln899_1_reg_808 <= icmp_ln899_1_fu_310_p2;
                icmp_ln899_reg_795 <= icmp_ln899_fu_292_p2;
                sub_ln493_reg_819 <= sub_ln493_fu_326_p2;
                xor_ln457_reg_790 <= xor_ln457_fu_276_p2;
                xor_ln493_reg_814 <= xor_ln493_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                right_border_buf_0_1_fu_154 <= col_buf_0_val_1_0_fu_486_p3;
                right_border_buf_0_s_fu_150 <= col_buf_0_val_2_0_fu_505_p3;
                src_kernel_win_0_va_6_fu_146 <= col_buf_0_val_0_0_fu_467_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln162_4_reg_901 <= select_ln162_4_fu_633_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_824_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_1_fu_126 <= src_kernel_win_0_va_fu_122;
                src_kernel_win_0_va_fu_122 <= col_buf_0_val_0_0_reg_871_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln444_reg_824_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                src_kernel_win_0_va_2_fu_130 <= src_kernel_win_0_va_8_reg_878;
                src_kernel_win_0_va_3_fu_134 <= src_kernel_win_0_va_2_fu_130;
                src_kernel_win_0_va_4_fu_138 <= src_kernel_win_0_va_9_reg_885;
                src_kernel_win_0_va_5_fu_142 <= src_kernel_win_0_va_4_fu_138;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_34_reg_907 <= tmp_34_fu_701_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, icmp_ln443_fu_258_p2, ap_CS_fsm_state2, icmp_ln444_fu_336_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln443_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln444_fu_336_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln444_fu_336_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ImagLoc_x_fu_364_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(zext_ln444_fu_332_p1));
    and_ln118_fu_390_p2 <= (xor_ln118_fu_378_p2 and icmp_ln118_fu_384_p2);
    and_ln512_fu_436_p2 <= (icmp_ln899_reg_795 and icmp_ln891_fu_358_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, and_ln512_reg_867_pp0_iter3_reg, ap_predicate_op91_read_state4, ap_predicate_op99_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op99_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op91_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, and_ln512_reg_867_pp0_iter3_reg, ap_predicate_op91_read_state4, ap_predicate_op99_read_state4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op99_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op91_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, and_ln512_reg_867_pp0_iter3_reg, ap_predicate_op91_read_state4, ap_predicate_op99_read_state4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op99_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op91_read_state4 = ap_const_boolean_1)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, ap_predicate_op91_read_state4, ap_predicate_op99_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op99_read_state4 = ap_const_boolean_1)) or ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_predicate_op91_read_state4 = ap_const_boolean_1)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(p_dst_data_stream_V_full_n, and_ln512_reg_867_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (p_dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_634_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln118_reg_833)
    begin
                ap_condition_634 <= ((ap_const_lv1_1 = and_ln118_reg_833) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln444_fu_336_p2)
    begin
        if ((icmp_ln444_fu_336_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln443_fu_258_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln443_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_100_assign_proc : process(ap_predicate_op100_store_state4)
    begin
                ap_enable_operation_100 <= (ap_predicate_op100_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_65_assign_proc : process(icmp_ln444_fu_336_p2)
    begin
                ap_enable_operation_65 <= (icmp_ln444_fu_336_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_67_assign_proc : process(icmp_ln444_fu_336_p2)
    begin
                ap_enable_operation_67 <= (icmp_ln444_fu_336_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_69_assign_proc : process(icmp_ln444_fu_336_p2)
    begin
                ap_enable_operation_69 <= (icmp_ln444_fu_336_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_81 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_85 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_88 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_92_assign_proc : process(ap_predicate_op92_store_state4)
    begin
                ap_enable_operation_92 <= (ap_predicate_op92_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_93_assign_proc : process(ap_predicate_op93_store_state4)
    begin
                ap_enable_operation_93 <= (ap_predicate_op93_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_95_assign_proc : process(ap_predicate_op95_store_state4)
    begin
                ap_enable_operation_95 <= (ap_predicate_op95_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_97_assign_proc : process(ap_predicate_op97_store_state4)
    begin
                ap_enable_operation_97 <= (ap_predicate_op97_store_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_98_assign_proc : process(ap_predicate_op98_store_state4)
    begin
                ap_enable_operation_98 <= (ap_predicate_op98_store_state4 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state3_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state3_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state4_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state4_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op100_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786)
    begin
                ap_predicate_op100_store_state4 <= ((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op91_read_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795)
    begin
                ap_predicate_op91_read_state4 <= ((icmp_ln899_reg_795 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op92_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln879_reg_800)
    begin
                ap_predicate_op92_store_state4 <= ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op93_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln879_reg_800)
    begin
                ap_predicate_op93_store_state4 <= ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op95_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln879_1_reg_804)
    begin
                ap_predicate_op95_store_state4 <= ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_1_reg_804 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op97_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786)
    begin
                ap_predicate_op97_store_state4 <= ((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op98_store_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786)
    begin
                ap_predicate_op98_store_state4 <= ((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_predicate_op99_read_state4_assign_proc : process(and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786)
    begin
                ap_predicate_op99_read_state4 <= ((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833));
    end process;


    ap_ready_assign_proc : process(icmp_ln443_fu_258_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln443_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_src_kernel_win_0_va_14_assign_proc : process(ap_block_pp0_stage0, icmp_ln444_reg_824_pp0_iter1_reg, src_kernel_win_0_va_9_reg_885, ap_enable_reg_pp0_iter2, src_kernel_win_0_va_4_fu_138)
    begin
        if (((icmp_ln444_reg_824_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_src_kernel_win_0_va_14 <= src_kernel_win_0_va_9_reg_885;
        else 
            ap_sig_allocacmp_src_kernel_win_0_va_14 <= src_kernel_win_0_va_4_fu_138;
        end if; 
    end process;


    ap_sig_allocacmp_src_kernel_win_0_va_15_assign_proc : process(ap_block_pp0_stage0, icmp_ln444_reg_824_pp0_iter1_reg, ap_enable_reg_pp0_iter2, src_kernel_win_0_va_4_fu_138, src_kernel_win_0_va_5_fu_142)
    begin
        if (((icmp_ln444_reg_824_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_src_kernel_win_0_va_15 <= src_kernel_win_0_va_4_fu_138;
        else 
            ap_sig_allocacmp_src_kernel_win_0_va_15 <= src_kernel_win_0_va_5_fu_142;
        end if; 
    end process;

    col_buf_0_val_0_0_fu_467_p3 <= 
        k_buf_0_val_3_q0 when (or_ln457_reg_842(0) = '1') else 
        tmp_6_fu_455_p5;
    col_buf_0_val_1_0_fu_486_p3 <= 
        k_buf_0_val_4_q0 when (or_ln457_reg_842(0) = '1') else 
        tmp_7_fu_474_p5;
    col_buf_0_val_2_0_fu_505_p3 <= 
        k_buf_0_val_5_q0 when (or_ln457_reg_842(0) = '1') else 
        tmp_8_fu_493_p5;
    i_V_fu_264_p2 <= std_logic_vector(unsigned(t_V_reg_236) + unsigned(ap_const_lv10_1));
    icmp_ln118_fu_384_p2 <= "1" when (signed(ImagLoc_x_fu_364_p2) < signed(ap_const_lv12_500)) else "0";
    icmp_ln162_1_fu_583_p2 <= "1" when (unsigned(src_kernel_win_0_va_9_fu_556_p3) < unsigned(select_ln162_fu_575_p3)) else "0";
    icmp_ln162_2_fu_600_p2 <= "1" when (unsigned(src_kernel_win_0_va_3_fu_134) < unsigned(select_ln162_1_fu_595_p3)) else "0";
    icmp_ln162_3_fu_614_p2 <= "1" when (unsigned(src_kernel_win_0_va_2_fu_130) < unsigned(select_ln162_2_fu_606_p3)) else "0";
    icmp_ln162_4_fu_628_p2 <= "1" when (unsigned(src_kernel_win_0_va_8_reg_878) < unsigned(select_ln162_3_fu_620_p3)) else "0";
    icmp_ln162_5_fu_670_p2 <= "1" when (unsigned(src_kernel_win_0_va_1_fu_126) < unsigned(select_ln162_4_reg_901)) else "0";
    icmp_ln162_6_fu_682_p2 <= "1" when (unsigned(src_kernel_win_0_va_fu_122) < unsigned(select_ln162_5_fu_675_p3)) else "0";
    icmp_ln162_7_fu_696_p2 <= "1" when (unsigned(col_buf_0_val_0_0_reg_871_pp0_iter2_reg) < unsigned(select_ln162_6_fu_688_p3)) else "0";
    icmp_ln162_fu_569_p2 <= "1" when (unsigned(ap_sig_allocacmp_src_kernel_win_0_va_14) < unsigned(ap_sig_allocacmp_src_kernel_win_0_va_15)) else "0";
    icmp_ln443_fu_258_p2 <= "1" when (t_V_reg_236 = ap_const_lv10_2D2) else "0";
    icmp_ln444_fu_336_p2 <= "1" when (t_V_5_reg_247 = ap_const_lv11_502) else "0";
    icmp_ln879_1_fu_304_p2 <= "1" when (t_V_reg_236 = ap_const_lv10_1) else "0";
    icmp_ln879_fu_298_p2 <= "1" when (t_V_reg_236 = ap_const_lv10_0) else "0";
    icmp_ln887_fu_270_p2 <= "1" when (unsigned(t_V_reg_236) < unsigned(ap_const_lv10_2D0)) else "0";
    icmp_ln891_fu_358_p2 <= "0" when (tmp_29_fu_348_p4 = ap_const_lv10_0) else "1";
    icmp_ln899_1_fu_310_p2 <= "1" when (unsigned(t_V_reg_236) > unsigned(ap_const_lv10_2D0)) else "0";
    icmp_ln899_fu_292_p2 <= "0" when (tmp_fu_282_p4 = ap_const_lv9_0) else "1";
    j_V_fu_342_p2 <= std_logic_vector(unsigned(t_V_5_reg_247) + unsigned(ap_const_lv11_1));
    k_buf_0_val_3_address0 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
    k_buf_0_val_3_address1 <= k_buf_0_val_3_addr_reg_849;

    k_buf_0_val_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_3_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_1_reg_804, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_1_reg_804 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_1_reg_804, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_1_reg_804 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_3_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_4_address0 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
    k_buf_0_val_4_address1 <= k_buf_0_val_4_addr_reg_855;

    k_buf_0_val_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_4_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_4_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, k_buf_0_val_3_q0, ap_condition_634)
    begin
        if ((ap_const_boolean_1 = ap_condition_634)) then
            if (((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1))) then 
                k_buf_0_val_4_d1 <= k_buf_0_val_3_q0;
            elsif (((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1))) then 
                k_buf_0_val_4_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_4_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_4_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_4_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_4_we1 <= ap_const_logic_0;
        end if; 
    end process;

    k_buf_0_val_5_address0 <= zext_ln835_fu_429_p1(11 - 1 downto 0);
    k_buf_0_val_5_address1 <= k_buf_0_val_5_addr_reg_861;

    k_buf_0_val_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            k_buf_0_val_5_ce0 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_ce1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    k_buf_0_val_5_d1_assign_proc : process(p_src_data_stream_V_dout, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, k_buf_0_val_4_q0, ap_condition_634)
    begin
        if ((ap_const_boolean_1 = ap_condition_634)) then
            if (((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1))) then 
                k_buf_0_val_5_d1 <= k_buf_0_val_4_q0;
            elsif (((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1))) then 
                k_buf_0_val_5_d1 <= p_src_data_stream_V_dout;
            else 
                k_buf_0_val_5_d1 <= "XXXXXXXX";
            end if;
        else 
            k_buf_0_val_5_d1 <= "XXXXXXXX";
        end if; 
    end process;


    k_buf_0_val_5_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786, icmp_ln879_reg_800, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (icmp_ln879_reg_800 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            k_buf_0_val_5_we1 <= ap_const_logic_1;
        else 
            k_buf_0_val_5_we1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln457_fu_424_p2 <= (xor_ln457_reg_790 or icmp_ln118_fu_384_p2);

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, and_ln512_reg_867_pp0_iter3_reg)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= tmp_34_reg_907;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln512_reg_867_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln512_reg_867_pp0_iter3_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln118_reg_833, icmp_ln899_reg_795, icmp_ln887_reg_786)
    begin
        if ((((icmp_ln887_reg_786 = ap_const_lv1_1) and (icmp_ln899_reg_795 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln899_reg_795 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln118_reg_833) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op91_read_state4, ap_predicate_op99_read_state4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op99_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op91_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln121_fu_404_p3 <= 
        ap_const_lv12_0 when (tmp_31_fu_396_p3(0) = '1') else 
        ap_const_lv12_4FF;
    select_ln162_1_fu_595_p3 <= 
        src_kernel_win_0_va_9_reg_885 when (icmp_ln162_1_reg_896(0) = '1') else 
        select_ln162_reg_891;
    select_ln162_2_fu_606_p3 <= 
        src_kernel_win_0_va_3_fu_134 when (icmp_ln162_2_fu_600_p2(0) = '1') else 
        select_ln162_1_fu_595_p3;
    select_ln162_3_fu_620_p3 <= 
        src_kernel_win_0_va_2_fu_130 when (icmp_ln162_3_fu_614_p2(0) = '1') else 
        select_ln162_2_fu_606_p3;
    select_ln162_4_fu_633_p3 <= 
        src_kernel_win_0_va_8_reg_878 when (icmp_ln162_4_fu_628_p2(0) = '1') else 
        select_ln162_3_fu_620_p3;
    select_ln162_5_fu_675_p3 <= 
        src_kernel_win_0_va_1_fu_126 when (icmp_ln162_5_fu_670_p2(0) = '1') else 
        select_ln162_4_reg_901;
    select_ln162_6_fu_688_p3 <= 
        src_kernel_win_0_va_fu_122 when (icmp_ln162_6_fu_682_p2(0) = '1') else 
        select_ln162_5_fu_675_p3;
    select_ln162_fu_575_p3 <= 
        ap_sig_allocacmp_src_kernel_win_0_va_14 when (icmp_ln162_fu_569_p2(0) = '1') else 
        ap_sig_allocacmp_src_kernel_win_0_va_15;
    src_kernel_win_0_va_8_fu_538_p3 <= 
        tmp_9_fu_527_p5 when (icmp_ln899_1_reg_808(0) = '1') else 
        col_buf_0_val_1_0_fu_486_p3;
    src_kernel_win_0_va_9_fu_556_p3 <= 
        tmp_10_fu_545_p5 when (icmp_ln899_1_reg_808(0) = '1') else 
        col_buf_0_val_2_0_fu_505_p3;
    sub_ln493_fu_326_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln506_fu_316_p1));
    tmp_29_fu_348_p4 <= t_V_5_reg_247(10 downto 1);
    tmp_30_fu_370_p3 <= ImagLoc_x_fu_364_p2(11 downto 11);
    tmp_31_fu_396_p3 <= ImagLoc_x_fu_364_p2(11 downto 11);
    tmp_34_fu_701_p3 <= 
        col_buf_0_val_0_0_reg_871_pp0_iter2_reg when (icmp_ln162_7_fu_696_p2(0) = '1') else 
        select_ln162_6_fu_688_p3;
    tmp_fu_282_p4 <= t_V_reg_236(9 downto 1);
    trunc_ln458_fu_420_p1 <= x_fu_412_p3(2 - 1 downto 0);
    trunc_ln506_fu_316_p1 <= t_V_reg_236(2 - 1 downto 0);
    x_fu_412_p3 <= 
        ImagLoc_x_fu_364_p2 when (and_ln118_fu_390_p2(0) = '1') else 
        select_ln121_fu_404_p3;
    xor_ln118_fu_378_p2 <= (tmp_30_fu_370_p3 xor ap_const_lv1_1);
    xor_ln457_fu_276_p2 <= (icmp_ln887_fu_270_p2 xor ap_const_lv1_1);
    xor_ln493_1_fu_450_p2 <= (trunc_ln458_reg_837 xor ap_const_lv2_3);
    xor_ln493_fu_320_p2 <= (trunc_ln506_fu_316_p1 xor ap_const_lv2_1);
    zext_ln444_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_5_reg_247),12));
    zext_ln835_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_412_p3),64));
end behav;
