// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _In_Range_HH_
#define _In_Range_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct In_Range : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<8> > src_data_stream_0_V_dout;
    sc_in< sc_logic > src_data_stream_0_V_empty_n;
    sc_out< sc_logic > src_data_stream_0_V_read;
    sc_in< sc_lv<8> > src_data_stream_1_V_dout;
    sc_in< sc_logic > src_data_stream_1_V_empty_n;
    sc_out< sc_logic > src_data_stream_1_V_read;
    sc_in< sc_lv<8> > src_data_stream_2_V_dout;
    sc_in< sc_logic > src_data_stream_2_V_empty_n;
    sc_out< sc_logic > src_data_stream_2_V_read;
    sc_out< sc_lv<8> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;


    // Module declarations
    In_Range(sc_module_name name);
    SC_HAS_PROCESS(In_Range);

    ~In_Range();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > src_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln122_reg_279;
    sc_signal< sc_logic > src_data_stream_1_V_blk_n;
    sc_signal< sc_logic > src_data_stream_2_V_blk_n;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln122_reg_279_pp0_iter1_reg;
    sc_signal< sc_lv<11> > j_0_reg_160;
    sc_signal< sc_lv<1> > icmp_ln120_fu_171_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_fu_177_p2;
    sc_signal< sc_lv<10> > i_reg_274;
    sc_signal< sc_lv<1> > icmp_ln122_fu_183_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > j_fu_189_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln126_fu_195_p2;
    sc_signal< sc_lv<1> > icmp_ln126_reg_288;
    sc_signal< sc_lv<1> > icmp_ln126_1_fu_201_p2;
    sc_signal< sc_lv<1> > icmp_ln126_1_reg_293;
    sc_signal< sc_lv<1> > icmp_ln126_2_fu_207_p2;
    sc_signal< sc_lv<1> > icmp_ln126_2_reg_298;
    sc_signal< sc_lv<1> > icmp_ln126_3_fu_213_p2;
    sc_signal< sc_lv<1> > icmp_ln126_3_reg_303;
    sc_signal< sc_lv<1> > icmp_ln126_4_fu_219_p2;
    sc_signal< sc_lv<1> > icmp_ln126_4_reg_308;
    sc_signal< sc_lv<1> > icmp_ln126_5_fu_225_p2;
    sc_signal< sc_lv<1> > icmp_ln126_5_reg_313;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<10> > i_0_reg_149;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > or_ln126_fu_231_p2;
    sc_signal< sc_lv<1> > or_ln126_1_fu_235_p2;
    sc_signal< sc_lv<1> > xor_ln126_fu_240_p2;
    sc_signal< sc_lv<1> > and_ln126_1_fu_250_p2;
    sc_signal< sc_lv<1> > and_ln126_fu_246_p2;
    sc_signal< sc_lv<1> > tmp_24_fu_255_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<10> ap_const_lv10_2D0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_500;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<8> ap_const_lv8_63;
    static const sc_lv<8> ap_const_lv8_7C;
    static const sc_lv<8> ap_const_lv8_55;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_2F;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln126_1_fu_250_p2();
    void thread_and_ln126_fu_246_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_i_fu_177_p2();
    void thread_icmp_ln120_fu_171_p2();
    void thread_icmp_ln122_fu_183_p2();
    void thread_icmp_ln126_1_fu_201_p2();
    void thread_icmp_ln126_2_fu_207_p2();
    void thread_icmp_ln126_3_fu_213_p2();
    void thread_icmp_ln126_4_fu_219_p2();
    void thread_icmp_ln126_5_fu_225_p2();
    void thread_icmp_ln126_fu_195_p2();
    void thread_internal_ap_ready();
    void thread_j_fu_189_p2();
    void thread_or_ln126_1_fu_235_p2();
    void thread_or_ln126_fu_231_p2();
    void thread_real_start();
    void thread_src_data_stream_0_V_blk_n();
    void thread_src_data_stream_0_V_read();
    void thread_src_data_stream_1_V_blk_n();
    void thread_src_data_stream_1_V_read();
    void thread_src_data_stream_2_V_blk_n();
    void thread_src_data_stream_2_V_read();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_24_fu_255_p2();
    void thread_xor_ln126_fu_240_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
