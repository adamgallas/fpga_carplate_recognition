// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Lenet_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.747000,HLS_SYN_LAT=2946242,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=4,HLS_SYN_FF=6913,HLS_SYN_LUT=12940,HLS_VERSION=2019_2}" *)

module Lenet_HLS (
        ap_clk,
        ap_rst_n,
        input_layer_TDATA,
        input_layer_TVALID,
        input_layer_TREADY,
        input_layer_TKEEP,
        input_layer_TSTRB,
        input_layer_TUSER,
        input_layer_TLAST,
        input_layer_TID,
        input_layer_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 63'd1;
parameter    ap_ST_fsm_state2 = 63'd2;
parameter    ap_ST_fsm_state3 = 63'd4;
parameter    ap_ST_fsm_state4 = 63'd8;
parameter    ap_ST_fsm_state5 = 63'd16;
parameter    ap_ST_fsm_state6 = 63'd32;
parameter    ap_ST_fsm_state7 = 63'd64;
parameter    ap_ST_fsm_state8 = 63'd128;
parameter    ap_ST_fsm_state9 = 63'd256;
parameter    ap_ST_fsm_state10 = 63'd512;
parameter    ap_ST_fsm_state11 = 63'd1024;
parameter    ap_ST_fsm_state12 = 63'd2048;
parameter    ap_ST_fsm_state13 = 63'd4096;
parameter    ap_ST_fsm_state14 = 63'd8192;
parameter    ap_ST_fsm_state15 = 63'd16384;
parameter    ap_ST_fsm_state16 = 63'd32768;
parameter    ap_ST_fsm_state17 = 63'd65536;
parameter    ap_ST_fsm_state18 = 63'd131072;
parameter    ap_ST_fsm_state19 = 63'd262144;
parameter    ap_ST_fsm_state20 = 63'd524288;
parameter    ap_ST_fsm_state21 = 63'd1048576;
parameter    ap_ST_fsm_state22 = 63'd2097152;
parameter    ap_ST_fsm_state23 = 63'd4194304;
parameter    ap_ST_fsm_state24 = 63'd8388608;
parameter    ap_ST_fsm_state25 = 63'd16777216;
parameter    ap_ST_fsm_state26 = 63'd33554432;
parameter    ap_ST_fsm_state27 = 63'd67108864;
parameter    ap_ST_fsm_state28 = 63'd134217728;
parameter    ap_ST_fsm_state29 = 63'd268435456;
parameter    ap_ST_fsm_state30 = 63'd536870912;
parameter    ap_ST_fsm_state31 = 63'd1073741824;
parameter    ap_ST_fsm_state32 = 63'd2147483648;
parameter    ap_ST_fsm_state33 = 63'd4294967296;
parameter    ap_ST_fsm_state34 = 63'd8589934592;
parameter    ap_ST_fsm_state35 = 63'd17179869184;
parameter    ap_ST_fsm_state36 = 63'd34359738368;
parameter    ap_ST_fsm_state37 = 63'd68719476736;
parameter    ap_ST_fsm_state38 = 63'd137438953472;
parameter    ap_ST_fsm_state39 = 63'd274877906944;
parameter    ap_ST_fsm_state40 = 63'd549755813888;
parameter    ap_ST_fsm_state41 = 63'd1099511627776;
parameter    ap_ST_fsm_state42 = 63'd2199023255552;
parameter    ap_ST_fsm_state43 = 63'd4398046511104;
parameter    ap_ST_fsm_state44 = 63'd8796093022208;
parameter    ap_ST_fsm_state45 = 63'd17592186044416;
parameter    ap_ST_fsm_state46 = 63'd35184372088832;
parameter    ap_ST_fsm_state47 = 63'd70368744177664;
parameter    ap_ST_fsm_state48 = 63'd140737488355328;
parameter    ap_ST_fsm_state49 = 63'd281474976710656;
parameter    ap_ST_fsm_state50 = 63'd562949953421312;
parameter    ap_ST_fsm_state51 = 63'd1125899906842624;
parameter    ap_ST_fsm_state52 = 63'd2251799813685248;
parameter    ap_ST_fsm_state53 = 63'd4503599627370496;
parameter    ap_ST_fsm_state54 = 63'd9007199254740992;
parameter    ap_ST_fsm_state55 = 63'd18014398509481984;
parameter    ap_ST_fsm_state56 = 63'd36028797018963968;
parameter    ap_ST_fsm_state57 = 63'd72057594037927936;
parameter    ap_ST_fsm_state58 = 63'd144115188075855872;
parameter    ap_ST_fsm_state59 = 63'd288230376151711744;
parameter    ap_ST_fsm_state60 = 63'd576460752303423488;
parameter    ap_ST_fsm_state61 = 63'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 63'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 63'd4611686018427387904;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_layer_TDATA;
input   input_layer_TVALID;
output   input_layer_TREADY;
input  [1:0] input_layer_TKEEP;
input  [1:0] input_layer_TSTRB;
input  [0:0] input_layer_TUSER;
input  [0:0] input_layer_TLAST;
input  [0:0] input_layer_TID;
input  [0:0] input_layer_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg input_layer_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [62:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] id;
reg   [9:0] layer1_V_address0;
reg    layer1_V_ce0;
reg    layer1_V_we0;
wire   [11:0] layer1_V_d0;
wire   [11:0] layer1_V_q0;
reg   [12:0] layer2_V_address0;
reg    layer2_V_ce0;
reg    layer2_V_we0;
wire   [11:0] layer2_V_q0;
reg    layer2_V_ce1;
wire   [11:0] layer2_V_q1;
reg   [10:0] layer3_V_address0;
reg    layer3_V_ce0;
reg    layer3_V_we0;
wire   [11:0] layer3_V_q0;
reg   [10:0] layer4_V_address0;
reg    layer4_V_ce0;
reg    layer4_V_we0;
wire   [11:0] layer4_V_q0;
reg    layer4_V_ce1;
wire   [11:0] layer4_V_q1;
reg   [8:0] layer5_V_address0;
reg    layer5_V_ce0;
reg    layer5_V_we0;
wire   [11:0] layer5_V_q0;
reg   [8:0] flatten1_V_address0;
reg    flatten1_V_ce0;
reg    flatten1_V_we0;
wire   [11:0] flatten1_V_q0;
reg   [6:0] flatten2_V_address0;
reg    flatten2_V_ce0;
reg    flatten2_V_we0;
wire   [11:0] flatten2_V_q0;
reg   [6:0] flatten3_V_address0;
reg    flatten3_V_ce0;
reg    flatten3_V_we0;
wire   [11:0] flatten3_V_q0;
reg    input_layer_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln233_fu_430_p2;
wire   [10:0] i_fu_436_p2;
reg    ap_block_state2;
wire   [5:0] i_2_fu_458_p2;
reg   [5:0] i_2_reg_1442;
wire    ap_CS_fsm_state3;
wire   [9:0] shl_ln_fu_468_p3;
reg   [9:0] shl_ln_reg_1447;
wire   [0:0] icmp_ln243_fu_452_p2;
wire   [11:0] zext_ln245_1_fu_484_p1;
reg   [11:0] zext_ln245_1_reg_1452;
wire   [5:0] j_fu_498_p2;
reg   [5:0] j_reg_1460;
wire    ap_CS_fsm_state4;
wire   [11:0] add_ln203_fu_513_p2;
reg   [11:0] add_ln203_reg_1465;
wire   [0:0] icmp_ln245_fu_492_p2;
wire   [15:0] data_buf_data_V_q0;
reg   [15:0] data_buf_data_V_load_reg_1475;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_419_p1;
reg   [31:0] tmp_reg_1485;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_422_p1;
reg   [63:0] tmp_1_reg_1490;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_425_p2;
reg   [63:0] v_assign_reg_1495;
wire    ap_CS_fsm_state44;
wire   [63:0] ireg_V_fu_527_p1;
reg   [63:0] ireg_V_reg_1500;
wire    ap_CS_fsm_state45;
reg   [0:0] p_Result_14_reg_1505;
wire   [11:0] zext_ln461_fu_552_p1;
reg   [11:0] zext_ln461_reg_1515;
wire   [53:0] p_Result_15_fu_568_p1;
reg   [53:0] p_Result_15_reg_1520;
wire   [53:0] man_V_2_fu_572_p2;
reg   [53:0] man_V_2_reg_1525;
wire   [0:0] icmp_ln571_fu_578_p2;
reg   [0:0] icmp_ln571_reg_1530;
wire   [11:0] F2_fu_584_p2;
reg   [11:0] F2_reg_1538;
wire   [0:0] QUAN_INC_fu_590_p2;
reg   [0:0] QUAN_INC_reg_1547;
wire  signed [11:0] sh_amt_fu_608_p3;
reg  signed [11:0] sh_amt_reg_1553;
wire   [0:0] icmp_ln591_fu_616_p2;
reg   [0:0] icmp_ln591_reg_1560;
wire   [0:0] icmp_ln598_fu_632_p2;
reg   [0:0] icmp_ln598_reg_1565;
wire   [5:0] trunc_ln595_fu_638_p1;
reg   [5:0] trunc_ln595_reg_1570;
wire   [0:0] icmp_ln595_fu_648_p2;
reg   [0:0] icmp_ln595_reg_1575;
wire  signed [31:0] sext_ln581_fu_664_p1;
reg  signed [31:0] sext_ln581_reg_1580;
wire    ap_CS_fsm_state46;
wire   [0:0] icmp_ln582_fu_667_p2;
reg   [0:0] icmp_ln582_reg_1585;
wire   [11:0] trunc_ln583_fu_672_p1;
reg   [11:0] trunc_ln583_reg_1590;
wire   [0:0] icmp_ln603_fu_681_p2;
reg   [0:0] icmp_ln603_reg_1596;
reg   [0:0] p_Result_16_reg_1602;
wire   [11:0] p_Val2_5_fu_808_p2;
reg   [11:0] p_Val2_5_reg_1608;
reg   [0:0] tmp_24_reg_1614;
wire   [0:0] and_ln578_fu_828_p2;
reg   [0:0] and_ln578_reg_1620;
wire   [0:0] icmp_ln578_fu_833_p2;
reg   [0:0] icmp_ln578_reg_1626;
wire   [0:0] empty_143_fu_851_p2;
reg   [0:0] empty_143_reg_1632;
wire  signed [11:0] pos1_fu_857_p2;
reg  signed [11:0] pos1_reg_1638;
wire   [0:0] icmp_ln621_fu_875_p2;
reg   [0:0] icmp_ln621_reg_1643;
wire   [0:0] xor_ln621_1_fu_889_p2;
reg   [0:0] xor_ln621_1_reg_1650;
wire   [0:0] Range1_all_ones_1_fu_915_p2;
reg   [0:0] Range1_all_ones_1_reg_1657;
reg   [0:0] tmp_27_reg_1664;
wire   [0:0] icmp_ln631_fu_929_p2;
reg   [0:0] icmp_ln631_reg_1669;
wire   [53:0] zext_ln635_fu_935_p1;
reg   [53:0] zext_ln635_reg_1675;
wire   [53:0] Range2_V_1_fu_939_p2;
reg   [53:0] Range2_V_1_reg_1680;
wire   [0:0] Range1_all_zeros_1_fu_951_p2;
reg   [0:0] Range1_all_zeros_1_reg_1686;
wire   [0:0] and_ln642_fu_969_p2;
reg   [0:0] and_ln642_reg_1691;
wire   [11:0] p_Val2_6_fu_1026_p3;
reg   [11:0] p_Val2_6_reg_1697;
wire    ap_CS_fsm_state47;
wire   [0:0] select_ln557_fu_1251_p3;
reg   [0:0] select_ln557_reg_1704;
wire   [0:0] overflow_fu_1281_p2;
reg   [0:0] overflow_reg_1710;
wire   [0:0] and_ln659_fu_1287_p2;
reg   [0:0] and_ln659_reg_1716;
wire   [31:0] zext_ln206_fu_1389_p1;
reg   [31:0] zext_ln206_reg_1722;
wire    ap_CS_fsm_state62;
wire   [6:0] i_1_fu_1399_p2;
reg   [6:0] i_1_reg_1730;
wire   [0:0] icmp_ln203_fu_1393_p2;
wire   [11:0] select_ln204_fu_1416_p3;
wire    ap_CS_fsm_state63;
wire   [31:0] select_ln204_1_fu_1424_p3;
reg   [9:0] data_buf_data_V_address0;
reg    data_buf_data_V_ce0;
reg    data_buf_data_V_we0;
wire    grp_Fullc1_Cal_fu_343_ap_start;
wire    grp_Fullc1_Cal_fu_343_ap_done;
wire    grp_Fullc1_Cal_fu_343_ap_idle;
wire    grp_Fullc1_Cal_fu_343_ap_ready;
wire   [6:0] grp_Fullc1_Cal_fu_343_flatten2_V_address0;
wire    grp_Fullc1_Cal_fu_343_flatten2_V_ce0;
wire    grp_Fullc1_Cal_fu_343_flatten2_V_we0;
wire   [11:0] grp_Fullc1_Cal_fu_343_flatten2_V_d0;
wire   [8:0] grp_Fullc1_Cal_fu_343_flatten1_V_address0;
wire    grp_Fullc1_Cal_fu_343_flatten1_V_ce0;
wire    grp_Conv2_Cal_fu_359_ap_start;
wire    grp_Conv2_Cal_fu_359_ap_done;
wire    grp_Conv2_Cal_fu_359_ap_idle;
wire    grp_Conv2_Cal_fu_359_ap_ready;
wire   [10:0] grp_Conv2_Cal_fu_359_layer3_V_address0;
wire    grp_Conv2_Cal_fu_359_layer3_V_ce0;
wire   [10:0] grp_Conv2_Cal_fu_359_layer4_V_address0;
wire    grp_Conv2_Cal_fu_359_layer4_V_ce0;
wire    grp_Conv2_Cal_fu_359_layer4_V_we0;
wire   [11:0] grp_Conv2_Cal_fu_359_layer4_V_d0;
wire    grp_Conv1_Cal_fu_371_ap_start;
wire    grp_Conv1_Cal_fu_371_ap_done;
wire    grp_Conv1_Cal_fu_371_ap_idle;
wire    grp_Conv1_Cal_fu_371_ap_ready;
wire   [9:0] grp_Conv1_Cal_fu_371_layer1_V_address0;
wire    grp_Conv1_Cal_fu_371_layer1_V_ce0;
wire   [12:0] grp_Conv1_Cal_fu_371_layer2_V_address0;
wire    grp_Conv1_Cal_fu_371_layer2_V_ce0;
wire    grp_Conv1_Cal_fu_371_layer2_V_we0;
wire   [11:0] grp_Conv1_Cal_fu_371_layer2_V_d0;
wire    grp_Pool1_Cal_fu_383_ap_start;
wire    grp_Pool1_Cal_fu_383_ap_done;
wire    grp_Pool1_Cal_fu_383_ap_idle;
wire    grp_Pool1_Cal_fu_383_ap_ready;
wire   [12:0] grp_Pool1_Cal_fu_383_layer2_V_address0;
wire    grp_Pool1_Cal_fu_383_layer2_V_ce0;
wire   [12:0] grp_Pool1_Cal_fu_383_layer2_V_address1;
wire    grp_Pool1_Cal_fu_383_layer2_V_ce1;
wire   [10:0] grp_Pool1_Cal_fu_383_layer3_V_address0;
wire    grp_Pool1_Cal_fu_383_layer3_V_ce0;
wire    grp_Pool1_Cal_fu_383_layer3_V_we0;
wire   [11:0] grp_Pool1_Cal_fu_383_layer3_V_d0;
wire    grp_Pool2_Cal_fu_391_ap_start;
wire    grp_Pool2_Cal_fu_391_ap_done;
wire    grp_Pool2_Cal_fu_391_ap_idle;
wire    grp_Pool2_Cal_fu_391_ap_ready;
wire   [10:0] grp_Pool2_Cal_fu_391_layer4_V_address0;
wire    grp_Pool2_Cal_fu_391_layer4_V_ce0;
wire   [10:0] grp_Pool2_Cal_fu_391_layer4_V_address1;
wire    grp_Pool2_Cal_fu_391_layer4_V_ce1;
wire   [8:0] grp_Pool2_Cal_fu_391_layer5_V_address0;
wire    grp_Pool2_Cal_fu_391_layer5_V_ce0;
wire    grp_Pool2_Cal_fu_391_layer5_V_we0;
wire   [11:0] grp_Pool2_Cal_fu_391_layer5_V_d0;
wire    grp_Fullc2_Cal_fu_399_ap_start;
wire    grp_Fullc2_Cal_fu_399_ap_done;
wire    grp_Fullc2_Cal_fu_399_ap_idle;
wire    grp_Fullc2_Cal_fu_399_ap_ready;
wire   [6:0] grp_Fullc2_Cal_fu_399_flatten3_V_address0;
wire    grp_Fullc2_Cal_fu_399_flatten3_V_ce0;
wire    grp_Fullc2_Cal_fu_399_flatten3_V_we0;
wire   [11:0] grp_Fullc2_Cal_fu_399_flatten3_V_d0;
wire   [6:0] grp_Fullc2_Cal_fu_399_flatten2_V_address0;
wire    grp_Fullc2_Cal_fu_399_flatten2_V_ce0;
wire    grp_Flatten_Layer_fu_411_ap_start;
wire    grp_Flatten_Layer_fu_411_ap_done;
wire    grp_Flatten_Layer_fu_411_ap_idle;
wire    grp_Flatten_Layer_fu_411_ap_ready;
wire   [8:0] grp_Flatten_Layer_fu_411_layer5_V_address0;
wire    grp_Flatten_Layer_fu_411_layer5_V_ce0;
wire   [8:0] grp_Flatten_Layer_fu_411_flatten1_V_address0;
wire    grp_Flatten_Layer_fu_411_flatten1_V_ce0;
wire    grp_Flatten_Layer_fu_411_flatten1_V_we0;
wire   [11:0] grp_Flatten_Layer_fu_411_flatten1_V_d0;
reg   [10:0] i_0_reg_275;
reg   [5:0] i1_0_reg_286;
reg   [5:0] j_0_reg_297;
wire    ap_CS_fsm_state48;
reg   [11:0] p_04_3_i_reg_308;
wire    ap_CS_fsm_state61;
reg   [31:0] ret_reg_320;
reg   [6:0] index_1_reg_332;
reg    grp_Fullc1_Cal_fu_343_ap_start_reg;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
reg    grp_Conv2_Cal_fu_359_ap_start_reg;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
reg    grp_Conv1_Cal_fu_371_ap_start_reg;
wire    ap_CS_fsm_state49;
reg    grp_Pool1_Cal_fu_383_ap_start_reg;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
reg    grp_Pool2_Cal_fu_391_ap_start_reg;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
reg    grp_Fullc2_Cal_fu_399_ap_start_reg;
wire    ap_CS_fsm_state60;
reg    grp_Flatten_Layer_fu_411_ap_start_reg;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire   [63:0] zext_ln234_fu_442_p1;
wire   [63:0] zext_ln247_fu_518_p1;
wire   [63:0] zext_ln203_9_fu_1293_p1;
wire   [63:0] zext_ln204_fu_1405_p1;
wire  signed [31:0] grp_fu_419_p0;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire   [4:0] trunc_ln246_fu_464_p1;
wire   [10:0] tmp_s_fu_476_p3;
wire   [9:0] zext_ln245_fu_488_p1;
wire   [11:0] zext_ln203_fu_509_p1;
wire   [9:0] index_fu_504_p2;
wire   [10:0] exp_tmp_V_fu_542_p4;
wire   [51:0] trunc_ln565_fu_556_p1;
wire   [52:0] tmp_7_fu_560_p3;
wire   [62:0] trunc_ln556_fu_530_p1;
wire   [11:0] add_ln581_fu_596_p2;
wire   [11:0] sub_ln581_fu_602_p2;
wire   [8:0] tmp_22_fu_622_p4;
wire   [11:0] add_ln595_fu_642_p2;
wire   [53:0] man_V_fu_659_p3;
wire   [53:0] zext_ln586_fu_686_p1;
wire   [53:0] ashr_ln586_fu_690_p2;
wire   [0:0] tmp_21_fu_700_p3;
wire   [0:0] icmp_ln585_fu_676_p2;
wire   [11:0] trunc_ln586_fu_696_p1;
wire   [11:0] select_ln588_fu_707_p3;
wire   [11:0] add_ln591_fu_723_p2;
wire  signed [31:0] sext_ln591_fu_728_p1;
wire   [0:0] p_Result_1_fu_732_p3;
wire   [5:0] sub_ln595_fu_746_p2;
wire   [5:0] select_ln595_fu_751_p3;
wire   [53:0] zext_ln595_fu_758_p1;
wire   [53:0] lshr_ln595_fu_762_p2;
wire   [53:0] p_Result_s_fu_768_p2;
wire   [0:0] icmp_ln595_1_fu_774_p2;
wire   [11:0] p_Val2_4_fu_715_p3;
wire   [0:0] r_fu_780_p2;
wire   [0:0] qb_fu_740_p3;
wire   [0:0] or_ln406_fu_793_p2;
wire   [0:0] and_ln406_fu_798_p2;
wire   [11:0] zext_ln415_fu_804_p1;
wire   [0:0] xor_ln582_fu_822_p2;
wire   [11:0] tmp63_cast_cast_fu_838_p3;
wire   [11:0] exp_V_fu_654_p2;
wire   [11:0] empty_142_fu_845_p2;
wire  signed [11:0] pos2_fu_866_p2;
wire   [0:0] tmp_26_fu_881_p3;
wire  signed [31:0] sext_ln618_fu_862_p1;
wire   [53:0] zext_ln623_fu_895_p1;
wire   [53:0] ashr_ln623_fu_899_p2;
wire   [0:0] lD_fu_905_p1;
wire   [0:0] and_ln621_fu_909_p2;
wire  signed [31:0] sext_ln619_fu_871_p1;
wire   [0:0] xor_ln639_1_fu_957_p2;
wire   [0:0] icmp_ln642_fu_945_p2;
wire   [0:0] or_ln639_fu_963_p2;
wire   [11:0] sext_ln581cast_fu_975_p1;
wire   [0:0] and_ln403_fu_994_p2;
wire   [11:0] select_ln582_fu_988_p3;
wire   [0:0] xor_ln403_fu_1005_p2;
wire   [0:0] and_ln403_1_fu_1010_p2;
wire   [11:0] select_ln403_fu_998_p3;
wire   [0:0] and_ln603_fu_1022_p2;
wire   [11:0] shl_ln604_fu_978_p2;
wire   [11:0] select_ln403_1_fu_1015_p3;
wire   [0:0] xor_ln416_fu_983_p2;
wire   [0:0] and_ln603_1_fu_1040_p2;
wire   [0:0] and_ln403_2_fu_1034_p2;
wire   [0:0] xor_ln603_fu_1044_p2;
wire   [0:0] xor_ln631_fu_1064_p2;
wire   [53:0] r_V_fu_1074_p2;
wire   [0:0] and_ln631_fu_1069_p2;
wire   [0:0] Range2_all_ones_fu_1079_p2;
wire   [0:0] select_ln631_fu_1084_p3;
wire   [0:0] icmp_ln641_fu_1101_p2;
wire   [0:0] Range1_all_zeros_fu_1106_p2;
wire   [0:0] and_ln639_fu_1092_p2;
wire   [0:0] Range1_all_ones_fu_1096_p2;
wire   [0:0] select_ln642_fu_1121_p3;
wire   [0:0] or_ln645_fu_1117_p2;
wire   [0:0] and_ln641_fu_1111_p2;
wire   [0:0] select_ln642_1_fu_1134_p3;
wire   [0:0] and_ln603_2_fu_1050_p2;
wire   [0:0] select_ln639_fu_1126_p3;
wire   [0:0] select_ln639_1_fu_1141_p3;
wire   [0:0] xor_ln652_2_fu_1157_p2;
wire   [0:0] or_ln652_3_fu_1163_p2;
wire   [0:0] or_ln652_2_fu_1168_p2;
wire   [0:0] xor_ln652_1_fu_1174_p2;
wire   [0:0] tmp_28_fu_1192_p3;
wire   [0:0] or_ln652_fu_1180_p2;
wire   [0:0] and_ln652_fu_1186_p2;
wire   [0:0] or_ln652_1_fu_1199_p2;
wire   [0:0] and_ln654_fu_1213_p2;
wire   [0:0] deleted_ones_fu_1205_p3;
wire   [0:0] xor_ln621_fu_1225_p2;
wire   [0:0] p_Result_17_fu_1056_p3;
wire   [0:0] and_ln621_2_fu_1236_p2;
wire   [0:0] and_ln557_fu_1247_p2;
wire   [0:0] empty_144_fu_1219_p2;
wire   [0:0] and_ln621_3_fu_1242_p2;
wire   [0:0] deleted_zeros_fu_1149_p3;
wire   [0:0] xor_ln658_fu_1259_p2;
wire   [0:0] and_ln658_fu_1265_p2;
wire   [0:0] or_ln658_fu_1270_p2;
wire   [0:0] xor_ln658_1_fu_1276_p2;
wire   [0:0] or_ln557_fu_1230_p2;
wire   [0:0] xor_ln659_fu_1297_p2;
wire   [0:0] underflow_fu_1302_p2;
wire   [0:0] xor_ln340_fu_1312_p2;
wire   [0:0] or_ln340_1_fu_1317_p2;
wire   [0:0] or_ln340_fu_1307_p2;
wire   [0:0] or_ln571_fu_1341_p2;
wire   [11:0] select_ln571_fu_1334_p3;
wire   [0:0] sel_tmp57_demorgan_fu_1353_p2;
wire   [11:0] select_ln571_1_fu_1346_p3;
wire   [0:0] or_ln340_2_fu_1322_p2;
wire   [0:0] xor_ln571_fu_1364_p2;
wire   [0:0] and_ln340_fu_1369_p2;
wire   [0:0] and_ln340_1_fu_1375_p2;
wire   [11:0] select_ln340_fu_1327_p3;
wire   [11:0] sel_tmp58_fu_1357_p3;
wire   [0:0] icmp_ln1495_fu_1410_p2;
reg   [62:0] ap_NS_fsm;
wire    regslice_both_input_layer_data_V_U_apdone_blk;
wire   [15:0] input_layer_TDATA_int;
wire    input_layer_TVALID_int;
reg    input_layer_TREADY_int;
wire    regslice_both_input_layer_data_V_U_ack_in;
wire    regslice_both_input_layer_keep_V_U_apdone_blk;
wire   [1:0] input_layer_TKEEP_int;
wire    regslice_both_input_layer_keep_V_U_vld_out;
wire    regslice_both_input_layer_keep_V_U_ack_in;
wire    regslice_both_input_layer_strb_V_U_apdone_blk;
wire   [1:0] input_layer_TSTRB_int;
wire    regslice_both_input_layer_strb_V_U_vld_out;
wire    regslice_both_input_layer_strb_V_U_ack_in;
wire    regslice_both_input_layer_user_V_U_apdone_blk;
wire   [0:0] input_layer_TUSER_int;
wire    regslice_both_input_layer_user_V_U_vld_out;
wire    regslice_both_input_layer_user_V_U_ack_in;
wire    regslice_both_input_layer_last_V_U_apdone_blk;
wire   [0:0] input_layer_TLAST_int;
wire    regslice_both_input_layer_last_V_U_vld_out;
wire    regslice_both_input_layer_last_V_U_ack_in;
wire    regslice_both_input_layer_id_V_U_apdone_blk;
wire   [0:0] input_layer_TID_int;
wire    regslice_both_input_layer_id_V_U_vld_out;
wire    regslice_both_input_layer_id_V_U_ack_in;
wire    regslice_both_input_layer_dest_V_U_apdone_blk;
wire   [0:0] input_layer_TDEST_int;
wire    regslice_both_input_layer_dest_V_U_vld_out;
wire    regslice_both_input_layer_dest_V_U_ack_in;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 63'd1;
#0 grp_Fullc1_Cal_fu_343_ap_start_reg = 1'b0;
#0 grp_Conv2_Cal_fu_359_ap_start_reg = 1'b0;
#0 grp_Conv1_Cal_fu_371_ap_start_reg = 1'b0;
#0 grp_Pool1_Cal_fu_383_ap_start_reg = 1'b0;
#0 grp_Pool2_Cal_fu_391_ap_start_reg = 1'b0;
#0 grp_Fullc2_Cal_fu_399_ap_start_reg = 1'b0;
#0 grp_Flatten_Layer_fu_411_ap_start_reg = 1'b0;
end

Lenet_HLS_layer1_V #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
layer1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1_V_address0),
    .ce0(layer1_V_ce0),
    .we0(layer1_V_we0),
    .d0(layer1_V_d0),
    .q0(layer1_V_q0)
);

Lenet_HLS_layer2_V #(
    .DataWidth( 12 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
layer2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2_V_address0),
    .ce0(layer2_V_ce0),
    .we0(layer2_V_we0),
    .d0(grp_Conv1_Cal_fu_371_layer2_V_d0),
    .q0(layer2_V_q0),
    .address1(grp_Pool1_Cal_fu_383_layer2_V_address1),
    .ce1(layer2_V_ce1),
    .q1(layer2_V_q1)
);

Lenet_HLS_layer3_V #(
    .DataWidth( 12 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
layer3_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer3_V_address0),
    .ce0(layer3_V_ce0),
    .we0(layer3_V_we0),
    .d0(grp_Pool1_Cal_fu_383_layer3_V_d0),
    .q0(layer3_V_q0)
);

Lenet_HLS_layer4_V #(
    .DataWidth( 12 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
layer4_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer4_V_address0),
    .ce0(layer4_V_ce0),
    .we0(layer4_V_we0),
    .d0(grp_Conv2_Cal_fu_359_layer4_V_d0),
    .q0(layer4_V_q0),
    .address1(grp_Pool2_Cal_fu_391_layer4_V_address1),
    .ce1(layer4_V_ce1),
    .q1(layer4_V_q1)
);

Lenet_HLS_layer5_V #(
    .DataWidth( 12 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
layer5_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer5_V_address0),
    .ce0(layer5_V_ce0),
    .we0(layer5_V_we0),
    .d0(grp_Pool2_Cal_fu_391_layer5_V_d0),
    .q0(layer5_V_q0)
);

Lenet_HLS_layer5_V #(
    .DataWidth( 12 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
flatten1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flatten1_V_address0),
    .ce0(flatten1_V_ce0),
    .we0(flatten1_V_we0),
    .d0(grp_Flatten_Layer_fu_411_flatten1_V_d0),
    .q0(flatten1_V_q0)
);

Lenet_HLS_flattenlbW #(
    .DataWidth( 12 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
flatten2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flatten2_V_address0),
    .ce0(flatten2_V_ce0),
    .we0(flatten2_V_we0),
    .d0(grp_Fullc1_Cal_fu_343_flatten2_V_d0),
    .q0(flatten2_V_q0)
);

Lenet_HLS_flattenmb6 #(
    .DataWidth( 12 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
flatten3_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(flatten3_V_address0),
    .ce0(flatten3_V_ce0),
    .we0(flatten3_V_we0),
    .d0(grp_Fullc2_Cal_fu_399_flatten3_V_d0),
    .q0(flatten3_V_q0)
);

Lenet_HLS_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Lenet_HLS_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ret_reg_320),
    .id(id)
);

Lenet_HLS_data_buncg #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
data_buf_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_buf_data_V_address0),
    .ce0(data_buf_data_V_ce0),
    .we0(data_buf_data_V_we0),
    .d0(input_layer_TDATA_int),
    .q0(data_buf_data_V_q0)
);

Fullc1_Cal grp_Fullc1_Cal_fu_343(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Fullc1_Cal_fu_343_ap_start),
    .ap_done(grp_Fullc1_Cal_fu_343_ap_done),
    .ap_idle(grp_Fullc1_Cal_fu_343_ap_idle),
    .ap_ready(grp_Fullc1_Cal_fu_343_ap_ready),
    .flatten2_V_address0(grp_Fullc1_Cal_fu_343_flatten2_V_address0),
    .flatten2_V_ce0(grp_Fullc1_Cal_fu_343_flatten2_V_ce0),
    .flatten2_V_we0(grp_Fullc1_Cal_fu_343_flatten2_V_we0),
    .flatten2_V_d0(grp_Fullc1_Cal_fu_343_flatten2_V_d0),
    .flatten2_V_q0(flatten2_V_q0),
    .flatten1_V_address0(grp_Fullc1_Cal_fu_343_flatten1_V_address0),
    .flatten1_V_ce0(grp_Fullc1_Cal_fu_343_flatten1_V_ce0),
    .flatten1_V_q0(flatten1_V_q0)
);

Conv2_Cal grp_Conv2_Cal_fu_359(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Conv2_Cal_fu_359_ap_start),
    .ap_done(grp_Conv2_Cal_fu_359_ap_done),
    .ap_idle(grp_Conv2_Cal_fu_359_ap_idle),
    .ap_ready(grp_Conv2_Cal_fu_359_ap_ready),
    .layer3_V_address0(grp_Conv2_Cal_fu_359_layer3_V_address0),
    .layer3_V_ce0(grp_Conv2_Cal_fu_359_layer3_V_ce0),
    .layer3_V_q0(layer3_V_q0),
    .layer4_V_address0(grp_Conv2_Cal_fu_359_layer4_V_address0),
    .layer4_V_ce0(grp_Conv2_Cal_fu_359_layer4_V_ce0),
    .layer4_V_we0(grp_Conv2_Cal_fu_359_layer4_V_we0),
    .layer4_V_d0(grp_Conv2_Cal_fu_359_layer4_V_d0),
    .layer4_V_q0(layer4_V_q0)
);

Conv1_Cal grp_Conv1_Cal_fu_371(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Conv1_Cal_fu_371_ap_start),
    .ap_done(grp_Conv1_Cal_fu_371_ap_done),
    .ap_idle(grp_Conv1_Cal_fu_371_ap_idle),
    .ap_ready(grp_Conv1_Cal_fu_371_ap_ready),
    .layer1_V_address0(grp_Conv1_Cal_fu_371_layer1_V_address0),
    .layer1_V_ce0(grp_Conv1_Cal_fu_371_layer1_V_ce0),
    .layer1_V_q0(layer1_V_q0),
    .layer2_V_address0(grp_Conv1_Cal_fu_371_layer2_V_address0),
    .layer2_V_ce0(grp_Conv1_Cal_fu_371_layer2_V_ce0),
    .layer2_V_we0(grp_Conv1_Cal_fu_371_layer2_V_we0),
    .layer2_V_d0(grp_Conv1_Cal_fu_371_layer2_V_d0),
    .layer2_V_q0(layer2_V_q0)
);

Pool1_Cal grp_Pool1_Cal_fu_383(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Pool1_Cal_fu_383_ap_start),
    .ap_done(grp_Pool1_Cal_fu_383_ap_done),
    .ap_idle(grp_Pool1_Cal_fu_383_ap_idle),
    .ap_ready(grp_Pool1_Cal_fu_383_ap_ready),
    .layer2_V_address0(grp_Pool1_Cal_fu_383_layer2_V_address0),
    .layer2_V_ce0(grp_Pool1_Cal_fu_383_layer2_V_ce0),
    .layer2_V_q0(layer2_V_q0),
    .layer2_V_address1(grp_Pool1_Cal_fu_383_layer2_V_address1),
    .layer2_V_ce1(grp_Pool1_Cal_fu_383_layer2_V_ce1),
    .layer2_V_q1(layer2_V_q1),
    .layer3_V_address0(grp_Pool1_Cal_fu_383_layer3_V_address0),
    .layer3_V_ce0(grp_Pool1_Cal_fu_383_layer3_V_ce0),
    .layer3_V_we0(grp_Pool1_Cal_fu_383_layer3_V_we0),
    .layer3_V_d0(grp_Pool1_Cal_fu_383_layer3_V_d0)
);

Pool2_Cal grp_Pool2_Cal_fu_391(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Pool2_Cal_fu_391_ap_start),
    .ap_done(grp_Pool2_Cal_fu_391_ap_done),
    .ap_idle(grp_Pool2_Cal_fu_391_ap_idle),
    .ap_ready(grp_Pool2_Cal_fu_391_ap_ready),
    .layer4_V_address0(grp_Pool2_Cal_fu_391_layer4_V_address0),
    .layer4_V_ce0(grp_Pool2_Cal_fu_391_layer4_V_ce0),
    .layer4_V_q0(layer4_V_q0),
    .layer4_V_address1(grp_Pool2_Cal_fu_391_layer4_V_address1),
    .layer4_V_ce1(grp_Pool2_Cal_fu_391_layer4_V_ce1),
    .layer4_V_q1(layer4_V_q1),
    .layer5_V_address0(grp_Pool2_Cal_fu_391_layer5_V_address0),
    .layer5_V_ce0(grp_Pool2_Cal_fu_391_layer5_V_ce0),
    .layer5_V_we0(grp_Pool2_Cal_fu_391_layer5_V_we0),
    .layer5_V_d0(grp_Pool2_Cal_fu_391_layer5_V_d0)
);

Fullc2_Cal grp_Fullc2_Cal_fu_399(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Fullc2_Cal_fu_399_ap_start),
    .ap_done(grp_Fullc2_Cal_fu_399_ap_done),
    .ap_idle(grp_Fullc2_Cal_fu_399_ap_idle),
    .ap_ready(grp_Fullc2_Cal_fu_399_ap_ready),
    .flatten3_V_address0(grp_Fullc2_Cal_fu_399_flatten3_V_address0),
    .flatten3_V_ce0(grp_Fullc2_Cal_fu_399_flatten3_V_ce0),
    .flatten3_V_we0(grp_Fullc2_Cal_fu_399_flatten3_V_we0),
    .flatten3_V_d0(grp_Fullc2_Cal_fu_399_flatten3_V_d0),
    .flatten3_V_q0(flatten3_V_q0),
    .flatten2_V_address0(grp_Fullc2_Cal_fu_399_flatten2_V_address0),
    .flatten2_V_ce0(grp_Fullc2_Cal_fu_399_flatten2_V_ce0),
    .flatten2_V_q0(flatten2_V_q0)
);

Flatten_Layer grp_Flatten_Layer_fu_411(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Flatten_Layer_fu_411_ap_start),
    .ap_done(grp_Flatten_Layer_fu_411_ap_done),
    .ap_idle(grp_Flatten_Layer_fu_411_ap_idle),
    .ap_ready(grp_Flatten_Layer_fu_411_ap_ready),
    .layer5_V_address0(grp_Flatten_Layer_fu_411_layer5_V_address0),
    .layer5_V_ce0(grp_Flatten_Layer_fu_411_layer5_V_ce0),
    .layer5_V_q0(layer5_V_q0),
    .flatten1_V_address0(grp_Flatten_Layer_fu_411_flatten1_V_address0),
    .flatten1_V_ce0(grp_Flatten_Layer_fu_411_flatten1_V_ce0),
    .flatten1_V_we0(grp_Flatten_Layer_fu_411_flatten1_V_we0),
    .flatten1_V_d0(grp_Flatten_Layer_fu_411_flatten1_V_d0)
);

Lenet_HLS_sitofp_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Lenet_HLS_sitofp_ocq_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_419_p0),
    .ce(1'b1),
    .dout(grp_fu_419_p1)
);

Lenet_HLS_fpext_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
Lenet_HLS_fpext_3pcA_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_1485),
    .ce(1'b1),
    .dout(grp_fu_422_p1)
);

Lenet_HLS_ddiv_64qcK #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
Lenet_HLS_ddiv_64qcK_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_1_reg_1490),
    .din1(64'd4643176031446892544),
    .ce(1'b1),
    .dout(grp_fu_425_p2)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_input_layer_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TDATA),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_data_V_U_ack_in),
    .data_out(input_layer_TDATA_int),
    .vld_out(input_layer_TVALID_int),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_input_layer_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TKEEP),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_keep_V_U_ack_in),
    .data_out(input_layer_TKEEP_int),
    .vld_out(regslice_both_input_layer_keep_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 2 ))
regslice_both_input_layer_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TSTRB),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_strb_V_U_ack_in),
    .data_out(input_layer_TSTRB_int),
    .vld_out(regslice_both_input_layer_strb_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_layer_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TUSER),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_user_V_U_ack_in),
    .data_out(input_layer_TUSER_int),
    .vld_out(regslice_both_input_layer_user_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_layer_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TLAST),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_last_V_U_ack_in),
    .data_out(input_layer_TLAST_int),
    .vld_out(regslice_both_input_layer_last_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_layer_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TID),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_id_V_U_ack_in),
    .data_out(input_layer_TID_int),
    .vld_out(regslice_both_input_layer_id_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_layer_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_layer_TDEST),
    .vld_in(input_layer_TVALID),
    .ack_in(regslice_both_input_layer_dest_V_U_ack_in),
    .data_out(input_layer_TDEST_int),
    .vld_out(regslice_both_input_layer_dest_V_U_vld_out),
    .ack_out(input_layer_TREADY_int),
    .apdone_blk(regslice_both_input_layer_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Conv1_Cal_fu_371_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln243_fu_452_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_Conv1_Cal_fu_371_ap_start_reg <= 1'b1;
        end else if ((grp_Conv1_Cal_fu_371_ap_ready == 1'b1)) begin
            grp_Conv1_Cal_fu_371_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Conv2_Cal_fu_359_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state52)) begin
            grp_Conv2_Cal_fu_359_ap_start_reg <= 1'b1;
        end else if ((grp_Conv2_Cal_fu_359_ap_ready == 1'b1)) begin
            grp_Conv2_Cal_fu_359_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Flatten_Layer_fu_411_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state56)) begin
            grp_Flatten_Layer_fu_411_ap_start_reg <= 1'b1;
        end else if ((grp_Flatten_Layer_fu_411_ap_ready == 1'b1)) begin
            grp_Flatten_Layer_fu_411_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Fullc1_Cal_fu_343_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            grp_Fullc1_Cal_fu_343_ap_start_reg <= 1'b1;
        end else if ((grp_Fullc1_Cal_fu_343_ap_ready == 1'b1)) begin
            grp_Fullc1_Cal_fu_343_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Fullc2_Cal_fu_399_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state60)) begin
            grp_Fullc2_Cal_fu_399_ap_start_reg <= 1'b1;
        end else if ((grp_Fullc2_Cal_fu_399_ap_ready == 1'b1)) begin
            grp_Fullc2_Cal_fu_399_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Pool1_Cal_fu_383_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            grp_Pool1_Cal_fu_383_ap_start_reg <= 1'b1;
        end else if ((grp_Pool1_Cal_fu_383_ap_ready == 1'b1)) begin
            grp_Pool1_Cal_fu_383_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Pool2_Cal_fu_391_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state54)) begin
            grp_Pool2_Cal_fu_391_ap_start_reg <= 1'b1;
        end else if ((grp_Pool2_Cal_fu_391_ap_ready == 1'b1)) begin
            grp_Pool2_Cal_fu_391_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd1))) begin
        i1_0_reg_286 <= 6'd0;
    end else if (((icmp_ln245_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i1_0_reg_286 <= i_2_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_275 <= 11'd0;
    end else if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd0))) begin
        i_0_reg_275 <= i_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Fullc2_Cal_fu_399_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
        index_1_reg_332 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        index_1_reg_332 <= i_1_reg_1730;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j_0_reg_297 <= j_reg_1460;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln243_fu_452_p2 == 1'd0))) begin
        j_0_reg_297 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Fullc2_Cal_fu_399_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
        p_04_3_i_reg_308 <= 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        p_04_3_i_reg_308 <= select_ln204_fu_1416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Fullc2_Cal_fu_399_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
        ret_reg_320 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        ret_reg_320 <= select_ln204_1_fu_1424_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        F2_reg_1538 <= F2_fu_584_p2;
        QUAN_INC_reg_1547 <= QUAN_INC_fu_590_p2;
        icmp_ln571_reg_1530 <= icmp_ln571_fu_578_p2;
        icmp_ln591_reg_1560 <= icmp_ln591_fu_616_p2;
        icmp_ln595_reg_1575 <= icmp_ln595_fu_648_p2;
        icmp_ln598_reg_1565 <= icmp_ln598_fu_632_p2;
        ireg_V_reg_1500 <= ireg_V_fu_527_p1;
        man_V_2_reg_1525 <= man_V_2_fu_572_p2;
        p_Result_14_reg_1505 <= ireg_V_fu_527_p1[32'd63];
        p_Result_15_reg_1520[51 : 0] <= p_Result_15_fu_568_p1[51 : 0];
        sh_amt_reg_1553 <= sh_amt_fu_608_p3;
        trunc_ln595_reg_1570 <= trunc_ln595_fu_638_p1;
        zext_ln461_reg_1515[10 : 0] <= zext_ln461_fu_552_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        Range1_all_ones_1_reg_1657 <= Range1_all_ones_1_fu_915_p2;
        Range1_all_zeros_1_reg_1686 <= Range1_all_zeros_1_fu_951_p2;
        Range2_V_1_reg_1680 <= Range2_V_1_fu_939_p2;
        and_ln578_reg_1620 <= and_ln578_fu_828_p2;
        and_ln642_reg_1691 <= and_ln642_fu_969_p2;
        empty_143_reg_1632 <= empty_143_fu_851_p2;
        icmp_ln578_reg_1626 <= icmp_ln578_fu_833_p2;
        icmp_ln582_reg_1585 <= icmp_ln582_fu_667_p2;
        icmp_ln603_reg_1596 <= icmp_ln603_fu_681_p2;
        icmp_ln621_reg_1643 <= icmp_ln621_fu_875_p2;
        icmp_ln631_reg_1669 <= icmp_ln631_fu_929_p2;
        p_Result_16_reg_1602 <= p_Val2_4_fu_715_p3[32'd11];
        p_Val2_5_reg_1608 <= p_Val2_5_fu_808_p2;
        pos1_reg_1638 <= pos1_fu_857_p2;
        sext_ln581_reg_1580 <= sext_ln581_fu_664_p1;
        tmp_24_reg_1614 <= p_Val2_5_fu_808_p2[32'd11];
        tmp_27_reg_1664 <= pos2_fu_866_p2[32'd11];
        trunc_ln583_reg_1590 <= trunc_ln583_fu_672_p1;
        xor_ln621_1_reg_1650 <= xor_ln621_1_fu_889_p2;
        zext_ln635_reg_1675[31 : 0] <= zext_ln635_fu_935_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln245_fu_492_p2 == 1'd0))) begin
        add_ln203_reg_1465 <= add_ln203_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        and_ln659_reg_1716 <= and_ln659_fu_1287_p2;
        overflow_reg_1710 <= overflow_fu_1281_p2;
        p_Val2_6_reg_1697 <= p_Val2_6_fu_1026_p3;
        select_ln557_reg_1704 <= select_ln557_fu_1251_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_buf_data_V_load_reg_1475 <= data_buf_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        i_1_reg_1730 <= i_1_fu_1399_p2;
        zext_ln206_reg_1722[6 : 0] <= zext_ln206_fu_1389_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_1442 <= i_2_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_1460 <= j_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln243_fu_452_p2 == 1'd0))) begin
        shl_ln_reg_1447[9 : 5] <= shl_ln_fu_468_p3[9 : 5];
        zext_ln245_1_reg_1452[10 : 5] <= zext_ln245_1_fu_484_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_1_reg_1490 <= grp_fu_422_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_reg_1485 <= grp_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        v_assign_reg_1495 <= grp_fu_425_p2;
    end
end

always @ (*) begin
    if (((icmp_ln203_fu_1393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln203_fu_1393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        data_buf_data_V_address0 = zext_ln247_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_buf_data_V_address0 = zext_ln234_fu_442_p1;
    end else begin
        data_buf_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_buf_data_V_ce0 = 1'b1;
    end else begin
        data_buf_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd0))) begin
        data_buf_data_V_we0 = 1'b1;
    end else begin
        data_buf_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        flatten1_V_address0 = grp_Flatten_Layer_fu_411_flatten1_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        flatten1_V_address0 = grp_Fullc1_Cal_fu_343_flatten1_V_address0;
    end else begin
        flatten1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        flatten1_V_ce0 = grp_Flatten_Layer_fu_411_flatten1_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        flatten1_V_ce0 = grp_Fullc1_Cal_fu_343_flatten1_V_ce0;
    end else begin
        flatten1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        flatten1_V_we0 = grp_Flatten_Layer_fu_411_flatten1_V_we0;
    end else begin
        flatten1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        flatten2_V_address0 = grp_Fullc2_Cal_fu_399_flatten2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        flatten2_V_address0 = grp_Fullc1_Cal_fu_343_flatten2_V_address0;
    end else begin
        flatten2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        flatten2_V_ce0 = grp_Fullc2_Cal_fu_399_flatten2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        flatten2_V_ce0 = grp_Fullc1_Cal_fu_343_flatten2_V_ce0;
    end else begin
        flatten2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        flatten2_V_we0 = grp_Fullc1_Cal_fu_343_flatten2_V_we0;
    end else begin
        flatten2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        flatten3_V_address0 = zext_ln204_fu_1405_p1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        flatten3_V_address0 = grp_Fullc2_Cal_fu_399_flatten3_V_address0;
    end else begin
        flatten3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        flatten3_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        flatten3_V_ce0 = grp_Fullc2_Cal_fu_399_flatten3_V_ce0;
    end else begin
        flatten3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        flatten3_V_we0 = grp_Fullc2_Cal_fu_399_flatten3_V_we0;
    end else begin
        flatten3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd0))) begin
        input_layer_TDATA_blk_n = input_layer_TVALID_int;
    end else begin
        input_layer_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_layer_TVALID == 1'b1) & (regslice_both_input_layer_data_V_U_ack_in == 1'b1))) begin
        input_layer_TREADY = 1'b1;
    end else begin
        input_layer_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd0))) begin
        input_layer_TREADY_int = 1'b1;
    end else begin
        input_layer_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_V_address0 = zext_ln203_9_fu_1293_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer1_V_address0 = grp_Conv1_Cal_fu_371_layer1_V_address0;
    end else begin
        layer1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer1_V_ce0 = grp_Conv1_Cal_fu_371_layer1_V_ce0;
    end else begin
        layer1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_V_we0 = 1'b1;
    end else begin
        layer1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer2_V_address0 = grp_Pool1_Cal_fu_383_layer2_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer2_V_address0 = grp_Conv1_Cal_fu_371_layer2_V_address0;
    end else begin
        layer2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer2_V_ce0 = grp_Pool1_Cal_fu_383_layer2_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer2_V_ce0 = grp_Conv1_Cal_fu_371_layer2_V_ce0;
    end else begin
        layer2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer2_V_ce1 = grp_Pool1_Cal_fu_383_layer2_V_ce1;
    end else begin
        layer2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        layer2_V_we0 = grp_Conv1_Cal_fu_371_layer2_V_we0;
    end else begin
        layer2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer3_V_address0 = grp_Pool1_Cal_fu_383_layer3_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer3_V_address0 = grp_Conv2_Cal_fu_359_layer3_V_address0;
    end else begin
        layer3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer3_V_ce0 = grp_Pool1_Cal_fu_383_layer3_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer3_V_ce0 = grp_Conv2_Cal_fu_359_layer3_V_ce0;
    end else begin
        layer3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer3_V_we0 = grp_Pool1_Cal_fu_383_layer3_V_we0;
    end else begin
        layer3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        layer4_V_address0 = grp_Pool2_Cal_fu_391_layer4_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer4_V_address0 = grp_Conv2_Cal_fu_359_layer4_V_address0;
    end else begin
        layer4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        layer4_V_ce0 = grp_Pool2_Cal_fu_391_layer4_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer4_V_ce0 = grp_Conv2_Cal_fu_359_layer4_V_ce0;
    end else begin
        layer4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        layer4_V_ce1 = grp_Pool2_Cal_fu_391_layer4_V_ce1;
    end else begin
        layer4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        layer4_V_we0 = grp_Conv2_Cal_fu_359_layer4_V_we0;
    end else begin
        layer4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        layer5_V_address0 = grp_Flatten_Layer_fu_411_layer5_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        layer5_V_address0 = grp_Pool2_Cal_fu_391_layer5_V_address0;
    end else begin
        layer5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        layer5_V_ce0 = grp_Flatten_Layer_fu_411_layer5_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        layer5_V_ce0 = grp_Pool2_Cal_fu_391_layer5_V_ce0;
    end else begin
        layer5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        layer5_V_we0 = grp_Pool2_Cal_fu_391_layer5_V_we0;
    end else begin
        layer5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln233_fu_430_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln243_fu_452_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln245_fu_492_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state49 : begin
            if (((grp_Conv1_Cal_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_Pool1_Cal_fu_383_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((grp_Conv2_Cal_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((grp_Pool2_Cal_fu_391_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((grp_Flatten_Layer_fu_411_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if (((grp_Fullc1_Cal_fu_343_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((grp_Fullc2_Cal_fu_399_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((icmp_ln203_fu_1393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_584_p2 = (12'd1075 - zext_ln461_fu_552_p1);

assign QUAN_INC_fu_590_p2 = (($signed(F2_fu_584_p2) > $signed(12'd6)) ? 1'b1 : 1'b0);

assign Range1_all_ones_1_fu_915_p2 = (icmp_ln621_fu_875_p2 & and_ln621_fu_909_p2);

assign Range1_all_ones_fu_1096_p2 = (select_ln631_fu_1084_p3 & Range1_all_ones_1_reg_1657);

assign Range1_all_zeros_1_fu_951_p2 = ((man_V_fu_659_p3 == 54'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1106_p2 = (1'd1 ^ Range1_all_ones_1_reg_1657);

assign Range2_V_1_fu_939_p2 = man_V_fu_659_p3 >> zext_ln635_fu_935_p1;

assign Range2_all_ones_fu_1079_p2 = ((Range2_V_1_reg_1680 == r_V_fu_1074_p2) ? 1'b1 : 1'b0);

assign add_ln203_fu_513_p2 = (zext_ln245_1_reg_1452 + zext_ln203_fu_509_p1);

assign add_ln581_fu_596_p2 = ($signed(12'd4090) + $signed(F2_fu_584_p2));

assign add_ln591_fu_723_p2 = ($signed(12'd4089) + $signed(F2_reg_1538));

assign add_ln595_fu_642_p2 = ($signed(12'd4088) + $signed(F2_fu_584_p2));

assign and_ln340_1_fu_1375_p2 = (empty_143_reg_1632 & and_ln340_fu_1369_p2);

assign and_ln340_fu_1369_p2 = (xor_ln571_fu_1364_p2 & or_ln340_2_fu_1322_p2);

assign and_ln403_1_fu_1010_p2 = (xor_ln403_fu_1005_p2 & and_ln578_reg_1620);

assign and_ln403_2_fu_1034_p2 = (xor_ln416_fu_983_p2 & and_ln403_fu_994_p2);

assign and_ln403_fu_994_p2 = (p_Result_16_reg_1602 & and_ln578_reg_1620);

assign and_ln406_fu_798_p2 = (qb_fu_740_p3 & or_ln406_fu_793_p2);

assign and_ln557_fu_1247_p2 = (p_Result_14_reg_1505 & icmp_ln621_reg_1643);

assign and_ln578_fu_828_p2 = (xor_ln582_fu_822_p2 & QUAN_INC_reg_1547);

assign and_ln603_1_fu_1040_p2 = (icmp_ln603_reg_1596 & icmp_ln578_reg_1626);

assign and_ln603_2_fu_1050_p2 = (xor_ln603_fu_1044_p2 & and_ln403_2_fu_1034_p2);

assign and_ln603_fu_1022_p2 = (icmp_ln603_reg_1596 & icmp_ln578_reg_1626);

assign and_ln621_2_fu_1236_p2 = (xor_ln621_fu_1225_p2 & p_Result_17_fu_1056_p3);

assign and_ln621_3_fu_1242_p2 = (p_Result_14_reg_1505 & and_ln621_2_fu_1236_p2);

assign and_ln621_fu_909_p2 = (xor_ln621_1_fu_889_p2 & lD_fu_905_p1);

assign and_ln631_fu_1069_p2 = (xor_ln631_fu_1064_p2 & icmp_ln631_reg_1669);

assign and_ln639_fu_1092_p2 = (xor_ln621_1_reg_1650 & icmp_ln631_reg_1669);

assign and_ln641_fu_1111_p2 = (icmp_ln641_fu_1101_p2 & Range1_all_zeros_fu_1106_p2);

assign and_ln642_fu_969_p2 = (or_ln639_fu_963_p2 & icmp_ln642_fu_945_p2);

assign and_ln652_fu_1186_p2 = (select_ln639_fu_1126_p3 & or_ln652_2_fu_1168_p2);

assign and_ln654_fu_1213_p2 = (select_ln639_fu_1126_p3 & and_ln603_2_fu_1050_p2);

assign and_ln658_fu_1265_p2 = (xor_ln658_fu_1259_p2 & icmp_ln621_reg_1643);

assign and_ln659_fu_1287_p2 = (p_Result_17_fu_1056_p3 & or_ln557_fu_1230_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

always @ (*) begin
    ap_block_state2 = ((input_layer_TVALID_int == 1'b0) & (icmp_ln233_fu_430_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ashr_ln586_fu_690_p2 = $signed(man_V_fu_659_p3) >>> zext_ln586_fu_686_p1;

assign ashr_ln623_fu_899_p2 = $signed(man_V_fu_659_p3) >>> zext_ln623_fu_895_p1;

assign deleted_ones_fu_1205_p3 = ((or_ln652_fu_1180_p2[0:0] === 1'b1) ? and_ln652_fu_1186_p2 : or_ln652_1_fu_1199_p2);

assign deleted_zeros_fu_1149_p3 = ((and_ln603_2_fu_1050_p2[0:0] === 1'b1) ? select_ln639_fu_1126_p3 : select_ln639_1_fu_1141_p3);

assign empty_142_fu_845_p2 = (tmp63_cast_cast_fu_838_p3 + exp_V_fu_654_p2);

assign empty_143_fu_851_p2 = (($signed(empty_142_fu_845_p2) > $signed(12'd5)) ? 1'b1 : 1'b0);

assign empty_144_fu_1219_p2 = (1'd1 ^ and_ln654_fu_1213_p2);

assign exp_V_fu_654_p2 = ($signed(12'd3073) + $signed(zext_ln461_reg_1515));

assign exp_tmp_V_fu_542_p4 = {{ireg_V_fu_527_p1[62:52]}};

assign grp_Conv1_Cal_fu_371_ap_start = grp_Conv1_Cal_fu_371_ap_start_reg;

assign grp_Conv2_Cal_fu_359_ap_start = grp_Conv2_Cal_fu_359_ap_start_reg;

assign grp_Flatten_Layer_fu_411_ap_start = grp_Flatten_Layer_fu_411_ap_start_reg;

assign grp_Fullc1_Cal_fu_343_ap_start = grp_Fullc1_Cal_fu_343_ap_start_reg;

assign grp_Fullc2_Cal_fu_399_ap_start = grp_Fullc2_Cal_fu_399_ap_start_reg;

assign grp_Pool1_Cal_fu_383_ap_start = grp_Pool1_Cal_fu_383_ap_start_reg;

assign grp_Pool2_Cal_fu_391_ap_start = grp_Pool2_Cal_fu_391_ap_start_reg;

assign grp_fu_419_p0 = $signed(data_buf_data_V_load_reg_1475);

assign i_1_fu_1399_p2 = (index_1_reg_332 + 7'd1);

assign i_2_fu_458_p2 = (i1_0_reg_286 + 6'd1);

assign i_fu_436_p2 = (i_0_reg_275 + 11'd1);

assign icmp_ln1495_fu_1410_p2 = (($signed(p_04_3_i_reg_308) < $signed(flatten3_V_q0)) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_1393_p2 = ((index_1_reg_332 == 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_430_p2 = ((i_0_reg_275 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_452_p2 = ((i1_0_reg_286 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_492_p2 = ((j_0_reg_297 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_578_p2 = ((trunc_ln556_fu_530_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln578_fu_833_p2 = (($signed(F2_reg_1538) < $signed(12'd6)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_667_p2 = ((F2_reg_1538 == 12'd6) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_676_p2 = ((sh_amt_reg_1553 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_616_p2 = (($signed(add_ln581_fu_596_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln595_1_fu_774_p2 = ((p_Result_s_fu_768_p2 != 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln595_fu_648_p2 = (($signed(add_ln595_fu_642_p2) > $signed(12'd53)) ? 1'b1 : 1'b0);

assign icmp_ln598_fu_632_p2 = (($signed(tmp_22_fu_622_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_681_p2 = ((sh_amt_reg_1553 < 12'd12) ? 1'b1 : 1'b0);

assign icmp_ln621_fu_875_p2 = (($signed(pos1_fu_857_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_929_p2 = (($signed(pos2_fu_866_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln641_fu_1101_p2 = ((Range2_V_1_reg_1680 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln642_fu_945_p2 = ((pos2_fu_866_p2 == 12'd54) ? 1'b1 : 1'b0);

assign index_fu_504_p2 = (shl_ln_reg_1447 + zext_ln245_fu_488_p1);

assign ireg_V_fu_527_p1 = v_assign_reg_1495;

assign j_fu_498_p2 = (j_0_reg_297 + 6'd1);

assign lD_fu_905_p1 = ashr_ln623_fu_899_p2[0:0];

assign layer1_V_d0 = ((and_ln340_1_fu_1375_p2[0:0] === 1'b1) ? select_ln340_fu_1327_p3 : sel_tmp58_fu_1357_p3);

assign lshr_ln595_fu_762_p2 = 54'd18014398509481983 >> zext_ln595_fu_758_p1;

assign man_V_2_fu_572_p2 = (54'd0 - p_Result_15_fu_568_p1);

assign man_V_fu_659_p3 = ((p_Result_14_reg_1505[0:0] === 1'b1) ? man_V_2_reg_1525 : p_Result_15_reg_1520);

assign or_ln340_1_fu_1317_p2 = (xor_ln340_fu_1312_p2 | overflow_reg_1710);

assign or_ln340_2_fu_1322_p2 = (or_ln340_1_fu_1317_p2 | and_ln659_reg_1716);

assign or_ln340_fu_1307_p2 = (underflow_fu_1302_p2 | overflow_reg_1710);

assign or_ln406_fu_793_p2 = (r_fu_780_p2 | p_Result_14_reg_1505);

assign or_ln557_fu_1230_p2 = (xor_ln621_fu_1225_p2 | deleted_ones_fu_1205_p3);

assign or_ln571_fu_1341_p2 = (underflow_fu_1302_p2 | icmp_ln571_reg_1530);

assign or_ln639_fu_963_p2 = (xor_ln639_1_fu_957_p2 | tmp_26_fu_881_p3);

assign or_ln645_fu_1117_p2 = (xor_ln621_1_reg_1650 | Range1_all_zeros_1_reg_1686);

assign or_ln652_1_fu_1199_p2 = (tmp_28_fu_1192_p3 | Range1_all_zeros_fu_1106_p2);

assign or_ln652_2_fu_1168_p2 = (or_ln652_3_fu_1163_p2 | and_ln603_fu_1022_p2);

assign or_ln652_3_fu_1163_p2 = (xor_ln652_2_fu_1157_p2 | tmp_24_reg_1614);

assign or_ln652_fu_1180_p2 = (xor_ln652_1_fu_1174_p2 | or_ln652_2_fu_1168_p2);

assign or_ln658_fu_1270_p2 = (p_Result_17_fu_1056_p3 | and_ln658_fu_1265_p2);

assign overflow_fu_1281_p2 = (xor_ln658_1_fu_1276_p2 & or_ln658_fu_1270_p2);

assign p_Result_15_fu_568_p1 = tmp_7_fu_560_p3;

assign p_Result_17_fu_1056_p3 = p_Val2_6_fu_1026_p3[32'd11];

assign p_Result_1_fu_732_p3 = man_V_fu_659_p3[sext_ln591_fu_728_p1];

assign p_Result_s_fu_768_p2 = (man_V_fu_659_p3 & lshr_ln595_fu_762_p2);

assign p_Val2_4_fu_715_p3 = ((icmp_ln585_fu_676_p2[0:0] === 1'b1) ? trunc_ln586_fu_696_p1 : select_ln588_fu_707_p3);

assign p_Val2_5_fu_808_p2 = (p_Val2_4_fu_715_p3 + zext_ln415_fu_804_p1);

assign p_Val2_6_fu_1026_p3 = ((and_ln603_fu_1022_p2[0:0] === 1'b1) ? shl_ln604_fu_978_p2 : select_ln403_1_fu_1015_p3);

assign pos1_fu_857_p2 = (12'd6 + F2_reg_1538);

assign pos2_fu_866_p2 = (12'd7 + F2_reg_1538);

assign qb_fu_740_p3 = ((icmp_ln591_reg_1560[0:0] === 1'b1) ? p_Result_14_reg_1505 : p_Result_1_fu_732_p3);

assign r_V_fu_1074_p2 = 54'd18014398509481983 >> zext_ln635_reg_1675;

assign r_fu_780_p2 = (icmp_ln598_reg_1565 & icmp_ln595_1_fu_774_p2);

assign sel_tmp57_demorgan_fu_1353_p2 = (icmp_ln571_reg_1530 | empty_143_reg_1632);

assign sel_tmp58_fu_1357_p3 = ((sel_tmp57_demorgan_fu_1353_p2[0:0] === 1'b1) ? select_ln571_1_fu_1346_p3 : p_Val2_6_reg_1697);

assign select_ln204_1_fu_1424_p3 = ((icmp_ln1495_fu_1410_p2[0:0] === 1'b1) ? zext_ln206_reg_1722 : ret_reg_320);

assign select_ln204_fu_1416_p3 = ((icmp_ln1495_fu_1410_p2[0:0] === 1'b1) ? flatten3_V_q0 : p_04_3_i_reg_308);

assign select_ln340_fu_1327_p3 = ((or_ln340_fu_1307_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_6_reg_1697);

assign select_ln403_1_fu_1015_p3 = ((and_ln403_1_fu_1010_p2[0:0] === 1'b1) ? p_Val2_5_reg_1608 : select_ln403_fu_998_p3);

assign select_ln403_fu_998_p3 = ((and_ln403_fu_994_p2[0:0] === 1'b1) ? p_Val2_5_reg_1608 : select_ln582_fu_988_p3);

assign select_ln557_fu_1251_p3 = ((and_ln557_fu_1247_p2[0:0] === 1'b1) ? empty_144_fu_1219_p2 : and_ln621_3_fu_1242_p2);

assign select_ln571_1_fu_1346_p3 = ((or_ln571_fu_1341_p2[0:0] === 1'b1) ? select_ln571_fu_1334_p3 : p_Val2_6_reg_1697);

assign select_ln571_fu_1334_p3 = ((icmp_ln571_reg_1530[0:0] === 1'b1) ? 12'd0 : 12'd2048);

assign select_ln582_fu_988_p3 = ((icmp_ln582_reg_1585[0:0] === 1'b1) ? trunc_ln583_reg_1590 : 12'd0);

assign select_ln588_fu_707_p3 = ((tmp_21_fu_700_p3[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign select_ln595_fu_751_p3 = ((icmp_ln595_reg_1575[0:0] === 1'b1) ? 6'd0 : sub_ln595_fu_746_p2);

assign select_ln631_fu_1084_p3 = ((and_ln631_fu_1069_p2[0:0] === 1'b1) ? Range2_all_ones_fu_1079_p2 : xor_ln631_fu_1064_p2);

assign select_ln639_1_fu_1141_p3 = ((and_ln639_fu_1092_p2[0:0] === 1'b1) ? and_ln641_fu_1111_p2 : select_ln642_1_fu_1134_p3);

assign select_ln639_fu_1126_p3 = ((and_ln639_fu_1092_p2[0:0] === 1'b1) ? Range1_all_ones_fu_1096_p2 : select_ln642_fu_1121_p3);

assign select_ln642_1_fu_1134_p3 = ((and_ln642_reg_1691[0:0] === 1'b1) ? Range1_all_zeros_fu_1106_p2 : or_ln645_fu_1117_p2);

assign select_ln642_fu_1121_p3 = ((and_ln642_reg_1691[0:0] === 1'b1) ? Range1_all_ones_1_reg_1657 : xor_ln621_1_reg_1650);

assign sext_ln581_fu_664_p1 = sh_amt_reg_1553;

assign sext_ln581cast_fu_975_p1 = sext_ln581_reg_1580[11:0];

assign sext_ln591_fu_728_p1 = $signed(add_ln591_fu_723_p2);

assign sext_ln618_fu_862_p1 = pos1_fu_857_p2;

assign sext_ln619_fu_871_p1 = pos2_fu_866_p2;

assign sh_amt_fu_608_p3 = ((QUAN_INC_fu_590_p2[0:0] === 1'b1) ? add_ln581_fu_596_p2 : sub_ln581_fu_602_p2);

assign shl_ln604_fu_978_p2 = trunc_ln583_reg_1590 << sext_ln581cast_fu_975_p1;

assign shl_ln_fu_468_p3 = {{trunc_ln246_fu_464_p1}, {5'd0}};

assign sub_ln581_fu_602_p2 = (12'd6 - F2_fu_584_p2);

assign sub_ln595_fu_746_p2 = ($signed(6'd61) - $signed(trunc_ln595_reg_1570));

assign tmp63_cast_cast_fu_838_p3 = ((QUAN_INC_reg_1547[0:0] === 1'b1) ? 12'd2 : 12'd1);

assign tmp_21_fu_700_p3 = ireg_V_reg_1500[32'd63];

assign tmp_22_fu_622_p4 = {{F2_fu_584_p2[11:3]}};

assign tmp_26_fu_881_p3 = pos1_fu_857_p2[32'd11];

assign tmp_28_fu_1192_p3 = pos1_reg_1638[32'd11];

assign tmp_7_fu_560_p3 = {{1'd1}, {trunc_ln565_fu_556_p1}};

assign tmp_s_fu_476_p3 = {{i1_0_reg_286}, {5'd0}};

assign trunc_ln246_fu_464_p1 = i1_0_reg_286[4:0];

assign trunc_ln556_fu_530_p1 = ireg_V_fu_527_p1[62:0];

assign trunc_ln565_fu_556_p1 = ireg_V_fu_527_p1[51:0];

assign trunc_ln583_fu_672_p1 = man_V_fu_659_p3[11:0];

assign trunc_ln586_fu_696_p1 = ashr_ln586_fu_690_p2[11:0];

assign trunc_ln595_fu_638_p1 = F2_fu_584_p2[5:0];

assign underflow_fu_1302_p2 = (xor_ln659_fu_1297_p2 & select_ln557_reg_1704);

assign xor_ln340_fu_1312_p2 = (select_ln557_reg_1704 ^ 1'd1);

assign xor_ln403_fu_1005_p2 = (p_Result_16_reg_1602 ^ 1'd1);

assign xor_ln416_fu_983_p2 = (tmp_24_reg_1614 ^ 1'd1);

assign xor_ln571_fu_1364_p2 = (icmp_ln571_reg_1530 ^ 1'd1);

assign xor_ln582_fu_822_p2 = (icmp_ln582_fu_667_p2 ^ 1'd1);

assign xor_ln603_fu_1044_p2 = (1'd1 ^ and_ln603_1_fu_1040_p2);

assign xor_ln621_1_fu_889_p2 = (tmp_26_fu_881_p3 ^ 1'd1);

assign xor_ln621_fu_1225_p2 = (icmp_ln621_reg_1643 ^ 1'd1);

assign xor_ln631_fu_1064_p2 = (tmp_27_reg_1664 ^ 1'd1);

assign xor_ln639_1_fu_957_p2 = (icmp_ln631_fu_929_p2 ^ 1'd1);

assign xor_ln652_1_fu_1174_p2 = (select_ln631_fu_1084_p3 ^ 1'd1);

assign xor_ln652_2_fu_1157_p2 = (1'd1 ^ and_ln403_fu_994_p2);

assign xor_ln658_1_fu_1276_p2 = (p_Result_14_reg_1505 ^ 1'd1);

assign xor_ln658_fu_1259_p2 = (deleted_zeros_fu_1149_p3 ^ 1'd1);

assign xor_ln659_fu_1297_p2 = (1'd1 ^ and_ln659_reg_1716);

assign zext_ln203_9_fu_1293_p1 = add_ln203_reg_1465;

assign zext_ln203_fu_509_p1 = j_0_reg_297;

assign zext_ln204_fu_1405_p1 = index_1_reg_332;

assign zext_ln206_fu_1389_p1 = index_1_reg_332;

assign zext_ln234_fu_442_p1 = i_0_reg_275;

assign zext_ln245_1_fu_484_p1 = tmp_s_fu_476_p3;

assign zext_ln245_fu_488_p1 = j_0_reg_297;

assign zext_ln247_fu_518_p1 = index_fu_504_p2;

assign zext_ln415_fu_804_p1 = and_ln406_fu_798_p2;

assign zext_ln461_fu_552_p1 = exp_tmp_V_fu_542_p4;

assign zext_ln586_fu_686_p1 = $unsigned(sext_ln581_fu_664_p1);

assign zext_ln595_fu_758_p1 = select_ln595_fu_751_p3;

assign zext_ln623_fu_895_p1 = $unsigned(sext_ln618_fu_862_p1);

assign zext_ln635_fu_935_p1 = $unsigned(sext_ln619_fu_871_p1);

always @ (posedge ap_clk) begin
    shl_ln_reg_1447[4:0] <= 5'b00000;
    zext_ln245_1_reg_1452[4:0] <= 5'b00000;
    zext_ln245_1_reg_1452[11] <= 1'b0;
    zext_ln461_reg_1515[11] <= 1'b0;
    p_Result_15_reg_1520[53:52] <= 2'b01;
    zext_ln635_reg_1675[53:32] <= 22'b0000000000000000000000;
    zext_ln206_reg_1722[31:7] <= 25'b0000000000000000000000000;
end

endmodule //Lenet_HLS
