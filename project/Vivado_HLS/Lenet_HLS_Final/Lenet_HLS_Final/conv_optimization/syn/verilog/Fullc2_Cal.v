// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Fullc2_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flatten3_V_address0,
        flatten3_V_ce0,
        flatten3_V_we0,
        flatten3_V_d0,
        flatten3_V_q0,
        flatten2_V_address0,
        flatten2_V_ce0,
        flatten2_V_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] flatten3_V_address0;
output   flatten3_V_ce0;
output   flatten3_V_we0;
output  [11:0] flatten3_V_d0;
input  [11:0] flatten3_V_q0;
output  [6:0] flatten2_V_address0;
output   flatten2_V_ce0;
input  [11:0] flatten2_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flatten3_V_ce0;
reg flatten3_V_we0;
reg[11:0] flatten3_V_d0;
reg flatten2_V_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] bias2_V_address0;
reg    bias2_V_ce0;
wire   [3:0] bias2_V_q0;
wire   [12:0] weight2_V_address0;
reg    weight2_V_ce0;
wire   [5:0] weight2_V_q0;
wire   [12:0] add_ln190_fu_156_p2;
reg   [12:0] add_ln190_reg_454;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_168_p2;
reg   [6:0] i_reg_462;
wire   [0:0] icmp_ln190_fu_162_p2;
reg   [6:0] flatten3_V_addr_reg_472;
wire   [6:0] j_fu_191_p2;
reg   [6:0] j_reg_480;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln193_fu_185_p2;
reg  signed [5:0] weight2_V_load_reg_490;
wire    ap_CS_fsm_state5;
wire  signed [18:0] r_V_fu_446_p2;
reg  signed [18:0] r_V_reg_500;
wire    ap_CS_fsm_state6;
reg   [11:0] p_Val2_s_reg_506;
wire   [17:0] trunc_ln1192_fu_224_p1;
reg   [17:0] trunc_ln1192_reg_511;
wire   [4:0] trunc_ln718_fu_227_p1;
reg   [4:0] trunc_ln718_reg_516;
wire   [0:0] overflow_fu_410_p2;
reg   [0:0] overflow_reg_521;
wire    ap_CS_fsm_state7;
wire   [0:0] underflow_fu_434_p2;
reg   [0:0] underflow_reg_525;
wire   [0:0] or_ln340_fu_440_p2;
reg   [0:0] or_ln340_reg_529;
reg   [6:0] i_0_reg_121;
reg   [12:0] phi_mul_reg_132;
reg   [6:0] j_0_reg_144;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln191_fu_174_p1;
wire   [63:0] zext_ln1116_1_fu_207_p1;
wire   [63:0] zext_ln194_fu_212_p1;
wire  signed [11:0] sext_ln203_fu_180_p1;
wire   [11:0] p_Val2_10_fu_305_p2;
wire   [12:0] zext_ln1116_fu_197_p1;
wire   [12:0] add_ln1116_fu_201_p2;
wire  signed [17:0] lhs_V_fu_230_p3;
wire  signed [18:0] sext_ln728_fu_237_p1;
(* use_dsp48 = "no" *) wire   [18:0] ret_V_fu_241_p2;
wire   [17:0] add_ln1192_1_fu_246_p2;
wire   [0:0] p_Result_s_fu_251_p3;
wire   [0:0] r_fu_269_p2;
wire   [0:0] tmp_31_fu_288_p3;
wire   [0:0] or_ln406_fu_282_p2;
wire   [0:0] and_ln415_fu_295_p2;
wire   [11:0] zext_ln415_fu_301_p1;
wire   [11:0] p_Val2_9_fu_259_p4;
wire   [0:0] tmp_32_fu_312_p3;
wire   [0:0] p_Result_18_fu_274_p3;
wire   [0:0] xor_ln416_1_fu_320_p2;
wire   [0:0] tmp_35_fu_348_p3;
wire   [0:0] xor_ln416_2_fu_362_p2;
wire   [0:0] or_ln416_1_fu_368_p2;
wire   [0:0] xor_ln779_fu_356_p2;
wire   [0:0] Range2_all_ones_fu_340_p3;
wire   [0:0] or_ln416_fu_374_p2;
wire   [0:0] carry_1_fu_326_p2;
wire   [0:0] p_Result_19_fu_332_p3;
wire   [0:0] xor_ln785_fu_392_p2;
wire   [0:0] or_ln785_fu_398_p2;
wire   [0:0] xor_ln785_1_fu_404_p2;
wire   [0:0] deleted_ones_fu_380_p2;
wire   [0:0] and_ln781_fu_386_p2;
wire   [0:0] and_ln786_fu_416_p2;
wire   [0:0] or_ln786_fu_422_p2;
wire   [0:0] xor_ln786_fu_428_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

Fullc2_Cal_bias2_V #(
    .DataWidth( 4 ),
    .AddressRange( 65 ),
    .AddressWidth( 7 ))
bias2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias2_V_address0),
    .ce0(bias2_V_ce0),
    .q0(bias2_V_q0)
);

Fullc2_Cal_weightjbC #(
    .DataWidth( 6 ),
    .AddressRange( 5460 ),
    .AddressWidth( 13 ))
weight2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight2_V_address0),
    .ce0(weight2_V_ce0),
    .q0(weight2_V_q0)
);

Lenet_HLS_mul_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 19 ))
Lenet_HLS_mul_mulibs_U29(
    .din0(flatten2_V_q0),
    .din1(weight2_V_load_reg_490),
    .dout(r_V_fu_446_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_121 <= i_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_121 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_144 <= j_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_144 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln193_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_132 <= add_ln190_reg_454;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_132 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln190_reg_454 <= add_ln190_fu_156_p2;
        i_reg_462 <= i_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln190_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        flatten3_V_addr_reg_472 <= zext_ln191_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_480 <= j_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln340_reg_529 <= or_ln340_fu_440_p2;
        overflow_reg_521 <= overflow_fu_410_p2;
        underflow_reg_525 <= underflow_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_506 <= flatten3_V_q0;
        r_V_reg_500 <= r_V_fu_446_p2;
        trunc_ln1192_reg_511 <= trunc_ln1192_fu_224_p1;
        trunc_ln718_reg_516 <= trunc_ln718_fu_227_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight2_V_load_reg_490 <= weight2_V_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln190_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln190_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias2_V_ce0 = 1'b1;
    end else begin
        bias2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flatten2_V_ce0 = 1'b1;
    end else begin
        flatten2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (overflow_reg_521 == 1'd1)) | ((overflow_reg_521 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (underflow_reg_525 == 1'd1)))) begin
        flatten3_V_ce0 = 1'b1;
    end else begin
        flatten3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (overflow_reg_521 == 1'd1))) begin
        flatten3_V_d0 = 12'd2047;
    end else if (((overflow_reg_521 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (underflow_reg_525 == 1'd1))) begin
        flatten3_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flatten3_V_d0 = p_Val2_10_fu_305_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        flatten3_V_d0 = sext_ln203_fu_180_p1;
    end else begin
        flatten3_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (overflow_reg_521 == 1'd1)) | ((overflow_reg_521 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_529 == 1'd1) & (underflow_reg_525 == 1'd1)))) begin
        flatten3_V_we0 = 1'b1;
    end else begin
        flatten3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weight2_V_ce0 = 1'b1;
    end else begin
        weight2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln190_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln193_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range2_all_ones_fu_340_p3 = ret_V_fu_241_p2[32'd18];

assign add_ln1116_fu_201_p2 = (phi_mul_reg_132 + zext_ln1116_fu_197_p1);

assign add_ln1192_1_fu_246_p2 = ($signed(lhs_V_fu_230_p3) + $signed(trunc_ln1192_reg_511));

assign add_ln190_fu_156_p2 = (phi_mul_reg_132 + 13'd84);

assign and_ln415_fu_295_p2 = (tmp_31_fu_288_p3 & or_ln406_fu_282_p2);

assign and_ln781_fu_386_p2 = (carry_1_fu_326_p2 & Range2_all_ones_fu_340_p3);

assign and_ln786_fu_416_p2 = (p_Result_19_fu_332_p3 & deleted_ones_fu_380_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias2_V_address0 = zext_ln191_fu_174_p1;

assign carry_1_fu_326_p2 = (xor_ln416_1_fu_320_p2 & p_Result_18_fu_274_p3);

assign deleted_ones_fu_380_p2 = (or_ln416_fu_374_p2 & Range2_all_ones_fu_340_p3);

assign flatten2_V_address0 = zext_ln194_fu_212_p1;

assign flatten3_V_address0 = flatten3_V_addr_reg_472;

assign i_fu_168_p2 = (i_0_reg_121 + 7'd1);

assign icmp_ln190_fu_162_p2 = ((i_0_reg_121 == 7'd65) ? 1'b1 : 1'b0);

assign icmp_ln193_fu_185_p2 = ((j_0_reg_144 == 7'd84) ? 1'b1 : 1'b0);

assign j_fu_191_p2 = (j_0_reg_144 + 7'd1);

assign lhs_V_fu_230_p3 = {{p_Val2_s_reg_506}, {6'd0}};

assign or_ln340_fu_440_p2 = (underflow_fu_434_p2 | overflow_fu_410_p2);

assign or_ln406_fu_282_p2 = (r_fu_269_p2 | p_Result_s_fu_251_p3);

assign or_ln416_1_fu_368_p2 = (xor_ln416_2_fu_362_p2 | tmp_32_fu_312_p3);

assign or_ln416_fu_374_p2 = (xor_ln779_fu_356_p2 | or_ln416_1_fu_368_p2);

assign or_ln785_fu_398_p2 = (xor_ln785_fu_392_p2 | p_Result_19_fu_332_p3);

assign or_ln786_fu_422_p2 = (and_ln786_fu_416_p2 | and_ln781_fu_386_p2);

assign overflow_fu_410_p2 = (xor_ln785_1_fu_404_p2 & or_ln785_fu_398_p2);

assign p_Result_18_fu_274_p3 = add_ln1192_1_fu_246_p2[32'd17];

assign p_Result_19_fu_332_p3 = p_Val2_10_fu_305_p2[32'd11];

assign p_Result_s_fu_251_p3 = ret_V_fu_241_p2[32'd18];

assign p_Val2_10_fu_305_p2 = (zext_ln415_fu_301_p1 + p_Val2_9_fu_259_p4);

assign p_Val2_9_fu_259_p4 = {{add_ln1192_1_fu_246_p2[17:6]}};

assign r_fu_269_p2 = ((trunc_ln718_reg_516 != 5'd0) ? 1'b1 : 1'b0);

assign ret_V_fu_241_p2 = ($signed(r_V_reg_500) + $signed(sext_ln728_fu_237_p1));

assign sext_ln203_fu_180_p1 = $signed(bias2_V_q0);

assign sext_ln728_fu_237_p1 = lhs_V_fu_230_p3;

assign tmp_31_fu_288_p3 = r_V_reg_500[32'd5];

assign tmp_32_fu_312_p3 = p_Val2_10_fu_305_p2[32'd11];

assign tmp_35_fu_348_p3 = ret_V_fu_241_p2[32'd18];

assign trunc_ln1192_fu_224_p1 = r_V_fu_446_p2[17:0];

assign trunc_ln718_fu_227_p1 = r_V_fu_446_p2[4:0];

assign underflow_fu_434_p2 = (xor_ln786_fu_428_p2 & p_Result_s_fu_251_p3);

assign weight2_V_address0 = zext_ln1116_1_fu_207_p1;

assign xor_ln416_1_fu_320_p2 = (tmp_32_fu_312_p3 ^ 1'd1);

assign xor_ln416_2_fu_362_p2 = (p_Result_18_fu_274_p3 ^ 1'd1);

assign xor_ln779_fu_356_p2 = (tmp_35_fu_348_p3 ^ 1'd1);

assign xor_ln785_1_fu_404_p2 = (p_Result_s_fu_251_p3 ^ 1'd1);

assign xor_ln785_fu_392_p2 = (carry_1_fu_326_p2 ^ Range2_all_ones_fu_340_p3);

assign xor_ln786_fu_428_p2 = (or_ln786_fu_422_p2 ^ 1'd1);

assign zext_ln1116_1_fu_207_p1 = add_ln1116_fu_201_p2;

assign zext_ln1116_fu_197_p1 = j_0_reg_144;

assign zext_ln191_fu_174_p1 = i_0_reg_121;

assign zext_ln194_fu_212_p1 = j_0_reg_144;

assign zext_ln415_fu_301_p1 = and_ln415_fu_295_p2;

endmodule //Fullc2_Cal
