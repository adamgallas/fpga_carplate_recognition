-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Fullc2_Cal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flatten3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    flatten3_V_ce0 : OUT STD_LOGIC;
    flatten3_V_we0 : OUT STD_LOGIC;
    flatten3_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    flatten3_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    flatten2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    flatten2_V_ce0 : OUT STD_LOGIC;
    flatten2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Fullc2_Cal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv13_54 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010100";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias2_V_ce0 : STD_LOGIC;
    signal bias2_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal weight2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weight2_V_ce0 : STD_LOGIC;
    signal weight2_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln190_fu_156_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln190_reg_454 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_168_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_462 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln190_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flatten3_V_addr_reg_472 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_480 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln193_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight2_V_load_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_V_fu_446_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_reg_500 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Val2_s_reg_506 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1192_fu_224_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1192_reg_511 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln718_fu_227_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln718_reg_516 : STD_LOGIC_VECTOR (4 downto 0);
    signal overflow_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal underflow_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_121 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_132 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_reg_144 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln191_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_1_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_10_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1116_fu_197_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1116_fu_201_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lhs_V_fu_230_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_fu_237_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_241_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_241_p2 : signal is "no";
    signal add_ln1192_1_fu_246_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_301_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_9_fu_259_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_18_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component Lenet_HLS_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Fullc2_Cal_bias2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Fullc2_Cal_weightjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    bias2_V_U : component Fullc2_Cal_bias2_V
    generic map (
        DataWidth => 4,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias2_V_address0,
        ce0 => bias2_V_ce0,
        q0 => bias2_V_q0);

    weight2_V_U : component Fullc2_Cal_weightjbC
    generic map (
        DataWidth => 6,
        AddressRange => 5460,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight2_V_address0,
        ce0 => weight2_V_ce0,
        q0 => weight2_V_q0);

    Lenet_HLS_mul_mulibs_U29 : component Lenet_HLS_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 6,
        dout_WIDTH => 19)
    port map (
        din0 => flatten2_V_q0,
        din1 => weight2_V_load_reg_490,
        dout => r_V_fu_446_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_121 <= i_reg_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_121 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_144 <= j_reg_480;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_144 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_132 <= add_ln190_reg_454;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_132 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln190_reg_454 <= add_ln190_fu_156_p2;
                i_reg_462 <= i_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln190_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                flatten3_V_addr_reg_472 <= zext_ln191_fu_174_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_480 <= j_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                or_ln340_reg_529 <= or_ln340_fu_440_p2;
                overflow_reg_521 <= overflow_fu_410_p2;
                underflow_reg_525 <= underflow_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Val2_s_reg_506 <= flatten3_V_q0;
                r_V_reg_500 <= r_V_fu_446_p2;
                trunc_ln1192_reg_511 <= trunc_ln1192_fu_224_p1;
                trunc_ln718_reg_516 <= trunc_ln718_fu_227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                weight2_V_load_reg_490 <= weight2_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln190_fu_162_p2, ap_CS_fsm_state4, icmp_ln193_fu_185_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln190_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln193_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    Range2_all_ones_fu_340_p3 <= ret_V_fu_241_p2(18 downto 18);
    add_ln1116_fu_201_p2 <= std_logic_vector(unsigned(phi_mul_reg_132) + unsigned(zext_ln1116_fu_197_p1));
    add_ln1192_1_fu_246_p2 <= std_logic_vector(signed(lhs_V_fu_230_p3) + signed(trunc_ln1192_reg_511));
    add_ln190_fu_156_p2 <= std_logic_vector(unsigned(phi_mul_reg_132) + unsigned(ap_const_lv13_54));
    and_ln415_fu_295_p2 <= (tmp_31_fu_288_p3 and or_ln406_fu_282_p2);
    and_ln781_fu_386_p2 <= (carry_1_fu_326_p2 and Range2_all_ones_fu_340_p3);
    and_ln786_fu_416_p2 <= (p_Result_19_fu_332_p3 and deleted_ones_fu_380_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln190_fu_162_p2)
    begin
        if ((((icmp_ln190_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln190_fu_162_p2)
    begin
        if (((icmp_ln190_fu_162_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias2_V_address0 <= zext_ln191_fu_174_p1(7 - 1 downto 0);

    bias2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias2_V_ce0 <= ap_const_logic_1;
        else 
            bias2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_326_p2 <= (xor_ln416_1_fu_320_p2 and p_Result_18_fu_274_p3);
    deleted_ones_fu_380_p2 <= (or_ln416_fu_374_p2 and Range2_all_ones_fu_340_p3);
    flatten2_V_address0 <= zext_ln194_fu_212_p1(7 - 1 downto 0);

    flatten2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flatten2_V_ce0 <= ap_const_logic_1;
        else 
            flatten2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatten3_V_address0 <= flatten3_V_addr_reg_472;

    flatten3_V_ce0_assign_proc : process(ap_CS_fsm_state5, overflow_reg_521, ap_CS_fsm_state7, underflow_reg_525, or_ln340_reg_529, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (overflow_reg_521 = ap_const_lv1_1)) or ((overflow_reg_521 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (underflow_reg_525 = ap_const_lv1_1)))) then 
            flatten3_V_ce0 <= ap_const_logic_1;
        else 
            flatten3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten3_V_d0_assign_proc : process(overflow_reg_521, ap_CS_fsm_state7, underflow_reg_525, or_ln340_reg_529, ap_CS_fsm_state3, ap_CS_fsm_state8, sext_ln203_fu_180_p1, p_Val2_10_fu_305_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (overflow_reg_521 = ap_const_lv1_1))) then 
            flatten3_V_d0 <= ap_const_lv12_7FF;
        elsif (((overflow_reg_521 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (underflow_reg_525 = ap_const_lv1_1))) then 
            flatten3_V_d0 <= ap_const_lv12_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            flatten3_V_d0 <= p_Val2_10_fu_305_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten3_V_d0 <= sext_ln203_fu_180_p1;
        else 
            flatten3_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    flatten3_V_we0_assign_proc : process(overflow_reg_521, ap_CS_fsm_state7, underflow_reg_525, or_ln340_reg_529, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (overflow_reg_521 = ap_const_lv1_1)) or ((overflow_reg_521 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_529 = ap_const_lv1_1) and (underflow_reg_525 = ap_const_lv1_1)))) then 
            flatten3_V_we0 <= ap_const_logic_1;
        else 
            flatten3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_168_p2 <= std_logic_vector(unsigned(i_0_reg_121) + unsigned(ap_const_lv7_1));
    icmp_ln190_fu_162_p2 <= "1" when (i_0_reg_121 = ap_const_lv7_41) else "0";
    icmp_ln193_fu_185_p2 <= "1" when (j_0_reg_144 = ap_const_lv7_54) else "0";
    j_fu_191_p2 <= std_logic_vector(unsigned(j_0_reg_144) + unsigned(ap_const_lv7_1));
    lhs_V_fu_230_p3 <= (p_Val2_s_reg_506 & ap_const_lv6_0);
    or_ln340_fu_440_p2 <= (underflow_fu_434_p2 or overflow_fu_410_p2);
    or_ln406_fu_282_p2 <= (r_fu_269_p2 or p_Result_s_fu_251_p3);
    or_ln416_1_fu_368_p2 <= (xor_ln416_2_fu_362_p2 or tmp_32_fu_312_p3);
    or_ln416_fu_374_p2 <= (xor_ln779_fu_356_p2 or or_ln416_1_fu_368_p2);
    or_ln785_fu_398_p2 <= (xor_ln785_fu_392_p2 or p_Result_19_fu_332_p3);
    or_ln786_fu_422_p2 <= (and_ln786_fu_416_p2 or and_ln781_fu_386_p2);
    overflow_fu_410_p2 <= (xor_ln785_1_fu_404_p2 and or_ln785_fu_398_p2);
    p_Result_18_fu_274_p3 <= add_ln1192_1_fu_246_p2(17 downto 17);
    p_Result_19_fu_332_p3 <= p_Val2_10_fu_305_p2(11 downto 11);
    p_Result_s_fu_251_p3 <= ret_V_fu_241_p2(18 downto 18);
    p_Val2_10_fu_305_p2 <= std_logic_vector(unsigned(zext_ln415_fu_301_p1) + unsigned(p_Val2_9_fu_259_p4));
    p_Val2_9_fu_259_p4 <= add_ln1192_1_fu_246_p2(17 downto 6);
    r_fu_269_p2 <= "0" when (trunc_ln718_reg_516 = ap_const_lv5_0) else "1";
    ret_V_fu_241_p2 <= std_logic_vector(signed(r_V_reg_500) + signed(sext_ln728_fu_237_p1));
        sext_ln203_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias2_V_q0),12));

        sext_ln728_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_230_p3),19));

    tmp_31_fu_288_p3 <= r_V_reg_500(5 downto 5);
    tmp_32_fu_312_p3 <= p_Val2_10_fu_305_p2(11 downto 11);
    tmp_35_fu_348_p3 <= ret_V_fu_241_p2(18 downto 18);
    trunc_ln1192_fu_224_p1 <= r_V_fu_446_p2(18 - 1 downto 0);
    trunc_ln718_fu_227_p1 <= r_V_fu_446_p2(5 - 1 downto 0);
    underflow_fu_434_p2 <= (xor_ln786_fu_428_p2 and p_Result_s_fu_251_p3);
    weight2_V_address0 <= zext_ln1116_1_fu_207_p1(13 - 1 downto 0);

    weight2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weight2_V_ce0 <= ap_const_logic_1;
        else 
            weight2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln416_1_fu_320_p2 <= (tmp_32_fu_312_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_362_p2 <= (p_Result_18_fu_274_p3 xor ap_const_lv1_1);
    xor_ln779_fu_356_p2 <= (tmp_35_fu_348_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_404_p2 <= (p_Result_s_fu_251_p3 xor ap_const_lv1_1);
    xor_ln785_fu_392_p2 <= (carry_1_fu_326_p2 xor Range2_all_ones_fu_340_p3);
    xor_ln786_fu_428_p2 <= (or_ln786_fu_422_p2 xor ap_const_lv1_1);
    zext_ln1116_1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_fu_201_p2),64));
    zext_ln1116_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_144),13));
    zext_ln191_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_121),64));
    zext_ln194_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_144),64));
    zext_ln415_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_295_p2),12));
end behav;
