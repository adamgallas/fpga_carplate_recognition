-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv1_Cal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer1_V_ce0 : OUT STD_LOGIC;
    layer1_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    layer2_V_ce0 : OUT STD_LOGIC;
    layer2_V_we0 : OUT STD_LOGIC;
    layer2_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Conv1_Cal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv1_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv1_V_0_ce0 : STD_LOGIC;
    signal conv1_V_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv1_bias_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv1_bias_V_ce0 : STD_LOGIC;
    signal conv1_bias_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln68_fu_265_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_reg_1218 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1226 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln70_1_fu_281_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln70_1_reg_1231 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln68_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln70_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln70_reg_1236 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1244 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln78_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln72_fu_313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln72_reg_1253 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal row_reg_1261 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln79_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln79_reg_1266 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln72_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_333_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_reg_1271 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_reg_1279 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln74_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln79_1_fu_367_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln79_1_reg_1289 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sext_ln77_fu_371_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln77_reg_1294 : STD_LOGIC_VECTOR (18 downto 0);
    signal out_d_2_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_d_2_reg_1302 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln1117_7_fu_440_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_7_reg_1307 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln77_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer2_V_addr_7_reg_1312 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal conv1_V_0_load_reg_1322 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_V_fu_1213_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_reg_1327 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Result_31_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_reg_1342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Val2_36_fu_603_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_36_reg_1348 : STD_LOGIC_VECTOR (11 downto 0);
    signal carry_8_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_8_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_33_fu_629_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_33_reg_1359 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_2_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_2_reg_1364 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal underflow_4_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_5_fu_962_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln340_5_reg_1387 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_4_fu_976_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_1395 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln92_fu_982_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln92_reg_1400 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln90_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_992_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1408 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln94_fu_998_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln94_reg_1413 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln92_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_1008_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_d_reg_1421 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal layer2_V_addr_reg_1426 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln94_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln1494_fu_1192_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1494_reg_1436 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln1494_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_174 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_0_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_0_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_reg_220 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i1_0_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal j2_0_reg_242 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d3_0_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln1116_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_14_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_8_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_5_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_fu_1093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln46_fu_1208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln78_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln79_1_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_355_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_391_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1117_fu_387_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1117_4_fu_399_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1117_fu_407_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1117_5_fu_413_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_6_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_7_fu_430_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_6_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_5_fu_403_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln203_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln203_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln203_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_484_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_476_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln203_2_fu_492_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln203_2_fu_496_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln203_15_fu_502_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_2_fu_519_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_fu_527_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1192_fu_531_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_534_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_534_p2 : signal is "no";
    signal add_ln1192_4_fu_539_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln718_2_fu_563_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_5_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_2_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_2_fu_599_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_35_fu_553_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_78_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_32_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_11_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_12_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_8_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_2_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_4_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_8_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln718_fu_751_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_4_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_773_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_786_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_30_fu_742_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_31_fu_790_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_fu_796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_29_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_9_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_10_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_6_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_7_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_6_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln777_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_30_fu_816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_6_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_946_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln388_fu_954_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_1014_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_1026_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1265_fu_1022_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1265_4_fu_1034_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1265_fu_1038_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_1044_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1265_fu_1048_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1265_fu_1053_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_1065_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_1057_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1265_2_fu_1073_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln1265_1_fu_1077_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1265_4_fu_1083_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_fu_1098_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1265_fu_1102_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rhs_V_fu_1106_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lhs_V_fu_1098_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_fu_1106_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ret_V_4_fu_1110_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1265_fu_1102_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_28_fu_1124_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_28_fu_1124_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_35_fu_1130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_34_fu_1116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1168_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln388_2_fu_1176_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln340_4_fu_1184_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln46_fu_1202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_1213_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component Lenet_HLS_mul_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Conv1_Cal_conv1_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component Conv1_Cal_conv1_bbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    conv1_V_0_U : component Conv1_Cal_conv1_V_0
    generic map (
        DataWidth => 6,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_V_0_address0,
        ce0 => conv1_V_0_ce0,
        q0 => conv1_V_0_q0);

    conv1_bias_V_U : component Conv1_Cal_conv1_bbkb
    generic map (
        DataWidth => 3,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_bias_V_address0,
        ce0 => conv1_bias_V_ce0,
        q0 => conv1_bias_V_q0);

    Lenet_HLS_mul_mulcud_U1 : component Lenet_HLS_mul_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        din0 => conv1_V_0_load_reg_1322,
        din1 => r_V_fu_1213_p1,
        dout => r_V_fu_1213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln77_fu_375_p2 = ap_const_lv1_1))) then 
                col_0_reg_208 <= col_reg_1279;
            elsif (((icmp_ln72_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_0_reg_208 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i1_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_231 <= ap_const_lv6_0;
            elsif (((icmp_ln92_fu_986_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i1_0_reg_231 <= i_4_reg_1395;
            end if; 
        end if;
    end process;

    i_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_174 <= i_reg_1226;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_174 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j2_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j2_0_reg_242 <= j_2_reg_1408;
            elsif (((icmp_ln90_fu_970_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j2_0_reg_242 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln72_fu_317_p2 = ap_const_lv1_1))) then 
                j_0_reg_186 <= j_reg_1244;
            elsif (((icmp_ln68_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    out_d3_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                out_d3_0_reg_253 <= out_d_reg_1421;
            elsif (((icmp_ln92_fu_986_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                out_d3_0_reg_253 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                out_d_0_reg_220 <= out_d_2_reg_1302;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_d_0_reg_220 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    row_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln74_fu_338_p2 = ap_const_lv1_1))) then 
                row_0_reg_197 <= row_reg_1261;
            elsif (((icmp_ln70_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_0_reg_197 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Range2_all_ones_2_reg_1364 <= ret_V_fu_534_p2(18 downto 18);
                and_ln786_7_reg_1370 <= and_ln786_7_fu_683_p2;
                carry_8_reg_1353 <= carry_8_fu_623_p2;
                p_Result_31_reg_1342 <= ret_V_fu_534_p2(18 downto 18);
                p_Result_33_reg_1359 <= p_Val2_36_fu_603_p2(11 downto 11);
                p_Val2_36_reg_1348 <= p_Val2_36_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln1117_7_reg_1307 <= add_ln1117_7_fu_440_p2;
                layer2_V_addr_7_reg_1312 <= zext_ln203_14_fu_507_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln72_fu_317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln79_reg_1271 <= add_ln79_fu_333_p2;
                    zext_ln79_reg_1266(4 downto 0) <= zext_ln79_fu_329_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                col_reg_1279 <= col_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv1_V_0_load_reg_1322 <= conv1_V_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_4_reg_1395 <= i_4_fu_976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1226 <= i_fu_275_p2;
                    zext_ln68_reg_1218(2 downto 0) <= zext_ln68_fu_265_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                icmp_ln1494_reg_1441 <= icmp_ln1494_fu_1196_p2;
                trunc_ln1494_reg_1436 <= trunc_ln1494_fu_1192_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln78_reg_1249 <= icmp_ln78_fu_307_p2;
                    zext_ln72_reg_1253(2 downto 0) <= zext_ln72_fu_313_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_2_reg_1408 <= j_2_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1244 <= j_fu_295_p2;
                    zext_ln70_reg_1236(2 downto 0) <= zext_ln70_fu_285_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_1002_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                layer2_V_addr_reg_1426 <= zext_ln1265_5_fu_1088_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                or_ln340_8_reg_1383 <= or_ln340_8_fu_729_p2;
                overflow_2_reg_1375 <= overflow_2_fu_707_p2;
                underflow_4_reg_1379 <= underflow_4_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_d_2_reg_1302 <= out_d_2_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                out_d_reg_1421 <= out_d_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                r_V_reg_1327 <= r_V_fu_1213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                row_reg_1261 <= row_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                select_ln340_5_reg_1387 <= select_ln340_5_fu_962_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sext_ln77_reg_1294 <= sext_ln77_fu_371_p1;
                    zext_ln79_1_reg_1289(4 downto 0) <= zext_ln79_1_fu_367_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln70_1_reg_1231(2 downto 0) <= zext_ln70_1_fu_281_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_970_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    zext_ln92_reg_1400(5 downto 0) <= zext_ln92_fu_982_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_986_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    zext_ln94_reg_1413(4 downto 0) <= zext_ln94_fu_998_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln68_reg_1218(4 downto 3) <= "00";
    zext_ln70_1_reg_1231(5 downto 3) <= "000";
    zext_ln70_reg_1236(4 downto 3) <= "00";
    zext_ln72_reg_1253(8 downto 3) <= "000000";
    zext_ln79_reg_1266(9 downto 5) <= "00000";
    zext_ln79_1_reg_1289(13 downto 5) <= "000000000";
    zext_ln92_reg_1400(9 downto 6) <= "0000";
    zext_ln94_reg_1413(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln68_fu_269_p2, ap_CS_fsm_state3, icmp_ln78_reg_1249, icmp_ln70_fu_289_p2, ap_CS_fsm_state4, icmp_ln72_fu_317_p2, ap_CS_fsm_state5, icmp_ln74_fu_338_p2, ap_CS_fsm_state7, icmp_ln77_fu_375_p2, ap_CS_fsm_state10, ap_CS_fsm_state16, icmp_ln90_fu_970_p2, ap_CS_fsm_state17, icmp_ln92_fu_986_p2, ap_CS_fsm_state18, icmp_ln94_fu_1002_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln68_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln70_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln72_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln74_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln77_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln78_reg_1249 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln90_fu_970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln92_fu_986_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln94_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range2_all_ones_2_fu_637_p3 <= ret_V_fu_534_p2(18 downto 18);
    Range2_all_ones_fu_824_p3 <= r_V_reg_1327(18 downto 18);
    add_ln1117_5_fu_413_p2 <= std_logic_vector(unsigned(add_ln1117_fu_407_p2) + unsigned(zext_ln70_1_reg_1231));
    add_ln1117_6_fu_434_p2 <= std_logic_vector(unsigned(zext_ln1117_6_fu_418_p1) + unsigned(zext_ln1117_7_fu_430_p1));
    add_ln1117_7_fu_440_p2 <= std_logic_vector(unsigned(add_ln1117_6_fu_434_p2) + unsigned(zext_ln72_reg_1253));
    add_ln1117_fu_407_p2 <= std_logic_vector(unsigned(zext_ln1117_fu_387_p1) + unsigned(zext_ln1117_4_fu_399_p1));
    add_ln1192_4_fu_539_p2 <= std_logic_vector(signed(lhs_V_2_fu_519_p3) + signed(trunc_ln1192_fu_531_p1));
    add_ln1265_4_fu_1083_p2 <= std_logic_vector(unsigned(sub_ln1265_1_fu_1077_p2) + unsigned(zext_ln94_reg_1413));
    add_ln1265_fu_1048_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_1044_p1) + signed(zext_ln92_reg_1400));
    add_ln203_15_fu_502_p2 <= std_logic_vector(unsigned(sub_ln203_2_fu_496_p2) + unsigned(zext_ln79_1_reg_1289));
    add_ln203_fu_467_p2 <= std_logic_vector(signed(sext_ln203_fu_463_p1) + signed(zext_ln79_reg_1266));
    add_ln79_1_fu_350_p2 <= std_logic_vector(unsigned(col_0_reg_208) + unsigned(zext_ln70_reg_1236));
    add_ln79_fu_333_p2 <= std_logic_vector(unsigned(zext_ln68_reg_1218) + unsigned(row_0_reg_197));
    and_ln415_2_fu_593_p2 <= (tmp_77_fu_586_p3 and or_ln406_fu_580_p2);
    and_ln415_fu_780_p2 <= (tmp_70_fu_773_p3 and r_fu_767_p2);
    and_ln777_fu_831_p2 <= (xor_ln416_9_fu_804_p2 and p_Result_29_fu_760_p3);
    and_ln781_2_fu_689_p2 <= (carry_8_reg_1353 and Range2_all_ones_2_reg_1364);
    and_ln781_fu_874_p2 <= (carry_6_fu_810_p2 and Range2_all_ones_fu_824_p3);
    and_ln786_7_fu_683_p2 <= (p_Result_33_fu_629_p3 and deleted_ones_4_fu_677_p2);
    and_ln786_fu_904_p2 <= (p_Result_30_fu_816_p3 and deleted_ones_fu_868_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, icmp_ln90_fu_970_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln90_fu_970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, icmp_ln90_fu_970_p2)
    begin
        if (((icmp_ln90_fu_970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_6_fu_810_p2 <= (xor_ln416_9_fu_804_p2 and p_Result_29_fu_760_p3);
    carry_8_fu_623_p2 <= (xor_ln416_11_fu_617_p2 and p_Result_32_fu_572_p3);
    col_fu_344_p2 <= std_logic_vector(unsigned(col_0_reg_208) + unsigned(ap_const_lv5_1));
    conv1_V_0_address0 <= zext_ln1117_8_fu_512_p1(8 - 1 downto 0);

    conv1_V_0_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv1_V_0_ce0 <= ap_const_logic_1;
        else 
            conv1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_bias_V_address0 <= zext_ln95_fu_1093_p1(3 - 1 downto 0);

    conv1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv1_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_4_fu_677_p2 <= (or_ln416_fu_671_p2 and Range2_all_ones_2_fu_637_p3);
    deleted_ones_fu_868_p2 <= (or_ln416_7_fu_862_p2 and Range2_all_ones_fu_824_p3);
    i_4_fu_976_p2 <= std_logic_vector(unsigned(i1_0_reg_231) + unsigned(ap_const_lv6_1));
    i_fu_275_p2 <= std_logic_vector(unsigned(i_0_reg_174) + unsigned(ap_const_lv3_1));
    icmp_ln1494_fu_1196_p2 <= "1" when (signed(select_ln340_4_fu_1184_p3) > signed(ap_const_lv12_0)) else "0";
    icmp_ln68_fu_269_p2 <= "1" when (i_0_reg_174 = ap_const_lv3_5) else "0";
    icmp_ln70_fu_289_p2 <= "1" when (j_0_reg_186 = ap_const_lv3_5) else "0";
    icmp_ln72_fu_317_p2 <= "1" when (row_0_reg_197 = ap_const_lv5_1C) else "0";
    icmp_ln74_fu_338_p2 <= "1" when (col_0_reg_208 = ap_const_lv5_1C) else "0";
    icmp_ln77_fu_375_p2 <= "1" when (out_d_0_reg_220 = ap_const_lv3_6) else "0";
    icmp_ln78_fu_307_p2 <= "1" when (or_ln78_fu_301_p2 = ap_const_lv3_0) else "0";
    icmp_ln90_fu_970_p2 <= "1" when (i1_0_reg_231 = ap_const_lv6_20) else "0";
    icmp_ln92_fu_986_p2 <= "1" when (j2_0_reg_242 = ap_const_lv5_1C) else "0";
    icmp_ln94_fu_1002_p2 <= "1" when (out_d3_0_reg_253 = ap_const_lv3_6) else "0";
    j_2_fu_992_p2 <= std_logic_vector(unsigned(j2_0_reg_242) + unsigned(ap_const_lv5_1));
    j_fu_295_p2 <= std_logic_vector(unsigned(j_0_reg_186) + unsigned(ap_const_lv3_1));
    layer1_V_address0 <= zext_ln1116_fu_362_p1(10 - 1 downto 0);

    layer1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer1_V_ce0 <= ap_const_logic_1;
        else 
            layer1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_V_address0_assign_proc : process(icmp_ln78_reg_1249, layer2_V_addr_7_reg_1312, ap_CS_fsm_state10, overflow_2_reg_1375, ap_CS_fsm_state12, underflow_4_reg_1379, or_ln340_8_reg_1383, layer2_V_addr_reg_1426, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            layer2_V_address0 <= layer2_V_addr_reg_1426;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (overflow_2_reg_1375 = ap_const_lv1_1)) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (overflow_2_reg_1375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (underflow_4_reg_1379 = ap_const_lv1_1)))) then 
            layer2_V_address0 <= layer2_V_addr_7_reg_1312;
        else 
            layer2_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    layer2_V_ce0_assign_proc : process(icmp_ln78_reg_1249, ap_CS_fsm_state10, overflow_2_reg_1375, ap_CS_fsm_state12, underflow_4_reg_1379, or_ln340_8_reg_1383, ap_CS_fsm_state19, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (overflow_2_reg_1375 = ap_const_lv1_1)) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (overflow_2_reg_1375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (underflow_4_reg_1379 = ap_const_lv1_1)))) then 
            layer2_V_ce0 <= ap_const_logic_1;
        else 
            layer2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_V_d0_assign_proc : process(icmp_ln78_reg_1249, p_Val2_36_reg_1348, overflow_2_reg_1375, ap_CS_fsm_state12, underflow_4_reg_1379, or_ln340_8_reg_1383, select_ln340_5_reg_1387, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state15, zext_ln46_fu_1208_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer2_V_d0 <= zext_ln46_fu_1208_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            layer2_V_d0 <= select_ln340_5_reg_1387;
        elsif (((icmp_ln78_reg_1249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (overflow_2_reg_1375 = ap_const_lv1_1))) then 
            layer2_V_d0 <= ap_const_lv12_7FF;
        elsif (((icmp_ln78_reg_1249 = ap_const_lv1_0) and (overflow_2_reg_1375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (underflow_4_reg_1379 = ap_const_lv1_1))) then 
            layer2_V_d0 <= ap_const_lv12_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            layer2_V_d0 <= p_Val2_36_reg_1348;
        else 
            layer2_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    layer2_V_we0_assign_proc : process(icmp_ln78_reg_1249, overflow_2_reg_1375, ap_CS_fsm_state12, underflow_4_reg_1379, or_ln340_8_reg_1383, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (overflow_2_reg_1375 = ap_const_lv1_1)) or ((icmp_ln78_reg_1249 = ap_const_lv1_0) and (overflow_2_reg_1375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln340_8_reg_1383 = ap_const_lv1_1) and (underflow_4_reg_1379 = ap_const_lv1_1)))) then 
            layer2_V_we0 <= ap_const_logic_1;
        else 
            layer2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_2_fu_519_p3 <= (layer2_V_q0 & ap_const_lv6_0);
    lhs_V_fu_1098_p0 <= layer2_V_q0;
        lhs_V_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_1098_p0),13));

    or_ln340_5_fu_928_p2 <= (underflow_fu_922_p2 or overflow_fu_898_p2);
    or_ln340_6_fu_940_p2 <= (or_ln340_7_fu_934_p2 or and_ln781_fu_874_p2);
    or_ln340_7_fu_934_p2 <= (xor_ln785_6_fu_892_p2 or and_ln786_fu_904_p2);
    or_ln340_8_fu_729_p2 <= (underflow_4_fu_724_p2 or overflow_2_fu_707_p2);
    or_ln340_fu_1162_p2 <= (xor_ln340_2_fu_1156_p2 or p_Result_35_fu_1130_p3);
    or_ln406_fu_580_p2 <= (r_5_fu_566_p2 or p_Result_31_fu_545_p3);
    or_ln416_6_fu_856_p2 <= (xor_ln416_10_fu_850_p2 or tmp_71_fu_796_p3);
    or_ln416_7_fu_862_p2 <= (xor_ln779_fu_844_p2 or or_ln416_6_fu_856_p2);
    or_ln416_8_fu_665_p2 <= (xor_ln416_12_fu_659_p2 or tmp_78_fu_609_p3);
    or_ln416_fu_671_p2 <= (xor_ln779_2_fu_653_p2 or or_ln416_8_fu_665_p2);
    or_ln785_2_fu_697_p2 <= (xor_ln785_7_fu_693_p2 or p_Result_33_reg_1359);
    or_ln785_fu_886_p2 <= (xor_ln785_fu_880_p2 or p_Result_30_fu_816_p3);
    or_ln786_2_fu_713_p2 <= (and_ln786_7_reg_1370 or and_ln781_2_fu_689_p2);
    or_ln786_fu_910_p2 <= (and_ln786_fu_904_p2 or and_ln781_fu_874_p2);
    or_ln78_fu_301_p2 <= (j_0_reg_186 or i_0_reg_174);
    out_d_2_fu_381_p2 <= std_logic_vector(unsigned(out_d_0_reg_220) + unsigned(ap_const_lv3_1));
    out_d_fu_1008_p2 <= std_logic_vector(unsigned(out_d3_0_reg_253) + unsigned(ap_const_lv3_1));
    overflow_2_fu_707_p2 <= (xor_ln785_8_fu_702_p2 and or_ln785_2_fu_697_p2);
    overflow_fu_898_p2 <= (xor_ln785_6_fu_892_p2 and or_ln785_fu_886_p2);
    p_Result_29_fu_760_p3 <= r_V_reg_1327(17 downto 17);
    p_Result_30_fu_816_p3 <= p_Val2_31_fu_790_p2(11 downto 11);
    p_Result_31_fu_545_p3 <= ret_V_fu_534_p2(18 downto 18);
    p_Result_32_fu_572_p3 <= add_ln1192_4_fu_539_p2(17 downto 17);
    p_Result_33_fu_629_p3 <= p_Val2_36_fu_603_p2(11 downto 11);
    p_Result_34_fu_1116_p3 <= ret_V_4_fu_1110_p2(12 downto 12);
    p_Result_35_fu_1130_p3 <= p_Val2_28_fu_1124_p2(11 downto 11);
    p_Result_s_fu_735_p3 <= r_V_reg_1327(16 downto 16);
    p_Val2_28_fu_1124_p1 <= layer2_V_q0;
    p_Val2_28_fu_1124_p2 <= std_logic_vector(signed(sext_ln1265_fu_1102_p1) + signed(p_Val2_28_fu_1124_p1));
    p_Val2_30_fu_742_p4 <= r_V_reg_1327(17 downto 6);
    p_Val2_31_fu_790_p2 <= std_logic_vector(unsigned(zext_ln415_fu_786_p1) + unsigned(p_Val2_30_fu_742_p4));
    p_Val2_35_fu_553_p4 <= add_ln1192_4_fu_539_p2(17 downto 6);
    p_Val2_36_fu_603_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_599_p1) + unsigned(p_Val2_35_fu_553_p4));
    p_shl6_cast_fu_1057_p3 <= (trunc_ln1265_fu_1053_p1 & ap_const_lv5_0);
    p_shl_cast_fu_476_p3 <= (trunc_ln203_fu_472_p1 & ap_const_lv5_0);
    r_4_fu_754_p2 <= "0" when (trunc_ln718_fu_751_p1 = ap_const_lv5_0) else "1";
    r_5_fu_566_p2 <= "0" when (trunc_ln718_2_fu_563_p1 = ap_const_lv5_0) else "1";
    r_V_fu_1213_p1 <= sext_ln77_reg_1294(12 - 1 downto 0);
    r_fu_767_p2 <= (r_4_fu_754_p2 or p_Result_s_fu_735_p3);
    ret_V_4_fu_1110_p2 <= std_logic_vector(signed(lhs_V_fu_1098_p1) + signed(rhs_V_fu_1106_p1));
    ret_V_fu_534_p2 <= std_logic_vector(signed(r_V_reg_1327) + signed(sext_ln728_fu_527_p1));
    rhs_V_fu_1106_p0 <= conv1_bias_V_q0;
        rhs_V_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_1106_p0),13));

    row_fu_323_p2 <= std_logic_vector(unsigned(row_0_reg_197) + unsigned(ap_const_lv5_1));
    select_ln340_2_fu_1168_p3 <= 
        ap_const_lv12_7FF when (xor_ln340_fu_1150_p2(0) = '1') else 
        p_Val2_28_fu_1124_p2;
    select_ln340_4_fu_1184_p3 <= 
        select_ln340_2_fu_1168_p3 when (or_ln340_fu_1162_p2(0) = '1') else 
        select_ln388_2_fu_1176_p3;
    select_ln340_5_fu_962_p3 <= 
        select_ln340_fu_946_p3 when (or_ln340_6_fu_940_p2(0) = '1') else 
        select_ln388_fu_954_p3;
    select_ln340_fu_946_p3 <= 
        ap_const_lv12_7FF when (or_ln340_5_fu_928_p2(0) = '1') else 
        p_Val2_31_fu_790_p2;
    select_ln388_2_fu_1176_p3 <= 
        ap_const_lv12_800 when (underflow_3_fu_1144_p2(0) = '1') else 
        p_Val2_28_fu_1124_p2;
    select_ln388_fu_954_p3 <= 
        ap_const_lv12_800 when (underflow_fu_922_p2(0) = '1') else 
        p_Val2_31_fu_790_p2;
    select_ln46_fu_1202_p3 <= 
        trunc_ln1494_reg_1436 when (icmp_ln1494_reg_1441(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1265_1_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1265_fu_1038_p2),10));

        sext_ln1265_2_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_63_fu_1065_p3),14));

    sext_ln1265_fu_1102_p0 <= conv1_bias_V_q0;
        sext_ln1265_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_1102_p0),12));

        sext_ln203_2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_fu_484_p3),14));

        sext_ln203_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln203_fu_457_p2),10));

        sext_ln728_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_2_fu_519_p3),19));

        sext_ln77_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer1_V_q0),19));

    sub_ln1265_1_fu_1077_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1057_p3) - unsigned(sext_ln1265_2_fu_1073_p1));
    sub_ln1265_fu_1038_p2 <= std_logic_vector(unsigned(zext_ln1265_fu_1022_p1) - unsigned(zext_ln1265_4_fu_1034_p1));
    sub_ln203_2_fu_496_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_476_p3) - unsigned(sext_ln203_2_fu_492_p1));
    sub_ln203_fu_457_p2 <= std_logic_vector(unsigned(zext_ln203_fu_453_p1) - unsigned(zext_ln1117_5_fu_403_p1));
    tmp_12_fu_1014_p3 <= (out_d3_0_reg_253 & ap_const_lv5_0);
    tmp_13_fu_1026_p3 <= (out_d3_0_reg_253 & ap_const_lv2_0);
    tmp_14_fu_355_p3 <= (add_ln79_reg_1271 & add_ln79_1_fu_350_p2);
    tmp_15_fu_391_p3 <= (out_d_0_reg_220 & ap_const_lv2_0);
    tmp_16_fu_445_p3 <= (out_d_0_reg_220 & ap_const_lv5_0);
    tmp_63_fu_1065_p3 <= (add_ln1265_fu_1048_p2 & ap_const_lv2_0);
    tmp_66_fu_422_p3 <= (add_ln1117_5_fu_413_p2 & ap_const_lv2_0);
    tmp_67_fu_484_p3 <= (add_ln203_fu_467_p2 & ap_const_lv2_0);
    tmp_70_fu_773_p3 <= r_V_reg_1327(5 downto 5);
    tmp_71_fu_796_p3 <= p_Val2_31_fu_790_p2(11 downto 11);
    tmp_74_fu_837_p3 <= r_V_reg_1327(18 downto 18);
    tmp_77_fu_586_p3 <= r_V_reg_1327(5 downto 5);
    tmp_78_fu_609_p3 <= p_Val2_36_fu_603_p2(11 downto 11);
    tmp_81_fu_645_p3 <= ret_V_fu_534_p2(18 downto 18);
    trunc_ln1192_fu_531_p1 <= r_V_reg_1327(18 - 1 downto 0);
    trunc_ln1265_fu_1053_p1 <= add_ln1265_fu_1048_p2(9 - 1 downto 0);
    trunc_ln1494_fu_1192_p1 <= select_ln340_4_fu_1184_p3(11 - 1 downto 0);
    trunc_ln203_fu_472_p1 <= add_ln203_fu_467_p2(9 - 1 downto 0);
    trunc_ln718_2_fu_563_p1 <= r_V_reg_1327(5 - 1 downto 0);
    trunc_ln718_fu_751_p1 <= r_V_reg_1327(5 - 1 downto 0);
    underflow_3_fu_1144_p2 <= (xor_ln786_fu_1138_p2 and p_Result_34_fu_1116_p3);
    underflow_4_fu_724_p2 <= (xor_ln786_4_fu_718_p2 and p_Result_31_reg_1342);
    underflow_fu_922_p2 <= (xor_ln786_3_fu_916_p2 and p_Result_s_fu_735_p3);
    xor_ln340_2_fu_1156_p2 <= (p_Result_34_fu_1116_p3 xor ap_const_lv1_1);
    xor_ln340_fu_1150_p2 <= (p_Result_35_fu_1130_p3 xor p_Result_34_fu_1116_p3);
    xor_ln416_10_fu_850_p2 <= (p_Result_29_fu_760_p3 xor ap_const_lv1_1);
    xor_ln416_11_fu_617_p2 <= (tmp_78_fu_609_p3 xor ap_const_lv1_1);
    xor_ln416_12_fu_659_p2 <= (p_Result_32_fu_572_p3 xor ap_const_lv1_1);
    xor_ln416_9_fu_804_p2 <= (tmp_71_fu_796_p3 xor ap_const_lv1_1);
    xor_ln779_2_fu_653_p2 <= (tmp_81_fu_645_p3 xor ap_const_lv1_1);
    xor_ln779_fu_844_p2 <= (tmp_74_fu_837_p3 xor ap_const_lv1_1);
    xor_ln785_6_fu_892_p2 <= (p_Result_s_fu_735_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_693_p2 <= (carry_8_reg_1353 xor Range2_all_ones_2_reg_1364);
    xor_ln785_8_fu_702_p2 <= (p_Result_31_reg_1342 xor ap_const_lv1_1);
    xor_ln785_fu_880_p2 <= (and_ln777_fu_831_p2 xor Range2_all_ones_fu_824_p3);
    xor_ln786_3_fu_916_p2 <= (or_ln786_fu_910_p2 xor ap_const_lv1_1);
    xor_ln786_4_fu_718_p2 <= (or_ln786_2_fu_713_p2 xor ap_const_lv1_1);
    xor_ln786_fu_1138_p2 <= (p_Result_35_fu_1130_p3 xor ap_const_lv1_1);
    zext_ln1116_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_355_p3),64));
    zext_ln1117_4_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_391_p3),6));
    zext_ln1117_5_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_391_p3),9));
    zext_ln1117_6_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_5_fu_413_p2),9));
    zext_ln1117_7_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_422_p3),9));
    zext_ln1117_8_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_7_reg_1307),64));
    zext_ln1117_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_220),6));
    zext_ln1265_4_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_1026_p3),9));
    zext_ln1265_5_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1265_4_fu_1083_p2),64));
    zext_ln1265_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1014_p3),9));
    zext_ln203_14_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_15_fu_502_p2),64));
    zext_ln203_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_445_p3),9));
    zext_ln415_2_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_2_fu_593_p2),12));
    zext_ln415_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_780_p2),12));
    zext_ln46_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_fu_1202_p3),12));
    zext_ln68_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_174),5));
    zext_ln70_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_174),6));
    zext_ln70_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_186),5));
    zext_ln72_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_186),9));
    zext_ln79_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_208),14));
    zext_ln79_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_0_reg_197),10));
    zext_ln92_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_231),10));
    zext_ln94_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_242),14));
    zext_ln95_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d3_0_reg_253),64));
end behav;
