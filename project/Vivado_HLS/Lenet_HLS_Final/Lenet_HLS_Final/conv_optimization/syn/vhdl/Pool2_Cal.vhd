-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool2_Cal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    layer4_V_ce0 : OUT STD_LOGIC;
    layer4_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer4_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    layer4_V_ce1 : OUT STD_LOGIC;
    layer4_V_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer5_V_ce0 : OUT STD_LOGIC;
    layer5_V_we0 : OUT STD_LOGIC;
    layer5_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Pool2_Cal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_d_fu_188_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln1494_fu_222_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1494_reg_520 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln162_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_reg_526 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_2_fu_285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1494_2_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln164_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln168_fu_291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln168_reg_539 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_4_fu_334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1494_4_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln169_fu_340_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln169_reg_550 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_2_fu_375_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_2_reg_556 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln166_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1494_6_fu_401_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_6_reg_569 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln167_fu_406_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln167_reg_574 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1494_8_fu_426_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_8_reg_585 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_431_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln203_3_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln203_3_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln203_4_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln203_4_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln203_5_fu_491_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_5_reg_617 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_fu_496_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_622 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln203_fu_502_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln203_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_d_0_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_152 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln1494_10_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_13_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_11_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_14_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_4_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_198_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_210_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1494_2_fu_218_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1494_1_fu_206_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_228_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1494_fu_194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_3_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1494_1_fu_256_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_261_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_273_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1494_4_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_5_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln168_fu_295_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1494_6_fu_301_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1494_3_fu_305_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_310_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_322_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1494_7_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_8_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_344_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_1_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_1_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_2_fu_363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1494_9_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_5_fu_391_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1494_12_fu_412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_7_fu_416_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln167_fu_445_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln167_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln168_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln168_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_477_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_3_fu_487_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_152 <= i_fu_431_p2;
            elsif (((icmp_ln162_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_152 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                in_d_0_reg_141 <= in_d_reg_515;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                in_d_0_reg_141 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_164 <= j_reg_622;
            elsif (((icmp_ln164_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln164_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    add_ln1494_2_reg_534(63 downto 1) <= add_ln1494_2_fu_285_p2(63 downto 1);
                    add_ln1494_4_reg_545(63 downto 2) <= add_ln1494_4_fu_334_p2(63 downto 2);
                add_ln203_2_reg_556 <= add_ln203_2_fu_375_p2;
                    trunc_ln168_reg_539(11 downto 1) <= trunc_ln168_fu_291_p1(11 downto 1);
                    trunc_ln169_reg_550(11 downto 2) <= trunc_ln169_fu_340_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln166_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln1494_6_reg_569 <= add_ln1494_6_fu_401_p2;
                    add_ln1494_8_reg_585(11 downto 1) <= add_ln1494_8_fu_426_p2(11 downto 1);
                    or_ln167_reg_574(3 downto 1) <= or_ln167_fu_406_p2(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln162_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    add_ln1494_reg_520(8 downto 1) <= add_ln1494_fu_222_p2(8 downto 1);
                add_ln203_reg_526 <= add_ln203_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln203_3_reg_605 <= add_ln203_3_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln203_4_reg_611 <= add_ln203_4_fu_472_p2;
                add_ln203_5_reg_617 <= add_ln203_5_fu_491_p2;
                j_reg_622 <= j_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                in_d_reg_515 <= in_d_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                select_ln203_reg_637 <= select_ln203_fu_502_p3;
            end if;
        end if;
    end process;
    add_ln1494_reg_520(0) <= '0';
    add_ln1494_2_reg_534(0) <= '0';
    trunc_ln168_reg_539(0) <= '0';
    add_ln1494_4_reg_545(1 downto 0) <= "10";
    trunc_ln169_reg_550(1 downto 0) <= "10";
    or_ln167_reg_574(0) <= '1';
    add_ln1494_8_reg_585(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln162_fu_182_p2, ap_CS_fsm_state3, icmp_ln164_fu_246_p2, ap_CS_fsm_state4, icmp_ln166_fu_381_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln162_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln164_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln166_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1494_1_fu_256_p2 <= std_logic_vector(unsigned(zext_ln1494_3_fu_252_p1) + unsigned(add_ln1494_reg_520));
    add_ln1494_2_fu_285_p2 <= std_logic_vector(unsigned(zext_ln1494_4_fu_269_p1) + unsigned(zext_ln1494_5_fu_281_p1));
    add_ln1494_3_fu_305_p2 <= std_logic_vector(unsigned(zext_ln1494_6_fu_301_p1) + unsigned(add_ln1494_reg_520));
    add_ln1494_4_fu_334_p2 <= std_logic_vector(unsigned(zext_ln1494_7_fu_318_p1) + unsigned(zext_ln1494_8_fu_330_p1));
    add_ln1494_5_fu_391_p2 <= std_logic_vector(unsigned(trunc_ln168_reg_539) + unsigned(zext_ln1494_9_fu_387_p1));
    add_ln1494_6_fu_401_p2 <= std_logic_vector(unsigned(trunc_ln169_reg_550) + unsigned(zext_ln1494_9_fu_387_p1));
    add_ln1494_7_fu_416_p2 <= std_logic_vector(unsigned(trunc_ln168_reg_539) + unsigned(zext_ln1494_12_fu_412_p1));
    add_ln1494_8_fu_426_p2 <= std_logic_vector(unsigned(trunc_ln169_reg_550) + unsigned(zext_ln1494_12_fu_412_p1));
    add_ln1494_fu_222_p2 <= std_logic_vector(unsigned(zext_ln1494_2_fu_218_p1) + unsigned(zext_ln1494_1_fu_206_p1));
    add_ln203_1_fu_358_p2 <= std_logic_vector(unsigned(zext_ln203_1_fu_354_p1) + unsigned(add_ln203_reg_526));
    add_ln203_2_fu_375_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_367_p3) + unsigned(zext_ln203_2_fu_363_p1));
    add_ln203_3_fu_456_p2 <= std_logic_vector(unsigned(add_ln1494_2_reg_534) + unsigned(zext_ln167_fu_452_p1));
    add_ln203_4_fu_472_p2 <= std_logic_vector(unsigned(add_ln1494_4_reg_545) + unsigned(zext_ln168_fu_468_p1));
    add_ln203_5_fu_491_p2 <= std_logic_vector(unsigned(add_ln203_2_reg_556) + unsigned(zext_ln203_3_fu_487_p1));
    add_ln203_fu_240_p2 <= std_logic_vector(unsigned(zext_ln1494_fu_194_p1) + unsigned(zext_ln203_fu_236_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln162_fu_182_p2)
    begin
        if ((((icmp_ln162_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln162_fu_182_p2)
    begin
        if (((icmp_ln162_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p2 <= "1" when (signed(layer4_V_q0) > signed(layer4_V_q1)) else "0";
    i_fu_431_p2 <= std_logic_vector(unsigned(i_0_reg_152) + unsigned(ap_const_lv4_2));
    icmp_ln162_fu_182_p2 <= "1" when (in_d_0_reg_141 = ap_const_lv5_10) else "0";
    icmp_ln164_fu_246_p2 <= "1" when (unsigned(i_0_reg_152) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln166_fu_381_p2 <= "1" when (unsigned(j_0_reg_164) < unsigned(ap_const_lv4_A)) else "0";
    in_d_fu_188_p2 <= std_logic_vector(unsigned(in_d_0_reg_141) + unsigned(ap_const_lv5_1));
    j_fu_496_p2 <= std_logic_vector(unsigned(j_0_reg_164) + unsigned(ap_const_lv4_2));

    layer4_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln203_3_reg_605, ap_CS_fsm_state7, select_ln203_reg_637, ap_CS_fsm_state9, zext_ln1494_10_fu_396_p1, zext_ln1494_11_fu_437_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            layer4_V_address0 <= select_ln203_reg_637(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer4_V_address0 <= add_ln203_3_reg_605(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer4_V_address0 <= zext_ln1494_11_fu_437_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer4_V_address0 <= zext_ln1494_10_fu_396_p1(11 - 1 downto 0);
        else 
            layer4_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    layer4_V_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, add_ln203_4_reg_611, ap_CS_fsm_state7, zext_ln1494_13_fu_421_p1, zext_ln1494_14_fu_441_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer4_V_address1 <= add_ln203_4_reg_611(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer4_V_address1 <= zext_ln1494_14_fu_441_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer4_V_address1 <= zext_ln1494_13_fu_421_p1(11 - 1 downto 0);
        else 
            layer4_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    layer4_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            layer4_V_ce0 <= ap_const_logic_1;
        else 
            layer4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer4_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            layer4_V_ce1 <= ap_const_logic_1;
        else 
            layer4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    layer5_V_address0 <= zext_ln203_4_fu_508_p1(9 - 1 downto 0);

    layer5_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            layer5_V_ce0 <= ap_const_logic_1;
        else 
            layer5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer5_V_d0 <= layer4_V_q0;

    layer5_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            layer5_V_we0 <= ap_const_logic_1;
        else 
            layer5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln167_fu_406_p2 <= (j_0_reg_164 or ap_const_lv4_1);
    or_ln168_fu_295_p2 <= (i_0_reg_152 or ap_const_lv4_1);
    p_shl3_cast_fu_367_p3 <= (add_ln203_1_fu_358_p2 & ap_const_lv2_0);
    select_ln167_fu_445_p3 <= 
        j_0_reg_164 when (grp_fu_176_p2(0) = '1') else 
        or_ln167_reg_574;
    select_ln168_fu_461_p3 <= 
        j_0_reg_164 when (grp_fu_176_p2(0) = '1') else 
        or_ln167_reg_574;
    select_ln203_fu_502_p3 <= 
        add_ln203_3_reg_605 when (grp_fu_176_p2(0) = '1') else 
        add_ln203_4_reg_611;
    tmp_10_fu_322_p3 <= (add_ln1494_3_fu_305_p2 & ap_const_lv1_0);
    tmp_11_fu_344_p4 <= i_0_reg_152(3 downto 1);
    tmp_12_fu_477_p4 <= j_0_reg_164(3 downto 1);
    tmp_1_fu_198_p3 <= (in_d_0_reg_141 & ap_const_lv3_0);
    tmp_2_fu_210_p3 <= (in_d_0_reg_141 & ap_const_lv1_0);
    tmp_3_fu_228_p3 <= (in_d_0_reg_141 & ap_const_lv2_0);
    tmp_7_fu_261_p3 <= (add_ln1494_1_fu_256_p2 & ap_const_lv3_0);
    tmp_8_fu_273_p3 <= (add_ln1494_1_fu_256_p2 & ap_const_lv1_0);
    tmp_9_fu_310_p3 <= (add_ln1494_3_fu_305_p2 & ap_const_lv3_0);
    trunc_ln168_fu_291_p1 <= add_ln1494_2_fu_285_p2(12 - 1 downto 0);
    trunc_ln169_fu_340_p1 <= add_ln1494_4_fu_334_p2(12 - 1 downto 0);
    zext_ln1494_10_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_5_fu_391_p2),64));
    zext_ln1494_11_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_6_reg_569),64));
    zext_ln1494_12_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln167_fu_406_p2),12));
    zext_ln1494_13_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_7_fu_416_p2),64));
    zext_ln1494_14_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_8_reg_585),64));
    zext_ln1494_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_198_p3),9));
    zext_ln1494_2_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_210_p3),9));
    zext_ln1494_3_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_152),9));
    zext_ln1494_4_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_261_p3),64));
    zext_ln1494_5_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_273_p3),64));
    zext_ln1494_6_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln168_fu_295_p2),9));
    zext_ln1494_7_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_310_p3),64));
    zext_ln1494_8_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_322_p3),64));
    zext_ln1494_9_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_164),12));
    zext_ln1494_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_reg_141),8));
    zext_ln167_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln167_fu_445_p3),64));
    zext_ln168_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln168_fu_461_p3),64));
    zext_ln203_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_344_p4),8));
    zext_ln203_2_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_358_p2),10));
    zext_ln203_3_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_477_p4),10));
    zext_ln203_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_reg_617),64));
    zext_ln203_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_228_p3),8));
end behav;
