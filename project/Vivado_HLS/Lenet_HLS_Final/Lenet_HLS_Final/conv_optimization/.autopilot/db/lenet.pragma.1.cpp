# 1 "src/lenet.cpp"
# 1 "src/lenet.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "src/lenet.cpp" 2
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 275 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 276 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 279 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3



namespace std {

  template<typename _Alloc>
    class allocator;







  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 82 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stringfwd.h" 3
}
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 1 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 31 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 3 4
typedef __typeof__(((int*)0)-((int*)0)) ptrdiff_t;



typedef __typeof__(sizeof(int)) size_t;
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3




namespace std {

  using ::ptrdiff_t;
  using ::size_t;

}
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3








# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 10 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 10 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 277 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 1 3
# 13 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 674 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 674 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 675 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 13 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
}


#pragma pack(pop)
# 277 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 370 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long size_t;
# 380 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ssize_t;
# 392 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long intptr_t;
# 405 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 418 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ptrdiff_t;
# 436 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 456 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;







typedef __time64_t time_t;
# 607 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;



extern "C" {



const char *__mingw_get_crt_info (void);


}


#pragma pack(pop)
# 9 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 27 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;





  __attribute__ ((__dllimport__)) FILE * __iob_func(void);
# 66 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned long _fsize_t;




  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __extension__ long long size;
    wchar_t name[260];
  };
# 164 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pctype;
# 178 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__wctype;
# 193 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  extern unsigned short ** __imp__pwctype;
# 217 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  int iswalpha(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalpha_l(wint_t _C,_locale_t _Locale);
  int iswupper(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswupper_l(wint_t _C,_locale_t _Locale);
  int iswlower(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswlower_l(wint_t _C,_locale_t _Locale);
  int iswdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswdigit_l(wint_t _C,_locale_t _Locale);
  int iswxdigit(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int iswspace(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswspace_l(wint_t _C,_locale_t _Locale);
  int iswpunct(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswpunct_l(wint_t _C,_locale_t _Locale);
  int iswalnum(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswalnum_l(wint_t _C,_locale_t _Locale);
  int iswprint(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswprint_l(wint_t _C,_locale_t _Locale);
  int iswgraph(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswgraph_l(wint_t _C,_locale_t _Locale);
  int iswcntrl(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int iswascii(wint_t _C);
  int isleadbyte(int _C);
  __attribute__ ((__dllimport__)) int _isleadbyte_l(int _C,_locale_t _Locale);
  wint_t towupper(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t towlower(wint_t _C);
  __attribute__ ((__dllimport__)) wint_t _towlower_l(wint_t _C,_locale_t _Locale);
  int iswctype(wint_t _C,wctype_t _Type);
  __attribute__ ((__dllimport__)) int _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsymf(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsymf_l(wint_t _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __iswcsym(wint_t _C);
  __attribute__ ((__dllimport__)) int _iswcsym_l(wint_t _C,_locale_t _Locale);
  int is_wctype(wint_t _C,wctype_t _Type);


  int iswblank(wint_t _C);







  __attribute__ ((__dllimport__)) wchar_t * _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) wchar_t * _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  wchar_t * _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);
  __attribute__ ((__dllimport__)) int _wchdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wmkdir(const wchar_t *_Path);
  __attribute__ ((__dllimport__)) int _wrmdir(const wchar_t *_Path);





  __attribute__ ((__dllimport__)) int _waccess(const wchar_t *_Filename,int _AccessMode);
  __attribute__ ((__dllimport__)) int _wchmod(const wchar_t *_Filename,int _Mode);
  __attribute__ ((__dllimport__)) int _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wunlink(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) int _wrename(const wchar_t *_NewFilename,const wchar_t *_OldFilename);
  __attribute__ ((__dllimport__)) wchar_t * _wmktemp(wchar_t *_TemplateName) ;
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) intptr_t _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  __attribute__ ((__dllimport__)) int _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);
  __attribute__ ((__dllimport__)) errno_t _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);
  __attribute__ ((__dllimport__)) int _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  __attribute__ ((__dllimport__)) int _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;




  __attribute__ ((__dllimport__)) wchar_t * _wsetlocale(int _Category,const wchar_t *_Locale);





  __attribute__ ((__dllimport__)) intptr_t _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);


  __attribute__ ((__dllimport__)) int _wsystem(const wchar_t *_Command);
# 360 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef unsigned short _ino_t;

  typedef unsigned short ino_t;





  typedef unsigned int _dev_t;

  typedef unsigned int dev_t;







  typedef long _off_t;

  typedef long off_t;






  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 412 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  struct _stat32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __extension__ long long st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };
# 493 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) int _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  __attribute__ ((__dllimport__)) int _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);
# 507 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t *_cgetws(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wint_t _getwch(void);
  __attribute__ ((__dllimport__)) wint_t _getwche(void);
  __attribute__ ((__dllimport__)) wint_t _putwch(wchar_t _WCh);
  __attribute__ ((__dllimport__)) wint_t _ungetwch(wint_t _WCh);
  __attribute__ ((__dllimport__)) int _cputws(const wchar_t *_String);
  __attribute__ ((__dllimport__)) int _cwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _cwscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int _cwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _cwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vcwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  wint_t _putwch_nolock(wchar_t _WCh);
  wint_t _getwch_nolock(void);
  wint_t _getwche_nolock(void);
  wint_t _ungetwch_nolock(wint_t _WCh);
# 540 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fgetwchar(void);
  wint_t fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwchar(wchar_t _Ch);
  wint_t getwc(FILE *_File);
  wint_t getwchar(void);
  wint_t putwc(wchar_t _Ch,FILE *_File);
  wint_t putwchar(wchar_t _Ch);
  wint_t ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t * _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int _putws(const wchar_t *_Str);
  int fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int wprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _scwprintf(const wchar_t * __restrict__ _Format,...);
  int vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
  __attribute__ ((__dllimport__)) int _swprintf_l(wchar_t * __restrict__ ,size_t _SizeInWords,const wchar_t * __restrict__ _Format,_locale_t _Locale,... ) ;
  __attribute__ ((__dllimport__)) int vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
  __attribute__ ((__dllimport__)) int _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;

  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);






  int vwscanf (const wchar_t * __restrict__ , va_list);
  int vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  __attribute__ ((__dllimport__)) int _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int _vswprintf_l(wchar_t * __restrict__ _Dest,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;
# 621 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  int fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  int swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  int wscanf(const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE * _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE * _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);



  __attribute__ ((__dllimport__)) int _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t * _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 669 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t * _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;
  double wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  __attribute__ ((__dllimport__)) double _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  float wcstof( const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);

  float wcstof (const wchar_t * __restrict__, wchar_t ** __restrict__);
  long double wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);

  long wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wgetenv(const wchar_t *_VarName) ;




  __attribute__ ((__dllimport__)) double _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t * _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t * _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long _wcstoui64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);





  __attribute__ ((__dllimport__)) wchar_t * _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  __attribute__ ((__dllimport__)) int _wputenv(const wchar_t *_EnvString);
  __attribute__ ((__dllimport__)) void _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;





  __attribute__ ((__dllimport__)) wchar_t * _wcsdup(const wchar_t *_Str);
  wchar_t * wcscat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
                wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
  int wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t * wcscpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source) ;
  size_t wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t wcslen(const wchar_t *_Str);
  size_t wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t * wcsncat(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  int wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t * wcsncpy(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count) ;
  wchar_t * _wcsncpy_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _Count,_locale_t _Locale) ;
                wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t wcsspn(const wchar_t *_Str,const wchar_t *_Control);
                wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);
  wchar_t * wcstok(wchar_t * __restrict__ _Str,const wchar_t * __restrict__ _Delim) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcserror(int _ErrNum) ;
  __attribute__ ((__dllimport__)) wchar_t * __wcserror(const wchar_t *_Str) ;
  __attribute__ ((__dllimport__)) int _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsrev(wchar_t *_Str);
  __attribute__ ((__dllimport__)) wchar_t * _wcsset(wchar_t *_Str,wchar_t _Val) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcslwr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  __attribute__ ((__dllimport__)) wchar_t * _wcsupr(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t wcsxfrm(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t _wcsxfrm_l(wchar_t * __restrict__ _Dst,const wchar_t * __restrict__ _Src,size_t _MaxCount,_locale_t _Locale);
  int wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  __attribute__ ((__dllimport__)) int _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t * wcsdup(const wchar_t *_Str) ;

  int wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t * wcsrev(wchar_t *_Str) ;
  wchar_t * wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t * wcslwr(wchar_t *_Str) ;
  wchar_t * wcsupr(wchar_t *_Str) ;
  int wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;





  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };





  __attribute__ ((__dllimport__)) wchar_t * _wasctime(const struct tm *_Tm);
  wchar_t * _wctime32(const __time32_t *_Time) ;
  size_t wcsftime(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm);
  __attribute__ ((__dllimport__)) size_t _wcsftime_l(wchar_t * __restrict__ _Buf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,const struct tm * __restrict__ _Tm,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t * _wstrdate(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wstrtime(wchar_t *_Buffer) ;
  __attribute__ ((__dllimport__)) wchar_t * _wctime64(const __time64_t *_Time) ;



  wchar_t * _wctime(const time_t *_Time) ;
# 816 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
  typedef int mbstate_t;
  typedef wchar_t _Wint_t;

  wint_t btowc(int);
  size_t mbrlen(const char * __restrict__ _Ch,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbrtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SizeInBytes,mbstate_t * __restrict__ _State);
  size_t mbsrtowcs(wchar_t * __restrict__ _Dest,const char ** __restrict__ _PSrc,size_t _Count,mbstate_t * __restrict__ _State) ;
  size_t wcrtomb(char * __restrict__ _Dest,wchar_t _Source,mbstate_t * __restrict__ _State) ;
  size_t wcsrtombs(char * __restrict__ _Dest,const wchar_t ** __restrict__ _PSource,size_t _Count,mbstate_t * __restrict__ _State) ;
  int wctob(wint_t _WCh);


  wchar_t * wmemset(wchar_t *s, wchar_t c, size_t n);
                wchar_t * wmemchr(const wchar_t *s, wchar_t c, size_t n);
  int wmemcmp(const wchar_t *s1, const wchar_t *s2,size_t n);
  wchar_t * wmemcpy(wchar_t * __restrict__ s1,const wchar_t * __restrict__ s2,size_t n) ;
  wchar_t * wmemmove(wchar_t *s1, const wchar_t *s2, size_t n) ;
  int fwide(FILE *stream,int mode);
  int mbsinit(const mbstate_t *ps);
  __extension__ long long wcstoll(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);
  __extension__ unsigned long long wcstoull(const wchar_t * __restrict__ nptr,wchar_t ** __restrict__ endptr, int base);


  void * memmove(void *_Dst,const void *_Src,size_t _MaxCount);
  void * memcpy(void * __restrict__ _Dst,const void * __restrict__ _Src,size_t _MaxCount) ;
# 876 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 3
}


#pragma pack(pop)


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 1 3








# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 1 3
# 9 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/wchar_s.h" 2 3
# 881 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wchar.h" 2 3
# 47 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 64 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::mbstate_t;

}
# 138 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
namespace std {

  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;



  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;





  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }


}







namespace __gnu_cxx {






  using ::wcstold;
# 257 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;


}

namespace std {

  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;

}
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 2 3
# 69 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
namespace std {
# 89 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 110 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 132 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 238 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/postypes.h" 3
}
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 2 3

namespace std {
# 73 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;




  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;



}
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 1 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx {
# 140 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 1 3
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 62 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\exception_defines.h" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/functexcept.h" 2 3

namespace std {


  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));

}
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 1 3
# 36 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 36 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
# 68 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
namespace __gnu_cxx {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 193 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 416 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    class __is_iterator_helper
    {
      typedef char __one;
      typedef struct { char __arr[2]; } __two;

      template<typename _Up>
        struct _Wrap_type
 { };

      template<typename _Up>
        static __one __test(_Wrap_type<typename _Up::iterator_category>*);

      template<typename _Up>
        static __two __test(...);

    public:
      static const bool __value = (sizeof(__test<_Tp>(0)) == 1
       || __is_pointer<_Tp>::__value);
    };

  template<typename _Tp>
    struct __is_iterator
    {
      enum { __value = __is_iterator_helper<_Tp>::__value };
      typedef typename __truth_type<__value>::__type __type;
    };

}
# 64 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 1 3
# 32 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3
# 32 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/type_traits.h" 3




namespace __gnu_cxx {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 65 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 1 3
# 32 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
# 32 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3




namespace __gnu_cxx {
# 51 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 96 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 / 10000);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };

}
# 66 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 1 3
# 60 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 1 3
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 1 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/concept_check.h" 3
# 36 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 2 3
# 95 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
namespace std {
# 104 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {



      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

}
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 2 3






namespace std {


  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 113 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
# 149 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 211 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
# 257 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_pair.h" 3
}
# 67 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 1 3
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 66 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 2 3

namespace std {
# 84 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 111 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 135 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }



}
# 68 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 1 3
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3



namespace std {

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 108 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 166 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }

}
# 69 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 1 3
# 68 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
namespace std {
# 94 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 281 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 393 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 420 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 443 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 469 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 484 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 510 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 533 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 559 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 578 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 621 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 647 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 673 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }



}

namespace __gnu_cxx {
# 694 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 792 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }

}
# 70 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 1 3
# 47 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 72 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 2 3


namespace std {




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 115 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;
# 134 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 156 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 184 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 207 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 230 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 251 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }




  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type
      _S_base(_Iterator __it)
      { return __it.base(); }
    };



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 339 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 377 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 462 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 514 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 542 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 572 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 631 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 689 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 733 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 791 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 952 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;




                                                                  ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

}

namespace std {
# 1028 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1060 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1091 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;




                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1125 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;




                                                       ;
                                                       ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1165 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1202 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

}
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwchar" 2 3
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 2 3








namespace __gnu_cxx {
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 88 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }

}

namespace std {
# 229 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((wint_t)(0xFFFF)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 1 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 1 3








# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  struct lconv {
    char *decimal_point;
    char *thousands_sep;
    char *grouping;
    char *int_curr_symbol;
    char *currency_symbol;
    char *mon_decimal_point;
    char *mon_thousands_sep;
    char *mon_grouping;
    char *positive_sign;
    char *negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
  };
# 75 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\locale.h" 3
  int _configthreadlocale(int _Flag);
  char * setlocale(int _Category,const char *_Locale);
  __attribute__ ((__dllimport__)) struct lconv * localeconv(void);
  _locale_t _get_current_locale(void);
  _locale_t _create_locale(int _Category,const char *_Locale);
  void _free_locale(_locale_t _Locale);
  _locale_t __get_current_locale(void);
  _locale_t __create_locale(int _Category,const char *_Locale);
  void __free_locale(_locale_t _Locale);







}


#pragma pack(pop)
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\clocale" 2 3








namespace std {

  using ::lconv;
  using ::setlocale;
  using ::localeconv;

}
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++locale.h" 2 3



namespace std {

  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, __null);
    char* __sav = __null;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }

}
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 1 3








# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 2 3



extern "C" {
# 72 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo __updatetlocinfo(void);
  pthreadmbcinfo __updatetmbcinfo(void);
# 100 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  __attribute__ ((__dllimport__)) int _isctype(int _C,int _Type);
  __attribute__ ((__dllimport__)) int _isctype_l(int _C,int _Type,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalpha(int _C);
  __attribute__ ((__dllimport__)) int _isalpha_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isupper(int _C);
  __attribute__ ((__dllimport__)) int _isupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int islower(int _C);
  __attribute__ ((__dllimport__)) int _islower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isdigit(int _C);
  __attribute__ ((__dllimport__)) int _isdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isxdigit(int _C);
  __attribute__ ((__dllimport__)) int _isxdigit_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isspace(int _C);
  __attribute__ ((__dllimport__)) int _isspace_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int ispunct(int _C);
  __attribute__ ((__dllimport__)) int _ispunct_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isalnum(int _C);
  __attribute__ ((__dllimport__)) int _isalnum_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isprint(int _C);
  __attribute__ ((__dllimport__)) int _isprint_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int isgraph(int _C);
  __attribute__ ((__dllimport__)) int _isgraph_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int iscntrl(int _C);
  __attribute__ ((__dllimport__)) int _iscntrl_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int toupper(int _C);
  __attribute__ ((__dllimport__)) int tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower(int _C);
  __attribute__ ((__dllimport__)) int _tolower_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int _toupper(int _C);
  __attribute__ ((__dllimport__)) int _toupper_l(int _C,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __isascii(int _C);
  __attribute__ ((__dllimport__)) int __toascii(int _C);
  __attribute__ ((__dllimport__)) int __iscsymf(int _C);
  __attribute__ ((__dllimport__)) int __iscsym(int _C);


int isblank(int _C);
# 193 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
  extern int * __imp___mb_cur_max;
# 275 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\ctype.h" 3
}
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 2 3
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
namespace std {

  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;

}
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 2 3

namespace std {
# 54 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

}
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 1 3
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 1 3
# 30 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
#pragma GCC visibility push(default)
# 162 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 1 3
# 70 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 1 3








# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 9 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 2 3



extern "C" {




__attribute__ ((__dllimport__)) extern int * _errno(void);


errno_t _set_errno(int _Value);
errno_t _get_errno(int *_Value);
# 74 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\errno.h" 3
}
# 71 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 73 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 2 3
# 340 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 374 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 401 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}
# 767 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr-default.h" 3
}
# 163 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 1 3
# 32 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 2 3

namespace __gnu_cxx {






  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }

}
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 3




# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 1 3
# 48 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 1 3
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 1 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/include\\stddef.h" 1 3 4
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cstddef" 2 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 92 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 2 3



namespace __gnu_cxx {

  using std::size_t;
  using std::ptrdiff_t;
# 50 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 114 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }

}
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/c++allocator.h" 2 3
# 49 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 2 3

namespace std {
# 59 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 85 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 204 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/allocator.h" 3
}
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 1 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 1 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cxxabi-forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 36 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream_insert.h" 2 3

namespace std {

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }





  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);



}
# 46 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 1 3
# 60 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
namespace std {
# 99 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 134 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 198 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 262 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 345 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 416 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 523 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 1 3
# 60 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
namespace std {
# 97 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }


}
# 713 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/stl_function.h" 2 3
# 50 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 1 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 33 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\initializer_list" 3
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 2 3

namespace std {
# 103 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 140 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 165 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {



     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {



     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
             -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {



            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()



      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }





      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 468 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 516 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 549 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 589 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 695 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 724 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 737 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 757 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 778 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 807 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
                                       ;
 return _M_data()[__pos];
      }
# 824 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

                                       ;

                                         ;
 _M_leak();
 return _M_data()[__pos];
      }
# 845 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 864 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 920 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 935 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 967 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 989 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1045 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1061 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1073 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1089 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1101 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1129 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1144 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1175 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1197 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1220 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1238 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1261 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1278 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1302 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1318 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1338 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1357 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1379 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1403 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1422 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1445 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1463 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1481 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1502 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1523 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1545 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1620 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1701 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1711 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1721 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1753 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1766 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1780 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1797 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1810 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1825 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1838 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1855 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1868 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1883 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1896 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1915 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1929 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1944 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1957 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1976 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1990 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2005 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2019 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2036 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 2049 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2065 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2078 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2095 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2110 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2128 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2158 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2182 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2200 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2223 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2248 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2260 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2331 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2377 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2414 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2451 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2488 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2525 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2562 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2579 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2597 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2620 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2638 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);


}
# 53 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 1 3
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {





 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {





 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 if (true)
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 if (false)
   {
     __r->_M_destroy(__a);
                            ;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {





      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 239 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {




      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 576 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
                              ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);



}
# 56 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\string" 2 3
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3


namespace std {
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 97 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 116 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale() throw();
# 125 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 135 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 150 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 163 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 175 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 189 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 204 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 223 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 251 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 267 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 302 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 336 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 367 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 431 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   if (true)
     { delete this; }
   if (false)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 574 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 591 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 608 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 635 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 649 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 666 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 685 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 699 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 728 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 744 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 757 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };

}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.tcc" 3

namespace std {

  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      if (true)
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      if (false)
 {
   _M_impl->_M_remove_reference();
                          ;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      if (true)
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      if (false)
 {
   __tmp->_M_remove_reference();
                          ;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      if (true)
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      if (false)
 {
   delete [] __c;
                          ;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }





  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);



}
# 815 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_classes.h" 2 3
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 2 3
# 53 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
namespace std {





  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 206 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 262 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 337 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 368 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 400 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 426 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 443 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 455 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 559 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 575 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 592 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 618 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 669 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 681 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 692 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 703 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 722 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    static int
    xalloc() throw();
# 738 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 759 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 776 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }

}
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3








namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 113 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 179 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 203 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 233 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 260 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 274 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 292 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 314 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 333 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 348 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 373 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 400 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 426 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 440 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 458 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 474 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 485 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 505 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 521 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 531 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 552 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 567 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 578 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 590 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 603 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int
      sync() { return 0; }
# 625 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 641 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 663 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 676 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 700 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 718 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 744 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 759 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }


    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);



}
# 799 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\streambuf" 2 3
# 44 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 1 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3




# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 1 3
# 13 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 13 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 166 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\wctype.h" 3
  typedef wchar_t wctrans_t;
  wint_t towctrans(wint_t,wctrans_t);
  wctrans_t wctrans(const char *);
  wctype_t wctype(const char *);


}


#pragma pack(pop)
# 46 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 2 3
# 75 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cwctype" 3
namespace std {

  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;

}
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 1 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\cctype" 3
# 42 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_base.h" 3
namespace std {


  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);
  };

}
# 43 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3






# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 1 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3




namespace std {
# 48 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }



}
# 50 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 141 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 159 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 176 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 192 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 208 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 222 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 237 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 251 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 266 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 283 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 302 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 321 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 343 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 368 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 387 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 406 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 425 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 443 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 460 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 476 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 493 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 512 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 533 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 555 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 579 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 602 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 671 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 708 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 721 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 734 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 749 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 763 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 777 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 792 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 809 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 825 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 842 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 862 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 889 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 920 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 953 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1002 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1019 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1035 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1052 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1072 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1095 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1121 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1147 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1172 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1205 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1216 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1240 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1259 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1277 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1295 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1312 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1329 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1345 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1362 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1382 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1404 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1427 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1453 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 1 3
# 37 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2/x86_64-w64-mingw32\\bits/ctype_inline.h" 3
namespace std {

  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }

}
# 1509 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3

namespace std {


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1634 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1671 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1685 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1699 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1712 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1743 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1756 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1769 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1786 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1798 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1811 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1824 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1837 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };
# 1907 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1928 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1954 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1990 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2049 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2227 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2245 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2266 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2284 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2326 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2389 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2414 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2462 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;
# 2520 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 3
  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }

}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 1 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
# 35 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3

namespace std {



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     if (true)
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     if (false)
       {
  delete __tmp;
                         ;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      if (true)
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      if (false)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
                          ;
 }
    }
# 135 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 729 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 965 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1026 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1151 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1188 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }





  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);



}
# 2601 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/locale_facets.h" 2 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3


namespace std {

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 60 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 125 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 136 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
                          ;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 189 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 210 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 245 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 283 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 295 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 335 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 349 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 378 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 398 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 418 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 437 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };

}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 1 3
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
# 34 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3

namespace std {

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 144 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;



}
# 471 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/basic_ios.h" 2 3
# 45 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ios" 2 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3


namespace std {
# 53 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 80 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 106 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 163 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 248 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 281 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 309 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 322 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      flush();
# 333 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      pos_type
      tellp();
# 344 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 356 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 375 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 394 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 404 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 425 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 446 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 488 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 538 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 582 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 3
}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/ostream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   if (true)
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   if (true)
     { _M_write(__s, __n); }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   if (true)
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   if (false)
     {
       __out._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);



}
# 586 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\ostream" 2 3
# 40 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 1 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
# 38 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3




namespace std {
# 53 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 89 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 118 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 165 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 237 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 247 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 279 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      get();
# 293 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type& __c);
# 320 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 331 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 354 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 364 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 393 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 404 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 428 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 445 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int_type
      peek();
# 463 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 482 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 498 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      putback(char_type __c);
# 513 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      unget();
# 531 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      int
      sync();
# 545 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      pos_type
      tellg();
# 560 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(pos_type);
# 576 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 631 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 667 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 680 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 697 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 739 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 767 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 828 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 850 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 3
}



# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 1 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
# 39 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3



namespace std {

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     if (true)
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     if (false)
       {
  this->_M_setstate(ios_base::badbit);
                         ;
       }
     if (false)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   if (true)
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::failbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   if (true)
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          if (true)
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 512 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          if (true)
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
          if (false)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   if (false)
     {
       this->_M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      if (true)
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
           ios_base::in);
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::goodbit;
      if (true)
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      if (false)
 {
   this->_M_setstate(ios_base::badbit);
                          ;
 }
      if (false)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   if (true)
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(ios_base::badbit);
                              ;
     }
   if (false)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;



}
# 854 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\istream" 2 3
# 41 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 2 3

namespace std {
# 58 "D:/Program_Files/Xilinx/Vivado/2019.2/win64/tools/clang/bin\\..\\lib\\clang\\3.1/../../../include/c++/4.5.2\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;

}
# 2 "src/lenet.cpp" 2
# 1 "src/../inc/lenet_def.h" 1


# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h" 1
# 54 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h" 1
# 57 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_decl.h" 1
# 100 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h" 2
# 157 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h" 2
# 562 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h" 1
# 62 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h" 1
# 55 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h" 1
# 80 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h" 2
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h" 1
# 73 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_special.h" 1
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h" 2
# 63 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h" 2
# 133 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }
# 1192 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h" 2
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h" 1
# 70 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
  }
# 311 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_special.h" 1
# 61 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_fixed.h" 2
# 3 "src/../inc/lenet_def.h" 2

# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_axi_sdata.h" 1
# 86 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_axi_sdata.h"
# 1 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_int.h" 1
# 87 "D:/Program_Files/Xilinx/Vivado/2019.2/common/technology/autopilot\\ap_axi_sdata.h" 2

template<int D,int U,int TI,int TD>
  struct ap_axis{
    ap_int<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<U> user;
    ap_uint<1> last;
    ap_uint<TI> id;
    ap_uint<TD> dest;
  };

template<int D>
  struct ap_axis <D, 0, 0, 0>{
    ap_int<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<1> last;
  };

template<int D,int U,int TI,int TD>
  struct ap_axiu{
    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<U> user;
    ap_uint<1> last;
    ap_uint<TI> id;
    ap_uint<TD> dest;
  };

template<int D>
  struct ap_axiu <D, 0, 0, 0>{
    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<(D+7)/8> strb;
    ap_uint<1> last;
  };


template<int D,int U,int TI,int TD> struct qdma_axis;

template<int D>
  struct qdma_axis <D, 0, 0, 0>{

    ap_uint<D> data;
    ap_uint<(D+7)/8> keep;
    ap_uint<1> last;

    ap_uint<D> get_data() const { return data; }
    ap_uint<(D+7)/8> get_keep() const { return keep; }
    ap_uint<1> get_last() const { return last; }

    void set_data(const ap_uint<D> &d) { data = d; }
    void set_keep(const ap_uint<(D+7)/8> &k) { keep = k; }
    void set_last(const ap_uint<1> &l) { last = l; }
    void keep_all() {
       ap_uint<(D+7)/8> k = 0;
       keep = ~k;
     }

    qdma_axis(ap_uint<D> d = ap_uint<D>(), ap_uint<(D+7)/8> k = ap_uint<(D+7)/8>(), ap_uint<1> l = ap_uint<1>()) : data(d), keep(k), last(l) {}
    qdma_axis(const qdma_axis<D, 0, 0, 0> &d) : data(d.data), keep(d.keep), last(d.last) {}
  };
# 4 "src/../inc/lenet_def.h" 2
# 44 "src/../inc/lenet_def.h"
typedef ap_axis<16,1,1,1> dtype_in;
typedef ap_fixed<12, 6, AP_RND_ZERO, AP_SAT> dtype;



dtype relu(dtype x);
dtype my_tanh(dtype x);
void Conv1_Cal();
void Pool1_Cal();
void Conv2_Cal();
void Pool2_Cal();
void Fullc1_Cal();
void Fullc2_Cal();
int Biggest_Element();
void Flatten_Layer();


int Lenet_HLS(dtype_in input_layer[1024],int id);
# 3 "src/lenet.cpp" 2
using namespace std;

dtype layer1[1][32][32];
dtype layer2[6][(32 -5 +1)][(32 -5 +1)];
dtype layer3[6][(32 -5 +1)/2][(32 -5 +1)/2];
dtype layer4[16][((32 -5 +1)/2 -5 +1)][((32 -5 +1)/2 -5 +1)];
dtype layer5[16][((32 -5 +1)/2 -5 +1)/2][((32 -5 +1)/2 -5 +1)/2];
dtype flatten1[(((32 -5 +1)/2 -5 +1)/2*((32 -5 +1)/2 -5 +1)/2*16)];
dtype flatten2[84];
dtype flatten3[65];

const dtype tanh_index[256]={

# 1 "src/../weights/hls_tanh_index.txt" 1
-4.0,
-3.96875,
-3.9375,
-3.90625,
-3.875,
-3.84375,
-3.8125,
-3.78125,
-3.75,
-3.71875,
-3.6875,
-3.65625,
-3.625,
-3.59375,
-3.5625,
-3.53125,
-3.5,
-3.46875,
-3.4375,
-3.40625,
-3.375,
-3.34375,
-3.3125,
-3.28125,
-3.25,
-3.21875,
-3.1875,
-3.15625,
-3.125,
-3.09375,
-3.0625,
-3.03125,
-3.0,
-2.96875,
-2.9375,
-2.90625,
-2.875,
-2.84375,
-2.8125,
-2.78125,
-2.75,
-2.71875,
-2.6875,
-2.65625,
-2.625,
-2.59375,
-2.5625,
-2.53125,
-2.5,
-2.46875,
-2.4375,
-2.40625,
-2.375,
-2.34375,
-2.3125,
-2.28125,
-2.25,
-2.21875,
-2.1875,
-2.15625,
-2.125,
-2.09375,
-2.0625,
-2.03125,
-2.0,
-1.96875,
-1.9375,
-1.90625,
-1.875,
-1.84375,
-1.8125,
-1.78125,
-1.75,
-1.71875,
-1.6875,
-1.65625,
-1.625,
-1.59375,
-1.5625,
-1.53125,
-1.5,
-1.46875,
-1.4375,
-1.40625,
-1.375,
-1.34375,
-1.3125,
-1.28125,
-1.25,
-1.21875,
-1.1875,
-1.15625,
-1.125,
-1.09375,
-1.0625,
-1.03125,
-1.0,
-0.96875,
-0.9375,
-0.90625,
-0.875,
-0.84375,
-0.8125,
-0.78125,
-0.75,
-0.71875,
-0.6875,
-0.65625,
-0.625,
-0.59375,
-0.5625,
-0.53125,
-0.5,
-0.46875,
-0.4375,
-0.40625,
-0.375,
-0.34375,
-0.3125,
-0.28125,
-0.25,
-0.21875,
-0.1875,
-0.15625,
-0.125,
-0.09375,
-0.0625,
-0.03125,
0.0,
0.03125,
0.0625,
0.09375,
0.125,
0.15625,
0.1875,
0.21875,
0.25,
0.28125,
0.3125,
0.34375,
0.375,
0.40625,
0.4375,
0.46875,
0.5,
0.53125,
0.5625,
0.59375,
0.625,
0.65625,
0.6875,
0.71875,
0.75,
0.78125,
0.8125,
0.84375,
0.875,
0.90625,
0.9375,
0.96875,
1.0,
1.03125,
1.0625,
1.09375,
1.125,
1.15625,
1.1875,
1.21875,
1.25,
1.28125,
1.3125,
1.34375,
1.375,
1.40625,
1.4375,
1.46875,
1.5,
1.53125,
1.5625,
1.59375,
1.625,
1.65625,
1.6875,
1.71875,
1.75,
1.78125,
1.8125,
1.84375,
1.875,
1.90625,
1.9375,
1.96875,
2.0,
2.03125,
2.0625,
2.09375,
2.125,
2.15625,
2.1875,
2.21875,
2.25,
2.28125,
2.3125,
2.34375,
2.375,
2.40625,
2.4375,
2.46875,
2.5,
2.53125,
2.5625,
2.59375,
2.625,
2.65625,
2.6875,
2.71875,
2.75,
2.78125,
2.8125,
2.84375,
2.875,
2.90625,
2.9375,
2.96875,
3.0,
3.03125,
3.0625,
3.09375,
3.125,
3.15625,
3.1875,
3.21875,
3.25,
3.28125,
3.3125,
3.34375,
3.375,
3.40625,
3.4375,
3.46875,
3.5,
3.53125,
3.5625,
3.59375,
3.625,
3.65625,
3.6875,
3.71875,
3.75,
3.78125,
3.8125,
3.84375,
3.875,
3.90625,
3.9375,
3.96875,
# 16 "src/lenet.cpp" 2
};
const dtype tanh_value[256]={

# 1 "src/../weights/hls_tanh_value.txt" 1
-0.999329299739067,
-0.9992860587299247,
-0.9992400309704963,
-0.9991910370043159,
-0.9991388858373508,
-0.99908337419873,
-0.9990242857544355,
-0.9989613902710102,
-0.9988944427261528,
-0.9988231823628861,
-0.9987473316837812,
-0.9986665953815128,
-0.9985806592017988,
-0.998489188734541,
-0.9983918281287415,
-0.9982881987265095,
-0.9981778976111987,
-0.9980604960644348,
-0.9979355379264904,
-0.9978025378541507,
-0.997660979469889,
-0.9975103133958233,
-0.9973499551655737,
-0.997179283006764,
-0.996997635486526,
-0.9968043090119653,
-0.9965985551771295,
-0.9963795779475947,
-0.996146530673345,
-0.9958985129201653,
-0.9956345671093096,
-0.9953536749547375,
-0.9950547536867305,
-0.9947366520502309,
-0.994398146065758,
-0.9940379345402902,
-0.9936546343150297,
-0.993246775236521,
-0.9928127948371598,
-0.9923510327107256,
-0.9918597245682077,
-0.991336995958872,
-0.9907808556412516,
-0.990189188588556,
-0.9895597486128832,
-0.9888901505926178,
-0.9881778622875124,
-0.9874201957262151,
-0.9866142981514303,
-0.9857571425085297,
-0.9848455174642784,
-0.9838760169434567,
-0.982845029172576,
-0.9817487252216389,
-0.9805830470370519,
-0.9793436949613896,
-0.9780261147388136,
-0.9766254840086112,
-0.9751366982936284,
-0.9735543564953897,
-0.971872745913509,
-0.9700858268137,
-0.9681872165763705,
-0.966170173466547,
-0.9640275800758169,
-0.9617519264982222,
-0.9593352933146825,
-0.9567693344747047,
-0.9540452601799487,
-0.9511538198917856,
-0.9480852856044063,
-0.9448294355464201,
-0.9413755384972874,
-0.937712338930443,
-0.9338280432225917,
-0.9297103071984135,
-0.925346225311741,
-0.9207223217980599,
-0.9158245441687624,
-0.9106382594546996,
-0.9051482536448664,
-0.8993387348050462,
-0.8931933404003515,
-0.8866951493840524,
-0.8798266996519848,
-0.8725700114960693,
-0.8649066177207418,
-0.8568176011108951,
-0.8482836399575129,
-0.8392850623555859,
-0.8298019099859595,
-0.8198140120760964,
-0.809301070201781,
-0.7982427545398869,
-0.7866188121086977,
-0.7744091874342136,
-0.7615941559557649,
-0.7481544703297354,
-0.7340715196043415,
-0.7193275010198336,
-0.703905603936621,
-0.6877902051090852,
-0.6709670742068736,
-0.6534235881413468,
-0.6351489523872873,
-0.6161344271055263,
-0.5963735554792423,
-0.5758623912857893,
-0.5545997223493823,
-0.5325872861719194,
-0.5098299737352566,
-0.48633601722496234,
-0.46211715726000974,
-0.43718878514171233,
-0.41157005567402244,
-0.3852839662694723,
-0.35835739835078595,
-0.330821117493628,
-0.3027097293321085,
-0.2740615889607664,
-0.24491866240370913,
-0.21532633966578324,
-0.1853331999081395,
-0.1549907303716235,
-0.12435300177159621,
-0.09347630396922774,
-0.062418746747512514,
-0.031239831446031256,
0.0,
0.031239831446031256,
0.062418746747512514,
0.09347630396922774,
0.12435300177159621,
0.1549907303716235,
0.1853331999081395,
0.21532633966578324,
0.24491866240370913,
0.2740615889607664,
0.3027097293321085,
0.330821117493628,
0.35835739835078595,
0.3852839662694723,
0.41157005567402244,
0.43718878514171233,
0.46211715726000974,
0.48633601722496234,
0.5098299737352566,
0.5325872861719194,
0.5545997223493823,
0.5758623912857893,
0.5963735554792423,
0.6161344271055263,
0.6351489523872873,
0.6534235881413468,
0.6709670742068736,
0.6877902051090852,
0.703905603936621,
0.7193275010198336,
0.7340715196043415,
0.7481544703297354,
0.7615941559557649,
0.7744091874342136,
0.7866188121086977,
0.7982427545398869,
0.809301070201781,
0.8198140120760964,
0.8298019099859595,
0.8392850623555859,
0.8482836399575129,
0.8568176011108951,
0.8649066177207418,
0.8725700114960693,
0.8798266996519848,
0.8866951493840524,
0.8931933404003515,
0.8993387348050462,
0.9051482536448664,
0.9106382594546996,
0.9158245441687624,
0.9207223217980599,
0.925346225311741,
0.9297103071984135,
0.9338280432225917,
0.937712338930443,
0.9413755384972874,
0.9448294355464201,
0.9480852856044063,
0.9511538198917856,
0.9540452601799487,
0.9567693344747047,
0.9593352933146825,
0.9617519264982222,
0.9640275800758169,
0.966170173466547,
0.9681872165763705,
0.9700858268137,
0.971872745913509,
0.9735543564953897,
0.9751366982936284,
0.9766254840086112,
0.9780261147388136,
0.9793436949613896,
0.9805830470370519,
0.9817487252216389,
0.982845029172576,
0.9838760169434567,
0.9848455174642784,
0.9857571425085297,
0.9866142981514303,
0.9874201957262151,
0.9881778622875124,
0.9888901505926178,
0.9895597486128832,
0.990189188588556,
0.9907808556412516,
0.991336995958872,
0.9918597245682077,
0.9923510327107256,
0.9928127948371598,
0.993246775236521,
0.9936546343150297,
0.9940379345402902,
0.994398146065758,
0.9947366520502309,
0.9950547536867305,
0.9953536749547375,
0.9956345671093096,
0.9958985129201653,
0.996146530673345,
0.9963795779475947,
0.9965985551771295,
0.9968043090119653,
0.996997635486526,
0.997179283006764,
0.9973499551655737,
0.9975103133958233,
0.997660979469889,
0.9978025378541507,
0.9979355379264904,
0.9980604960644348,
0.9981778976111987,
0.9982881987265095,
0.9983918281287415,
0.998489188734541,
0.9985806592017988,
0.9986665953815128,
0.9987473316837812,
0.9988231823628861,
0.9988944427261528,
0.9989613902710102,
0.9990242857544355,
0.99908337419873,
0.9991388858373508,
0.9991910370043159,
0.9992400309704963,
0.9992860587299247,
# 19 "src/lenet.cpp" 2
};
const dtype conv1[6][1][5][5]={

# 1 "src/../weights/hls_filter1.txt" 1
-0.052537091076374054,
-0.11621560901403427,
-0.01138896681368351,
0.22665950655937195,
-0.049385711550712585,
0.13386745750904083,
0.12262766063213348,
0.13947151601314545,
0.34288525581359863,
0.03125392273068428,
-0.05907142534852028,
0.33061203360557556,
0.1945212185382843,
0.31865864992141724,
0.115473173558712,
0.1587958186864853,
0.11993803083896637,
0.04911119490861893,
0.013014329597353935,
0.263228178024292,
-0.024049589410424232,
-0.1084083616733551,
0.24745158851146698,
0.2971172630786896,
0.1272326111793518,
0.35823091864585876,
0.26123884320259094,
0.3613603711128235,
0.10414047539234161,
0.15511754155158997,
0.007374187931418419,
0.10856286436319351,
-0.026547562330961227,
0.07668586075305939,
0.011253023520112038,
-0.04271494224667549,
-0.11208958178758621,
-0.0966418981552124,
0.17140831053256989,
0.08937747776508331,
-0.08687181025743484,
-0.07663968205451965,
-0.162044957280159,
0.06241647154092789,
-0.07738646119832993,
-0.20958004891872406,
-0.25962522625923157,
-0.15251001715660095,
-0.17839907109737396,
-0.14844495058059692,
-0.11793991923332214,
-0.10814160108566284,
0.06034258008003235,
0.21231618523597717,
-0.08129860460758209,
0.16186530888080597,
0.20028819143772125,
-0.006121294107288122,
0.11759848147630692,
-0.06564401090145111,
0.25024646520614624,
0.25520259141921997,
0.2749488651752472,
0.06966207921504974,
0.21747389435768127,
0.13505491614341736,
0.13764968514442444,
-0.022371340543031693,
0.18811015784740448,
0.2261156290769577,
0.18984128534793854,
0.26572680473327637,
0.16876858472824097,
0.18025581538677216,
-0.09418118000030518,
0.18501773476600647,
0.015404961071908474,
0.25845035910606384,
0.013130730018019676,
0.1243317499756813,
0.17711244523525238,
0.2433456927537918,
0.08326619118452072,
0.1605498194694519,
-0.036565251648426056,
0.11095528304576874,
0.1800353229045868,
0.14724135398864746,
0.1820528358221054,
0.2356434464454651,
0.04702209681272507,
0.166691392660141,
0.22057925164699554,
0.1103082075715065,
0.1266430914402008,
-0.07997056841850281,
0.28240635991096497,
0.17204606533050537,
0.27961453795433044,
0.13438768684864044,
0.30683547258377075,
0.04515846446156502,
0.17670859396457672,
0.2806626260280609,
0.029212014749646187,
0.001919772825203836,
0.2305823713541031,
0.20908324420452118,
-0.05755969509482384,
-0.007900121621787548,
0.11381755024194717,
0.02288171276450157,
0.2590714991092682,
-0.012824788689613342,
-0.06819365918636322,
-0.11810848861932755,
0.13936461508274078,
-0.07400254905223846,
0.12816473841667175,
0.22061295807361603,
-0.18320806324481964,
0.24766747653484344,
0.23217228055000305,
0.13077783584594727,
0.23017041385173798,
0.01957365684211254,
0.18101899325847626,
0.12819720804691315,
0.1659087985754013,
-0.10343431681394577,
-0.009655987843871117,
0.3178039789199829,
0.11079110950231552,
0.19745896756649017,
0.04541744291782379,
0.139394149184227,
0.15837030112743378,
0.1410224884748459,
0.13536693155765533,
-0.03511903062462807,
0.11910593509674072,
0.13924483954906464,
-0.01105094887316227,
0.14471039175987244,
0.06326676160097122,
-0.02273726835846901,
0.22194138169288635,
0.18775838613510132,
0.030491050332784653,
0.28527459502220154
# 22 "src/lenet.cpp" 2
};
const dtype conv1_bias[6]={

# 1 "src/../weights/hls_bias1.txt" 1
-0.007663064170628786,
0.05239040404558182,
-0.008323381654918194,
-0.004358516074717045,
-0.014060516841709614,
-0.010794530622661114
# 25 "src/lenet.cpp" 2
};
const dtype conv2[16][6][5][5]={

# 1 "src/../weights/hls_filter2.txt" 1
0.017086317762732506,
-0.006516743451356888,
0.07438471913337708,
-0.03283987194299698,
0.03765120729804039,
0.09204744547605515,
0.0074923280626535416,
-0.07509754598140717,
-0.09573809057474136,
0.02996004931628704,
-0.0760040134191513,
0.028594227507710457,
0.0005653501721099019,
0.09500401467084885,
0.1332119107246399,
-0.13798479735851288,
-0.08177298307418823,
-0.010285511612892151,
-0.06943849474191666,
-0.05057796090841293,
-0.0026662289164960384,
-0.042318008840084076,
-0.04431303218007088,
-0.07533605396747589,
-0.06301308423280716,
0.17366687953472137,
-0.03555476665496826,
-0.01938527263700962,
0.08088934421539307,
0.0186249241232872,
0.018235953524708748,
-0.011677606962621212,
-0.21268825232982635,
-0.09095441550016403,
0.074907585978508,
0.011558626778423786,
-0.03542831540107727,
-0.0214947871863842,
-0.07896153628826141,
-0.06956098228693008,
-0.13978828489780426,
-0.1373267024755478,
-0.07257761061191559,
0.04267469793558121,
0.04534299671649933,
-0.005257961340248585,
-0.00457729073241353,
-0.07106293737888336,
0.03496154397726059,
0.08258330821990967,
0.11433755606412888,
0.016846712678670883,
0.11219333857297897,
0.12594492733478546,
0.09577568620443344,
0.1194407120347023,
0.1014207974076271,
-0.05550096929073334,
0.08726313710212708,
-0.017492877319455147,
0.0398343950510025,
0.034336190670728683,
0.017343193292617798,
0.036945443600416183,
0.10932944715023041,
-0.0019573085010051727,
0.01661541685461998,
-0.062034692615270615,
-0.06126109138131142,
0.03668287768959999,
0.00872222613543272,
-0.08301983773708344,
0.006318710278719664,
0.027767254039645195,
-0.06925945729017258,
0.07295601069927216,
-0.029744714498519897,
0.10964291542768478,
-0.07737380266189575,
0.00038121547549963,
0.010732877068221569,
0.018984586000442505,
0.11547518521547318,
-0.06952973455190659,
-0.0751446932554245,
0.1190381571650505,
0.09248978644609451,
-0.001659073051996529,
-0.024753035977482796,
0.06960159540176392,
-0.09749223291873932,
-0.09307712316513062,
-0.07466528564691544,
0.04996419697999954,
0.03379058837890625,
-0.03703026473522186,
0.0006895023980177939,
-0.005930003244429827,
-0.07271020859479904,
-0.09843006730079651,
0.14839434623718262,
0.11561501026153564,
-0.03743768110871315,
0.05373091995716095,
-0.04132512956857681,
0.09979305416345596,
0.018646368756890297,
0.1251027137041092,
0.0762271136045456,
0.1267535537481308,
-0.028368689119815826,
0.013319005258381367,
0.11462990939617157,
0.07355793565511703,
0.0228451956063509,
0.056034814566373825,
-0.08145267516374588,
-0.04305562004446983,
-0.0019018081948161125,
-0.09964872151613235,
-0.07149496674537659,
-0.07484661042690277,
-0.009658116847276688,
-0.08876845240592957,
-0.04418422654271126,
0.10961513966321945,
0.017073480412364006,
0.08565405011177063,
0.044259943068027496,
-0.057496581226587296,
0.12361067533493042,
-0.0012709867442026734,
0.11927511543035507,
-0.018158044666051865,
-0.06546491384506226,
-0.021029992029070854,
0.11964082717895508,
0.02701897732913494,
0.09399934858083725,
-0.052665792405605316,
0.00020229569054208696,
-0.05140327662229538,
-0.10208481550216675,
-0.03500707820057869,
0.008611028082668781,
-0.06962516158819199,
-0.012219931930303574,
0.04905945062637329,
0.032772697508335114,
-0.08229877054691315,
0.16779325902462006,
0.10102305561304092,
0.16316530108451843,
0.11873652040958405,
-0.05672282725572586,
-0.010154170915484428,
-0.06372725963592529,
0.053076133131980896,
0.07216782867908478,
0.008921882137656212,
-0.14964421093463898,
-0.1555766612291336,
0.016711577773094177,
-0.11151966452598572,
0.04084911569952965,
-0.11705172806978226,
-0.0070578050799667835,
-0.06918458640575409,
0.07828406244516373,
-0.09278970956802368,
-0.11021901667118073,
0.041491031646728516,
-0.02597077749669552,
-0.046097349375486374,
0.012644326314330101,
0.17338280379772186,
0.18074604868888855,
0.23731881380081177,
0.15574795007705688,
0.10090449452400208,
0.34324657917022705,
0.33403947949409485,
0.266691654920578,
0.2933928668498993,
0.17262715101242065,
0.13208740949630737,
-0.008866080082952976,
0.027636289596557617,
0.19458504021167755,
0.05075807496905327,
-0.09562257677316666,
-0.0004007182433269918,
-0.014423569664359093,
-0.11498595029115677,
0.021231895312666893,
-0.07595501095056534,
0.0925692692399025,
-0.012248036451637745,
0.05686771497130394,
0.0072664134204387665,
0.13780392706394196,
0.14553171396255493,
0.024104390293359756,
0.12641647458076477,
0.09251905232667923,
0.05216571316123009,
-0.048061925917863846,
-0.09564568847417831,
-0.08130744844675064,
-0.02626775950193405,
-0.11710784584283829,
-0.06352947652339935,
-0.1322629153728485,
-0.03414521366357803,
-0.1065712571144104,
-0.012986404821276665,
-0.10880123823881149,
-0.11607898026704788,
0.044596366584300995,
0.09456150978803635,
-0.10246232897043228,
0.06205003708600998,
0.023438651114702225,
0.04979480057954788,
-0.07463287562131882,
0.18030917644500732,
0.09620599448680878,
0.08517615497112274,
0.12474881857633591,
-0.07507570087909698,
0.10735397785902023,
0.056928202509880066,
0.030742602422833443,
0.07278120517730713,
0.047732431441545486,
-0.11321057379245758,
-0.09764508903026581,
-0.05319048464298248,
-0.09355594217777252,
0.06623111665248871,
-0.14941996335983276,
-0.030096817761659622,
-0.04716695845127106,
0.07558984309434891,
0.05803351476788521,
-0.11874865740537643,
-0.12922079861164093,
-0.09838943928480148,
0.07217157632112503,
-0.08998637646436691,
0.16178889572620392,
0.2093411535024643,
0.19050714373588562,
0.07393909245729446,
0.03121730498969555,
0.0020572375506162643,
0.17485499382019043,
0.13595417141914368,
0.06367924809455872,
0.10928521305322647,
-0.06136104837059975,
-0.014062267728149891,
-0.0955466702580452,
-0.09322191774845123,
-0.07924498617649078,
-0.08301082253456116,
-0.02594313584268093,
-0.12985287606716156,
-0.023935986682772636,
0.03842535614967346,
0.03031814657151699,
-0.08590537309646606,
-0.05816635489463806,
0.05725850909948349,
0.055246949195861816,
0.1364169418811798,
0.24276305735111237,
0.056455619633197784,
0.00850854255259037,
0.08759834617376328,
0.13182298839092255,
-0.015367272309958935,
0.13412030041217804,
0.05761418864130974,
0.0004114210605621338,
-0.16987329721450806,
0.02477000467479229,
-0.10255169868469238,
-0.007351931184530258,
0.00018459296552464366,
-0.053030382841825485,
-0.029136482626199722,
-0.029633285477757454,
-0.06393668800592422,
-0.03962697461247444,
0.01485362183302641,
-0.037091538310050964,
0.03016938827931881,
-0.11450020223855972,
-0.08638536185026169,
-0.17914532124996185,
-0.16849876940250397,
-0.21209806203842163,
-0.09817148745059967,
0.043576255440711975,
-0.1813572198152542,
-0.14145910739898682,
-0.07895996421575546,
0.04551031067967415,
-0.03170781582593918,
-0.05899575352668762,
-0.01346157118678093,
-0.039709869772195816,
-0.008045918308198452,
0.04274963587522507,
0.08923424035310745,
0.09744518995285034,
0.17926019430160522,
0.08586873859167099,
-0.05304368585348129,
0.07067662477493286,
0.1256352663040161,
0.1953606903553009,
0.0407879501581192,
-0.06821157038211823,
0.11904708296060562,
0.16590479016304016,
0.11462339013814926,
0.18316297233104706,
-0.02401532232761383,
0.07819044589996338,
0.0317574106156826,
0.15172328054904938,
0.08133576810359955,
-0.025680096819996834,
-0.04362335056066513,
-0.12947802245616913,
-0.1004733219742775,
-0.06932318955659866,
0.048723604530096054,
0.1376938372850418,
-0.09954383224248886,
-0.17730140686035156,
-0.17483437061309814,
-0.05778270959854126,
0.10741899162530899,
-0.010159963741898537,
-0.05720953270792961,
-0.07401314377784729,
-0.05737898871302605,
0.01531482394784689,
-0.026773203164339066,
-0.12392255663871765,
-0.13779401779174805,
0.09893686324357986,
-0.10645327717065811,
-0.11566288024187088,
-0.2189566195011139,
-0.10164447128772736,
0.07667364925146103,
0.004602924454957247,
0.06724544614553452,
-0.04684162139892578,
0.06424662470817566,
0.10032836347818375,
0.10719069093465805,
0.12918412685394287,
0.004731487948447466,
0.1483592540025711,
0.038614824414253235,
0.05599084869027138,
0.0946548730134964,
0.11693933606147766,
-0.014234255068004131,
0.12980884313583374,
-0.142429918050766,
-0.05782696232199669,
-0.11652377992868423,
-0.09791159629821777,
-0.044497743248939514,
-0.12888962030410767,
-0.1569598913192749,
-0.1758521944284439,
-0.0791865885257721,
0.10335557162761688,
-0.06575747579336166,
0.05039893463253975,
-0.1080169752240181,
-0.03607805445790291,
-0.05895658954977989,
-0.02386629767715931,
-0.03024771437048912,
0.09547353535890579,
0.11212809383869171,
0.08468334376811981,
0.08350317925214767,
0.019939638674259186,
0.17469042539596558,
0.01129926834255457,
0.00011329211702104658,
0.027288313955068588,
-0.02507266029715538,
-0.16563308238983154,
-0.10098429024219513,
0.11383756995201111,
0.01758737489581108,
-0.029071951285004616,
-0.020514464005827904,
-0.11016912013292313,
0.10754688829183578,
-0.06076905503869057,
0.05493687838315964,
0.04213451221585274,
-0.06488257646560669,
-0.0028456763830035925,
0.08574623614549637,
0.020248956978321075,
0.03997547924518585,
-0.04374658316373825,
0.034855425357818604,
0.033498506993055344,
0.15398281812667847,
0.04826972633600235,
0.03923214226961136,
0.12116783112287521,
-0.030581604689359665,
-0.12062983214855194,
-0.08668068796396255,
-0.020471252501010895,
-0.06758949905633926,
0.03276443108916283,
-0.08080736547708511,
-0.15993918478488922,
-0.10447491705417633,
-0.004588971845805645,
-0.0421752855181694,
-0.032090846449136734,
-0.05342015624046326,
0.0448477528989315,
0.07898643612861633,
0.014410026371479034,
0.08992553502321243,
-0.007968870922923088,
0.11052963137626648,
0.11448384821414948,
0.09863802045583725,
0.17187511920928955,
0.17413924634456635,
0.15832281112670898,
-0.042193446308374405,
0.025636453181505203,
0.08369764685630798,
-0.030656279996037483,
-0.1910262554883957,
-0.1332915723323822,
0.027684327214956284,
-0.0257791206240654,
-0.05314711108803749,
-0.10481783002614975,
-0.18253883719444275,
0.13275869190692902,
0.11861468106508255,
0.13623976707458496,
0.12035290896892548,
-0.08675260841846466,
-0.14598768949508667,
0.06868414580821991,
0.06521555781364441,
0.12043999135494232,
0.10730063170194626,
-0.28606468439102173,
-0.12471859157085419,
0.011837229132652283,
-0.008545497432351112,
0.020729264244437218,
-0.06984734535217285,
-0.25369155406951904,
-0.20136727392673492,
-0.06837883591651917,
-0.1333811730146408,
0.05935888737440109,
-0.21226170659065247,
-0.21080386638641357,
-0.25679948925971985,
-0.22995442152023315,
0.13985837996006012,
0.07818605750799179,
0.020961767062544823,
-0.15809273719787598,
-0.39225608110427856,
0.28447020053863525,
0.213486447930336,
0.25895312428474426,
0.1178383156657219,
-0.19167639315128326,
0.16839750111103058,
0.26475977897644043,
0.33890995383262634,
0.21014365553855896,
-0.12550567090511322,
0.03573082387447357,
0.009534308686852455,
-0.049905382096767426,
0.055498622357845306,
-0.12854032218456268,
-0.00021542188187595457,
0.10892032831907272,
0.12728801369667053,
-0.02922576479613781,
-0.07351184636354446,
0.11689109355211258,
0.08724910020828247,
0.13633017241954803,
0.05518848076462746,
0.09605049341917038,
-0.15507057309150696,
-0.14503151178359985,
0.09755130857229233,
0.002783173229545355,
0.11643139272928238,
-0.20103751122951508,
-0.16352885961532593,
-0.17747315764427185,
-0.052915267646312714,
0.1265888512134552,
-0.03386528417468071,
-0.08281102776527405,
-0.04488879069685936,
-0.14294466376304626,
-0.04125886783003807,
0.03664911165833473,
0.14467568695545197,
-0.055792566388845444,
0.007112713996320963,
-0.06836195290088654,
0.024922730401158333,
0.16472092270851135,
0.1438896656036377,
0.10875482112169266,
0.08911145478487015,
-0.1352197378873825,
-0.06509265303611755,
0.1273488998413086,
0.036026548594236374,
0.12356624752283096,
-0.17288687825202942,
-0.16237108409404755,
-0.0795973539352417,
0.09548340737819672,
0.07928414642810822,
0.017278753221035004,
0.08148136734962463,
-0.03493392840027809,
-0.1657806634902954,
-0.09775622189044952,
0.14716602861881256,
-0.03429519385099411,
0.12792284786701202,
-0.12323304265737534,
-0.15421105921268463,
0.09134265780448914,
0.01862342655658722,
-0.013513251207768917,
0.0639072060585022,
-0.009989499114453793,
-0.05535498261451721,
0.11312878876924515,
0.18790294229984283,
0.1262681633234024,
0.11766938865184784,
-0.05459398031234741,
-0.12650516629219055,
-0.0452529639005661,
0.12609724700450897,
0.15570533275604248,
-0.003245459869503975,
-0.045812662690877914,
-0.12331744283437729,
-0.07819674909114838,
-0.16672441363334656,
0.18995963037014008,
0.14585338532924652,
0.09269250929355621,
0.04676030948758125,
-0.181857168674469,
-0.04567742347717285,
0.08307066559791565,
0.1277690976858139,
-0.025551073253154755,
0.028506288304924965,
-0.11576828360557556,
-0.06549404561519623,
0.033971067517995834,
0.10394499450922012,
-0.004796319641172886,
-0.2004551738500595,
-0.2280575931072235,
0.03189871460199356,
0.07093649357557297,
0.116724893450737,
0.1703130304813385,
-0.127484530210495,
-0.020758451893925667,
-0.05777980387210846,
0.014354742132127285,
0.1326967030763626,
-0.029581429436802864,
-0.11964251101016998,
0.0273214653134346,
0.21126756072044373,
0.06527668982744217,
-0.06911692023277283,
-0.12203866988420486,
0.09762837737798691,
0.09552450478076935,
0.11495853215456009,
0.016725881025195122,
-0.15731287002563477,
0.07876115292310715,
-0.02165945991873741,
0.11781979352235794,
-0.16080886125564575,
-0.19892354309558868,
-0.08620085567235947,
-0.08221391588449478,
-0.007076792418956757,
-0.2578183114528656,
-0.14409339427947998,
-0.0997123196721077,
-0.06972410529851913,
-0.13245466351509094,
-0.2479572892189026,
-0.16347937285900116,
-0.12559254467487335,
-0.06611774861812592,
-0.22285066545009613,
-0.18189218640327454,
-0.091727614402771,
-0.08896508812904358,
0.060863006860017776,
-0.06323854625225067,
-0.1701308637857437,
0.052895091474056244,
-0.014412433840334415,
0.11412002146244049,
-0.16250590980052948,
-0.0220661424100399,
-0.033128660172224045,
0.07331282645463943,
0.11815217137336731,
0.12700186669826508,
0.11252151429653168,
-0.08307264745235443,
-0.06566919386386871,
-0.08144208788871765,
-0.0032261840533465147,
0.050244130194187164,
-0.07804982364177704,
0.05323886498808861,
0.06145212799310684,
0.10078763961791992,
0.15063850581645966,
-0.08516468107700348,
-0.05747648701071739,
0.01234107930213213,
0.10749996453523636,
0.13489492237567902,
-0.009402907453477383,
-0.03834576532244682,
-0.08394067734479904,
0.09212633967399597,
-0.035193365067243576,
-0.13556303083896637,
-0.1697314977645874,
-0.14139854907989502,
0.010124864988029003,
0.010102475062012672,
-0.13990353047847748,
-0.08712656050920486,
0.10917529463768005,
0.07860926538705826,
-0.051835797727108,
-0.08983238786458969,
-0.035114675760269165,
0.07101688534021378,
0.06488746404647827,
0.05620451271533966,
-0.055739711970090866,
-0.05035218223929405,
0.0860261544585228,
0.04820440709590912,
0.11724483966827393,
0.0013811992248520255,
-0.06635677814483643,
0.10464584827423096,
0.15294018387794495,
0.06737224012613297,
-0.1904505342245102,
-0.20633791387081146,
-0.08628400415182114,
0.12613791227340698,
-0.06909231096506119,
-0.11667343229055405,
-0.0721370279788971,
-0.019130107015371323,
0.1741972267627716,
0.12021124362945557,
-0.09925847500562668,
-0.0182043369859457,
0.08614376187324524,
0.007512449752539396,
0.02769811823964119,
-0.05393150448799133,
-0.07172403484582901,
-0.028398238122463226,
-0.009772506542503834,
0.0834011659026146,
0.04526544362306595,
0.037242501974105835,
0.07496766000986099,
0.1141788586974144,
-0.016483521088957787,
-0.10296302288770676,
-0.06613881140947342,
-0.03899436816573143,
0.013011602684855461,
-0.059349458664655685,
-0.03690946474671364,
-0.0891009122133255,
0.004517078399658203,
0.15239807963371277,
0.15580177307128906,
-0.08702590316534042,
-0.15301954746246338,
0.03250909224152565,
0.09917997568845749,
0.11327684670686722,
0.00705829868093133,
-0.0019268847536295652,
0.09037785232067108,
0.01108026783913374,
0.09106943011283875,
-0.0912964716553688,
-0.005507850553840399,
-0.01270806323736906,
0.05886606499552727,
0.0141726303845644,
-0.05544344335794449,
-0.2031077742576599,
-0.006910719443112612,
0.01778590865433216,
-0.1500484198331833,
-0.05252346396446228,
-0.14559444785118103,
-0.07656296342611313,
0.005721241235733032,
-0.1522786170244217,
-0.058316685259342194,
0.01462079118937254,
0.009278111159801483,
-0.01514398492872715,
0.027601346373558044,
-0.016057314351201057,
0.10902425646781921,
0.11149632185697556,
0.0468517504632473,
0.04545314237475395,
0.050364814698696136,
0.11531447619199753,
0.02540796995162964,
0.19233448803424835,
0.1736721247434616,
0.1653226613998413,
0.048054035753011703,
0.03054766356945038,
0.10203959047794342,
0.1608576774597168,
0.21986199915409088,
0.11095468699932098,
0.09127774834632874,
0.026014409959316254,
0.1198141872882843,
0.1881951540708542,
-0.007351621054112911,
-0.08368102461099625,
0.03249121457338333,
-0.029456578195095062,
0.002748388098552823,
-0.1264454424381256,
0.07147268205881119,
-0.10804808884859085,
0.011786386370658875,
-0.1341279149055481,
0.05317728966474533,
0.06780534237623215,
-0.019809463992714882,
-0.07129187136888504,
0.051295530050992966,
0.1373811960220337,
0.27477049827575684,
-0.11229155212640762,
-0.022074680775403976,
-0.07713425904512405,
-0.08153717964887619,
-0.18106675148010254,
-0.10524500906467438,
-0.05415235832333565,
-0.11383506655693054,
-0.13456550240516663,
0.07372995465993881,
-0.11172293871641159,
0.030502771958708763,
0.04204472899436951,
0.04483970254659653,
0.13610133528709412,
0.07321178168058395,
-0.014877548441290855,
0.11978857964277267,
-0.018002096563577652,
0.11734121292829514,
0.06399475038051605,
0.15281237661838531,
0.1121344342827797,
0.13188786804676056,
-0.021959105506539345,
-0.09882007539272308,
-0.08836688846349716,
-0.059487976133823395,
-0.018671106547117233,
-0.1932186782360077,
-0.021335946395993233,
-0.12545183300971985,
-0.04539816454052925,
0.03820474445819855,
-0.002444472862407565,
-0.10508951544761658,
0.03489881008863449,
0.013664678670465946,
-0.06839559227228165,
-0.022591078653931618,
-0.037447210401296616,
0.04574168473482132,
0.02689497545361519,
0.09090258926153183,
0.12912006676197052,
0.10159433633089066,
0.026457998901605606,
0.0680469274520874,
-0.0428854338824749,
-0.07853192836046219,
-0.05393035337328911,
0.010140098631381989,
-0.04448096826672554,
-0.08435440808534622,
-0.06105944886803627,
0.024978283792734146,
-0.17186644673347473,
-0.09704052656888962,
0.014399372041225433,
-0.07047189027070999,
-0.0396062433719635,
0.04847831279039383,
-0.009324714541435242,
-0.04281740263104439,
-0.03197760507464409,
0.07248115539550781,
0.08959097415208817,
0.11042749881744385,
0.0330028273165226,
0.04529043659567833,
0.0590706430375576,
0.0871187150478363,
0.06609170883893967,
-0.0009051138185895979,
-0.07277332991361618,
0.007493368815630674,
0.03082163818180561,
-0.15871715545654297,
-0.1065308079123497,
-0.08114539831876755,
-0.01857856661081314,
-0.15884491801261902,
0.03336361423134804,
0.025332458317279816,
-0.12379693984985352,
-0.030629267916083336,
-0.05861971527338028,
0.029571255668997765,
-0.011572984047234058,
0.0751403421163559,
0.03352200984954834,
0.07944285124540329,
-0.006145549938082695,
0.08794964104890823,
0.09296616911888123,
0.06374074518680573,
0.17370685935020447,
0.007447102572768927,
0.08184927701950073,
0.10322901606559753,
0.038035083562135696,
0.04169949144124985,
0.07557076960802078,
0.1261010617017746,
0.05398888140916824,
0.11096210777759552,
-0.0054367827251553535,
-0.022620029747486115,
0.0543551929295063,
-0.07315284013748169,
-0.13685141503810883,
-0.12491270154714584,
-0.18408533930778503,
-0.0971301794052124,
-0.12597782909870148,
-0.12050137668848038,
-0.05943525582551956,
0.06887999922037125,
0.09812641888856888,
0.05735200271010399,
-0.05795165151357651,
-0.02881958708167076,
0.042897868901491165,
0.01055886596441269,
0.021376248449087143,
-0.093243807554245,
0.07691558450460434,
0.16698944568634033,
0.21770969033241272,
0.05437975376844406,
0.07272919267416,
0.11032441258430481,
0.19545917212963104,
0.27909132838249207,
0.23643238842487335,
0.0626087635755539,
0.08101784437894821,
0.11273907124996185,
-0.011898425407707691,
0.052872613072395325,
-0.10042833536863327,
-0.07743477076292038,
-0.19023442268371582,
-0.229700967669487,
-0.08738565444946289,
-0.030077263712882996,
0.045679640024900436,
0.13219498097896576,
0.24513211846351624,
0.056569796055555344,
0.16649824380874634,
0.15080340206623077,
0.10505632311105728,
0.016140902414917946,
0.07191556692123413,
0.012654198333621025,
-0.07784876227378845,
-0.0873446986079216,
-0.038303442299366,
0.005249940790235996,
-0.08181671798229218,
-0.054365288466215134,
-0.14061664044857025,
-0.08223399519920349,
-0.006664074491709471,
0.07146357744932175,
0.08303925395011902,
0.10522109270095825,
-0.04820607975125313,
0.10321749001741409,
0.10146453976631165,
0.055636174976825714,
0.06896190345287323,
0.018698759377002716,
0.09126150608062744,
0.07104794681072235,
-0.02145492285490036,
0.015040741302073002,
-0.03916264697909355,
0.041423775255680084,
0.033085405826568604,
0.09968329966068268,
-0.10208915174007416,
-0.08229998499155045,
-0.09115315228700638,
-0.0905160903930664,
-0.014931803569197655,
-0.03849577531218529,
-0.11881227791309357,
-0.14569291472434998,
-0.04225338622927666,
-0.013195416890084743,
0.0908428207039833,
-0.015260767191648483,
-0.08636568486690521,
0.0092411357909441,
-0.007171870209276676,
0.012884988449513912,
-0.0350954495370388,
0.12565594911575317,
0.11457161605358124,
0.06854598224163055,
-0.0114672826603055,
0.07361843436956406,
0.05185434967279434,
-0.0318349152803421,
-0.06132153421640396,
0.02236548624932766,
-0.11732695996761322,
-0.11270126700401306,
0.017504872754216194,
0.07143008708953857,
-0.11348255723714828,
0.02383584901690483,
-0.1260955035686493,
-0.05986184626817703,
0.10017801821231842,
0.021405894309282303,
0.10528784990310669,
0.004081626422703266,
0.052447110414505005,
0.00285456795245409,
0.10714281350374222,
0.04974795877933502,
-0.06179559975862503,
0.11611725389957428,
0.10456457734107971,
0.08579502254724503,
0.05007495731115341,
-0.06542550027370453,
0.018278460949659348,
0.016387177631258965,
-0.1229243353009224,
-0.007379218004643917,
-0.07441394776105881,
0.008257152512669563,
-0.03467783331871033,
0.016087889671325684,
-0.06587712466716766,
-0.1296239048242569,
0.1025138571858406,
0.041313961148262024,
0.0037177118938416243,
-0.04160197451710701,
0.06411626935005188,
-0.060034677386283875,
-0.010329594835639,
-0.038042087107896805,
-0.002821211703121662,
-0.007590427994728088,
-0.08252466470003128,
-0.030930405482649803,
-0.17461684346199036,
-0.05609540268778801,
-0.01094888336956501,
0.04783990979194641,
-0.051445044577121735,
-0.06616249680519104,
-0.10324574261903763,
-0.019783230498433113,
0.04395163059234619,
-0.09548096358776093,
-0.058342933654785156,
-0.08893120288848877,
0.003296480979770422,
-0.009860088117420673,
-0.06776180863380432,
-0.048282843083143234,
0.0558609701693058,
-0.07728146761655807,
0.02300146035850048,
0.14268694818019867,
0.1330285668373108,
-0.012655897997319698,
0.14701375365257263,
-0.05166789889335632,
-0.08944465965032578,
-0.07088126987218857,
0.0695253238081932,
0.023780418559908867,
-0.04191902279853821,
-0.111052006483078,
-0.08567870408296585,
0.04189913719892502,
0.13389213383197784,
-0.02889818698167801,
-0.2023061364889145,
-0.11873544007539749,
0.01125585287809372,
0.05264269560575485,
0.0867018848657608,
-0.1078854575753212,
-0.13861039280891418,
-0.21883344650268555,
0.011402396485209465,
0.07985366880893707,
-0.06676533073186874,
-0.18729422986507416,
-0.15514516830444336,
-0.0666450783610344,
-0.01285780593752861,
-0.023092489689588547,
-0.12568826973438263,
-0.1052524596452713,
-0.1214418113231659,
0.02873554266989231,
0.10944465547800064,
0.07273238152265549,
-0.0012137669837102294,
-0.09134196490049362,
0.06436484307050705,
-0.030535683035850525,
0.01728527992963791,
-0.08692935854196548,
-0.06914137303829193,
-0.015104296617209911,
0.06373845040798187,
0.019690154120326042,
0.10051309317350388,
0.023674482479691505,
-0.043992526829242706,
0.13210663199424744,
0.12652617692947388,
0.04933599755167961,
0.0629994124174118,
-0.06783165782690048,
0.02154570259153843,
-0.13161815702915192,
-0.04126093536615372,
-0.07593252509832382,
0.1270735114812851,
-0.09952712059020996,
-0.0011197172570973635,
0.007710255682468414,
-0.021997174248099327,
0.10928428173065186,
-0.022667333483695984,
-0.008766772225499153,
-0.043675728142261505,
-0.027385683730244637,
0.11163876205682755,
-0.010481644421815872,
0.00022557105694431812,
-0.07533368468284607,
0.04200492054224014,
0.07075763493776321,
0.15319931507110596,
0.1330854594707489,
0.14238055050373077,
0.07110534608364105,
-0.11280884593725204,
0.026409462094306946,
-0.15801477432250977,
0.02850990556180477,
0.025841591879725456,
0.028165243566036224,
0.03221345320343971,
-0.06893898546695709,
-0.13566794991493225,
-0.025712404400110245,
0.14183984696865082,
0.03393390029668808,
-0.11432012915611267,
-0.05063696950674057,
-0.02333778142929077,
-0.01704425923526287,
0.15596812963485718,
0.006021867040544748,
-0.030609503388404846,
-0.1283995509147644,
0.005653841886669397,
0.15238520503044128,
0.15340808033943176,
0.01173730194568634,
-0.0022573296446353197,
0.006770612671971321,
-0.10670921206474304,
-0.08830352872610092,
-0.11102353036403656,
0.05045890435576439,
0.0804162546992302,
-0.007615983951836824,
-0.0397869236767292,
-0.11815789341926575,
-0.014364166185259819,
-0.018544219434261322,
0.04405467212200165,
0.016881173476576805,
-0.15405219793319702,
-0.0289872195571661,
0.017730658873915672,
0.1089334711432457,
0.07340320944786072,
0.09094453603029251,
-0.12412431091070175,
-0.01773715578019619,
-0.002549706259742379,
0.18634720146656036,
0.10566572844982147,
0.07937535643577576,
-0.0007225080044008791,
0.08697136491537094,
0.05456990748643875,
0.004228782840073109,
0.0766095370054245,
0.107807956635952,
0.13120733201503754,
0.1415850818157196,
0.02790914475917816,
-0.00959393847733736,
0.09197799116373062,
0.0507555790245533,
-0.07433029264211655,
-0.08326632529497147,
0.017402684316039085,
0.0014367871917784214,
-0.11669224500656128,
-0.22677448391914368,
-0.1322229951620102,
0.044200267642736435,
-0.11482997983694077,
-0.12683798372745514,
-0.022694161161780357,
-0.03318658843636513,
0.06410565227270126,
0.0020926801953464746,
0.07651109248399734,
0.16702838242053986,
0.24896010756492615,
0.23807385563850403,
0.025705592706799507,
0.12392672896385193,
0.23574697971343994,
0.23363594710826874,
0.02060316875576973,
0.18904708325862885,
0.3083355128765106,
0.2789853513240814,
0.23776577413082123,
0.14555960893630981,
0.0030061136931180954,
0.02546718157827854,
0.17712771892547607,
0.18234483897686005,
0.11980511248111725,
0.02982945553958416,
0.04992322623729706,
-0.10280308127403259,
0.053884949535131454,
0.1225019171833992,
0.005492380820214748,
0.16234512627124786,
0.012087473645806313,
0.022994956001639366,
0.007187086157500744,
0.017595896497368813,
0.08504991233348846,
0.13701878488063812,
0.12905353307724,
-0.06493084132671356,
0.02341574616730213,
-0.09659861028194427,
-0.0326906256377697,
-0.10540695488452911,
-0.017020057886838913,
0.021294211968779564,
0.03896857798099518,
-0.04023874178528786,
-0.19444496929645538,
-0.04412073642015457,
0.012995917350053787,
0.05212641879916191,
-0.009593074209988117,
-0.09815859794616699,
-0.07234840095043182,
0.03241145610809326,
0.11709123849868774,
0.20309709012508392,
0.08061917871236801,
-0.027586808428168297,
-0.050114426761865616,
-0.0017590273637324572,
0.0753745287656784,
0.12856750190258026,
-0.05950935184955597,
-0.03594358637928963,
0.02248288318514824,
-0.04016570374369621,
-0.029085494577884674,
-0.06697039306163788,
0.08471567183732986,
-0.09160444140434265,
-0.18966180086135864,
-0.18049754202365875,
-0.1116955429315567,
-0.040672216564416885,
-0.11681442707777023,
-0.07933498919010162,
-0.1823563426733017,
-0.07822860032320023,
-0.037452951073646545,
0.14867180585861206,
0.06418205052614212,
0.156984344124794,
-0.006667314097285271,
0.0666915625333786,
0.018718155100941658,
0.0811837688088417,
0.1998598724603653,
0.10757181793451309,
-0.027562523260712624,
-0.03162205591797829,
-0.04566595330834389,
0.12998169660568237,
-0.05038028955459595,
-0.0994964987039566,
0.049819882959127426,
-0.029612766578793526,
-0.012194798327982426,
0.06855116784572601,
0.041810132563114166,
-0.12271846830844879,
-0.03416745737195015,
-0.009905797429382801,
-0.11758331209421158,
0.05830153077840805,
0.07905076444149017,
0.1071205884218216,
0.10062707215547562,
0.001983405090868473,
0.028083963319659233,
-0.020657585933804512,
0.09521657973527908,
0.07382771372795105,
-0.05274152755737305,
-0.0631297379732132,
0.10129432380199432,
0.09387540817260742,
-0.10241714119911194,
-0.015354661270976067,
-0.03342694789171219,
-0.07204851508140564,
-0.16549912095069885,
-0.10854484885931015,
0.01822449453175068,
-0.02054416574537754,
0.03371741995215416,
-0.1124427393078804,
-0.0594971664249897,
-0.03781653195619583,
-0.05085640773177147,
-0.017990663647651672,
-0.008548331446945667,
0.0013922213111072779,
-0.05292728915810585,
-0.05279522016644478,
0.013177106156945229,
0.16951417922973633,
-0.012744458392262459,
-0.05299782380461693,
-0.060693249106407166,
0.15426260232925415,
0.16446304321289062,
-0.09423726797103882,
-0.16266866028308868,
0.04979051277041435,
-0.0004942538216710091,
0.15693935751914978,
-0.09204740822315216,
-0.2089216113090515,
0.11934637278318405,
0.11139991134405136,
-0.07939747720956802,
-0.175603449344635,
-0.1342054158449173,
0.000516517786309123,
-0.02163095958530903,
-0.11168735474348068,
-0.10231830179691315,
-0.10384022444486618,
-0.12150724232196808,
-0.019673606380820274,
-0.01634467951953411,
-0.17413416504859924,
-0.1548556089401245,
-0.2885514497756958,
-0.22089220583438873,
-0.15470729768276215,
-0.05165976285934448,
-0.14780953526496887,
-0.012901916168630123,
-0.06941593438386917,
0.022290628403425217,
0.046114787459373474,
-0.03970476612448692,
-0.12001431733369827,
-0.22119486331939697,
-0.012279201298952103,
0.016093188896775246,
0.025181757286190987,
-0.14845281839370728,
-0.023416703566908836,
0.027732422575354576,
0.14396820962429047,
-0.05639902502298355,
-0.05317870154976845,
0.0015733987092971802,
0.13414376974105835,
0.14759625494480133,
0.061262842267751694,
0.004492336884140968,
-0.021762028336524963,
0.11569683253765106,
0.1252487748861313,
0.06729540228843689,
-0.041354503482580185,
0.10894526541233063,
0.12096725404262543,
0.04876380413770676,
-0.11100763082504272,
-0.06182090938091278,
0.12631088495254517,
0.048414409160614014,
-0.11876038461923599,
-0.16545359790325165,
-0.1437791883945465,
-0.01679363287985325,
0.12145786732435226,
0.10042896866798401,
0.07357171177864075,
-0.04717494174838066,
-0.03339877352118492,
-0.028889084234833717,
0.15576571226119995,
-0.006276337429881096,
-0.12491851300001144,
-0.05944129452109337,
0.02804054692387581,
-0.010314472950994968,
-0.025464734062552452,
-0.038431961089372635,
0.09237451106309891,
0.0022277364041656256,
-0.001597192487679422,
-0.07377519458532333,
0.11015534400939941,
-0.07614842802286148,
0.10775198042392731,
-0.056451648473739624,
-0.18690943717956543,
0.001933719264343381,
-0.08781100064516068,
0.08541878312826157,
-0.004922574386000633,
0.04677600786089897,
0.04763273894786835,
-0.04537077620625496,
0.11586035043001175,
0.07422036677598953,
-0.05052910000085831,
-0.07480759918689728,
0.07937857508659363,
-0.025271272286772728,
0.05637235939502716,
-0.11763275414705276,
0.04822782799601555,
0.011577633209526539,
-0.07183505594730377,
0.05187217891216278,
-0.13689985871315002,
0.10287769883871078,
0.0006077462458051741,
-0.06948628276586533,
-0.13658197224140167,
-0.06635056436061859,
-0.11229190230369568,
-0.13238775730133057,
0.12445209175348282,
0.165859192609787,
0.12499222904443741,
-0.16970983147621155,
-0.11829600483179092,
-0.017617259174585342,
-0.00937761552631855,
0.11177012324333191,
-0.06279928982257843,
0.07598922401666641,
-0.01901867613196373,
0.16502214968204498,
0.05965485796332359,
-0.019407659769058228,
0.004706359934061766,
0.08489054441452026,
-0.006562034133821726,
-0.0851021483540535,
0.029647771269083023,
0.018479513004422188,
0.10393062233924866,
-0.11711643636226654,
-0.0406208261847496,
0.10487957298755646,
-0.04815848171710968,
-0.06691768765449524,
0.0248862374573946,
-0.10767699778079987,
0.08753466606140137,
0.008715466596186161,
0.08920430392026901,
-0.11000462621450424,
-0.019363366067409515,
-0.05071656405925751,
0.10976381599903107,
-0.023018687963485718,
0.052498992532491684,
-0.09957974404096603,
0.10453052818775177,
0.08642800152301788,
-0.06116079166531563,
-0.024419456720352173,
0.07100064307451248,
-0.04149668663740158,
0.05238316208124161,
0.052611589431762695,
0.06755398213863373,
0.014061176218092442,
-0.0946224257349968,
-0.11751297861337662,
-0.1738976240158081,
-0.01027909480035305,
0.07789403945207596,
-0.03711530938744545,
-0.05628207325935364,
-0.08243082463741302,
0.02806202694773674,
0.02000187523663044,
-0.008286133408546448,
-0.11554453521966934,
-0.05503415688872337,
-0.06687813252210617,
0.11008003354072571,
-0.21189704537391663,
-0.07075304538011551,
-0.07474533468484879,
-0.11536425352096558,
0.004135793074965477,
-0.11134574562311172,
-0.038827817887067795,
0.02848997712135315,
0.10133174806833267,
0.17820119857788086,
0.10328330844640732,
-0.044826604425907135,
0.08718355745077133,
0.0457925945520401,
-0.04925073683261871,
-0.047629617154598236,
0.12354718893766403,
-0.07877501100301743,
0.1024991050362587,
-0.12996597588062286,
0.028867153450846672,
0.1306733787059784,
-0.07806334644556046,
0.10420352220535278,
0.04954869672656059,
0.03800555318593979,
0.087599977850914,
-0.02970806322991848,
-0.04971162974834442,
0.027749639004468918,
-0.04022346809506416,
0.11543592810630798,
0.04708505794405937,
-0.08262874186038971,
0.053786251693964005,
0.1150665432214737,
-0.07819685339927673,
-0.07661538571119308,
-0.12758247554302216,
-0.06104445457458496,
-0.05909371376037598,
0.08011794090270996,
0.11278367787599564,
-0.07633744180202484,
-0.09778717160224915,
-0.06646807491779327,
0.13396169245243073,
0.12003828585147858,
0.059161748737096786,
-0.06019077077507973,
-0.05811358988285065,
-0.009632275439798832,
0.003201749874278903,
-0.06900717318058014,
0.08323723822832108,
0.0905895009636879,
0.006146261468529701,
-0.050361499190330505,
0.09002771973609924,
0.10757750272750854,
0.06011882796883583,
-0.07429630309343338,
-0.10739368200302124,
-0.171634241938591,
0.030049946159124374,
0.0017961454577744007,
0.04273848235607147,
0.017296090722084045,
-0.010317464359104633,
0.01823221519589424,
0.07943854480981827,
0.07076308876276016,
-0.02513132058084011,
-0.0489824004471302,
-0.11715096980333328,
0.04605308920145035,
0.029834432527422905,
0.038909852504730225,
-0.07591896504163742,
-0.04274870827794075,
-0.03828182443976402,
0.07605398446321487,
0.01282756868749857,
0.06000356003642082,
0.07348757982254028,
0.004138210788369179,
0.0921153724193573,
-0.09002548456192017,
-0.10960947722196579,
-0.09321116656064987,
0.08490739017724991,
0.06698492914438248,
-0.03794541209936142,
0.05622391030192375,
-0.14598841965198517,
-0.0841706246137619,
0.06504309177398682,
0.1353439837694168,
-0.07204999774694443,
-0.12571381032466888,
-0.04769821837544441,
0.0015876295510679483,
0.08498255908489227,
-0.06655784696340561,
0.0637546256184578,
0.02530442364513874,
0.05763840675354004,
0.13445669412612915,
0.10629665106534958,
0.013874919153749943,
-0.04191619157791138,
0.12319456785917282,
-0.02193446084856987,
0.042007025331258774,
0.08682253956794739,
0.032988693565130234,
0.00677848607301712,
0.0028409017249941826,
-0.0680704265832901,
0.05709708109498024,
0.06637934595346451,
0.07976608723402023,
0.022171683609485626,
0.11002540588378906,
0.09595753997564316,
-0.17818371951580048,
0.035001516342163086,
-0.103892020881176,
0.046148378401994705,
0.05779982730746269,
-0.11112961918115616,
-0.13610084354877472,
0.014717045240104198,
-0.058018628507852554,
-0.05494645610451698,
0.2959917485713959,
0.3319493234157562,
0.28353121876716614,
0.19457457959651947,
0.09769754111766815,
-0.010729202069342136,
-0.048080574721097946,
0.026675187051296234,
0.05433959141373634,
0.12373393774032593,
0.19996632635593414,
0.14784827828407288,
0.0794033408164978,
0.05035765841603279,
0.09744907170534134,
0.19733849167823792,
0.29373931884765625,
0.18630576133728027,
0.1267940253019333,
0.035691339522600174,
0.20988592505455017,
0.22439263761043549,
0.27465832233428955,
0.10804932564496994,
0.033152904361486435,
0.004793795291334391,
0.08536772429943085,
-0.07632534950971603,
0.0532216876745224,
-0.0669407844543457,
0.04721968621015549,
0.09142742305994034,
-0.006570397410541773,
0.011362911202013493,
-0.026597604155540466,
-0.010153662413358688,
0.0750889852643013,
-0.06154444068670273,
0.053175244480371475,
-0.07800823450088501,
-0.10973033308982849,
-0.10304542630910873,
-0.12802374362945557,
0.0014969275798648596,
-0.06938643753528595,
-0.008865982294082642,
-0.12601026892662048,
-0.07424518465995789,
0.08311163634061813,
-0.015188386663794518,
0.09213162213563919,
0.04512018337845802,
0.012720187194645405,
0.013453665189445019,
0.04424311965703964,
0.07747885584831238,
-0.024634109809994698,
0.00751353008672595,
0.11535943299531937,
-0.04032105952501297,
0.06671515107154846,
0.08962314575910568,
0.09913305938243866,
-0.049607306718826294,
-0.03597952425479889,
-0.1156001016497612,
-0.012494079768657684,
-0.12123849242925644,
0.018419813364744186,
0.04354233294725418,
-0.08561219274997711,
-0.11399354785680771,
-0.0634431391954422,
-0.09712305665016174,
-0.0706143006682396,
0.14821122586727142,
0.16555359959602356,
0.023612812161445618,
0.10137158632278442,
0.14623193442821503,
-0.04130896180868149,
-0.05124310031533241,
-0.05782848969101906,
-0.011771089397370815,
-0.029381411150097847,
-0.06075088679790497,
-0.08498014509677887,
-0.0403464213013649,
0.005422513000667095,
0.09393774718046188,
-0.03805570676922798,
-0.10395831614732742,
0.08930844068527222,
-0.07224669307470322,
0.05572181195020676,
-0.02931784838438034,
-0.10627192258834839,
-0.018603907898068428,
-0.08198069036006927,
-0.00759161775931716,
-0.008906876668334007,
0.07472052425146103,
0.11534237116575241,
0.028376717120409012,
0.08072921633720398,
0.12326804548501968,
0.018232982605695724,
-0.06686995178461075,
0.03076579049229622,
-0.05399731919169426,
0.12338682264089584,
0.08873152732849121,
0.11374612152576447,
-0.0033690996933728456,
-0.05268990993499756,
-0.06203502044081688,
0.026539010927081108,
0.07730945944786072,
-0.029257867485284805,
-0.009037213400006294,
-0.07858491688966751,
-0.022640729323029518,
-0.10601210594177246,
-0.0737566128373146,
-0.02189631760120392,
0.0787007063627243,
0.13261133432388306,
0.07288573682308197,
-0.024281827732920647,
-0.011013718321919441,
-0.04215133562684059,
0.07475685328245163,
-0.006557629443705082,
0.16592960059642792,
0.07321637123823166,
-0.04964551702141762,
-0.17710964381694794,
-0.0213989969342947,
0.03202240169048309,
0.011250574141740799,
-0.11492568999528885,
-0.0670652687549591,
0.026386195793747902,
0.04501418024301529,
0.01525756437331438,
0.04906933009624481,
0.10260358452796936,
-0.11664486676454544,
0.09934251010417938,
-0.1311936378479004,
-0.066205233335495,
0.04269999638199806,
-0.003598988289013505,
-0.05278189107775688,
-0.18072202801704407,
0.017572278156876564,
0.06613310426473618,
0.05313292145729065,
-0.16273368895053864,
-0.31671348214149475,
0.027234816923737526,
0.07202773541212082,
-0.028594953939318657,
0.003539693308994174,
-0.14297398924827576,
-0.15257908403873444,
-0.21983517706394196,
-0.052980344742536545,
0.007838445715606213,
0.08328302949666977,
-0.17006798088550568,
-0.30903318524360657,
-0.18810822069644928,
-0.08546140789985657,
-0.0040980312041938305,
-0.07142067700624466,
0.04883649945259094,
-0.04908757284283638,
-0.006360870786011219,
-0.0831451416015625,
-0.010737174190580845,
-0.018304668366909027,
0.03641950339078903,
-0.025400737300515175,
0.09226921200752258,
-0.1000145748257637,
-0.1283082216978073,
-0.013083532452583313,
0.10410302877426147,
0.0502631776034832,
-0.07496742159128189,
-0.11257589608430862,
0.06009944900870323,
-0.04542887583374977,
0.0343792587518692,
0.14517761766910553,
0.08752425014972687,
0.09603247046470642,
-0.06373894214630127,
0.06544709950685501,
0.01018229778856039,
0.09095308184623718,
0.05728115886449814,
0.07534565776586533,
0.08536231517791748,
-0.08660135418176651,
-0.0967988446354866,
0.12424027174711227,
0.1080503910779953,
0.11621907353401184,
-0.1112193837761879,
-0.1590326875448227,
-0.008632476441562176,
-0.03412872552871704,
0.12749195098876953,
-0.030876437202095985,
-0.09214425832033157,
-0.045910079032182693,
0.05531441420316696,
0.09933936595916748,
0.09068261086940765,
-0.0002051631745416671,
-0.0972180888056755,
0.048720840364694595,
0.026319770142436028,
0.03089093416929245,
-0.01067749410867691,
0.018775947391986847,
-0.017010251060128212,
-0.047355521470308304,
-0.1279013454914093,
-0.10305234044790268,
0.10228323936462402,
0.1016824021935463,
0.031503722071647644,
-0.14369602501392365,
-0.00442076800391078,
0.0029084684792906046,
0.03297154977917671,
0.04539652168750763,
-0.05093134194612503,
-0.15773586928844452,
0.0043443795293569565,
0.017112089321017265,
-0.024756964296102524,
0.021536409854888916,
0.03280840441584587,
-0.02954026684165001,
0.03680845722556114,
0.03301914408802986,
0.03493911027908325,
-0.005402583163231611,
-0.03757768124341965,
0.07411277294158936,
-0.05336527153849602,
0.0037882523611187935,
-0.010525294579565525,
-0.06714413315057755,
0.11324436962604523,
-0.022976789623498917,
-0.15344597399234772,
-0.037489283829927444,
-0.018935753032565117,
0.02370346523821354,
0.17455153167247772,
0.022348519414663315,
-0.04739294946193695,
0.00963669829070568,
0.008281232789158821,
0.06458690762519836,
0.09130198508501053,
0.04760175198316574,
-0.10896012932062149,
-0.041265200823545456,
-0.04510948061943054,
-0.008220548741519451,
0.11075092107057571,
0.1510743498802185,
-0.05800854042172432,
0.017560722306370735,
-0.17117740213871002,
-0.0834064781665802,
-0.04754914715886116,
0.09215764701366425,
-0.08654126524925232,
0.04570368304848671,
0.024168627336621284,
-0.024099299684166908,
0.06835488975048065,
-0.004004430491477251,
-0.05922841280698776,
0.057859230786561966,
-0.0016950949793681502,
0.0929705798625946,
-0.0527057908475399,
0.09488340467214584,
-0.036767348647117615,
-0.03829937055706978,
0.08491828292608261,
0.06577539443969727,
0.05382739007472992,
0.11502078920602798,
0.08767041563987732,
-0.01631126180291176,
-0.030636323615908623,
0.02827642112970352,
-0.09805033355951309,
-0.043220896273851395,
-0.04255436360836029,
-0.13492122292518616,
-0.16206161677837372,
-0.07912702858448029,
-0.07959778606891632,
-0.09012503921985626,
-0.0400729775428772,
-0.13714271783828735,
-0.13444967567920685,
-0.2418714463710785,
-0.10664654523134232,
-0.17367170751094818,
-0.09455110877752304,
-0.06836162507534027,
-0.1461687684059143,
-0.06280869990587234,
-0.06335138529539108,
-0.12353391945362091,
-0.03441964462399483,
0.001787122106179595,
-0.0019051507115364075,
-0.011684373021125793,
-0.08476987481117249,
0.011613612994551659,
0.05797257646918297,
0.09517088532447815,
0.12876906991004944,
-0.15260133147239685,
-0.12730862200260162,
0.008181084878742695,
0.016739364713430405,
0.0035232710652053356,
-0.04720233008265495,
0.05742340534925461,
0.1376793086528778,
0.04941499978303909,
-0.0005106849130243063,
0.06593698263168335,
0.0976058691740036,
0.09426175057888031,
-0.0007020687917247415,
-0.03854312002658844,
-0.021124692633748055,
-0.09792453795671463,
0.06682378053665161,
0.14486482739448547,
0.015002276748418808,
-0.05388735979795456,
-0.04048958048224449,
0.054008062928915024,
0.04868810623884201,
0.10723812878131866,
-0.11843662708997726,
0.013494426384568214,
-0.005989908706396818,
-0.02113576978445053,
-0.05665260925889015,
-0.10895511507987976,
0.11804284155368805,
0.032426752150058746,
0.09015762060880661,
0.09276686608791351,
-0.0492524653673172,
0.07452743500471115,
-0.06409364938735962,
-0.09144452959299088,
-0.06519670784473419,
-0.10897910594940186,
-0.022893792018294334,
0.09597192704677582,
-0.0069052050821483135,
-0.0814131498336792,
-0.07568544894456863,
-0.00031452649272978306,
0.1224842369556427,
0.056181326508522034,
0.0749751627445221,
0.006656892132014036,
0.06639537960290909,
0.031760167330503464,
0.12272100150585175,
-0.024991340935230255,
-0.0901024118065834,
0.02370268665254116,
0.10947805643081665,
-0.009857123717665672,
-0.014492714777588844,
0.05894627794623375,
-0.049962203949689865,
-0.04877149686217308,
-0.04497262462973595,
-0.12233088910579681,
-0.14011503756046295,
-0.12162608653306961,
0.07251660525798798,
0.09810958802700043,
0.0667482316493988,
-0.1012611985206604,
-0.014353099279105663,
-0.025427985936403275,
0.09980815649032593,
-0.009654992260038853,
-0.0003146922681480646,
-0.11840078979730606,
0.1342959702014923,
0.05791659653186798,
-0.026016414165496826,
-0.04461023211479187,
-0.0013787749921903014,
0.07381681352853775,
0.06355462968349457,
0.08798544853925705,
0.11147841066122055,
-0.01716616563498974,
-0.006645683664828539,
0.021419133991003036,
-0.07540521770715714,
0.03530430793762207,
0.002220984548330307,
-0.10663711279630661,
0.04558287560939789,
-0.041387513279914856,
-0.05181976035237312,
-0.03233186900615692,
-0.033710233867168427,
0.11870712786912918,
0.10398363322019577,
-0.19382891058921814,
-0.13427960872650146,
-0.07014649361371994,
0.016770698130130768,
0.03442371264100075,
-0.04816807061433792,
-0.046921975910663605,
-0.07678284496068954,
0.0030277937185019255,
0.012780599296092987,
0.03659004718065262,
-0.05274804309010506,
-0.07045167684555054,
0.06500371545553207,
0.03397620841860771,
0.29017579555511475,
0.26364976167678833,
0.22634239494800568,
0.04250544682145119,
-0.2706638276576996,
0.0956345647573471,
0.22301414608955383,
0.20212632417678833,
-0.05574201047420502,
-0.12927627563476562,
0.08054206520318985,
0.1452869027853012,
0.13051466643810272,
-0.07941111922264099,
-0.19085486233234406,
-0.10466744005680084,
-0.11478409171104431,
-0.03140390291810036,
-0.11422265321016312,
0.015735769644379616,
-0.16368770599365234,
-0.198004350066185,
-0.11283829808235168,
-0.16114136576652527,
-0.056599732488393784,
0.14135490357875824,
0.05954413488507271,
-0.09588724374771118,
-0.05187254399061203,
-0.13546912372112274,
-0.11402986943721771,
0.06092233955860138,
0.040590353310108185,
0.04499363899230957,
0.07133885473012924,
-0.14425864815711975,
-0.11541596055030823,
-0.04022689908742905,
-0.06518058478832245,
-0.04177769646048546,
-0.16450779139995575,
-0.12142999470233917,
-0.06280568987131119,
-0.008829059079289436,
0.11829544603824615,
0.07622358947992325,
-0.027575435116887093,
-0.08978788554668427,
0.10566964000463486,
-0.034299030900001526,
0.09910647571086884,
0.16816969215869904,
0.004552548751235008,
-0.06991495192050934,
-0.04678795859217644,
0.030163291841745377,
-0.06836416572332382,
0.008107968606054783,
-0.047223739326000214,
0.06514911353588104,
-0.1031118705868721,
-0.024068478494882584,
-0.000970895984210074,
0.09964076429605484,
0.007848484441637993,
-0.07875540107488632,
-0.000786966469604522,
-0.08497385680675507,
0.07563469558954239,
0.033909741789102554,
-0.04718572273850441,
-0.028016557916998863,
0.03417019918560982,
0.05987576022744179,
-0.07271542400121689,
0.09426538646221161,
0.03118795156478882,
0.03080122545361519,
-0.0074299173429608345,
-0.07741612941026688,
0.010076510719954967,
0.08976862579584122,
0.10003863275051117,
-0.08408338576555252,
0.07332354038953781,
-0.04738011583685875,
-0.1129508838057518,
-0.08116345852613449,
0.08885946869850159,
-0.05874213948845863,
-0.09900050610303879,
-0.004083333071321249,
0.045586347579956055,
0.04745250195264816,
0.07820870727300644,
-0.11585714668035507,
-0.13165871798992157,
0.0934373140335083,
-0.06693973392248154,
0.06433624774217606,
0.14645211398601532,
0.1815347522497177,
0.10765383392572403,
0.06433910876512527,
-0.08501128107309341,
-0.062134891748428345,
0.013652297668159008,
0.0619535818696022,
0.03744437173008919,
-0.012717689387500286,
-0.025074489414691925,
-0.10538947582244873,
-0.11319120228290558,
-0.01663452945649624,
0.0041620610281825066,
-0.09672268480062485,
-0.08668182045221329,
0.02101537398993969,
0.01603056862950325,
0.08046969771385193,
0.0655537098646164,
0.05110473558306694,
0.07142776250839233,
0.11768744885921478,
0.13440711796283722,
0.04823046177625656,
0.008911747485399246,
0.1111992821097374,
0.014154602773487568,
0.053619738668203354,
-0.1491462141275406,
-0.010521108284592628,
0.0663590207695961,
-0.0003868097555823624,
-0.025435881689190865,
-0.05601189658045769,
0.04980058968067169,
0.00287422863766551,
0.14646288752555847,
-0.014095285907387733,
-0.047244008630514145,
-0.15689410269260406,
0.06536305695772171,
0.16330115497112274,
0.02249208465218544,
-0.20567868649959564,
-0.2656651437282562,
-0.0034334694501012564,
0.011351864784955978,
-0.023803850635886192,
0.1149897351861,
-0.01867557317018509,
-0.005242262501269579,
-0.02948666177690029,
-0.10250884294509888,
0.11018016934394836,
-0.05336029827594757,
0.022961996495723724,
-0.12245996296405792,
-0.2914699912071228,
0.040655843913555145,
0.06053602322936058,
0.0652187168598175,
0.07124309241771698,
-0.052193157374858856,
-0.11259319633245468,
-0.13129109144210815,
0.02276310697197914,
0.10286732763051987,
0.04087476804852486,
-0.159232497215271,
0.09310569614171982,
-0.014026764780282974,
0.07357829809188843,
-0.042524002492427826,
0.07499819248914719,
-0.0784350037574768,
0.01737607643008232,
0.03366381302475929,
-0.05257946625351906,
-0.13134761154651642,
-0.05066528171300888,
0.0199664905667305,
0.004742293618619442,
0.09990941733121872,
0.015899738296866417,
-0.015505924820899963,
-0.02679995447397232,
0.10004732757806778,
0.0798192098736763,
-0.035441379994153976,
-0.1423605978488922,
-0.09927058964967728,
0.05328458175063133,
0.04768846184015274,
0.008801199495792389,
-0.1042543277144432,
-0.11806908249855042,
-0.07201000303030014,
0.03387558460235596,
-0.010154827497899532,
-0.09718511998653412,
-0.022430870682001114,
0.15898799896240234,
0.035552117973566055,
-0.1155131608247757,
-0.07881498336791992,
-0.043327778577804565,
0.012285007163882256,
0.1634732484817505,
-0.12106070667505264,
-0.12431984394788742,
0.11418122053146362,
0.15607987344264984,
0.025572780519723892,
-0.11347907036542892,
-0.16290134191513062,
-0.08172662556171417,
0.13149091601371765,
-0.015546084381639957,
-0.18617193400859833,
-0.21900378167629242,
-0.18049614131450653,
0.07316470891237259,
0.043838128447532654,
-0.03275679796934128,
-0.03359265625476837,
0.06616627424955368,
0.14717429876327515,
0.10952621698379517,
0.08066121488809586,
-0.03376943990588188,
0.13354098796844482,
0.1575073003768921,
0.00454916525632143,
-0.08462103456258774,
-0.0028490405529737473,
-0.01238949503749609,
0.02895464189350605,
-0.009523756802082062,
-0.1134377047419548,
-0.14221122860908508,
-0.11443859338760376,
0.013819754123687744,
0.1235959529876709,
-0.15096122026443481,
-0.11236140131950378,
-0.13222314417362213,
0.03251675143837929,
0.1691969782114029,
0.02292294055223465,
-0.029838023707270622,
0.03036605380475521,
0.021103326231241226,
0.0371410958468914,
0.04808478057384491,
0.00791084859520197,
0.03871435672044754,
-0.03921585530042648,
0.0812659040093422,
-0.10145551711320877,
-0.08720653504133224,
0.09667017310857773,
0.12815888226032257,
0.11222860962152481,
-0.08894883096218109,
-0.003260616213083267,
-0.08058802783489227,
0.11760256439447403,
0.09860771149396896,
-0.08646393567323685,
-0.18152755498886108,
-0.021326636895537376,
0.0479179322719574,
0.1686122566461563
# 28 "src/lenet.cpp" 2
};
const dtype conv2_bias[16]={

# 1 "src/../weights/hls_bias2.txt" 1
-0.013542287983000278,
-0.023105449974536896,
0.018713749945163727,
-0.015738405287265778,
0.04439563676714897,
0.0023655241820961237,
0.005821367260068655,
0.010390592738986015,
0.017288602888584137,
-0.004888962954282761,
-0.02222341112792492,
-0.009814618155360222,
-0.016495438292622566,
-0.00902236346155405,
0.002184125129133463,
0.022402185946702957
# 31 "src/lenet.cpp" 2
};
const dtype weight1[84][(((32 -5 +1)/2 -5 +1)/2*((32 -5 +1)/2 -5 +1)/2*16)]={

# 1 "src/../weights/hls_weights1.txt" 1
-0.0528535358607769,
0.07857880741357803,
-0.05546022951602936,
-0.032158538699150085,
-0.08494843542575836,
-0.054924532771110535,
0.1496892124414444,
0.04746830835938454,
0.12615330517292023,
-0.13923154771327972,
-0.02155042067170143,
0.06642208993434906,
0.003452407428994775,
-0.025267038494348526,
-0.018211744725704193,
0.09587955474853516,
0.07319435477256775,
-0.02240149676799774,
-0.01113806664943695,
0.034691572189331055,
-0.03674817830324173,
-0.09192004799842834,
0.07598605751991272,
-0.08253341168165207,
0.06284681707620621,
-0.041737236082553864,
0.087434783577919,
0.11984159052371979,
-0.014090494252741337,
0.0024209278635680676,
-0.034382596611976624,
-0.08842086046934128,
-0.11049036681652069,
-0.043361347168684006,
0.02697746269404888,
-0.08093295246362686,
0.051764506846666336,
0.019376149401068687,
-0.055022623389959335,
-0.00756906857714057,
0.015493173152208328,
-0.0029051401652395725,
-0.02679864689707756,
0.07731307297945023,
0.06215401738882065,
0.03568775951862335,
0.13830839097499847,
0.13425584137439728,
0.0399622768163681,
0.03122135065495968,
0.04760488122701645,
0.09556462615728378,
-0.10614816099405289,
-0.07691841572523117,
-0.02634107880294323,
-0.07992424070835114,
0.05443940684199333,
-0.03208981454372406,
-0.01507953368127346,
0.047972410917282104,
0.06880056113004684,
-0.06873498857021332,
0.033446840941905975,
-0.012494348920881748,
-0.08723922073841095,
-0.10062246024608612,
0.12310265749692917,
-0.07869728654623032,
-0.04495375230908394,
-0.03149264678359032,
-0.07798860222101212,
-0.12525731325149536,
0.04113147035241127,
0.03732282295823097,
0.015336561016738415,
0.09406635165214539,
0.033597417175769806,
0.08054058253765106,
0.155110701918602,
-0.03235726058483124,
-0.11733072251081467,
-0.023728419095277786,
-0.07036982476711273,
-0.024596478790044785,
-0.04588302969932556,
-0.07617074996232986,
-0.0732617974281311,
-0.10996997356414795,
-0.018424054607748985,
0.09776551276445389,
0.010049097239971161,
-0.04107816144824028,
0.09789476543664932,
-0.06979016214609146,
0.0002121440920745954,
0.04493260011076927,
-0.08236100524663925,
0.0887223556637764,
0.07141348719596863,
0.08012384176254272,
0.051195479929447174,
-0.04553103819489479,
0.03181588649749756,
-0.0768006443977356,
0.10083956271409988,
-0.10940257459878922,
0.1162247434258461,
0.11491169780492783,
0.008530102670192719,
-0.05110229551792145,
0.11146575212478638,
-0.033750202506780624,
0.018058940768241882,
0.018875939771533012,
0.07379953563213348,
0.11093530803918839,
0.09189645946025848,
0.07401838153600693,
0.09568726271390915,
0.11141177266836166,
-0.04621994495391846,
-0.062006451189517975,
-0.05692556872963905,
0.03227176144719124,
0.060986489057540894,
0.07258079946041107,
0.013124199584126472,
0.13225984573364258,
-0.06521771848201752,
-0.03839505463838577,
0.02443893812596798,
-0.07267841696739197,
-0.10501235723495483,
-0.0614771768450737,
0.05694522336125374,
-0.0046553341671824455,
0.02019793540239334,
0.1180962324142456,
-0.018372438848018646,
0.016504831612110138,
0.07877460867166519,
0.003699494991451502,
0.0768190249800682,
-0.0793682187795639,
0.021519707515835762,
0.0015368161257356405,
0.003006906947121024,
-0.13995274901390076,
-0.023733027279376984,
-0.004778973292559385,
-0.010002975352108479,
-0.037858232855796814,
-0.042633701115846634,
0.11461395025253296,
0.001970684388652444,
0.019023116677999496,
-0.056707318872213364,
0.006716989446431398,
0.04756870120763779,
-0.029984652996063232,
-0.010799824260175228,
0.05587880685925484,
0.12485852837562561,
-0.1333688348531723,
-0.09503272920846939,
-0.04682711884379387,
-0.019754678010940552,
0.07005926966667175,
-0.007356130518019199,
-0.0760127529501915,
0.027556827291846275,
0.04593122750520706,
0.030081037431955338,
-0.04884173348546028,
-0.12001724541187286,
-0.0015532870311290026,
-0.1106053814291954,
0.03573102131485939,
0.010889173485338688,
0.03964412212371826,
-0.0026194676756858826,
-0.01655087061226368,
0.0034592298325151205,
0.002149613108485937,
-0.06809696555137634,
-0.06296298652887344,
-0.01968216523528099,
0.00024950725492089987,
0.0019451837288215756,
0.04799278825521469,
0.06351105868816376,
-0.015303201973438263,
-0.02587857097387314,
-0.030027735978364944,
0.12592339515686035,
0.03156638890504837,
0.04935086891055107,
-0.014435136690735817,
-0.03135698661208153,
0.024342279881238937,
-0.12017890810966492,
0.054471053183078766,
0.03669720143079758,
-0.03755215182900429,
0.10201434791088104,
0.10834677517414093,
0.026894332841038704,
-0.042811837047338486,
-0.11621295660734177,
-0.0783986821770668,
0.03818995878100395,
-0.009275570511817932,
-0.05840354412794113,
0.05828579142689705,
-0.0019394939299672842,
0.03206924721598625,
0.055323101580142975,
-0.054820913821458817,
-0.024006277322769165,
-0.0657399520277977,
0.00024371780455112457,
-0.038290031254291534,
-0.10249758511781693,
0.0044605485163629055,
0.07100320607423782,
-0.024880824610590935,
0.15376436710357666,
0.08442594110965729,
-0.006507932208478451,
0.03849984332919121,
-0.03476516157388687,
0.0623924545943737,
0.010545967146754265,
-0.12315396964550018,
0.05905362218618393,
-0.019844092428684235,
-0.01048915646970272,
0.05108483135700226,
-0.0019835405983030796,
0.10571135580539703,
-0.07503244280815125,
-0.12122271209955215,
0.04605133458971977,
-0.09060009568929672,
-0.04486801475286484,
-0.07675530016422272,
-0.0020659470465034246,
-0.06624207645654678,
-0.026538850739598274,
-0.09655632078647614,
0.016215883195400238,
-0.1192331314086914,
0.05835096538066864,
-0.15061847865581512,
-0.010516778565943241,
-0.01625833660364151,
-0.05443397909402847,
0.032168712466955185,
-0.08188240230083466,
-0.10585680603981018,
-0.05468149110674858,
-0.09166402369737625,
-0.056514449417591095,
0.01224308181554079,
-0.0584944486618042,
-0.041194263845682144,
-0.13547421991825104,
0.0008428605506196618,
-0.1310003250837326,
0.04169843718409538,
-0.09695333242416382,
-0.03150929883122444,
0.07201585918664932,
-0.004144543316215277,
-0.09676690399646759,
0.11372634023427963,
-0.1667993664741516,
0.04358939081430435,
-0.02475122921168804,
-0.03646131604909897,
-0.0885651707649231,
-0.04627940431237221,
0.03049882873892784,
0.055764537304639816,
0.10302789509296417,
0.053707074373960495,
0.08689358085393906,
0.10729952156543732,
0.07431032508611679,
0.06440897285938263,
-0.03554230555891991,
-0.04865667596459389,
-0.1021755188703537,
0.0631139725446701,
0.043437156826257706,
0.02478395402431488,
0.057412177324295044,
-0.14006322622299194,
0.04289403557777405,
-0.05063370242714882,
0.06871529668569565,
-0.08145435154438019,
-0.06524447351694107,
0.12698334455490112,
-0.036542825400829315,
0.038785915821790695,
0.13192519545555115,
0.0005791796720586717,
-0.012727934867143631,
0.13517503440380096,
-0.005215801298618317,
-0.03066319413483143,
-0.05327697470784187,
-0.0023598941043019295,
0.10769156366586685,
-0.09637835621833801,
0.13144679367542267,
0.07536928355693817,
0.09096413850784302,
0.06592018157243729,
0.039158813655376434,
-0.10235960781574249,
-0.08060025423765182,
0.1362442523241043,
-0.07223482429981232,
0.026496117934584618,
-0.01359631959348917,
0.01608576439321041,
-0.10170745104551315,
-0.08838622272014618,
0.10820822417736053,
0.014552231878042221,
-0.13556744158267975,
-0.005947906989604235,
-0.032141197472810745,
-0.025121495127677917,
-0.0865270271897316,
-0.014338717795908451,
0.19336265325546265,
-0.003424798371270299,
-0.13407136499881744,
-0.040238458663225174,
0.07263218611478806,
0.1293892115354538,
-0.06065117567777634,
-0.09322582930326462,
-0.02010197564959526,
0.0034400830045342445,
-0.08615124970674515,
-0.015587881207466125,
-0.07434127479791641,
-0.14131580293178558,
0.08464354276657104,
0.006655903998762369,
0.0554344579577446,
0.0036551058292388916,
-0.21449042856693268,
0.08643128722906113,
0.10255347192287445,
0.07763927429914474,
-0.10019660741090775,
-0.08096474409103394,
0.07942424714565277,
-0.13464881479740143,
0.05460765212774277,
0.07597501575946808,
-0.04405972361564636,
-0.06178465113043785,
0.09697478264570236,
-0.017895646393299103,
0.11368511617183685,
0.0025706456508487463,
-0.02827492542564869,
0.048583075404167175,
0.06727957725524902,
-0.01544184610247612,
-0.0035538587253540754,
0.06149601936340332,
0.05173591896891594,
0.02165132574737072,
0.14627815783023834,
-0.012245457619428635,
0.05083076283335686,
-0.11804202944040298,
0.06595336645841599,
-0.08642619848251343,
0.1255771964788437,
0.09201117604970932,
-0.07035431265830994,
0.08116015791893005,
0.0962771475315094,
0.09382043778896332,
0.007350259926170111,
0.16304393112659454,
0.0625218003988266,
0.0020428274292498827,
0.011842228472232819,
0.049517177045345306,
-0.12046174705028534,
-0.005976271815598011,
-0.11308739334344864,
-0.016159938648343086,
0.04391436651349068,
0.10560104250907898,
0.11102575808763504,
0.07303321361541748,
-0.00339709734544158,
0.11086171865463257,
0.07028717547655106,
-0.017424430698156357,
0.17005711793899536,
0.046860095113515854,
0.059492647647857666,
0.03840935602784157,
0.057443853467702866,
-0.05845155194401741,
-0.05440254136919975,
-0.14826010167598724,
-0.059080228209495544,
0.04320582374930382,
0.03317135572433472,
-0.01909026689827442,
-0.03970993682742119,
0.01315127220004797,
-0.11479704082012177,
0.0038351663388311863,
-0.04946814104914665,
-0.06857302784919739,
-0.026687491685152054,
-0.13477151095867157,
-0.0650152713060379,
0.08189702033996582,
0.009852776303887367,
0.0048842160031199455,
-0.13598217070102692,
0.09386719763278961,
0.021658234298229218,
0.0023843017406761646,
-0.1663013994693756,
0.1290280520915985,
0.06242820620536804,
-0.02411176823079586,
0.022607354447245598,
-0.06285560131072998,
-0.08425144106149673,
-0.002790996339172125,
0.01777900755405426,
0.058726679533720016,
-0.0005342169315554202,
-0.06031384319067001,
0.08511795848608017,
0.09089910984039307,
0.014836415648460388,
0.0684976652264595,
-0.14298203587532043,
-0.02477421797811985,
-0.026726970449090004,
0.03343239799141884,
-0.07653501629829407,
0.04634324833750725,
0.03444748371839523,
0.0554288886487484,
0.060091711580753326,
0.1287778615951538,
-0.03554178774356842,
-0.041209761053323746,
0.005212478339672089,
0.027007220312952995,
-0.04091279208660126,
-0.07804659754037857,
-0.08076120913028717,
-0.038896333426237106,
-0.15592533349990845,
0.06116411089897156,
0.0006065757479518652,
0.0040988740511238575,
-0.03913566470146179,
-0.08181548118591309,
-0.0342530831694603,
0.11754923313856125,
0.09883327782154083,
0.14654238522052765,
-0.029487179592251778,
-0.05187295377254486,
0.16951972246170044,
-0.09507788717746735,
0.1353137493133545,
-0.014558912254869938,
0.05151624232530594,
-0.10404092073440552,
0.06597845256328583,
0.16245272755622864,
0.04803849011659622,
-0.01627269946038723,
-0.06406361609697342,
-0.01867654360830784,
0.0987263172864914,
0.18643638491630554,
0.015431602485477924,
0.014723198488354683,
0.039603494107723236,
-0.06043585389852524,
0.08166613429784775,
-0.0793808326125145,
0.043517399579286575,
-0.02858729101717472,
-0.05749496445059776,
0.09249449521303177,
0.10792265832424164,
0.07586762309074402,
0.023661991581320763,
0.04539480060338974,
0.02567974105477333,
0.03390638157725334,
-0.11535318940877914,
0.008151705376803875,
0.10952769964933395,
-0.12108824402093887,
0.04284006357192993,
-0.04632660001516342,
0.011299317702651024,
0.01434395182877779,
-0.01261218823492527,
0.06816384941339493,
-0.074306420981884,
0.059669118374586105,
-0.0735413134098053,
-0.06777217984199524,
-0.08815845847129822,
-0.08553393185138702,
-0.007878290489315987,
-0.13425950706005096,
0.02756688743829727,
-0.11845836788415909,
0.10893432796001434,
0.020863475278019905,
-0.037017639726400375,
0.021648313850164413,
-0.08037620037794113,
-0.12278898805379868,
-0.08753559738397598,
0.012308856472373009,
-0.025258474051952362,
-0.04739169403910637,
0.05532610043883324,
0.025262501090765,
-0.06697843223810196,
0.059601664543151855,
-0.05633309856057167,
0.036056261509656906,
-0.07123371958732605,
-0.09055926650762558,
0.015373344533145428,
0.09828751534223557,
0.00737784756347537,
0.08297323435544968,
-0.10268021374940872,
-0.0859762504696846,
-0.056136876344680786,
0.09487015008926392,
-0.0009390068589709699,
0.04647362604737282,
0.052468474954366684,
-0.019137177616357803,
0.07999452948570251,
-0.023600958287715912,
0.03478429839015007,
0.02394864149391651,
-0.014077522791922092,
0.09190232306718826,
-0.035460345447063446,
0.03911067172884941,
0.12093339115381241,
0.04895607754588127,
0.03715551272034645,
0.03485410660505295,
-0.09722641855478287,
-0.08578094840049744,
-0.04975168779492378,
0.025652868673205376,
0.05573250353336334,
0.11811436712741852,
0.07749146223068237,
-0.08570918440818787,
0.015123981051146984,
0.04785769805312157,
0.008625068701803684,
0.07867274433374405,
0.10264378786087036,
-0.030186353251338005,
0.07782981544733047,
0.04293998330831528,
0.04224419221282005,
-0.0030821263790130615,
0.0407894030213356,
0.0469919852912426,
0.07467847317457199,
0.03810127452015877,
0.014178518205881119,
0.11173509061336517,
0.03319794312119484,
-0.09669943153858185,
-0.06768623739480972,
0.04041057080030441,
0.0714067593216896,
-0.08122782409191132,
-0.13684041798114777,
0.01863620989024639,
0.02071075327694416,
0.0026842858642339706,
-0.004134700633585453,
0.017953088507056236,
-0.027743298560380936,
0.0738748088479042,
-0.03308318927884102,
-0.028827456757426262,
0.022543981671333313,
-0.12982477247714996,
0.09545640647411346,
0.07407183200120926,
-0.15755800902843475,
-0.1115465983748436,
-0.10029671341180801,
-0.12286181002855301,
-0.09355958551168442,
-0.10547903180122375,
0.2066807746887207,
-0.007383081596344709,
-0.020820023491978645,
0.06988418102264404,
0.053365349769592285,
0.12217946350574493,
-0.006058324594050646,
0.014377672225236893,
-0.07691100239753723,
-0.06347531080245972,
0.07311351597309113,
-0.02126452699303627,
-0.165580153465271,
0.06010933220386505,
0.12412945181131363,
0.0012083485489711165,
0.004224404226988554,
-0.05484883487224579,
0.04530290886759758,
-0.007744758389890194,
0.015474541112780571,
0.030020030215382576,
-0.005078603513538837,
-0.05939839407801628,
0.05281961336731911,
0.15210597217082977,
0.040410980582237244,
0.08001086115837097,
0.02379937842488289,
0.003806685796007514,
0.09856722503900528,
-0.09196136891841888,
0.0376608781516552,
-0.06480078399181366,
-0.06573065370321274,
-0.14972737431526184,
-0.07300926744937897,
-0.0386660099029541,
-0.1189841479063034,
-0.07831081002950668,
-0.03113393671810627,
-0.015100164338946342,
-0.007101348135620356,
0.08609583228826523,
0.02197968401014805,
0.15761682391166687,
0.04324561357498169,
-0.11821670830249786,
0.06360495090484619,
0.012694264762103558,
-0.14123597741127014,
0.011231059208512306,
-0.10380962491035461,
-0.014805112034082413,
-0.09011678397655487,
0.040824953466653824,
-0.023466961458325386,
-0.11214762926101685,
-0.03397832810878754,
-0.02707645483314991,
0.019054722040891647,
-0.020925916731357574,
0.042439211159944534,
0.06616071611642838,
-0.09751468896865845,
0.014763444662094116,
-0.030725235119462013,
0.12203619629144669,
0.013809265568852425,
0.08957239240407944,
0.03887251764535904,
0.0006306814029812813,
0.06354562193155289,
0.04790591821074486,
0.05377384275197983,
0.06196175515651703,
0.040470343083143234,
-0.16980570554733276,
-0.04781074821949005,
0.11038433760404587,
-0.03328584507107735,
0.10465307533740997,
0.06108506768941879,
0.03364470973610878,
-0.07799683511257172,
0.03407110646367073,
0.08380184322595596,
-0.04339059442281723,
-0.04587842524051666,
-0.003568550106137991,
0.08461932092905045,
0.15729787945747375,
-0.017895082011818886,
-0.06926845014095306,
-0.018252715468406677,
0.10042461007833481,
-0.13144215941429138,
0.04620178043842316,
-0.049560658633708954,
-0.03663552552461624,
0.028086017817258835,
0.06452861428260803,
0.09776947647333145,
-0.09006466716527939,
-0.09150392562150955,
0.02812880650162697,
0.09843616932630539,
0.08744632452726364,
0.041789084672927856,
0.06479032337665558,
0.016987068578600883,
0.11114292591810226,
0.1527339071035385,
-0.05119802802801132,
0.025983396917581558,
-0.04607703536748886,
0.05483958497643471,
-0.0534522607922554,
-0.1204371377825737,
0.02629082091152668,
-0.05587664619088173,
0.004952050279825926,
0.08157799392938614,
-0.10641937702894211,
0.05409380421042442,
0.034040115773677826,
-0.08676993101835251,
0.04178742691874504,
0.0014983299188315868,
-0.09242197871208191,
-0.10372160375118256,
0.13944080471992493,
-0.0740216076374054,
-0.0625111311674118,
-0.03291181102395058,
0.15359169244766235,
0.11586882174015045,
-0.11553002893924713,
0.10722459107637405,
0.015487761236727238,
0.02814668044447899,
-0.08041047304868698,
0.012771790847182274,
0.033249251544475555,
0.07924137264490128,
-0.18779253959655762,
-0.006497449241578579,
0.11770687252283096,
-0.013091900385916233,
0.07468560338020325,
-0.020937373861670494,
0.011689921841025352,
0.015427423641085625,
-0.018391095101833344,
-0.0076289610005915165,
-0.06482400745153427,
-0.12079304456710815,
-0.07422522455453873,
0.12827064096927643,
0.07907691597938538,
-0.017170298844575882,
-0.1862405240535736,
-0.09153061360120773,
-0.04993030056357384,
0.009539793245494366,
-0.012145774438977242,
0.18455272912979126,
0.11671070009469986,
-0.05610929802060127,
0.07031863927841187,
0.04894834756851196,
0.005273934453725815,
-0.13135062158107758,
-0.03399324789643288,
0.007247823290526867,
-0.07789567112922668,
-0.10268217325210571,
-0.0034205748233944178,
0.0897543728351593,
0.04024139419198036,
-0.0897304117679596,
0.037148866802453995,
-0.0911073312163353,
0.10520296543836594,
0.11308736354112625,
-0.05456669256091118,
0.11576808243989944,
0.07975126802921295,
0.08395897597074509,
-0.07019905000925064,
0.07321199774742126,
-0.1629132181406021,
-0.14761896431446075,
0.004962150473147631,
0.02468111924827099,
-0.049068816006183624,
0.08912070095539093,
0.0025902544148266315,
0.1069813221693039,
0.09311075508594513,
0.03262364864349365,
0.12608405947685242,
-0.06561596691608429,
0.014838813804090023,
-0.18230454623699188,
-0.0021355431526899338,
0.05471472442150116,
-0.07760059833526611,
-0.01006288081407547,
0.04481958970427513,
-0.0061700716614723206,
-0.031001277267932892,
0.05435824394226074,
0.022324033081531525,
-0.021080240607261658,
-0.10441399365663528,
-0.00728353438898921,
0.1668819636106491,
-0.11306488513946533,
-0.016147030517458916,
0.06488549709320068,
0.08494272828102112,
0.03334060311317444,
0.0625370517373085,
0.020981216803193092,
0.029221557080745697,
-0.08710078150033951,
-0.06709519773721695,
-0.07407297194004059,
-0.01348448172211647,
-0.021248171105980873,
-0.019229162484407425,
0.035745177417993546,
0.002414163900539279,
0.008960160426795483,
-0.0025797055568546057,
-0.028354546055197716,
0.16627907752990723,
0.04365998134016991,
-0.09923523664474487,
0.07763606309890747,
0.061442360281944275,
0.06247899308800697,
0.10911145806312561,
-0.07134833931922913,
-0.004425197374075651,
-0.007710711099207401,
-0.11290232092142105,
0.0750378966331482,
-0.10811970382928848,
0.054408248513936996,
-0.07724218815565109,
0.11870560050010681,
0.12433858960866928,
0.04276074469089508,
0.0913405492901802,
-0.09368563443422318,
0.08349324762821198,
-0.03903933987021446,
-0.09288021922111511,
0.019587526097893715,
-0.050537191331386566,
0.12075352668762207,
0.11428996920585632,
-0.04041431471705437,
-0.027730073779821396,
-0.07707252353429794,
-0.03481961786746979,
-0.03591492772102356,
0.0672532245516777,
0.02016666904091835,
0.07942330837249756,
0.0017261167522519827,
-0.09266673773527145,
0.0596633106470108,
0.013055753894150257,
0.06121549382805824,
-0.06366334855556488,
0.054492052644491196,
-0.07534471154212952,
-0.028207313269376755,
0.0683349221944809,
-0.04468705877661705,
-0.054428670555353165,
-0.002098019700497389,
-0.04047159478068352,
0.04864266514778137,
-0.0658143013715744,
0.09404544532299042,
-0.054541267454624176,
0.1005769670009613,
0.03899300843477249,
-0.061362773180007935,
-0.01419314369559288,
-0.004668254870921373,
-0.0019268065225332975,
0.013828685507178307,
-0.021434899419546127,
0.011109163984656334,
-0.1548001766204834,
0.024781296029686928,
0.057829130440950394,
-0.10132569074630737,
-0.04871722683310509,
-0.025678128004074097,
0.09472095966339111,
0.02917545847594738,
-0.04586426541209221,
-0.035942453891038895,
-0.026824893429875374,
-0.09001217037439346,
-0.09717582166194916,
0.055214036256074905,
-0.015239464119076729,
0.16690492630004883,
0.019610276445746422,
-0.08195418864488602,
-0.018050046637654305,
-0.11679564416408539,
0.11804775893688202,
-0.06869406998157501,
0.14500081539154053,
-0.059761207550764084,
-0.08298564702272415,
0.03493357449769974,
0.02149900235235691,
-0.09812107682228088,
-0.06886352598667145,
-0.09674187749624252,
-0.07822898775339127,
0.047688767313957214,
0.09975877404212952,
0.0900379940867424,
0.15253695845603943,
0.05471236631274223,
0.014904803596436977,
0.10092325508594513,
0.03927202522754669,
0.06872063130140305,
0.05070513114333153,
0.06544540077447891,
0.10994818806648254,
0.161758691072464,
-0.000607022549957037,
0.05151711031794548,
-0.07635588943958282,
0.11033932119607925,
-0.011588006280362606,
-0.03230626881122589,
-0.06217733025550842,
-0.05407937243580818,
-0.030547400936484337,
0.008076108060777187,
0.002894730307161808,
-0.018268248066306114,
0.09965001791715622,
0.06067192927002907,
-0.03158172592520714,
-0.04007616266608238,
0.06956005096435547,
0.1376267820596695,
-0.06388792395591736,
0.026180695742368698,
-0.06522461771965027,
0.11332882940769196,
0.09387055039405823,
-0.03993411362171173,
-0.07039666920900345,
0.029533762484788895,
0.0003960355243179947,
0.09145397692918777,
-0.027807878330349922,
0.14397647976875305,
0.12996114790439606,
-0.015190154314041138,
-0.042226918041706085,
-0.041376806795597076,
-0.042921535670757294,
-0.04230516031384468,
-0.13196484744548798,
0.08364813029766083,
-0.14767304062843323,
-0.09719359874725342,
-0.003562972880899906,
0.06718748062849045,
0.020737119019031525,
-0.04534883797168732,
-0.04783589765429497,
-0.08390195667743683,
0.0979120284318924,
0.06044183298945427,
-0.0702044665813446,
-0.06315207481384277,
-0.057114098221063614,
0.014476715587079525,
-0.07226566225290298,
0.008548276498913765,
-0.03589468076825142,
0.037187762558460236,
-0.055096566677093506,
0.09086990356445312,
-0.12090828269720078,
-0.06597380340099335,
0.01709243282675743,
-0.13332802057266235,
-0.004056886769831181,
-0.043259330093860626,
0.08068754523992538,
0.037592507898807526,
0.010104295797646046,
-0.027609238401055336,
-0.006656488869339228,
-0.007805745583027601,
0.08088712394237518,
0.09371629357337952,
0.019761357456445694,
0.12308508902788162,
-0.07129097729921341,
0.001214967924170196,
0.07103204727172852,
0.07173126190900803,
0.07351900637149811,
-0.0021809374447911978,
-0.055176977068185806,
-0.009455128572881222,
0.06376004219055176,
-0.09273376315832138,
0.04235278069972992,
0.07367599010467529,
-0.08766546100378036,
-0.027584290131926537,
0.04381295293569565,
0.0006356879603117704,
0.002657125936821103,
-0.0868857204914093,
0.14107990264892578,
-0.011535120196640491,
-0.08443843573331833,
-0.024614367634058,
0.009581650607287884,
0.07608094811439514,
0.015380196273326874,
0.027227649465203285,
-0.0018801481928676367,
-0.008801675401628017,
0.010170144960284233,
-0.0807352364063263,
0.060575418174266815,
0.002965384628623724,
0.01786835305392742,
-0.012341927736997604,
-0.022401459515094757,
0.10900413244962692,
0.0023169582709670067,
0.0772196501493454,
-0.012595808133482933,
-0.06328850239515305,
0.09375292807817459,
0.07973676174879074,
-0.058602456003427505,
0.06209779530763626,
0.052888911217451096,
0.012364044785499573,
0.0224397424608469,
0.07547968626022339,
0.05060987547039986,
0.027176083996891975,
0.08748073130846024,
-0.01753712259232998,
-0.0685882642865181,
-0.052234284579753876,
-0.05084054172039032,
-0.07553547620773315,
0.05822436884045601,
0.05811680480837822,
-0.110293447971344,
-0.03826941177248955,
0.08290398865938187,
0.05360294505953789,
0.10996324568986893,
0.2177256941795349,
-0.020209843292832375,
-0.02443724311888218,
-0.033249158412218094,
0.003209916176274419,
-0.12606120109558105,
0.012942273169755936,
-0.11663372814655304,
-0.11580365896224976,
0.01260498445481062,
0.04352880269289017,
-0.10631207376718521,
-0.03658664599061012,
-0.09785445779561996,
-0.002806317061185837,
0.07856208831071854,
-0.013161757029592991,
0.10307343304157257,
-0.04019481688737869,
0.14655324816703796,
-0.0343388095498085,
0.081162229180336,
-0.061430808156728745,
-0.003956400789320469,
0.1374484747648239,
-0.012270460836589336,
-0.024671446532011032,
-0.02471139281988144,
-0.06371647864580154,
-0.04365767166018486,
0.01844053901731968,
0.01234773825854063,
0.03159140422940254,
0.010026183910667896,
-0.01385459490120411,
0.05755825713276863,
0.02882091887295246,
0.017950790002942085,
0.15097670257091522,
0.03913547471165657,
0.02221423201262951,
-0.05706385150551796,
0.050389617681503296,
0.10824418812990189,
-0.11009897291660309,
-0.07489746809005737,
-0.08901931345462799,
-0.031188450753688812,
0.09648563712835312,
-0.09927847981452942,
0.027906149625778198,
-0.03704701364040375,
-0.023565275594592094,
0.03493520990014076,
-0.007451161742210388,
-0.1304512768983841,
0.011490016244351864,
0.0731583908200264,
-0.07136973738670349,
-0.09333018958568573,
0.11942381411790848,
-0.1786321997642517,
-0.03531575947999954,
0.08781935274600983,
0.04183846339583397,
0.026073196902871132,
0.07019919902086258,
-0.005545152351260185,
0.05340908095240593,
-0.0654028058052063,
-0.05871085077524185,
-0.014074052684009075,
-0.06862619519233704,
-0.03493260219693184,
-0.03831154853105545,
-0.06732198596000671,
-0.013360445387661457,
-0.06710895150899887,
-0.06452800333499908,
0.04197772219777107,
0.025620654225349426,
-0.14015260338783264,
0.03404731675982475,
0.060839906334877014,
-0.18095427751541138,
-0.13903731107711792,
0.030609702691435814,
-0.04385247454047203,
-0.003611465450376272,
-0.009040557779371738,
-0.06433455646038055,
-0.06969958543777466,
0.036175765097141266,
-0.02165677584707737,
0.08629635721445084,
4.72723477287218e-05,
-0.16965682804584503,
0.052922144532203674,
0.08411732316017151,
-0.09022955596446991,
-0.02338591404259205,
0.1130908653140068,
0.08706670254468918,
0.08385856449604034,
0.07536570727825165,
-0.0803232491016388,
0.021965404972434044,
-0.004732686560600996,
0.04338363930583,
-0.009698477573692799,
0.03777969628572464,
-0.05645139887928963,
-0.017805123701691628,
-0.1336866319179535,
0.28593170642852783,
0.0992593765258789,
-0.04103850945830345,
-0.009909233078360558,
0.03293503448367119,
-0.06358364224433899,
0.09231729060411453,
0.024302341043949127,
-0.13429668545722961,
0.035493962466716766,
-0.07755202054977417,
-0.055642593652009964,
-0.12917102873325348,
0.011301655322313309,
-0.13299846649169922,
-0.01806637831032276,
0.06101733446121216,
-0.0818319022655487,
0.04188093915581703,
0.048031117767095566,
0.003754727076739073,
-0.04383751004934311,
-0.09542838484048843,
0.051189906895160675,
0.037730053067207336,
-0.09514737129211426,
0.013558418489992619,
0.06479223072528839,
0.009460299275815487,
-0.04684196040034294,
0.07328157871961594,
-0.10096272826194763,
-0.03213173896074295,
-0.03632643446326256,
-0.11718837171792984,
-0.15244276821613312,
0.0009660468786023557,
0.09324029088020325,
-0.004608071409165859,
0.0667327344417572,
-0.0637054443359375,
0.05941363796591759,
-0.08180606365203857,
0.05846259370446205,
-0.02940318174660206,
-0.008775567635893822,
0.03487837687134743,
-0.1147981658577919,
-0.03320414945483208,
-0.04415302351117134,
0.014706609770655632,
-0.16235153377056122,
0.1585521548986435,
0.014599734917283058,
-0.15919357538223267,
0.13661327958106995,
0.029544148594141006,
-0.046338893473148346,
0.04009174555540085,
0.16031455993652344,
0.019312255084514618,
0.10987919569015503,
-0.0077958256006240845,
-0.06729989498853683,
-0.019285311922430992,
0.07566982507705688,
0.03553362935781479,
0.05825376883149147,
-0.1059793159365654,
0.005835612770169973,
0.05611874535679817,
-0.15380239486694336,
0.10921981185674667,
0.14531607925891876,
0.042566873133182526,
0.09662366658449173,
0.0007369194063358009,
0.023944014683365822,
0.022783922031521797,
-0.11587414145469666,
0.12101403623819351,
-0.051020558923482895,
0.11475031077861786,
0.05941789597272873,
0.07993090897798538,
0.031875427812337875,
0.06034645438194275,
-0.05441451445221901,
-0.07511359453201294,
0.0660010427236557,
-0.023410527035593987,
-0.014722080901265144,
0.0661463662981987,
-0.10033673048019409,
0.07880567014217377,
0.08451908826828003,
0.14856916666030884,
-0.040874920785427094,
0.011654936708509922,
0.09616205841302872,
-0.12435009330511093,
-0.09936615079641342,
-0.09826301038265228,
0.01404306385666132,
0.040162935853004456,
0.02714335173368454,
0.05984190106391907,
-0.10039370507001877,
-0.09746595472097397,
-0.1349552422761917,
0.10887981206178665,
0.14520272612571716,
-0.1411513090133667,
-0.06891080737113953,
0.0741947740316391,
0.10357968509197235,
-0.07157883793115616,
0.02646861970424652,
0.07003521174192429,
-0.07761187106370926,
0.00040914284181781113,
-0.11011940985918045,
0.004242046270519495,
-0.018520958721637726,
-0.1278054416179657,
0.0033927783370018005,
0.027313506230711937,
-0.056725405156612396,
-0.02224600501358509,
-0.09231787174940109,
-0.10679475218057632,
0.10527080297470093,
0.07866634428501129,
0.04101385548710823,
-0.12143968790769577,
-0.004368724767118692,
-0.032324813306331635,
-0.044393643736839294,
0.04114513471722603,
0.16208231449127197,
0.0627657100558281,
-0.007693177554756403,
-0.13425011932849884,
-0.09481828659772873,
-0.05089261010289192,
-0.036625172942876816,
-0.07365047186613083,
0.018078375607728958,
-0.17326420545578003,
0.00975804217159748,
-0.06497661769390106,
-0.11231642216444016,
-0.03741239383816719,
0.043856121599674225,
0.043117426335811615,
0.08939069509506226,
-0.108101986348629,
-0.08194979280233383,
-0.1389923393726349,
-0.032158900052309036,
0.14423541724681854,
-0.02832283452153206,
0.14759427309036255,
0.15620599687099457,
0.02887650765478611,
0.01376674696803093,
-0.0068498533219099045,
-0.021621141582727432,
-0.024792293086647987,
0.052605848759412766,
-0.048890307545661926,
0.028233177959918976,
-0.03078923560678959,
0.00044518528738990426,
0.017580391839146614,
0.07347805798053741,
-0.08981575071811676,
0.09552551805973053,
0.05226261913776398,
-0.037096284329891205,
-0.018862009048461914,
-0.00679819518700242,
0.034070197492837906,
-0.01904306747019291,
0.005418671295046806,
0.058496538549661636,
0.15582917630672455,
-0.0823558121919632,
0.011364045552909374,
-0.0223655104637146,
0.10321006923913956,
-0.05690031871199608,
0.054636746644973755,
0.10283364355564117,
0.026825420558452606,
-0.06327870488166809,
0.051758889108896255,
-0.052450649440288544,
-0.04683646559715271,
0.0009837254183366895,
0.1390693634748459,
0.09333502501249313,
0.11552754044532776,
-0.11019161343574524,
-0.12815846502780914,
0.03944730758666992,
0.05857732146978378,
0.10218039155006409,
-0.08222688734531403,
-0.049238111823797226,
-0.08872780948877335,
-0.02855435572564602,
-0.08113035559654236,
0.005119322333484888,
0.09242401272058487,
0.014467017725110054,
0.1980334222316742,
0.04407494142651558,
0.10502321273088455,
0.10844055563211441,
0.041438259184360504,
0.09378848969936371,
0.0289511289447546,
0.13347312808036804,
0.0407475121319294,
0.09553316980600357,
-0.05003656446933746,
-0.008908728137612343,
0.05264301598072052,
-0.010533899068832397,
0.1063714325428009,
-0.04088987410068512,
0.01709005981683731,
-0.04507815092802048,
0.10136541724205017,
0.0406668595969677,
-0.08293227106332779,
-0.02584812045097351,
-0.023210911080241203,
-0.050331875681877136,
0.023704415187239647,
0.0871475487947464,
-0.15731847286224365,
0.06131165847182274,
0.10668068379163742,
0.00017584863235242665,
0.10532812029123306,
-0.05882369354367256,
-0.02149209752678871,
0.01219943631440401,
0.07983367890119553,
0.074036605656147,
0.040001172572374344,
0.09331811219453812,
-0.05290324240922928,
0.06577632576227188,
-0.08332885801792145,
-0.03420993313193321,
-0.12154962867498398,
-0.03386728838086128,
0.018847770988941193,
0.04916656017303467,
-0.11406492441892624,
0.0007051644497551024,
-0.11568744480609894,
0.0070572164840996265,
0.1205228641629219,
0.038325510919094086,
-0.09780550003051758,
0.03725391626358032,
-0.03953398019075394,
0.0727447122335434,
0.06515300273895264,
-0.04016447439789772,
-0.06677819043397903,
-0.08749690651893616,
-0.10176415741443634,
-0.011327449232339859,
0.02942912094295025,
-0.05489807948470116,
-0.1579698920249939,
-0.027415823191404343,
-0.04787718504667282,
0.07024117559194565,
0.0612422451376915,
0.044772058725357056,
0.0543050542473793,
0.14525189995765686,
-0.008703856728971004,
-0.05746157467365265,
0.042712725698947906,
-0.015147862024605274,
0.018443109467625618,
-0.0011181725421920419,
-0.038228683173656464,
0.037975095212459564,
0.08949001133441925,
0.031511154025793076,
0.13218089938163757,
0.07439728081226349,
0.028397098183631897,
0.06920737773180008,
0.04866727069020271,
0.13332624733448029,
0.016349056735634804,
-0.008859417401254177,
0.13007239997386932,
0.21640925109386444,
-0.02944399230182171,
0.050840530544519424,
0.09323810040950775,
0.03647749871015549,
0.12697462737560272,
-0.050231609493494034,
0.0359334871172905,
0.08626559376716614,
-0.08114003390073776,
0.041648127138614655,
-0.1028926819562912,
0.007320211734622717,
-0.029872048646211624,
0.05771470069885254,
0.15894223749637604,
0.10069561004638672,
0.07393298298120499,
-0.003676661057397723,
-0.03476577252149582,
0.05072082206606865,
0.052165646106004715,
0.057785555720329285,
0.0005553060909733176,
0.04142048582434654,
-0.11212058365345001,
-0.037282656878232956,
-0.0829775407910347,
-0.17502129077911377,
0.0009400894050486386,
-0.07591701298952103,
0.12785883247852325,
-0.0037435118574649096,
0.08276137709617615,
-0.11381439119577408,
-0.09027847647666931,
-0.01665607839822769,
-0.008136623539030552,
-0.11940561234951019,
0.10566558688879013,
-0.02645038813352585,
-0.07609587162733078,
-0.017630044370889664,
0.16680759191513062,
-0.0879158228635788,
-0.007870486006140709,
0.04338783025741577,
-0.05021897330880165,
0.03237147629261017,
-0.11089324206113815,
0.0298678670078516,
-0.09234127402305603,
-0.03019552305340767,
0.010668745264410973,
-0.08627147972583771,
0.057657063007354736,
0.038210682570934296,
0.0314658060669899,
-0.07715173810720444,
0.25492724776268005,
-0.043159931898117065,
0.05927610769867897,
0.020743483677506447,
-0.06981541216373444,
0.05122390389442444,
-0.07848119735717773,
0.033317022025585175,
0.10777353495359421,
-0.10965026915073395,
0.09548251330852509,
0.06809768080711365,
0.025093689560890198,
0.18232505023479462,
0.0003972911508753896,
-0.17164362967014313,
0.15527909994125366,
0.13240353763103485,
-0.08185866475105286,
0.13256512582302094,
-0.045879021286964417,
-0.03603419288992882,
-0.13019108772277832,
-0.03194064646959305,
-0.02051493152976036,
-0.10615084320306778,
-0.05133286491036415,
0.05837725102901459,
0.13584551215171814,
-0.009887194260954857,
-0.09527537971735,
-0.008839902468025684,
0.05641030892729759,
-0.0765010416507721,
-0.08546634018421173,
-0.0028765450697392225,
0.018544908612966537,
-0.04701868072152138,
0.042635977268218994,
0.10196183621883392,
0.04935164004564285,
0.015663880854845047,
-0.022549308836460114,
-0.036727435886859894,
-0.12677666544914246,
-0.07789964973926544,
-0.03275545686483383,
0.0649876818060875,
0.01293792575597763,
-0.022251708433032036,
-0.0425993986427784,
0.011595875956118107,
9.459551074542105e-05,
-0.02449967712163925,
0.05191362649202347,
0.10660655051469803,
0.0022392263635993004,
-0.015974145382642746,
0.006383095867931843,
-0.08959681540727615,
-0.028921762481331825,
0.11961179971694946,
0.06483211368322372,
0.06437093764543533,
0.08804149925708771,
0.03488196060061455,
-0.022851470857858658,
0.11334478855133057,
-0.012426434084773064,
0.10747051984071732,
-0.05975873023271561,
0.06182265654206276,
-0.0469321645796299,
-0.09600027650594711,
0.04610577970743179,
-0.06809918582439423,
0.03482469171285629,
0.1898919641971588,
-0.017880404368042946,
0.06522336602210999,
-0.009136976674199104,
-0.12211111932992935,
0.05899981036782265,
0.1391093134880066,
0.06527748703956604,
0.1631108671426773,
-0.06167018041014671,
-0.1456800401210785,
0.10758043825626373,
-0.16866827011108398,
0.02660139836370945,
0.0029385117813944817,
0.1049904152750969,
0.07054168730974197,
0.039397045969963074,
-0.021276546642184258,
0.07527798414230347,
-0.037514809519052505,
-0.17589475214481354,
-0.17542089521884918,
0.026075316593050957,
0.06492684036493301,
0.08257827162742615,
-0.10126446187496185,
-0.024011623114347458,
-0.044163599610328674,
-0.06405137479305267,
0.020480193197727203,
0.03951270878314972,
0.006090665236115456,
-0.09422410279512405,
-0.012027407996356487,
-0.0423993244767189,
0.07171674072742462,
0.02350485883653164,
-0.1075177937746048,
-0.08280765265226364,
0.06692647188901901,
-0.042673829942941666,
0.03524205833673477,
0.06749994307756424,
0.008243896998465061,
-0.027460429817438126,
0.12142805010080338,
-0.08201730251312256,
-0.08079712092876434,
-0.12667463719844818,
0.06549105793237686,
-0.07119239866733551,
-0.02678016386926174,
0.07325911521911621,
-0.016917860135436058,
-0.05650028958916664,
0.023404309526085854,
0.04774019494652748,
-0.05158109962940216,
0.029701977968215942,
0.052377428859472275,
0.03523755818605423,
0.002042320091277361,
0.10922055691480637,
0.041523952037096024,
0.06726062297821045,
-0.038217589259147644,
0.06080649793148041,
0.05104157701134682,
-0.02576262131333351,
-0.028276272118091583,
0.018495427444577217,
-0.04676932841539383,
-0.08248239755630493,
0.13069826364517212,
0.08942969888448715,
0.03919341415166855,
-0.011202773079276085,
-0.009847952052950859,
0.12197557836771011,
0.13039672374725342,
0.024281159043312073,
-0.04985911026597023,
-0.0029260602314025164,
0.1055794209241867,
0.03407822921872139,
-0.05319645628333092,
-0.11231095343828201,
-0.009969170205295086,
0.04864471033215523,
0.006100075785070658,
0.10395994037389755,
0.034583356231451035,
-0.012717762030661106,
0.12346260249614716,
0.03069355897605419,
0.004015714395791292,
0.07830972224473953,
-0.05985585227608681,
0.02870364487171173,
0.055128902196884155,
-0.03780149295926094,
-0.12372809648513794,
0.027571184560656548,
-0.028219647705554962,
0.09161809086799622,
0.03728214651346207,
-0.11174992471933365,
-0.0006542810588143766,
-0.0006375657976604998,
-0.03518391028046608,
-0.024838795885443687,
-0.008378484286367893,
0.06749825924634933,
-0.026046330109238625,
0.07393312454223633,
-0.0032525770366191864,
-0.12084096670150757,
-0.015752045437693596,
-0.08432872593402863,
0.036750197410583496,
-0.03184717521071434,
0.013785801827907562,
0.053740981966257095,
0.1250939518213272,
0.04325881600379944,
-0.08776659518480301,
0.1039942279458046,
-0.03982783108949661,
0.056516747921705246,
0.03593815863132477,
0.09150976687669754,
0.01281675323843956,
-0.005752093158662319,
0.10696574300527573,
-0.04975207895040512,
0.03318222984671593,
-0.12433066964149475,
0.0939299687743187,
0.03043336793780327,
0.020980453118681908,
-0.13101288676261902,
0.05246392637491226,
-0.06728613376617432,
-0.06552602350711823,
-0.0861312672495842,
-0.03783883899450302,
0.12322758883237839,
0.0665578842163086,
0.02584364265203476,
0.12875895202159882,
-0.02985912375152111,
0.04603680968284607,
-0.02328093908727169,
0.1365327090024948,
0.008284417912364006,
-0.09606875479221344,
0.029916586354374886,
0.050301335752010345,
-0.016407139599323273,
0.011477328836917877,
0.017619280144572258,
-0.03196154162287712,
0.024536173790693283,
-0.08412253111600876,
-0.027567148208618164,
0.0668012872338295,
-0.00696879718452692,
-0.037585265934467316,
0.005830918904393911,
0.0061554694548249245,
-0.030606484040617943,
0.020194165408611298,
0.18311890959739685,
0.029670575633645058,
0.1371472179889679,
-0.009539342485368252,
-0.13212965428829193,
0.07734259963035583,
0.16156241297721863,
-0.017609741538763046,
-0.1629306972026825,
0.020139137282967567,
0.04983825609087944,
0.0518668107688427,
0.09709298610687256,
0.01404641754925251,
-0.0605805367231369,
-0.0964517667889595,
-0.12589679658412933,
-0.005975045263767242,
0.034242164343595505,
-0.05777527019381523,
0.03655610233545303,
-0.0665489062666893,
0.09631664305925369,
-0.05689720809459686,
-0.12467687577009201,
0.01338487584143877,
-0.107827328145504,
-0.03962744027376175,
0.054976627230644226,
0.050572719424963,
-0.1469334065914154,
-0.06650642305612564,
0.03299728408455849,
0.068025603890419,
-0.06255186349153519,
0.02966454066336155,
-0.05001794919371605,
0.0523790679872036,
0.09688594192266464,
-0.05663056671619415,
-0.05249721556901932,
-0.06933724880218506,
-0.039786044508218765,
-0.09137506783008575,
0.03944932296872139,
-0.05439601466059685,
0.07809913158416748,
-0.07640808820724487,
0.015105986036360264,
-0.05028916150331497,
-0.01494643371552229,
-0.028561318293213844,
-0.13764223456382751,
-0.07686037570238113,
0.02165190503001213,
0.12400437146425247,
0.09677441418170929,
0.1430463343858719,
0.0915028378367424,
0.04167528077960014,
-0.042955778539180756,
0.0010542789241299033,
0.029809264466166496,
-0.07436311990022659,
-0.0169233251363039,
0.09991327673196793,
0.013077092356979847,
-0.047277357429265976,
-0.005232088267803192,
-0.09723849594593048,
-0.06105221062898636,
-0.054289743304252625,
0.001504924613982439,
0.0584179162979126,
-0.04869692027568817,
0.06740705668926239,
-0.0035175911616533995,
-0.07668422907590866,
-0.06093669682741165,
0.04692765697836876,
-0.06793476641178131,
-0.0961511954665184,
0.010893193073570728,
-0.04958457127213478,
-0.0369182713329792,
-0.12830504775047302,
0.1369190514087677,
-0.02373798005282879,
-0.07218066602945328,
0.02490426041185856,
-0.04106996953487396,
0.03155289217829704,
-0.07311827689409256,
-0.02892591431736946,
-0.010358181782066822,
-0.01528003066778183,
-0.011147597804665565,
0.04120972007513046,
-0.08802788704633713,
-0.10933779180049896,
-0.02315152809023857,
-0.07559988647699356,
0.007650327403098345,
0.030882565304636955,
-0.048920888453722,
-0.027504337951540947,
-0.0012348616728559136,
0.08687175065279007,
-0.06632347404956818,
-0.005937990732491016,
-0.03805715590715408,
-0.03504684567451477,
-0.021077468991279602,
0.041714299470186234,
-0.05755295604467392,
-0.04287220537662506,
-0.07384050637483597,
0.09705950319766998,
0.08749720454216003,
0.05171218886971474,
-0.028958545997738838,
0.13244158029556274,
-0.03281768038868904,
-0.1084638237953186,
0.06333736330270767,
-0.04954536259174347,
0.023772578686475754,
-0.03657696396112442,
0.0686684176325798,
0.10811662673950195,
0.014462120831012726,
0.0801619291305542,
-0.00997038371860981,
0.04459324851632118,
-0.04933014512062073,
0.09255760908126831,
-0.04375959187746048,
0.0996893048286438,
-0.03203268721699715,
0.13433003425598145,
0.019158324226737022,
0.0634392723441124,
-0.0010353541001677513,
-0.042050182819366455,
0.11972548812627792,
0.11831506341695786,
0.15820056200027466,
-0.01932714320719242,
0.018023405224084854,
-0.032580941915512085,
-0.07931002229452133,
0.13937079906463623,
-0.014651983045041561,
0.06653738021850586,
0.1393505185842514,
0.08859486877918243,
-0.0776837021112442,
-0.09537322074174881,
-0.0036054644733667374,
-0.011662300676107407,
-0.10407931357622147,
0.08941461890935898,
0.021300947293639183,
0.06484492123126984,
-0.050220973789691925,
-0.11774370819330215,
0.17584297060966492,
-0.03454792872071266,
0.06800324469804764,
0.09535408020019531,
-0.1520235687494278,
0.10037089139223099,
0.027735499665141106,
-0.006751107983291149,
-0.06286079436540604,
-0.06347911059856415,
-0.050249937921762466,
0.08369127660989761,
-0.008268012665212154,
0.07268570363521576,
0.04206950217485428,
0.03075782023370266,
0.15501031279563904,
0.07228316366672516,
-0.1139427199959755,
0.019198158755898476,
0.009914142079651356,
0.08452803641557693,
-0.08568280190229416,
0.06504030525684357,
0.08456217497587204,
-0.04848212003707886,
-0.017103711143136024,
-0.034493908286094666,
0.00672914320603013,
0.04138887673616409,
-0.07887649536132812,
0.042610883712768555,
-0.14029283821582794,
-0.020245807245373726,
0.034247588366270065,
0.03558535501360893,
0.03419458493590355,
0.064699187874794,
0.02051861584186554,
0.12447986006736755,
0.019560063257813454,
0.007419774774461985,
-0.13797608017921448,
0.018577752634882927,
-0.10757419466972351,
-0.1006077378988266,
-0.07833801209926605,
0.14761491119861603,
0.058550793677568436,
-0.037502728402614594,
0.04617958143353462,
0.050366636365652084,
-0.01335230190306902,
0.031242964789271355,
-0.02886795997619629,
-0.08498556166887283,
-0.08571447432041168,
-0.02206297218799591,
0.0005231653340160847,
-0.0036224869545549154,
0.023246070370078087,
0.0661517083644867,
0.036530718207359314,
-0.003006269922479987,
0.02435823529958725,
-0.10988416522741318,
0.03873659670352936,
-0.0647747740149498,
-0.1518644094467163,
-0.05799568071961403,
-0.2405381053686142,
-0.10597657412290573,
-0.10670683532953262,
-0.05732040852308273,
0.017706578597426414,
-0.12180150300264359,
-0.02542143315076828,
-0.13141387701034546,
0.07475952804088593,
0.006117957644164562,
0.022664949297904968,
0.09937544912099838,
-0.025187743827700615,
0.06873346865177155,
0.016761593520641327,
0.017358550801873207,
0.03677261620759964,
-0.05019403249025345,
-0.035419054329395294,
-0.1296585649251938,
0.1208619773387909,
0.023023569956421852,
-0.06841899454593658,
-0.07926550507545471,
0.002661083359271288,
-0.10726106911897659,
-0.0919174998998642,
0.08233079314231873,
-0.0464932918548584,
-0.08659379929304123,
0.07017872482538223,
-0.09750933200120926,
0.06924010068178177,
0.0017156705725938082,
0.09107068181037903,
-0.052864450961351395,
0.1330016404390335,
0.12951956689357758,
-0.05923306941986084,
0.09313258528709412,
-0.03475743159651756,
0.035222169011831284,
-0.03374282270669937,
0.03315011039376259,
0.04609373211860657,
0.02919336035847664,
-0.03757436200976372,
0.10484874248504639,
0.03273782879114151,
0.0613129585981369,
0.04382594674825668,
-0.04205853119492531,
0.039654072374105453,
0.10124494135379791,
0.08900274336338043,
0.04194708541035652,
-0.0029910854063928127,
0.0891990140080452,
0.15169796347618103,
-0.008930590935051441,
0.043533410876989365,
-0.026383360847830772,
-0.019823823124170303,
-0.01429270301014185,
-0.1353185623884201,
0.014547279104590416,
-0.08520844578742981,
-0.035629045218229294,
0.00901167280972004,
0.06901030242443085,
-0.02126348577439785,
0.06618419289588928,
-0.055287618190050125,
-0.1756988912820816,
-0.04677737504243851,
0.059848424047231674,
-0.02830972522497177,
0.01300788577646017,
-0.05608529970049858,
-0.05001797154545784,
-0.04293360188603401,
0.00908094085752964,
0.0027975060511380434,
-0.14785797894001007,
0.04514306038618088,
-0.059457097202539444,
-0.05931301414966583,
0.011584321036934853,
-0.05955873057246208,
-0.06959572434425354,
-0.00795225240290165,
0.06507700681686401,
0.24605992436408997,
0.15725891292095184,
-0.029519954696297646,
0.10921289771795273,
-0.009618395939469337,
0.13778583705425262,
-0.020738424733281136,
-0.17040789127349854,
-0.04234879091382027,
0.08202476799488068,
0.08072087168693542,
-0.06775104254484177,
0.10849937796592712,
-0.044316183775663376,
-0.08882772922515869,
-0.021309861913323402,
0.011202294379472733,
0.0719279795885086,
0.011227180249989033,
0.09317182749509811,
-0.04126681759953499,
-0.06749868392944336,
0.09477031975984573,
-0.03809110447764397,
-0.004830946680158377,
-0.04924686625599861,
0.06463047116994858,
-0.07079944014549255,
0.0562613308429718,
-0.11666539311408997,
-0.1139836311340332,
0.048255644738674164,
-0.046277906745672226,
0.08693119883537292,
-0.12325350195169449,
0.014829299412667751,
-0.05069500952959061,
-0.04641467332839966,
-0.050731319934129715,
-0.02218491956591606,
0.030986212193965912,
0.0008854325860738754,
-0.04611673951148987,
0.05700277164578438,
0.03110627271234989,
-0.08563143014907837,
0.0662488117814064,
0.015755873173475266,
0.006107984110713005,
-0.038405079394578934,
-0.12665310502052307,
0.053128816187381744,
0.1230413019657135,
0.011385881341993809,
-0.1243869885802269,
-0.0018255349714308977,
-0.036846935749053955,
-0.1169453039765358,
-0.090888112783432,
0.0353834331035614,
0.061684299260377884,
-0.08052581548690796,
0.00603083660826087,
0.1139758974313736,
-0.06755091995000839,
-0.015104446560144424,
-0.024208514019846916,
-0.07780039310455322,
0.04525032639503479,
0.14779558777809143,
0.004504742566496134,
0.04582226276397705,
0.0033107709605246782,
0.059521354734897614,
0.13678792119026184,
0.008371955715119839,
0.04872288927435875,
-0.1029597595334053,
0.028101375326514244,
0.12937131524085999,
0.20334772765636444,
0.00781194819137454,
-0.03510700538754463,
0.10670842975378036,
-0.08745499700307846,
0.044060107320547104,
0.06969514489173889,
-0.016156604513525963,
0.052117809653282166,
-0.008960199542343616,
0.10027298331260681,
0.054739803075790405,
0.08240419626235962,
-0.18588079512119293,
-0.0707770511507988,
-0.004557099658995867,
0.1381339132785797,
-0.08490563184022903,
-0.04740859195590019,
0.017092710360884666,
-0.023504547774791718,
-0.05789605528116226,
0.005774426274001598,
0.07442504167556763,
0.013815660960972309,
0.011438654735684395,
0.0811241865158081,
-0.053553223609924316,
-0.053587738424539566,
0.030247727409005165,
0.011288931593298912,
-0.15103621780872345,
0.09678191691637039,
-0.15315182507038116,
0.04649205505847931,
0.0765301063656807,
-0.024608740583062172,
0.038873061537742615,
-0.006026257760822773,
-0.09068642556667328,
-0.0009415773674845695,
-0.09961190819740295,
-0.04847833886742592,
-0.060283783823251724,
0.1092330813407898,
0.022031934931874275,
0.04814310744404793,
0.06662579625844955,
-0.01822865940630436,
-0.08502770960330963,
0.020596789196133614,
-0.008356439881026745,
-0.038887232542037964,
-0.10170174390077591,
-0.10021141916513443,
0.10268929600715637,
0.03658338636159897,
-0.09347688406705856,
0.04942507669329643,
-0.00467089144513011,
-0.09071163088083267,
-0.003404869930818677,
-0.1463809311389923,
-0.03911363705992699,
-0.0927872583270073,
-0.08294478058815002,
0.08140762895345688,
-0.02624957635998726,
0.12386038899421692,
0.09837384521961212,
-0.12091996520757675,
0.05401276424527168,
-0.09769637137651443,
0.08147208392620087,
0.12380854785442352,
-0.0019043860957026482,
0.1475844383239746,
-0.03882963955402374,
-0.1098937913775444,
0.0480966717004776,
0.12035674601793289,
-0.019334962591528893,
-0.03968651220202446,
0.1441386342048645,
-0.09769413620233536,
-0.04357553645968437,
-0.021505145356059074,
-0.06764988601207733,
0.0020586668979376554,
0.17096522450447083,
0.11501812189817429,
-0.032094888389110565,
0.11948584020137787,
-0.055980682373046875,
-0.09019048511981964,
0.01596651040017605,
0.18625333905220032,
0.0036899440456181765,
-0.04638856649398804,
0.020174600183963776,
-0.05875176563858986,
0.03608747571706772,
0.1476619690656662,
-0.05428571254014969,
0.01644696295261383,
0.0971800908446312,
-0.14937257766723633,
-0.035744208842515945,
-0.04403631016612053,
-0.06934354454278946,
-0.09274640679359436,
0.09327071160078049,
0.031070323660969734,
0.020398911088705063,
0.06938446313142776,
-0.026915881782770157,
0.20021818578243256,
-0.11862998455762863,
-0.028747955337166786,
0.06839139759540558,
-0.0094181839376688,
0.029686417430639267,
-0.06329570710659027,
-0.08294397592544556,
-0.032494254410266876,
0.00422507431358099,
-0.032167255878448486,
0.13979193568229675,
-0.011345826089382172,
-0.0856221541762352,
-0.029854027554392815,
-0.0600690059363842,
0.030372893437743187,
-0.07138588279485703,
0.07117689400911331,
0.09087604284286499,
-0.02816389687359333,
0.007410581689327955,
0.009794176556169987,
0.08543117344379425,
0.05585572496056557,
-0.06102669984102249,
-0.038314640522003174,
-0.060795530676841736,
0.059615254402160645,
0.11846975982189178,
0.07041454315185547,
0.034318212419748306,
-0.06247858703136444,
-0.08001319319009781,
-0.04434778913855553,
0.08644039183855057,
0.048317089676856995,
0.016258487477898598,
-0.06322630494832993,
0.04760162532329559,
0.043604474514722824,
-0.009955888614058495,
0.036398693919181824,
-0.013111798092722893,
-0.008658867329359055,
-0.047920893877744675,
-0.0006870857905596495,
-0.12128318846225739,
0.09552426636219025,
0.10542801767587662,
-0.05407015606760979,
0.06210614740848541,
0.03076978586614132,
-0.04036632552742958,
-0.0325642004609108,
-0.034196458756923676,
0.0060105216689407825,
0.13149632513523102,
-0.01885548233985901,
0.0033306635450571775,
0.010544407181441784,
0.07842418551445007,
-0.030438639223575592,
0.0468720979988575,
-0.027833042666316032,
-0.08686959743499756,
0.008171367458999157,
0.11107606440782547,
0.02260495536029339,
0.04479391127824783,
-0.08960357308387756,
-0.02054278366267681,
-0.046284645795822144,
0.06988593190908432,
-0.026700476184487343,
-0.022589193657040596,
-0.15190765261650085,
-0.009520187973976135,
-0.03051956184208393,
-0.02229299582540989,
0.09406327456235886,
-0.002793111838400364,
0.04976097494363785,
0.13189849257469177,
-0.09192902594804764,
-0.011551235802471638,
-0.0028237951919436455,
-0.18594130873680115,
0.05115196108818054,
0.05811399966478348,
0.11642339825630188,
-0.14099733531475067,
-0.03593515604734421,
0.10965663939714432,
-0.033741582185029984,
0.06237440183758736,
-0.07126118242740631,
0.09614348411560059,
-0.0843975692987442,
-0.0062688132748007774,
-0.14794005453586578,
-0.02147778309881687,
-0.03625540807843208,
-0.12904682755470276,
-0.052166469395160675,
-0.11739317327737808,
-0.10693255811929703,
-0.04015960916876793,
-0.03793104365468025,
-0.055820513516664505,
0.041511863470077515,
-0.10275653749704361,
-0.013515934348106384,
0.12583331763744354,
0.03017210029065609,
-0.1036260724067688,
0.06957658380270004,
0.09985958784818649,
0.026570934802293777,
0.059707414358854294,
0.022729136049747467,
0.022827351465821266,
-0.08528520911931992,
0.035537876188755035,
0.00520852766931057,
-0.04747593402862549,
-0.16592152416706085,
-0.025171440094709396,
-0.01720554009079933,
0.058787208050489426,
-0.02698666974902153,
0.030898215249180794,
0.10205577313899994,
-0.03472646698355675,
0.10079827904701233,
0.043368835002183914,
-0.0803566724061966,
-0.15142318606376648,
0.026301316916942596,
0.02353750169277191,
0.03243013843894005,
0.011151022277772427,
-0.018627531826496124,
-0.034867092967033386,
-0.017530500888824463,
0.004412008915096521,
0.02404511347413063,
-0.08057823032140732,
-0.09242672473192215,
0.017278483137488365,
0.0660218894481659,
0.03179546445608139,
0.039619676768779755,
0.08811450004577637,
0.04910033941268921,
-0.010797222144901752,
-0.10458832234144211,
-0.14404000341892242,
-0.054297927767038345,
0.03033548593521118,
0.06452050805091858,
-0.039826735854148865,
-0.060845766216516495,
0.08358210325241089,
0.07593290507793427,
0.02122335508465767,
-0.024731000885367393,
-0.011393026448786259,
-0.004959148354828358,
0.06544412672519684,
-0.05669140815734863,
0.02695302665233612,
-0.02952447161078453,
-0.10412301868200302,
-0.08656869828701019,
-0.10989663749933243,
0.0377725288271904,
0.02647412195801735,
0.055932093411684036,
0.11187811940908432,
0.026032263413071632,
0.0779833123087883,
0.13754920661449432,
-0.1040419340133667,
0.06779394298791885,
-0.12622252106666565,
-0.013932604342699051,
-0.06337158381938934,
-0.04842017590999603,
0.03564578667283058,
0.05586704984307289,
-0.06266014277935028,
0.07194527983665466,
-0.03272882476449013,
-0.07840730994939804,
0.07514951378107071,
0.07218781858682632,
0.11693862825632095,
-0.050456833094358444,
0.0588945709168911,
0.10566060245037079,
-0.0043031093664467335,
-0.19812560081481934,
-0.040117133408784866,
-0.02736056223511696,
-0.047086674720048904,
-0.015307429246604443,
0.09466221183538437,
0.08874258399009705,
-0.006114375311881304,
-0.03644043579697609,
-0.025036964565515518,
0.0702817365527153,
-0.07112585008144379,
0.05734647810459137,
-0.07948421686887741,
-0.03644735366106033,
0.05609550699591637,
-0.03420628234744072,
0.01611511781811714,
-0.09036848694086075,
-0.10885950177907944,
0.013259884901344776,
0.0348677933216095,
0.05529274418950081,
0.01106457132846117,
-0.10693204402923584,
-0.053546834737062454,
0.030850157141685486,
0.02447647787630558,
-0.026018375530838966,
-0.02179550752043724,
-0.009674649685621262,
0.03127453848719597,
-0.06753284484148026,
0.024024246260523796,
-0.13815027475357056,
-0.0262314360588789,
-0.005328151397407055,
-0.12004982680082321,
-0.10107112675905228,
-0.08125496655702591,
-0.0040226951241493225,
-0.003549042623490095,
0.05454490706324577,
-0.0008691431721672416,
-0.02694171480834484,
0.08789870142936707,
0.044063590466976166,
-0.1140330508351326,
0.032246626913547516,
0.044002242386341095,
-0.022590583190321922,
-0.03985834866762161,
-0.06696685403585434,
-0.09628140926361084,
-0.008803856559097767,
-0.004567314404994249,
0.01929146610200405,
0.010338648222386837,
0.11647751182317734,
0.0006890303338877857,
0.027280915528535843,
-0.111594557762146,
0.04356923699378967,
-0.04438326135277748,
-0.019026849418878555,
-0.16239547729492188,
0.05407695099711418,
-0.07722201943397522,
0.019554555416107178,
0.04444285109639168,
-0.01207127794623375,
-0.002544238232076168,
-0.0917929857969284,
-0.050967950373888016,
-0.000779187073931098,
0.025078464299440384,
-0.1552504450082779,
-0.056236084550619125,
-0.15600787103176117,
0.025012489408254623,
0.11542965471744537,
-0.004612102638930082,
0.08685531467199326,
0.04256952926516533,
0.057655882090330124,
0.024551628157496452,
-0.20032761991024017,
0.0470719076693058,
-0.03399013727903366,
-0.10170082002878189,
0.09249386191368103,
0.04114207997918129,
0.10850074142217636,
0.06302613765001297,
0.048869166523218155,
0.04008587822318077,
-0.047627922147512436,
-0.09852110594511032,
0.0628623217344284,
0.04163375496864319,
0.01447743084281683,
0.017605818808078766,
-0.033517781645059586,
0.008055469952523708,
-0.07594510167837143,
-0.06668952852487564,
0.0750037357211113,
0.07844904810190201,
0.13091841340065002,
-0.04655224457383156,
-0.003310039872303605,
-0.11732462048530579,
0.035369887948036194,
-0.0926719680428505,
0.09340622276067734,
0.043825309723615646,
0.00018233785522170365,
0.049077264964580536,
0.10553049296140671,
-0.06433243304491043,
0.05378885939717293,
-0.14376093447208405,
0.022801609709858894,
-0.0021812799386680126,
-0.05207102373242378,
0.07084975391626358,
-0.12502199411392212,
0.03327455371618271,
-0.21651002764701843,
0.1140485480427742,
-0.04264073818922043,
-0.13636718690395355,
0.094322070479393,
0.02762538194656372,
-0.02002578228712082,
0.05940902978181839,
0.0523553229868412,
0.06375301629304886,
0.03932778909802437,
0.07313939929008484,
0.007806175388395786,
0.09612470865249634,
0.003636229783296585,
0.05581550672650337,
-0.005171420983970165,
0.018608437851071358,
-0.12826231122016907,
0.035245612263679504,
0.13544555008411407,
-0.00738207483664155,
-0.0758592039346695,
-0.07556121051311493,
-0.003895749570801854,
-0.13125227391719818,
-0.10316942632198334,
-0.06633949279785156,
0.05946324020624161,
0.06914212554693222,
0.07713837176561356,
-0.14406217634677887,
0.07778118550777435,
0.004756071604788303,
0.00992595311254263,
0.12660999596118927,
-0.12643665075302124,
0.011016640812158585,
0.07895214110612869,
0.1314776986837387,
-0.053827203810214996,
0.02955460548400879,
-0.015696171671152115,
-0.053235359489917755,
-0.010391639545559883,
-0.048041604459285736,
0.1146567240357399,
-0.13509052991867065,
0.07748404145240784,
-0.04194575175642967,
0.08251996338367462,
0.15138547122478485,
-0.12742608785629272,
0.15061679482460022,
0.053760360926389694,
0.11874935775995255,
0.07073374837636948,
0.04971494898200035,
0.05488463491201401,
-0.03437366336584091,
-0.14301130175590515,
-0.015595868229866028,
0.06427287310361862,
0.05002452805638313,
-0.04752286151051521,
0.026763420552015305,
-0.03897235542535782,
-0.0068707591854035854,
-0.032637037336826324,
0.17811651527881622,
0.0008013828773982823,
-0.02299800142645836,
0.0768633633852005,
-0.032181769609451294,
-0.033661458641290665,
-0.04841814935207367,
-0.02254677005112171,
-0.10836963355541229,
0.023871542885899544,
-0.028564518317580223,
0.08140917122364044,
-0.040356989949941635,
0.04303768649697304,
0.20535963773727417,
-0.03688274696469307,
0.04829906299710274,
-0.017324622720479965,
0.013363523408770561,
-0.004873954225331545,
-0.15242813527584076,
0.1515977829694748,
0.05061774328351021,
0.17386193573474884,
0.07134020328521729,
0.013897847384214401,
-0.05300763249397278,
0.3231002390384674,
0.16274945437908173,
0.07398559153079987,
0.08812616020441055,
-0.058647964149713516,
0.17315936088562012,
-0.1478676199913025,
-0.01555100828409195,
0.15182417631149292,
-0.17265182733535767,
0.07920695841312408,
0.0013717211550101638,
0.06394999474287033,
0.16500289738178253,
9.681665687821805e-06,
-0.04759283363819122,
0.19937558472156525,
0.07419948279857635,
-0.23426476120948792,
0.1087714433670044,
-0.1147061437368393,
-0.0613241046667099,
0.04039033129811287,
-0.00484920060262084,
-0.1419457197189331,
-0.014017661102116108,
-0.16325898468494415,
-0.12290637195110321,
0.0639243870973587,
-0.05154108256101608,
-0.08281748741865158,
-0.05349858105182648,
0.15632402896881104,
-0.05708599090576172,
-0.1054425910115242,
-0.0183199942111969,
0.029860984534025192,
0.0357830785214901,
0.06553135812282562,
0.03533531352877617,
-0.1139298528432846,
-0.03880877420306206,
-0.005060307215899229,
-0.07732957601547241,
0.17344194650650024,
0.024200327694416046,
-0.02563995122909546,
-0.017551038414239883,
0.058334704488515854,
-0.0024153110571205616,
-0.03724713623523712,
0.033720847219228745,
-0.004637892823666334,
-0.17775355279445648,
0.14134137332439423,
0.15953218936920166,
0.014810720458626747,
-0.022109879180788994,
0.12321162968873978,
0.11752128601074219,
0.0749683827161789,
-0.007586600258946419,
0.1240711584687233,
0.06561726331710815,
0.014598443172872066,
0.02964377962052822,
0.03157331421971321,
0.06133825704455376,
0.001970627810806036,
-0.02143135480582714,
-0.029647955670952797,
-0.009174667298793793,
0.0718078687787056,
0.0409843809902668,
0.08734598755836487,
-0.004867531359195709,
0.12450885772705078,
0.11787796765565872,
0.03608447313308716,
0.025322124361991882,
0.04845135286450386,
-0.06129499524831772,
0.019935008138418198,
-0.07894923537969589,
-0.0074630924500525,
0.07482954114675522,
-0.028378739953041077,
0.19975796341896057,
0.08998478949069977,
-0.05218720808625221,
0.11779631674289703,
0.12659229338169098,
0.01734386757016182,
-0.018848272040486336,
0.006731574423611164,
0.03295904025435448,
-0.08383487164974213,
-0.03986208513379097,
-0.1245821937918663,
0.08309412747621536,
0.0566009059548378,
-0.020327741280198097,
0.08333911746740341,
-0.1368180811405182,
0.02929607965052128,
-0.08718709647655487,
0.10525805503129959,
-0.09489849209785461,
-0.06274669617414474,
0.03856922686100006,
-0.10686453431844711,
0.1267014443874359,
-0.01031518541276455,
0.14390262961387634,
-0.1227898895740509,
-0.10222435742616653,
-0.0842132493853569,
0.060664571821689606,
-0.03625373914837837,
-0.01257463451474905,
-0.05356397479772568,
-0.05467692390084267,
0.0658285915851593,
-0.03860798478126526,
-0.04700900614261627,
0.04535641148686409,
0.039992161095142365,
-0.03425752744078636,
0.0281953364610672,
-0.06713204085826874,
0.024227211251854897,
0.08659247308969498,
-0.07982054352760315,
0.031218459829688072,
0.005448886658996344,
0.08671236783266068,
0.031237201765179634,
0.029760053381323814,
0.09942794591188431,
0.03804173320531845,
0.009742981754243374,
0.13223399221897125,
-0.024667557328939438,
-0.025520414113998413,
0.07958629727363586,
-0.033097632229328156,
-0.05030200630426407,
0.06719586253166199,
0.020649537444114685,
-0.09374205023050308,
0.03430742770433426,
0.09056902676820755,
-0.05638819932937622,
0.024234727025032043,
-0.05134544149041176,
0.1364457607269287,
-0.02920529432594776,
-0.1237422302365303,
-0.03958745300769806,
0.031217088922858238,
0.044836852699518204,
-0.10815364867448807,
0.04777132719755173,
-0.066813163459301,
0.1468406766653061,
-0.00497766537591815,
0.08666888624429703,
0.07740557193756104,
-0.0440346896648407,
0.16270193457603455,
-0.08049079030752182,
0.00967157632112503,
0.02562635764479637,
-0.0027395179495215416,
-0.0550827719271183,
0.10144214332103729,
0.17319120466709137,
0.03545514866709709,
-0.027876688167452812,
-0.07878340035676956,
-0.04908061772584915,
-0.09898612648248672,
-0.10091917961835861,
-0.1342528909444809,
0.007433069404214621,
0.06925958395004272,
0.061868179589509964,
-0.07437187433242798,
0.05067494139075279,
-0.040204182267189026,
0.041926391422748566,
-0.04370369017124176,
-0.09545405954122543,
0.08962250500917435,
-0.007625737227499485,
0.11674073338508606,
0.029173843562602997,
-0.11113575845956802,
-0.016241904348134995,
0.12156493961811066,
-0.028297415003180504,
-0.04229910671710968,
0.07734522223472595,
-0.04564628377556801,
0.14998817443847656,
-0.08054599165916443,
-0.02616570144891739,
0.10979098826646805,
-0.05802522599697113,
-0.0483308881521225,
-0.0447206012904644,
-0.06861206144094467,
0.011130536906421185,
-0.11370641738176346,
0.013053200207650661,
0.1033795028924942,
-0.0020278142765164375,
-0.1094999611377716,
0.08308543264865875,
0.028974810615181923,
-0.04423524811863899,
0.07475782930850983,
0.057891059666872025,
-0.03385888785123825,
-0.009021054953336716,
0.06501797586679459,
0.08334343880414963,
-0.08419040590524673,
-0.1201976090669632,
0.08849478513002396,
-0.043767862021923065,
0.08461825549602509,
-0.04829409718513489,
-0.07303507626056671,
0.029816338792443275,
0.037555307149887085,
-0.034458599984645844,
-0.07119157910346985,
-0.07569906860589981,
0.10545677691698074,
0.03148363530635834,
-0.03330877795815468,
-0.0012536401627585292,
-0.07910780608654022,
-0.06960352510213852,
0.05535946786403656,
0.048818375915288925,
-0.09214401245117188,
-0.10483948141336441,
0.1117185577750206,
-0.11084772646427155,
-0.041728805750608444,
0.06358205527067184,
0.039650287479162216,
-0.07416774332523346,
-0.10471932590007782,
-0.06324148178100586,
0.11739152669906616,
-0.18223774433135986,
-0.10837549716234207,
-0.05170454457402229,
-0.05564931035041809,
-0.12045681476593018,
0.08603166043758392,
0.03533846139907837,
-0.0955226793885231,
0.010108952410519123,
-0.09087109565734863,
-0.09171771258115768,
-0.07684445381164551,
-0.08862248808145523,
0.04248150810599327,
0.007950153201818466,
0.08544611185789108,
0.06615525484085083,
-0.11469209939241409,
-0.08071470260620117,
-0.026567503809928894,
-0.1118219643831253,
0.11935526877641678,
-0.07509973645210266,
-0.114155612885952,
-0.05088496208190918,
0.051828429102897644,
0.11322198808193207,
0.03727292641997337,
0.06293225288391113,
-0.028542794287204742,
-0.1309487521648407,
-0.09196766465902328,
-0.019686419516801834,
-0.04098377004265785,
-0.058741647750139236,
0.10196350514888763,
0.09665296226739883,
0.15622134506702423,
0.07644190639257431,
-0.03867274895310402,
0.10223317891359329,
0.09982256591320038,
0.019728777930140495,
0.07259317487478256,
0.0420142263174057,
-0.041564930230379105,
-0.059211425483226776,
0.08213276416063309,
0.17528249323368073,
0.07701119780540466,
0.019782863557338715,
0.03317490220069885,
0.010982479900121689,
0.08495597541332245,
-0.029241960495710373,
-0.09245572984218597,
0.1500074714422226,
-0.0695863887667656,
0.006655657663941383,
-0.06401434540748596,
0.042729128152132034,
-0.04761065915226936,
0.10551733523607254,
0.06180572509765625,
-0.03511056676506996,
-0.04019264131784439,
0.020242279395461082,
0.03804464265704155,
-0.0007534464821219444,
-0.035810209810733795,
0.016257919371128082,
0.028457973152399063,
0.043078795075416565,
0.06103752180933952,
0.11452105641365051,
0.16262052953243256,
-0.06462381780147552,
0.054792046546936035,
-0.007624267600476742,
0.026716038584709167,
-0.10674221813678741,
-0.01785529963672161,
0.06013529375195503,
0.08753886073827744,
0.1589263528585434,
0.021068377420306206,
0.140890970826149,
0.16700944304466248,
-0.10373338311910629,
-0.13674473762512207,
-0.04158643260598183,
0.01938336342573166,
-0.07857838273048401,
0.10637758672237396,
-0.01622430607676506,
0.12157902121543884,
-0.03796316683292389,
-0.01007271371781826,
0.03701168671250343,
0.09655332565307617,
-0.07852912694215775,
-0.1330125778913498,
-0.04000019282102585,
-0.08284824341535568,
0.015171326696872711,
0.04193539917469025,
0.1665952503681183,
0.04479904845356941,
-0.1202908530831337,
-0.13285981118679047,
0.11829015612602234,
-0.07037749141454697,
-0.10572770237922668,
0.028280621394515038,
-0.0537649430334568,
0.042109258472919464,
-0.028486622497439384,
-0.012766503728926182,
-0.08209351450204849,
-0.015679283067584038,
-0.08964261412620544,
-0.04605938121676445,
0.07122207432985306,
0.09149407595396042,
0.06459559500217438,
-0.0953897088766098,
0.01842428557574749,
-0.05774393305182457,
0.1497018039226532,
-0.02719619870185852,
-0.06096849963068962,
-0.0019244304858148098,
0.10774794965982437,
0.020029501989483833,
-0.059561874717473984,
-0.06883897632360458,
-0.0474054217338562,
0.06513404101133347,
0.09035886824131012,
-0.08166275918483734,
0.03472578525543213,
-0.049491748213768005,
-0.08359578251838684,
-0.16584807634353638,
-0.009343253448605537,
-0.10043775290250778,
-0.11761529743671417,
0.01783445104956627,
0.06009802222251892,
-0.02049163542687893,
-0.03529994934797287,
-0.0002741850621532649,
-0.0303525198251009,
0.10687699168920517,
-0.06855524331331253,
-0.05132860690355301,
0.009400290437042713,
-0.02503911964595318,
0.08573204278945923,
0.04217330366373062,
-0.11177302896976471,
-0.044076502323150635,
-0.12213888019323349,
-0.011624480597674847,
-0.018504321575164795,
0.04516518488526344,
0.00393594428896904,
-0.12122193723917007,
0.005678350571542978,
-0.061747293919324875,
0.1590161919593811,
-0.034658584743738174,
0.02316344901919365,
0.08116162568330765,
-0.029541252180933952,
0.12774255871772766,
0.011817164719104767,
0.007822089828550816,
0.09402240067720413,
-0.039354387670755386,
-0.028245875611901283,
0.028568143025040627,
0.002498095389455557,
-0.013333078473806381,
-0.04410988464951515,
0.06517855077981949,
0.04853368550539017,
-0.05669672414660454,
0.09049040079116821,
0.1610175371170044,
-0.13380418717861176,
-0.11497922241687775,
-0.04291478171944618,
-0.10884089022874832,
0.1830255538225174,
-0.027639899402856827,
0.16147857904434204,
0.15644624829292297,
0.06492218375205994,
0.2533499300479889,
0.03857840225100517,
-0.00372180319391191,
-0.0613788403570652,
-0.04477759078145027,
0.02152545563876629,
0.027217036113142967,
0.017935719341039658,
-0.03677141293883324,
-0.0410790741443634,
0.042135193943977356,
0.21127283573150635,
0.05819521099328995,
0.2076365351676941,
0.026307910680770874,
-0.050669848918914795,
0.2693890631198883,
-0.0516015961766243,
0.03137100115418434,
0.17007462680339813,
-0.0003014073008671403,
0.08042863011360168,
0.17715437710285187,
-0.08243699371814728,
0.062418483197689056,
0.059789158403873444,
0.06225025653839111,
0.04700382426381111,
-0.04605899006128311,
0.0054743289947509766,
0.01986153982579708,
-0.1011403277516365,
0.025231866165995598,
0.09585874527692795,
-0.04108628258109093,
0.05438833683729172,
-0.05751978978514671,
0.06488349288702011,
-0.11062205582857132,
-0.026368699967861176,
0.10560540109872818,
-0.022878065705299377,
0.10183489322662354,
-0.06784646213054657,
0.05556583032011986,
-0.04507145285606384,
-0.060932815074920654,
0.07848821580410004,
-0.007797389291226864,
0.032000958919525146,
0.01667630858719349,
0.021893896162509918,
-0.06789584457874298,
0.08592377603054047,
-0.02674723230302334,
0.002818712731823325,
0.11255791038274765,
0.019965771585702896,
-0.11209511011838913,
0.042374059557914734,
0.08931075781583786,
0.09033001214265823,
-0.01873565837740898,
0.030565597116947174,
-0.05417945235967636,
0.05187602713704109,
0.06991695612668991,
0.09002905339002609,
-0.019092831760644913,
0.07693339139223099,
0.10685707628726959,
-0.08741896599531174,
0.07113910466432571,
-0.04073985666036606,
-0.09574683755636215,
0.0364556685090065,
-0.004125901032239199,
0.0912734866142273,
0.03832543268799782,
-0.052435290068387985,
0.11733034998178482,
0.10083921998739243,
-0.049359582364559174,
0.05669936537742615,
0.11217045038938522,
-0.07509256154298782,
0.032876551151275635,
-0.0630371943116188,
-0.07667465507984161,
0.02817389741539955,
-0.08046112209558487,
-0.03501323238015175,
0.005372869782149792,
-0.041040435433387756,
-0.01573094166815281,
0.01756511628627777,
0.02860136143863201,
0.011238360777497292,
0.042117729783058167,
-0.0013255805242806673,
0.09875397384166718,
-0.08270730823278427,
0.03255460038781166,
-0.04420571029186249,
-0.05317855253815651,
-0.129866361618042,
0.04088979959487915,
-0.018613727763295174,
-0.046527568250894547,
0.10553671419620514,
-0.0055779945105314255,
0.048513539135456085,
-0.024725405499339104,
-0.07243341207504272,
-0.10465892404317856,
0.09956496208906174,
-0.06404514610767365,
0.06786733120679855,
0.06545525044202805,
0.069911889731884,
-0.042908210307359695,
-0.0647842064499855,
0.036330901086330414,
-0.08191687613725662,
-0.06378284096717834,
0.032032933086156845,
0.050588928163051605,
-0.04298005625605583,
0.060399580746889114,
-0.014406771399080753,
0.00200572214089334,
-0.07862620800733566,
0.07524820417165756,
-0.02348555624485016,
-0.10137509554624557,
-0.045445702970027924,
0.04703029245138168,
0.0034649341832846403,
-0.038651108741760254,
0.014176602475345135,
-0.04460059106349945,
0.04395832121372223,
0.05393229052424431,
0.09382994472980499,
-0.07723383605480194,
0.004293196834623814,
-0.018793731927871704,
0.08306422829627991,
0.13197897374629974,
0.0345049649477005,
-0.04289277642965317,
0.04578633978962898,
-0.10516930371522903,
-0.003387878183275461,
-0.07952742278575897,
-0.04699984937906265,
-0.013858053833246231,
-0.10382535308599472,
-0.042576566338539124,
0.047408632934093475,
-0.09621187299489975,
0.07701718062162399,
0.033348843455314636,
0.07656316459178925,
0.08481281995773315,
0.021690035238862038,
-0.048019710928201675,
-0.027084488421678543,
-0.023548634722828865,
0.03434225916862488,
0.04152904450893402,
-0.03474249690771103,
0.10698244720697403,
0.008483205921947956,
0.03890647739171982,
0.0346728079020977,
-0.008963869884610176,
-0.06354377418756485,
-0.11785872280597687,
0.1073031947016716,
-0.0931016355752945,
0.07146750390529633,
0.019697481766343117,
0.10803745687007904,
0.07377549260854721,
0.005848529748618603,
0.0848434790968895,
0.002770401770249009,
0.03734330087900162,
-0.03286009281873703,
-0.01546899601817131,
0.08691059798002243,
0.047460466623306274,
-0.02653058059513569,
-0.10637027770280838,
0.05854606255888939,
-0.03274619206786156,
-0.09568964689970016,
0.06789945811033249,
-0.07139923423528671,
-0.09616062790155411,
0.10718588531017303,
-0.05157218128442764,
-0.00865813996642828,
-0.059550248086452484,
0.052205055952072144,
-0.05605480447411537,
0.03483058139681816,
-0.012994923628866673,
-0.0842304602265358,
-0.054885201156139374,
-0.16765707731246948,
-0.022350819781422615,
0.009744343347847462,
-0.05561374872922897,
-0.0393172949552536,
0.0006478722207248211,
0.038256287574768066,
0.03069794923067093,
0.058740463107824326,
0.05387367308139801,
0.05550532788038254,
-0.07871493697166443,
-0.03868282586336136,
0.009649744257330894,
0.04095752537250519,
0.009258355014026165,
0.01539514772593975,
0.02016833797097206,
-0.014644990675151348,
-0.08195182681083679,
-0.04019328951835632,
0.1413636952638626,
-0.03948891535401344,
-0.07557042688131332,
-0.017772100865840912,
-0.01665027253329754,
0.1089172288775444,
-0.013979819603264332,
0.06416235864162445,
-0.10063578933477402,
0.09915275871753693,
0.0795818567276001,
0.06151064857840538,
-0.0075307004153728485,
0.06538981199264526,
-0.027783723548054695,
-0.04518445208668709,
0.14656847715377808,
-0.053656820207834244,
-0.007448841352015734,
0.059374887496232986,
0.08660881221294403,
-0.0727449432015419,
-0.0644543468952179,
0.07234083861112595,
-0.09548412263393402,
0.09830890595912933,
0.044347118586301804,
-0.12126623094081879,
0.13371598720550537,
-0.09528183937072754,
-0.14574439823627472,
-0.013302731327712536,
0.0515357106924057,
-0.10417700558900833,
0.06789271533489227,
0.0470314621925354,
0.018193811178207397,
-0.04897452890872955,
0.03037000074982643,
0.08624923974275589,
-0.03008112870156765,
0.014507465064525604,
0.0995587706565857,
0.0354788564145565,
-0.1043417751789093,
0.027425115928053856,
-0.048747818917036057,
-0.10262472927570343,
0.04834011197090149,
-0.06536894291639328,
0.006881902925670147,
-0.018340183421969414,
-0.026910310611128807,
-0.06982982903718948,
-0.11420926451683044,
-0.03322984278202057,
0.1052236333489418,
0.00012045908079016954,
-0.09063061326742172,
-0.11593712866306305,
0.02333994023501873,
-0.01583903841674328,
0.015164172276854515,
-0.01920318976044655,
-0.0038547609001398087,
-0.0032473509199917316,
0.046877969056367874,
0.12097086012363434,
-0.010852129198610783,
-0.03980052098631859,
-0.001491085160523653,
0.03307629004120827,
-0.054686807096004486,
-0.14585387706756592,
-0.042347244918346405,
-0.14434094727039337,
0.014393914490938187,
0.0520518459379673,
0.02684263326227665,
-0.10128170251846313,
0.13059501349925995,
0.015229079872369766,
-0.12182802706956863,
0.0023432390298694372,
-0.07340952008962631,
-0.04911404475569725,
-0.12712803483009338,
-0.10386072099208832,
0.09179667383432388,
-0.07416698336601257,
-0.04861190542578697,
-0.11640842258930206,
-0.0573684386909008,
-0.07923305034637451,
0.1651967167854309,
-0.060525864362716675,
-0.08512179553508759,
0.07632026821374893,
-0.05222037062048912,
-0.12748023867607117,
-0.05030627176165581,
0.033654868602752686,
-0.06698144972324371,
0.06854742765426636,
0.03181331977248192,
-0.04235779121518135,
-0.0559830367565155,
0.0860704854130745,
-0.02838362380862236,
0.055395763367414474,
0.05038510262966156,
-0.1958819180727005,
-0.1436278373003006,
-0.08229387551546097,
-0.08237181603908539,
0.02335294522345066,
-0.026020625606179237,
-0.06816558539867401,
-0.047837838530540466,
0.05312822386622429,
-0.07194425910711288,
0.005828925874084234,
0.03099474497139454,
0.04094342142343521,
-0.03408017009496689,
-0.019717354327440262,
0.07387129217386246,
0.012091140262782574,
0.005537212826311588,
0.0030897576361894608,
-0.1283428817987442,
0.02302291803061962,
0.02277490682899952,
-0.11856195330619812,
0.05028487369418144,
-0.07231642305850983,
-0.08540819585323334,
0.016980014741420746,
-0.06449425965547562,
0.020570579916238785,
0.018442895263433456,
0.024024439975619316,
0.008362792432308197,
-0.04623517021536827,
-0.014648583717644215,
0.09035642445087433,
-0.1230437159538269,
0.16964328289031982,
-0.06975942850112915,
0.16461460292339325,
0.032079800963401794,
0.030198095366358757,
0.067205049097538,
-0.0924333781003952,
0.10852370411157608,
-0.115861676633358,
-0.02379569411277771,
-0.06941144168376923,
0.04889371991157532,
-0.12535883486270905,
-0.06657896190881729,
-0.012356474995613098,
0.0028439024463295937,
0.17987683415412903,
-0.05331607908010483,
0.10064898431301117,
-0.08208759874105453,
-0.043307360261678696,
-0.05625462904572487,
-0.10320626944303513,
0.03867220878601074,
0.003770887851715088,
0.025523344054818153,
0.035744696855545044,
0.07007436454296112,
0.06003761664032936,
-0.030529620125889778,
0.11058369278907776,
-0.015043257735669613,
-0.04392111301422119,
0.13613960146903992,
0.0006174205336719751,
0.03233424201607704,
0.026272214949131012,
0.11232049018144608,
-0.12032812088727951,
-0.08724462985992432,
0.1094922423362732,
0.040006451308727264,
-0.07779068499803543,
0.12793007493019104,
-0.02874372899532318,
-0.029352853074669838,
-0.10748383402824402,
0.037393637001514435,
-0.07591597735881805,
-0.067648746073246,
0.1269986480474472,
-0.05847712606191635,
0.021586501970887184,
-0.06139899045228958,
-0.07719113677740097,
-0.08877480030059814,
-0.0044060368090868,
0.04629482328891754,
-0.050420213490724564,
-0.061834488064050674,
-0.013317925855517387,
-0.06023995578289032,
0.011438492685556412,
0.08075051009654999,
0.05284426361322403,
-0.03116261214017868,
-0.05277377367019653,
-0.03394639492034912,
-0.051189810037612915,
-0.22111362218856812,
-0.06242100149393082,
-0.061388518661260605,
-0.005299334414303303,
0.036013413220644,
-0.02752409502863884,
0.07463949918746948,
0.05341346561908722,
-0.043642155826091766,
-0.008519953116774559,
0.027954963967204094,
0.10722616314888,
0.07355064153671265,
-0.03042367659509182,
0.05452054738998413,
0.03831103816628456,
-0.11937836557626724,
-0.03072297014296055,
-0.023712314665317535,
-0.028670823201537132,
-0.050548721104860306,
0.04447973519563675,
0.05452120676636696,
0.09737091511487961,
0.15751878917217255,
-0.07632613182067871,
0.07438863813877106,
0.004495332948863506,
-0.05494534596800804,
-0.03703197091817856,
0.12848812341690063,
0.008978080004453659,
-0.0064207580871880054,
-0.10292632132768631,
-0.00015276181511580944,
0.010166783817112446,
0.08723829686641693,
0.0663674920797348,
-0.13513438403606415,
-0.03565351292490959,
0.019083885475993156,
0.1176043301820755,
0.051266949623823166,
-0.00920408871024847,
-0.016991620883345604,
0.0687396451830864,
-0.026813741773366928,
0.04854412004351616,
0.04809221997857094,
-0.1383380889892578,
0.0009837006218731403,
0.05023684352636337,
-0.004789226222783327,
-0.011184221133589745,
-0.08100992441177368,
0.006621415726840496,
-0.0656544417142868,
-0.003358672372996807,
-0.014972384087741375,
0.020944859832525253,
0.019519180059432983,
-0.09195427596569061,
-0.12698501348495483,
-0.07625960558652878,
-0.12371402233839035,
0.04222096875309944,
-0.0547245554625988,
0.06179921701550484,
0.020305266603827477,
-0.08039023727178574,
-0.011545279063284397,
-0.15371377766132355,
0.020809216424822807,
-0.11042136698961258,
-0.036660317331552505,
0.014476101845502853,
0.020085638388991356,
-0.17666436731815338,
0.00975184515118599,
-0.03504952788352966,
-0.06120971590280533,
-0.04205084219574928,
-0.11842137575149536,
-0.006526157725602388,
0.005407651886343956,
0.061396144330501556,
0.029757831245660782,
-0.16860534250736237,
-0.07346290349960327,
-0.03129870072007179,
-0.14875337481498718,
0.1612280309200287,
0.030901940539479256,
0.05636075139045715,
-0.036560915410518646,
-0.010307108983397484,
-0.008005885407328606,
-0.1088675856590271,
-0.1326196938753128,
-0.056330762803554535,
0.15056335926055908,
0.06348573416471481,
-0.0010919134365394711,
-0.15285465121269226,
-0.09274068474769592,
0.0759492740035057,
0.01861584559082985,
-0.009417548775672913,
-0.003626494901254773,
-0.05521765723824501,
-0.057157453149557114,
-0.1030210554599762,
-0.10474157333374023,
0.14273425936698914,
-0.0663207471370697,
0.011136013083159924,
-0.07303418964147568,
0.019674817100167274,
0.09778741747140884,
-0.17135804891586304,
-0.07525373250246048,
0.15238416194915771,
0.0026864027604460716,
0.026574820280075073,
0.009408923797309399,
-0.03254774957895279,
0.018625544384121895,
0.04657287150621414,
0.023447012528777122,
0.022764796391129494,
0.09520561993122101,
0.00017629307694733143,
-0.02207881025969982,
-0.043026965111494064,
0.11530555784702301,
-0.05999286472797394,
-0.07988300174474716,
0.07906220853328705,
-0.024817150086164474,
-0.05459362268447876,
-0.11071605980396271,
0.026982709765434265,
-0.0981239601969719,
0.00016166265413630754,
0.037174027413129807,
-0.14143122732639313,
-0.030083373188972473,
0.06671743094921112,
-0.13970549404621124,
-0.008165367878973484,
0.09729431569576263,
0.10156139731407166,
0.013848794624209404,
-0.02486554905772209,
0.13736067712306976,
0.11025364696979523,
-0.024640215560793877,
0.01332913339138031,
-0.09935608506202698,
-0.03395397961139679,
0.012120725587010384,
0.1350761204957962,
-0.04770933836698532,
-0.03300526738166809,
0.05611574649810791,
0.06688781827688217,
-0.08882349729537964,
0.08887778967618942,
0.017884204164147377,
-0.014872835017740726,
0.0807952955365181,
0.046050917357206345,
0.09574377536773682,
-0.15184621512889862,
-0.058094847947359085,
0.125031977891922,
-0.06632618606090546,
0.09767322242259979,
0.018282311037182808,
0.05451105162501335,
0.06176598370075226,
-0.018007241189479828,
0.052871428430080414,
-0.03710870444774628,
-0.11521513760089874,
-0.0074379038996994495,
-0.010064509697258472,
0.04754965379834175,
0.06018219515681267,
0.0003061122552026063,
0.03200283274054527,
0.07076383382081985,
-0.016344573348760605,
-0.021240105852484703,
-0.03947426751255989,
-0.023345790803432465,
0.08715833723545074,
-0.07527527213096619,
-0.009777882136404514,
0.030947981402277946,
0.009753914549946785,
-0.017055241391062737,
0.03685006499290466,
0.015147966332733631,
-0.03335915878415108,
0.057483088225126266,
-0.14893582463264465,
-0.01637640781700611,
-0.04469114914536476,
-0.06373483687639236,
0.05043347179889679,
0.049604374915361404,
0.09695110470056534,
-0.013531748205423355,
-0.016226032748818398,
0.038547564297914505,
0.07251124083995819,
-0.003081144066527486,
-0.051737379282712936,
-0.008174167945981026,
0.0014796331524848938,
-0.08411915600299835,
-0.06689656525850296,
0.04006229341030121,
-0.089583620429039,
-0.034872688353061676,
-0.16363593935966492,
0.12038051337003708,
-0.08855873346328735,
0.04109827056527138,
-0.01835358887910843,
0.10803546011447906,
-0.1618250459432602,
0.04769522696733475,
0.22052977979183197,
-0.10733985900878906,
0.1282656341791153,
-0.10518727451562881,
0.006239851471036673,
-0.03501385822892189,
-0.13674944639205933,
0.0709955170750618,
0.01174260675907135,
-0.046369828283786774,
-0.08751943707466125,
0.05471951514482498,
-0.09787052869796753,
0.016076931729912758,
-0.12360750883817673,
0.024962376803159714,
0.09697914123535156,
-0.09491540491580963,
-0.025609971955418587,
-0.020933255553245544,
0.15116846561431885,
-0.06662828475236893,
-0.06191293150186539,
0.04266222566366196,
0.07903572916984558,
0.04074637219309807,
0.06796623021364212,
0.10413341969251633,
0.11858124285936356,
0.09043192863464355,
-0.04689018055796623,
0.18388859927654266,
0.022599052637815475,
0.10088632255792618,
0.11472716182470322,
0.04946162924170494,
-0.040090907365083694,
0.01921004243195057,
-0.018180735409259796,
0.048835672438144684,
-0.10042188316583633,
-0.12717053294181824,
0.10366038233041763,
0.036813464015722275,
-0.06149335578083992,
0.04395269602537155,
-0.06801946461200714,
0.013489282689988613,
0.12075064331293106,
0.04507429152727127,
0.006669329479336739,
0.11669595539569855,
-0.0924018919467926,
0.022396670654416084,
0.18150664865970612,
-0.008734384551644325,
0.038477469235658646,
0.04154360294342041,
0.03142006695270538,
0.04520329087972641,
-0.037078384310007095,
0.08898716419935226,
0.0649300143122673,
-0.07495861500501633,
0.029455875977873802,
0.05385473370552063,
0.12702392041683197,
0.023215994238853455,
-0.03123570792376995,
0.056833893060684204,
0.06702818721532822,
0.08687799423933029,
-0.04092063009738922,
0.04109596461057663,
0.11497091501951218,
-0.1607414335012436,
-0.3193014860153198,
0.07727953791618347,
0.0027871723286807537,
0.05450988560914993,
0.09860223531723022,
-0.13171027600765228,
0.09742087125778198,
-0.264318585395813,
-0.05102046579122543,
-0.09941072016954422,
-0.20922942459583282,
-0.11209679394960403,
-0.013127932325005531,
0.051666125655174255,
-0.05242021381855011,
-0.03285529464483261,
-0.1857815384864807,
-0.029083164408802986,
-0.01148598175495863,
0.07749903947114944,
0.11217920482158661,
-0.08800438046455383,
-0.13938578963279724,
-0.029805462807416916,
0.08435840159654617,
-0.11446162313222885,
-0.16474223136901855,
0.0051304735243320465,
0.011618908494710922,
-0.12887568771839142,
-0.05014260113239288,
-0.06048409268260002,
0.09060143679380417,
0.021444804966449738,
-0.13247789442539215,
-0.056356675922870636,
0.043283674865961075,
-0.012717430479824543,
0.016628999263048172,
0.11532717198133469,
-0.006087253335863352,
-0.025606120005249977,
0.10672832280397415,
0.012311195954680443,
0.03316070884466171,
-0.14188803732395172,
-0.07328986376523972,
0.011815407313406467,
-0.0301318671554327,
-0.09832488745450974,
-0.11187103390693665,
-0.083316370844841,
0.03678375482559204,
0.11665908247232437,
0.07053016126155853,
-0.013748322613537312,
0.0014043155824765563,
-0.08277622610330582,
0.1327364146709442,
-0.14171917736530304,
0.0927041694521904,
-0.14054283499717712,
0.003077957546338439,
0.0587591752409935,
0.03526105731725693,
-0.10165288299322128,
0.0984540730714798,
0.07936031371355057,
-0.13958871364593506,
-0.07807474583387375,
0.06294231116771698,
0.09984257817268372,
-0.13075633347034454,
0.005427145399153233,
0.01322387345135212,
-0.013154971413314342,
-0.0706627145409584,
-0.15675093233585358,
-0.13229739665985107,
-0.06397251784801483,
-0.018812453374266624,
0.05258617177605629,
0.11305894702672958,
0.0046588401310145855,
0.04088057205080986,
-0.05066227912902832,
0.15230143070220947,
0.1446421593427658,
0.09353459626436234,
0.14372631907463074,
-0.029348522424697876,
-0.059954266995191574,
-0.11762446165084839,
-0.07824206352233887,
-0.109054796397686,
0.02789594791829586,
-0.0270678773522377,
-0.033612217754125595,
0.07563740760087967,
-0.07773366570472717,
-0.06318624317646027,
0.06437552720308304,
0.09529166668653488,
0.10320807993412018,
-0.07174781709909439,
0.014120705425739288,
-0.0817498043179512,
-0.02125011570751667,
0.0772906243801117,
-0.10361384600400925,
-0.08447030931711197,
0.011857840232551098,
0.057414304465055466,
0.05513600632548332,
0.011400065384805202,
-0.1000308245420456,
-0.04991590976715088,
0.10400988906621933,
0.03285098820924759,
-0.06272178143262863,
-0.047763392329216,
-0.017549384385347366,
-0.060136109590530396,
0.07454501837491989,
-0.09191228449344635,
-0.07436896115541458,
0.04576386883854866,
0.07952521741390228,
0.00634633656591177,
0.031462837010622025,
0.02825246751308441,
0.01804128848016262,
-0.04490097612142563,
0.06997265666723251,
-0.08446621149778366,
-0.015583468601107597,
0.011721138842403889,
-0.09609977155923843,
0.09932906925678253,
-0.11696331202983856,
-0.09496839344501495,
-0.10739314556121826,
-0.04375624284148216,
-0.06033577024936676,
0.07879194617271423,
-0.04236052557826042,
0.06548263132572174,
-0.052332691848278046,
0.038440313190221786,
0.009674782864749432,
-0.10520073026418686,
0.0007555140182375908,
-0.027051830664277077,
0.0552370660007,
0.025929909199476242,
-0.006526564713567495,
-0.16810928285121918,
-0.15837951004505157,
-0.17661653459072113,
0.11715467274188995,
0.07181639224290848,
-0.00028750780620612204,
0.062119726091623306,
0.036736875772476196,
-0.04918656125664711,
-0.04018900543451309,
0.01762295700609684,
0.0687180608510971,
0.10251083970069885,
-0.06107497215270996,
0.0841105654835701,
0.001376792904920876,
-0.03082253597676754,
0.08927833288908005,
-0.06032213941216469,
0.09145165234804153,
-0.09791780263185501,
-0.056211866438388824,
-0.01034045871347189,
-0.01422102376818657,
0.03987690806388855,
0.0689835473895073,
0.10212034732103348,
0.012140288949012756,
0.047921035438776016,
0.06378627568483353,
0.013628775253891945,
-0.08664771914482117,
0.008393093012273312,
0.1286814957857132,
0.11474646627902985,
-0.1349639743566513,
0.054089684039354324,
-0.13786379992961884,
0.029517773538827896,
-0.05375690013170242,
0.011993742547929287,
-0.03265571966767311,
-0.10672490298748016,
-0.003917444963008165,
-0.007150403689593077,
-0.010971440002322197,
-0.021729519590735435,
-0.08766227960586548,
0.007353377528488636,
-0.005085742566734552,
0.066680409014225,
0.07500026375055313,
-0.011426746845245361,
-0.09379695355892181,
-0.08121733367443085,
0.09420490264892578,
0.051872074604034424,
0.11273180693387985,
0.0843457356095314,
0.06995346397161484,
-0.0012014205567538738,
0.016231805086135864,
-0.041491858661174774,
-0.14503416419029236,
0.04012570157647133,
0.04836408793926239,
0.021369537338614464,
-0.10060162842273712,
-0.09919336438179016,
0.08798296749591827,
0.03941240906715393,
0.05135919526219368,
-0.04141828045248985,
-0.09579652547836304,
-0.07834693044424057,
-0.0008006244315765798,
0.060372840613126755,
-0.040836043655872345,
0.07561220228672028,
-0.04586268961429596,
-0.035952553153038025,
-0.041266076266765594,
-0.11220555752515793,
0.04391586035490036,
0.06886988878250122,
0.008623539470136166,
-0.05244723707437515,
-0.09610860049724579,
0.06620468944311142,
0.06606656312942505,
0.05211609974503517,
0.10665179044008255,
0.07450607419013977,
-0.006847013719379902,
0.004334604367613792,
-0.10052040219306946,
-0.06905931234359741,
-0.04187250882387161,
0.053279757499694824,
0.10644230246543884,
-0.05164983868598938,
0.07504801452159882,
0.03501913696527481,
-0.03996867313981056,
0.032368045300245285,
0.053018055856227875,
0.04809309169650078,
-0.013290212489664555,
-0.0254363976418972,
-0.04496094956994057,
0.0763130635023117,
0.10937575250864029,
0.11853713542222977,
0.11465815454721451,
-0.014568732120096684,
0.023735864087939262,
-0.004411066882312298,
-0.13183873891830444,
-0.12451575696468353,
0.08061176538467407,
0.04755773767828941,
-0.10368844121694565,
-0.024345366284251213,
-0.10989201813936234,
0.09012798964977264,
0.05288899689912796,
-0.01024225726723671,
0.0015925964107736945,
0.06873643398284912,
0.019922424107789993,
0.05159308761358261,
0.06854274123907089,
0.025135861709713936,
0.07382610440254211,
-0.10043822228908539,
-0.03530197963118553,
-0.07089151442050934,
0.05223546549677849,
0.03136219084262848,
-0.10119576007127762,
0.0816630944609642,
-0.029386896640062332,
0.04026269540190697,
-0.038361527025699615,
-0.016382044181227684,
-0.046365272253751755,
0.008723189122974873,
-0.02073568105697632,
-0.04256460815668106,
0.06979595869779587,
0.042929377406835556,
0.05248245224356651,
0.09389957785606384,
0.12251237779855728,
-0.01545751467347145,
0.07494004815816879,
-0.07238055765628815,
-0.0053449394181370735,
-0.006850562524050474,
-0.019933564588427544,
0.017363617196679115,
-0.033015865832567215,
-0.1179111897945404,
0.0007618084200657904,
0.059170279651880264,
-0.14344248175621033,
0.028145669028162956,
-0.01445070095360279,
-0.030779916793107986,
-0.06030340865254402,
-0.002982767065986991,
0.009701141156256199,
-0.09205291420221329,
-0.12198887020349503,
0.12326750159263611,
-0.08494312316179276,
-0.13732188940048218,
0.018501952290534973,
0.16313311457633972,
-0.020029451698064804,
0.13580812513828278,
0.014898203313350677,
0.17528605461120605,
-0.056817881762981415,
-0.07530321925878525,
0.07719994336366653,
0.09483196586370468,
0.011491682380437851,
-0.07301952689886093,
0.07721748948097229,
0.033593885600566864,
0.0416935458779335,
0.12165268510580063,
0.024780651554465294,
0.1338098645210266,
0.05938798189163208,
0.037362098693847656,
0.015809690579771996,
-0.02619124948978424,
-0.0011708722449839115,
0.0412919856607914,
0.05038575083017349,
-0.0196247436106205,
0.009401211515069008,
-0.006320358719676733,
-0.03162797912955284,
0.05093548819422722,
0.04607405513525009,
0.04188095033168793,
0.007735097780823708,
0.06620679050683975,
-0.07661110907793045,
-0.07504858076572418,
0.0842893049120903,
-0.09468499571084976,
0.024994226172566414,
0.09606751054525375,
-0.09280822426080704,
0.14797256886959076,
-0.09741315990686417,
-0.048367004841566086,
0.10379303991794586,
-0.01905658468604088,
0.039976224303245544,
0.051981955766677856,
-0.07598346471786499,
0.01763131655752659,
0.06857751309871674,
0.033940404653549194,
0.035702597349882126,
-0.05918552353978157,
0.00495114317163825,
0.029856333509087563,
0.11260534077882767,
0.03665585815906525,
0.051140714436769485,
-0.012921493500471115,
-0.040695302188396454,
-0.1038876473903656,
0.08688045293092728,
0.050675272941589355,
-0.008011097088456154,
0.009235793724656105,
0.008693471550941467,
-0.06486979871988297,
-0.04981973022222519,
0.08780978620052338,
0.018723078072071075,
0.0356571301817894,
0.0012954840203747153,
-0.025813689455389977,
0.021259572356939316,
0.015804026275873184,
-0.023630890995264053,
0.006786993704736233,
-0.005114846397191286,
0.13302847743034363,
-0.004738232120871544,
0.015558099374175072,
0.10380469262599945,
-0.10008436441421509,
-0.10135694593191147,
0.03601976856589317,
0.14418824017047882,
-0.09895029664039612,
0.17213615775108337,
-0.032669275999069214,
0.06378171592950821,
0.0024541758466511965,
0.0886637270450592,
-0.0684010311961174,
-0.0762493759393692,
0.03938667103648186,
-0.1248999834060669,
0.012056426145136356,
0.00901881419122219,
0.11835149675607681,
-0.13326774537563324,
-0.008787945844233036,
0.15528160333633423,
0.07280952483415604,
0.18976041674613953,
0.017887195572257042,
-0.03874443471431732,
-0.06449688971042633,
0.07733826339244843,
0.03994574770331383,
-0.07582568377256393,
-0.1477186381816864,
-0.03190672770142555,
-0.02316509746015072,
-0.04768635332584381,
0.0724426656961441,
0.032323163002729416,
0.04755079001188278,
-0.087845079600811,
-0.020904017612338066,
-0.003632963402196765,
0.03686751797795296,
-0.08742037415504456,
-0.0002172945678466931,
-0.040960054844617844,
-0.13809481263160706,
0.04862826690077782,
-0.14583495259284973,
0.06395712494850159,
0.05068764090538025,
0.051914844661951065,
0.006929819006472826,
-0.028377804905176163,
-0.05266036465764046,
-0.04896815866231918,
-0.0029658314306288958,
-0.07016262412071228,
0.015590619295835495,
0.11049546301364899,
-0.060209762305021286,
-0.0019746548496186733,
-0.11555419862270355,
-0.09148306399583817,
-0.033699482679367065,
-0.007015060633420944,
-0.00683885533362627,
0.045906104147434235,
-0.12488570064306259,
-0.09525708109140396,
-0.05287545919418335,
0.2669041156768799,
0.02558118849992752,
0.06701134145259857,
-0.06366230547428131,
-0.07757478952407837,
0.026717055588960648,
-0.050546299666166306,
-0.13202884793281555,
0.027022967115044594,
0.07032644003629684,
-0.02671336568892002,
0.0764123871922493,
-0.0597401037812233,
-0.04386024549603462,
-0.10461180657148361,
-0.09028744697570801,
-0.015330434776842594,
-0.013346356339752674,
0.054029230028390884,
-0.03267282247543335,
-0.017232507467269897,
-0.017212865874171257,
0.0660555511713028,
-0.09542665630578995,
-0.08071675151586533,
-0.02708766981959343,
-0.05208970233798027,
-0.03738587722182274,
-0.07575840502977371,
0.08416228741407394,
0.005593137349933386,
-0.06975902616977692,
0.0014280222821980715,
0.03715751692652702,
0.13880568742752075,
-0.059495117515325546,
0.07179994136095047,
0.003205826273187995,
-0.006749783176928759,
0.12637999653816223,
-0.06887730211019516,
-0.16409744322299957,
0.008661413565278053,
-0.016156353056430817,
-0.05818099528551102,
-0.08083539456129074,
0.014482787810266018,
0.13314327597618103,
0.025180496275424957,
0.061633095145225525,
-0.11203068494796753,
0.04993801936507225,
0.01575552113354206,
0.07239081710577011,
-0.06670846045017242,
0.07118374109268188,
0.0853583961725235,
-0.03365219756960869,
0.09232931584119797,
0.06463175266981125,
-0.12075717747211456,
0.07642431557178497,
-0.1183592900633812,
0.11184526979923248,
0.04783336818218231,
-0.06330964714288712,
0.08877144008874893,
-0.04350971058011055,
-0.10910794138908386,
-0.0798264667391777,
-0.033338844776153564,
0.05291103199124336,
-0.15557806193828583,
-0.19402408599853516,
-0.005493571981787682,
-0.1262979507446289,
0.08330536633729935,
-0.036898888647556305,
-0.1319858580827713,
0.0779346376657486,
0.1717004030942917,
-0.07466243207454681,
0.08465594798326492,
0.04401364177465439,
-0.010536514222621918,
-0.041114699095487595,
0.1137787252664566,
-0.02218509465456009,
0.05784333124756813,
-0.0036057443358004093,
-0.10453608632087708,
0.016821952536702156,
-0.05442333593964577,
0.0590478889644146,
-0.06445232778787613,
0.07928039133548737,
0.13157179951667786,
-0.04477638751268387,
0.14009593427181244,
0.11328534036874771,
0.062148116528987885,
-0.0008310105185955763,
-0.09838467091321945,
0.06949437409639359,
0.017656268551945686,
0.05325109139084816,
-0.02726282924413681,
0.060009151697158813,
0.09677422046661377,
0.09419239312410355,
0.022844044491648674,
-0.09995855391025543,
-0.11457768827676773,
0.05528809502720833,
0.15706753730773926,
0.113786481320858,
0.036364272236824036,
0.021803781390190125,
-0.01911870576441288,
-0.02639932371675968,
-0.012839668430387974,
0.006105713080614805,
0.024067286401987076,
-0.007578687276691198,
-0.0898645743727684,
0.06682732701301575,
-0.03846301883459091,
-0.0303414948284626,
0.02654150314629078,
-0.0443703830242157,
-0.05346717685461044,
0.08155175298452377,
0.014643906615674496,
0.04777118191123009,
0.004970057867467403,
0.10214076936244965,
0.013362286612391472,
-0.05475440248847008,
0.09451385587453842,
-0.01418747752904892,
-0.023402001708745956,
-0.0598592646420002,
-0.12795373797416687,
-0.08961283415555954,
0.08276177942752838,
0.0657307580113411,
-0.12194779515266418,
-0.03072592429816723,
-0.01179045531898737,
-0.13831688463687897,
-0.0962502583861351,
-0.05421401560306549,
0.08214253187179565,
-0.1138792410492897,
0.05009642243385315,
-0.13272061944007874,
0.07917001843452454,
0.06866235285997391,
-0.02617308311164379,
0.01507459208369255,
0.057768579572439194,
0.062205180525779724,
0.017353499308228493,
0.04218526557087898,
-0.022341366857290268,
0.06400886178016663,
0.04984935745596886,
-0.1223577931523323,
0.06373253464698792,
-0.04651505872607231,
0.04858449846506119,
-0.019755151122808456,
0.05395626649260521,
-0.015983479097485542,
0.048892825841903687,
-0.054699599742889404,
-0.048551127314567566,
0.0012274100445210934,
0.04255526512861252,
0.08721056580543518,
0.028134774416685104,
0.07713912427425385,
-0.031203899532556534,
0.08073057234287262,
0.015843933448195457,
-0.03248850628733635,
-0.005977719556540251,
0.0845852717757225,
-0.10607984662055969,
0.0014730115653946996,
-0.0386749729514122,
0.030177969485521317,
-0.0992877334356308,
-0.0026218038983643055,
0.027859508991241455,
0.07968956977128983,
0.0616653710603714,
-0.13944607973098755,
0.11789555102586746,
0.01701611652970314,
-0.07070225477218628,
-0.026004904881119728,
-0.03941040858626366,
0.08807459473609924,
-0.01937299221754074,
-0.02230198308825493,
0.02603590488433838,
-0.033929094672203064,
-0.013972412794828415,
-0.07305478304624557,
-0.028264110907912254,
-0.0030756527557969093,
0.06889263540506363,
-0.08798588067293167,
0.04195472598075867,
-0.04218471795320511,
0.053829941898584366,
-0.015606007538735867,
0.08929191529750824,
-0.09589450806379318,
0.006507237907499075,
0.03310159221291542,
0.23474666476249695,
0.09844590723514557,
-0.11629531532526016,
-0.018356427550315857,
0.11459644883871078,
0.07800179719924927,
-0.14805637300014496,
-0.07180298119783401,
-0.12355970591306686,
-0.18259136378765106,
-0.045148152858018875,
-0.11195448786020279,
0.11571159958839417,
-0.08016994595527649,
0.05909934267401695,
-0.007752940058708191,
-0.015539541840553284,
-0.014137426391243935,
0.03620224818587303,
0.016176829114556313,
-0.02096935175359249,
-0.029651517048478127,
0.08242275565862656,
0.026826154440641403,
0.10210070759057999,
-0.1043415293097496,
-0.060150083154439926,
-0.04003892466425896,
-0.013110273517668247,
0.12243940681219101,
-0.01869087666273117,
0.01504549477249384,
-0.06757137179374695,
0.11751502752304077,
0.10454367101192474,
-0.11216901987791061,
0.007831171154975891,
0.017719702795147896,
-0.006633392535150051,
0.03445912152528763,
0.08497369289398193,
-0.057462241500616074,
0.03315522149205208,
0.010323652997612953,
-0.040988557040691376,
0.034177690744400024,
-0.029813725501298904,
0.04976913705468178,
-0.14873377978801727,
0.01843765377998352,
0.09836802631616592,
-0.0015807220479473472,
0.06224479898810387,
-0.00745399110019207,
0.11198722571134567,
-0.13940617442131042,
-0.1043110117316246,
0.05607187747955322,
-0.041279640048742294,
-0.130817711353302,
-0.05101412907242775,
0.09935222566127777,
-0.033053088933229446,
0.09510183334350586,
0.03785238042473793,
0.12664806842803955,
0.11071290820837021,
0.021416638046503067,
-0.016072385013103485,
-0.004992620553821325,
-0.08392447978258133,
-0.01805540919303894,
0.08124618232250214,
-0.06571417301893234,
0.09578369557857513,
0.06221172958612442,
0.04413267970085144,
-0.007018376141786575,
0.0655464231967926,
-0.13953092694282532,
0.050515804439783096,
0.07648249715566635,
-0.023522768169641495,
-0.06489688158035278,
-0.08093801885843277,
-0.038843367248773575,
-0.12027145177125931,
-0.026385806500911713,
0.04768865928053856,
-0.10894547402858734,
0.05105114355683327,
0.07513197511434555,
0.16397824883460999,
0.16380161046981812,
-0.06942164897918701,
-0.002236367668956518,
-0.13420327007770538,
0.01814938895404339,
-0.093863844871521,
-0.12883028388023376,
-0.003897805465385318,
-0.09726919233798981,
-0.056990161538124084,
-0.0759582445025444,
0.06698906421661377,
-0.09857846796512604,
0.03791935741901398,
0.015508221462368965,
-0.08767876029014587,
0.0694725438952446,
-0.09794561564922333,
-0.06687364727258682,
0.07673817127943039,
-0.09143062680959702,
-0.1265120655298233,
0.08372710645198822,
0.026197541505098343,
-0.03706895932555199,
0.00525254849344492,
-0.08553826063871384,
0.06659094989299774,
-0.07358930259943008,
0.1083955466747284,
0.01878836564719677,
0.09278848767280579,
0.010917412117123604,
-0.08108599483966827,
0.06816773861646652,
0.12312552332878113,
-0.039248526096343994,
-0.09573708474636078,
0.018071765080094337,
-0.0939987376332283,
0.01760461926460266,
-0.06929488480091095,
0.07908119261264801,
0.028552744537591934,
-0.04317822307348251,
-0.018684782087802887,
-0.03468390926718712,
-0.005041528958827257,
0.07548212260007858,
0.08576669543981552,
0.10074824094772339,
-0.0599663220345974,
0.0590202696621418,
0.06748205423355103,
0.02291227877140045,
0.05094720423221588,
-0.03509662672877312,
-0.008563006296753883,
0.01344376802444458,
0.0637306496500969,
-0.15901656448841095,
0.11998752504587173,
-0.07032345235347748,
-0.018759043887257576,
0.19564685225486755,
0.05895347148180008,
-0.14954492449760437,
-0.0900990292429924,
-0.04847162961959839,
0.12453688681125641,
-0.11780885607004166,
-0.04479072615504265,
0.07181312143802643,
-0.15083129703998566,
0.03854556754231453,
-0.04543846473097801,
-0.1042107343673706,
0.17692717909812927,
0.10227913409471512,
-0.06837664544582367,
0.18654397130012512,
-0.0038290368393063545,
0.06504679471254349,
0.07775221765041351,
-0.005100668873637915,
-0.026317564770579338,
0.021492132917046547,
0.12825600802898407,
0.033624693751335144,
-0.041976895183324814,
-0.011204802431166172,
-0.06778912246227264,
-0.045521460473537445,
0.08262328058481216,
0.012164737097918987,
0.11642848700284958,
-0.0645628347992897,
0.0544704794883728,
-0.07268276065587997,
-0.00391278974711895,
0.1220989003777504,
-0.023353733122348785,
0.0316178984940052,
-0.07418083399534225,
0.12610270082950592,
-0.08018269389867783,
0.039078034460544586,
-0.08147583156824112,
0.009337506256997585,
-0.039178792387247086,
-0.02132449671626091,
0.13191340863704681,
0.03407232463359833,
-0.10487169027328491,
-0.05195125192403793,
0.10089956223964691,
0.006918238941580057,
-0.03989754244685173,
-0.04785333573818207,
-0.11557039618492126,
0.09495309740304947,
0.10895691812038422,
-0.06906571239233017,
-0.027414431795477867,
0.023244241252541542,
0.1577300727367401,
-0.00788138061761856,
0.1510007679462433,
0.025616850703954697,
-0.04759453982114792,
0.09810332953929901,
-0.021997757256031036,
-0.002245660638436675,
-0.1551215499639511,
-0.12213055044412613,
-0.0827910453081131,
0.06461921334266663,
-0.0026932822074741125,
0.04808499291539192,
0.003390021389350295,
0.06046995893120766,
0.1747942417860031,
0.14064860343933105,
0.2319110631942749,
0.20937995612621307,
0.07759935408830643,
0.07008056342601776,
-0.17798420786857605,
-0.033999208360910416,
0.1287781447172165,
-0.022176779806613922,
0.09016333520412445,
0.051781535148620605,
0.016920369118452072,
0.007801637053489685,
-0.04057644307613373,
-0.06262648105621338,
0.08028250932693481,
0.13460293412208557,
0.098725825548172,
0.18767493963241577,
-0.06938280910253525,
-0.041071921586990356,
0.03583238646388054,
-0.04056136682629585,
-0.17056438326835632,
-0.02359565906226635,
0.021266786381602287,
-0.055207300931215286,
0.15083466470241547,
-0.0938505157828331,
-0.05353720486164093,
0.026561107486486435,
0.0856538936495781,
0.012052862904965878,
-0.05187774449586868,
-0.0037946938537061214,
0.08946658670902252,
-0.009189162403345108,
0.019848491996526718,
0.14786756038665771,
0.03264765068888664,
-0.0128234988078475,
-0.07616332173347473,
-0.0568518228828907,
-0.10202394425868988,
0.0664130225777626,
0.027115490287542343,
-0.05380423739552498,
0.04303976893424988,
0.02837270498275757,
-0.07160662114620209,
0.013434024527668953,
-0.06605634093284607,
0.0655272975564003,
0.14735828340053558,
0.044181425124406815,
0.017302189022302628,
-0.0012726866407319903,
0.019691960886120796,
0.007174084894359112,
-0.12110957503318787,
0.06776644289493561,
0.059536054730415344,
0.0675133615732193,
0.009900042787194252,
-0.08962581306695938,
0.010933754965662956,
-0.052238818258047104,
-0.09650216996669769,
-0.09403615444898605,
-0.05985153093934059,
-0.08559754490852356,
0.03188799321651459,
-0.04054911062121391,
-0.09998829662799835,
0.011165403760969639,
0.06525055319070816,
0.02124977856874466,
0.026594966650009155,
-0.04681813716888428,
-0.058205485343933105,
0.10766222327947617,
0.10883333534002304,
0.10878627002239227,
0.07193494588136673,
-0.058270104229450226,
-0.06647124886512756,
-0.09967604279518127,
0.12163831293582916,
0.051928989589214325,
0.059680357575416565,
-0.05323905870318413,
-0.04812712222337723,
0.09733980894088745,
0.061615824699401855,
0.07488428056240082,
0.03255118802189827,
0.08364356309175491,
0.13000252842903137,
0.2157507836818695,
-0.14415860176086426,
0.07103990763425827,
-0.029278889298439026,
-0.0368635356426239,
-0.055378641933202744,
0.03913096711039543,
0.0985478013753891,
-0.07553672045469284,
0.00367168802767992,
-0.1692216694355011,
-0.06345012784004211,
0.05340302363038063,
0.019955873489379883,
-0.006026577204465866,
-0.08205761015415192,
-0.12927398085594177,
-0.04598717764019966,
0.04164885729551315,
0.06877804547548294,
-0.0021835395600646734,
-0.19315558671951294,
-0.10059165954589844,
0.08484415709972382,
-0.0016679685795679688,
0.09661716967821121,
-0.01863647811114788,
0.0029549342580139637,
0.10045041888952255,
0.05281751602888107,
0.05039425194263458,
0.08107515424489975,
0.05316374823451042,
0.017523521557450294,
-0.025912711396813393,
0.018577737733721733,
-0.1089288592338562,
0.05668988823890686,
0.035492412745952606,
0.06124453619122505,
0.07134290784597397,
-0.07385867089033127,
0.09555518627166748,
-0.0645706057548523,
0.010185864754021168,
-0.08648738265037537,
-0.10812332481145859,
0.046500906348228455,
0.05540349707007408,
-0.05480077490210533,
0.0836074948310852,
-0.12443731725215912,
0.0022103358060121536,
0.01378384418785572,
-0.08958806842565536,
0.08130118995904922,
0.015233306214213371,
0.09640587121248245,
0.011405524797737598,
-0.01986764930188656,
-0.014365014620125294,
-0.00933722872287035,
0.035329755395650864,
0.09692481905221939,
0.12685070931911469,
-0.0842437744140625,
0.1155734732747078,
-0.12151198834180832,
0.11250954121351242,
-0.015891700983047485,
-0.11373047530651093,
0.11073528975248337,
-0.05154627561569214,
-0.046248603612184525,
-0.05143050104379654,
-0.12614130973815918,
-0.09928764402866364,
-0.050704218447208405,
-0.02508634701371193,
0.11220446228981018,
0.1068299189209938,
-0.04077241197228432,
-0.001174149103462696,
0.1692652553319931,
-0.07065311819314957,
-0.058886755257844925,
0.024862956255674362,
0.027459291741251945,
0.009400172159075737,
-0.052229396998882294,
0.04587563872337341,
0.055218953639268875,
-0.09940718114376068,
-0.09000308811664581,
0.05969022959470749,
-0.018401725217700005,
-0.0962371751666069,
-0.09173519164323807,
-0.013781123794615269,
0.011981954798102379,
0.06603073328733444,
0.007936072535812855,
0.07008236646652222,
-0.0028081387281417847,
0.14662577211856842,
0.03699854388833046,
-0.08254297077655792,
-0.0894906148314476,
-0.06559354066848755,
0.12749266624450684,
-0.06380235403776169,
0.08861354738473892,
0.08264493197202682,
-0.012512782588601112,
-0.09671109914779663,
0.002270636847242713,
-0.1653147041797638,
-0.004326906055212021,
0.061383623629808426,
-0.04807080700993538,
0.12036033719778061,
-0.022787541151046753,
-0.029822533950209618,
0.04323790967464447,
0.06292767077684402,
-0.04632880166172981,
-0.14726200699806213,
0.031521525233983994,
-0.06311564147472382,
-0.050573889166116714,
0.09859152883291245,
0.12250152975320816,
-0.045524343848228455,
0.027831507846713066,
0.08666882663965225,
-0.09544183313846588,
-0.10303590446710587,
0.10075639933347702,
-0.08530619740486145,
0.06286219507455826,
0.0855431854724884,
-0.06661569327116013,
0.02108188159763813,
0.09247084707021713,
-0.026569047942757607,
-0.11790963262319565,
-0.10999312251806259,
-0.06001899763941765,
-0.18717513978481293,
-0.08423800021409988,
-0.055221401154994965,
-0.07275742292404175,
-0.10182778537273407,
0.12431982159614563,
0.10004633665084839,
-0.14400775730609894,
-0.0048513165675103664,
-0.01760660670697689,
0.08338265866041183,
-0.020183589309453964,
0.03104735165834427,
0.0022561070509254932,
-0.13794121146202087,
0.05882258713245392,
-0.0017662008758634329,
-0.1690245419740677,
-0.10287503898143768,
0.02288140170276165,
-0.011009921319782734,
-0.0383908748626709,
-0.012025837786495686,
0.042728520929813385,
0.13728003203868866,
0.01926194503903389,
-0.09233158826828003,
-0.048248499631881714,
-0.007933379150927067,
-0.020672781392931938,
0.031389228999614716,
0.10003909468650818,
-0.028639834374189377,
-0.17271788418293,
-0.07433843612670898,
0.030734490603208542,
-0.027959246188402176,
0.16552191972732544,
0.04903918877243996,
-0.080459363758564,
0.07251878827810287,
0.00493129575625062,
0.08264130353927612,
-0.12103548645973206,
-0.014417910948395729,
-0.08046720921993256,
0.058294590562582016,
0.10535922646522522,
0.035743825137615204,
-0.10448898375034332,
0.0795619934797287,
-0.1204577311873436,
-0.11471331864595413,
-0.014807120896875858,
-0.03735208138823509,
-0.029631584882736206,
0.041239965707063675,
0.1169024333357811,
-0.03651180490851402,
0.1256927251815796,
0.0891008973121643,
0.1207001805305481,
0.0742768868803978,
0.04752296954393387,
0.030940502882003784,
-0.014669359661638737,
0.024482207372784615,
-0.09204249829053879,
-0.015000385232269764,
-0.010120280086994171,
0.12395219504833221,
0.060216400772333145,
-0.05928022786974907,
0.026194581761956215,
0.1210554987192154,
0.1494872272014618,
0.06606482714414597,
0.10859404504299164,
-0.16008298099040985,
0.05188081040978432,
0.21086832880973816,
-0.04314051568508148,
0.10931120067834854,
-0.09266598522663116,
-0.027993734925985336,
-0.05692850053310394,
0.004133233334869146,
0.169929638504982,
0.0023304633796215057,
0.1909927874803543,
0.03032652474939823,
-0.011962873861193657,
0.0025701490230858326,
-0.035862017422914505,
-0.022221555933356285,
-0.05749570205807686,
-0.10583736002445221,
-0.20678485929965973,
0.04394879564642906,
0.0404171384871006,
-0.04886962100863457,
0.10679122805595398,
0.046291105449199677,
0.045654524117708206,
-2.1413143258541822e-05,
0.018839886412024498,
0.07002297043800354,
-0.049407996237277985,
-0.06792575865983963,
0.034060098230838776,
0.16159392893314362,
0.045210059732198715,
-0.03985222429037094,
-0.09529972076416016,
0.08329014480113983,
0.07731868326663971,
-0.09348966181278229,
0.12892818450927734,
-0.0406908318400383,
0.07424591481685638,
0.1256166398525238,
0.08830802887678146,
-0.03556675463914871,
0.021369993686676025,
0.05653011053800583,
-0.02850908786058426,
0.007238004822283983,
-0.07940421253442764,
-0.0852135419845581,
-0.04405410960316658,
-0.13349215686321259,
-0.10459521412849426,
-0.0450839102268219,
-0.05004095658659935,
-0.04792223870754242,
-0.047000110149383545,
0.016266072168946266,
-0.0941329076886177,
0.012907884083688259,
-0.10503869503736496,
0.03183363378047943,
0.07234050333499908,
0.11260940879583359,
-0.09037035703659058,
-0.06829134374856949,
0.013622165657579899,
-0.0632796585559845,
0.02727280557155609,
-0.03329634293913841,
-0.07501816004514694,
0.1800423413515091,
0.011348582804203033,
0.08323947340250015,
0.08039268106222153,
-0.05295678600668907,
-0.09884946048259735,
0.02541356161236763,
0.14825737476348877,
0.059397295117378235,
-0.1440870761871338,
-0.18179579079151154,
-0.05034884810447693,
0.0479649156332016,
0.04550835117697716,
-0.032252807170152664,
0.2030632197856903,
0.12128753215074539,
-0.10183994472026825,
0.14550359547138214,
-0.005362373311072588,
0.17793700098991394,
-0.005652798805385828,
0.13453848659992218,
0.0031191501766443253,
0.011656651273369789,
-0.03180800750851631,
0.016747334972023964,
-0.03126956522464752,
-0.08194361627101898,
-0.11905362457036972,
-0.012909738346934319,
-0.007021799683570862,
0.08131509274244308,
-0.17406614124774933,
-0.014679403975605965,
-0.07750669866800308,
-0.080347940325737,
-0.009325412102043629,
-0.12616734206676483,
-0.12090886384248734,
0.10018141567707062,
-0.028903501108288765,
0.057121168822050095,
-0.01839630864560604,
-0.04181654751300812,
-0.07343768328428268,
-0.00043559708865359426,
0.013462871313095093,
0.05633256584405899,
0.0004325843183323741,
0.06093317270278931,
-0.016352148726582527,
0.09528731554746628,
-0.009806142188608646,
0.00011790533608291298,
0.013289643451571465,
0.03322703391313553,
0.022479737177491188,
-0.004468419123440981,
0.02092520147562027,
-0.02774820290505886,
-0.11002694070339203,
0.0003257348434999585,
0.14035578072071075,
-0.02578371949493885,
0.0213655773550272,
0.03330501541495323,
-0.04409969970583916,
0.05395596846938133,
0.01437381375581026,
0.026135122403502464,
-0.055396150797605515,
0.1295807659626007,
-0.018361520022153854,
-0.021489646285772324,
0.11422678828239441,
-0.01102412212640047,
-0.05756634846329689,
-0.015857305377721786,
-0.04276968166232109,
0.006519248243421316,
-0.008224215358495712,
0.006111329887062311,
-0.02074657939374447,
-0.14445920288562775,
0.00905833300203085,
-0.10121617466211319,
0.0661078467965126,
0.07483439892530441,
-0.10414557158946991,
-0.08284888416528702,
0.02141297049820423,
-0.11112571507692337,
0.13321271538734436,
0.07329090684652328,
0.013116268441081047,
-0.038740597665309906,
0.015741338953375816,
0.05046292021870613,
-0.04878599941730499,
0.028713634237647057,
-0.06323479861021042,
0.0852501168847084,
-0.043570566922426224,
-0.05407184734940529,
-0.03605973720550537,
0.044001854956150055,
-0.12508217990398407,
0.04840419068932533,
-0.15327976644039154,
0.0684410035610199,
-0.03945497050881386,
-0.09145370125770569,
-0.125923752784729,
0.035972245037555695,
0.023312905803322792,
-0.0620168074965477,
0.060180749744176865,
0.008106323890388012,
0.05344244837760925,
0.05678572878241539,
-0.11188311129808426,
-0.04063739627599716,
0.004171553999185562,
-0.030507555231451988,
-0.06976944208145142,
0.0512298122048378,
-0.009461060166358948,
-0.03416100889444351,
0.0203353613615036,
-0.001889897626824677,
-0.031181035563349724,
-0.05883419141173363,
-0.09946458786725998,
0.041326262056827545,
0.0017551630735397339,
0.06568475812673569,
-0.0797671303153038,
0.10770892351865768,
0.1050642877817154,
-0.03939986974000931,
-0.057800523936748505,
0.007821193896234035,
-0.051597412675619125,
0.017486214637756348,
-0.06510613113641739,
-0.035895220935344696,
0.07142096012830734,
0.03088316135108471,
0.005058230832219124,
-8.728257671464235e-05,
0.021780095994472504,
-0.01415256503969431,
0.07494625449180603,
0.12194334715604782,
0.042444147169589996,
0.001152769080363214,
-0.050063829869031906,
0.12085146456956863,
0.05260041356086731,
0.03822864964604378,
-0.051053281873464584,
-0.08662215620279312,
0.086063914000988,
-0.09572464227676392,
-0.11026149988174438,
0.05377493426203728,
-0.046761564910411835,
-0.18474480509757996,
0.08151358366012573,
0.0962071567773819,
-0.12478116154670715,
0.08224745839834213,
0.07242943346500397,
0.017207974568009377,
-0.10752342641353607,
0.008254164829850197,
0.0202019065618515,
-0.11220795661211014,
0.0303638968616724,
-0.0653347298502922,
0.07111290097236633,
-0.1344907134771347,
0.009455477818846703,
0.08093693107366562,
0.006954309064894915,
0.06084529310464859,
0.05103715509176254,
0.0808621421456337,
-0.015213233418762684,
0.023116622120141983,
-0.11545274406671524,
-0.12449918687343597,
-0.0074033234268426895,
-0.0897768884897232,
-0.004644990433007479,
0.06658245623111725,
0.00075261335587129,
0.05350665748119354,
-0.032627616077661514,
0.021114123985171318,
-0.003777753096073866,
0.04233511537313461,
0.023645421490073204,
-0.0008690380491316319,
0.1675747185945511,
0.006758235860615969,
-0.03224439546465874,
-0.08385276794433594,
-0.009046254679560661,
0.07969106733798981,
-0.1252671778202057,
-0.05088165029883385,
-0.11838940531015396,
-0.08743934333324432,
0.025694698095321655,
0.006580119486898184,
0.017165176570415497,
0.024903014302253723,
-0.0038087600842118263,
0.10192430019378662,
0.016004441305994987,
-0.060340236872434616,
-0.12929144501686096,
0.016905097290873528,
0.06142785772681236,
0.11520121246576309,
-0.016066543757915497,
0.06608667969703674,
0.01122882217168808,
0.05056481435894966,
-0.0204184427857399,
0.02505960874259472,
0.06401380896568298,
0.06080538406968117,
0.03473563864827156,
0.14111240208148956,
0.08544620126485825,
0.04319106787443161,
-0.15176203846931458,
-0.04770107939839363,
0.04265235364437103,
-0.1892934888601303,
0.12897658348083496,
0.01631239242851734,
0.0796743854880333,
0.04659496247768402,
-0.10875001549720764,
-0.09486822783946991,
-0.06655985862016678,
-0.10281560570001602,
0.13121269643306732,
-0.004686560481786728,
-0.06839331239461899,
-0.0809507891535759,
-0.0913056805729866,
0.1050831526517868,
-0.05785743147134781,
-0.12587516009807587,
-0.024371759966015816,
0.13517555594444275,
-0.014715339057147503,
-0.04957277700304985,
-0.034143611788749695,
0.05028842017054558,
0.0063660056330263615,
0.05854622274637222,
-0.15736256539821625,
0.08170268684625626,
0.1320408582687378,
0.10807465761899948,
0.03515007346868515,
-0.10510510206222534,
-0.030373074114322662,
-0.0015087868086993694,
0.06690908968448639,
-0.025162257254123688,
-0.03176381066441536,
0.01782766357064247,
0.0028965321835130453,
-0.02311689220368862,
0.1182917132973671,
-0.03970232233405113,
-0.09598611295223236,
0.04977992922067642,
-0.0355948768556118,
-0.12147326022386551,
-0.008077616803348064,
-0.0021592576522380114,
-0.057269204407930374,
-0.02454492077231407,
0.014733684249222279,
-0.06862547993659973,
0.11961673200130463,
-0.08958068490028381,
-0.11939428746700287,
0.05253983289003372,
-0.005925475619733334,
-0.04642251506447792,
-0.0009474611142650247,
0.040198177099227905,
-0.09496472030878067,
-0.15382200479507446,
0.13816113770008087,
-0.00969371385872364,
-0.10481530427932739,
0.04007301479578018,
0.035922516137361526,
0.12365509569644928,
0.006193859968334436,
-0.01933087222278118,
0.11638561636209488,
-0.14924953877925873,
-0.019390180706977844,
-0.0006312172044999897,
-0.02212800458073616,
-0.05005054175853729,
-0.10737009346485138,
0.02251126989722252,
0.04362338408827782,
0.16790346801280975,
0.017838500440120697,
0.09008685499429703,
-0.0018750963499769568,
0.050651874393224716,
0.013129184022545815,
0.03042403608560562,
-0.07862022519111633,
0.09128378331661224,
0.045906003564596176,
0.11636469513177872,
-0.07763230055570602,
-0.09224496781826019,
-0.07398948818445206,
-0.11936916410923004,
0.05671157315373421,
0.13437481224536896,
-0.09927926957607269,
0.1329483687877655,
-0.01779852993786335,
0.004464676138013601,
0.08404083549976349,
-0.09902691096067429,
-0.06990337371826172,
-0.028713738545775414,
0.07208103686571121,
-0.11114905774593353,
-0.08394508063793182,
0.05044640973210335,
0.029844602569937706,
0.06929125636816025,
0.21025948226451874,
-0.005826983135193586,
-0.1051415503025055,
0.017102491110563278,
0.034157704561948776,
0.04274756833910942,
0.03824837878346443,
0.0018241818761453032,
-0.09706434607505798,
-0.018903449177742004,
0.13366803526878357,
0.08817469328641891,
0.01098692137748003,
-0.08783727884292603,
-0.06882010400295258,
-0.03139827027916908,
0.039921339601278305,
0.07519648224115372,
-0.04985678195953369,
0.011520263738930225,
-0.02543351612985134,
0.036984220147132874,
-0.0984731912612915,
-0.08764444291591644,
-0.011895396746695042,
-0.04335411265492439,
-0.03961211442947388,
0.002290650038048625,
-0.1983979046344757,
-0.057575006037950516,
0.04519611597061157,
0.04329874366521835,
0.05568855255842209,
0.048154473304748535,
0.03585878387093544,
-0.12124307453632355,
-0.02734997496008873,
-0.002037668600678444,
-0.0010324539616703987,
-0.010958057828247547,
0.00682122353464365,
0.0077789961360394955,
-0.07957404851913452,
-0.016662826761603355,
0.02540687285363674,
0.04912751913070679,
-0.05409093573689461,
0.04557918757200241,
0.0870080217719078,
0.13381898403167725,
-0.08599244803190231,
-0.018508048728108406,
-0.0787285789847374,
-0.03767431527376175,
0.006376185454428196,
-0.1453801691532135,
-0.06263040006160736,
0.021911820396780968,
-0.01786283776164055,
-0.011124204844236374,
-0.0018038037233054638,
0.029200347140431404,
0.03501918166875839,
-0.10815232247114182,
0.17543011903762817,
0.03251303359866142,
-0.12378835678100586,
0.1370505541563034,
0.028539767488837242,
-0.03293006494641304,
0.049544937908649445,
-0.17206434905529022,
-0.02542032301425934,
-0.11202449351549149,
-0.03890584409236908,
0.027361975982785225,
-0.2294834852218628,
-0.06202062591910362,
-0.07364664226770401,
-0.008988674730062485,
-0.049964580684900284,
0.043402332812547684,
0.05043565854430199,
-0.009309256449341774,
-0.12076994776725769,
-0.05955243110656738,
0.040344901382923126,
-0.11321478337049484,
-0.10935503989458084,
0.01834157109260559,
0.06670264154672623,
-0.09786248207092285,
-0.014217314310371876,
0.07125319540500641,
-0.04121281951665878,
-0.02665170654654503,
-0.1115664690732956,
0.048943545669317245,
-0.07540572434663773,
-0.09717491269111633,
0.10449289530515671,
-0.09579233080148697,
0.15653115510940552,
0.04067295417189598,
0.055370599031448364,
0.010600325651466846,
0.1152212992310524,
0.04975380003452301,
-0.016358617693185806,
0.013357777148485184,
0.06978728622198105,
0.02519235387444496,
0.03286134451627731,
0.034139588475227356,
-0.07699369639158249,
-0.07316628843545914,
0.0015144813805818558,
-0.06781092286109924,
0.02572234906256199,
-0.02573523484170437,
-0.08365990966558456,
-0.0546746589243412,
0.12775474786758423,
0.1275564730167389,
0.06830176711082458,
-0.011755330488085747,
-0.011255512945353985,
0.03168010711669922,
-0.05119210109114647,
0.030103052034974098,
0.10166595876216888,
0.024193357676267624,
-0.12341763079166412,
0.0425407700240612,
0.061674218624830246,
0.015555460005998611,
-0.06483682990074158,
0.1623140126466751,
0.1858416497707367,
-0.022649865597486496,
-0.06509707123041153,
0.052698131650686264,
0.02351555973291397,
0.11718609929084778,
-0.06588149070739746,
0.01925562508404255,
0.008183007128536701,
0.12438216805458069,
-0.21803498268127441,
-0.03052361309528351,
0.12069588154554367,
-0.22300855815410614,
0.037767570465803146,
-0.08427312225103378,
0.07057876139879227,
-0.018299901857972145,
-0.1815134435892105,
0.08042114973068237,
0.022747009992599487,
0.16193164885044098,
-0.06922395527362823,
-0.0743999034166336,
-0.059939611703157425,
0.05603684112429619,
0.013537565246224403,
-0.1157999113202095,
-0.034748222678899765,
-0.10777702182531357,
0.015894105657935143,
-0.01041341945528984,
0.21057063341140747,
0.018788374960422516,
-0.12358161062002182,
0.05517153814435005,
-0.13394317030906677,
0.03882363438606262,
-0.1442887783050537,
0.04627184569835663,
-0.007329889573156834,
-0.006440653000026941,
-0.0791792944073677,
0.07200948148965836,
0.05715910717844963,
-0.042220886796712875,
-0.08666286617517471,
-0.051715221256017685,
0.012573464773595333,
-0.10956799983978271,
-0.04630504548549652,
-0.082859568297863,
0.07613487541675568,
-0.03121122717857361,
0.0500643216073513,
0.020275956019759178,
-0.030057402327656746,
0.0415261872112751,
0.04435015097260475,
-0.03672095760703087,
0.007360301911830902,
0.05064801126718521,
0.036070358008146286,
0.035928793251514435,
-0.042873311787843704,
-0.022664451971650124,
0.11312279105186462,
0.010694536380469799,
0.022524727508425713,
0.09542787075042725,
-0.04422659054398537,
-0.10250283777713776,
0.10647840797901154,
0.09585310518741608,
0.11900429427623749,
-0.026175057515501976,
0.15703734755516052,
0.14842559397220612,
-0.07149813324213028,
0.007993267849087715,
0.19791750609874725,
0.0340176485478878,
-0.009443722665309906,
-0.05030052363872528,
0.0011843051761388779,
-0.006787010468542576,
0.01641484536230564,
-0.07431834936141968,
0.10841552168130875,
0.06758984178304672,
-0.026718715205788612,
-0.12610989809036255,
0.1755666881799698,
-0.06829909980297089,
0.054323889315128326,
0.04095238074660301,
0.0069802203215658665,
-0.053160231560468674,
-0.03407079726457596,
-0.0015644687227904797,
-0.09696633368730545,
0.14162568747997284,
0.1678100824356079,
0.07877422124147415,
-0.04019815847277641,
0.11777586489915848,
0.030278773978352547,
-0.05964728072285652,
0.007653250824660063,
0.049150217324495316,
0.04539494588971138,
0.05222851410508156,
0.07795257121324539,
0.12171784788370132,
0.09392165392637253,
-0.08517630398273468,
0.0733596533536911,
0.0574367493391037,
-0.049429621547460556,
-0.07580263912677765,
0.12805691361427307,
0.014775690622627735,
0.07008090615272522,
-0.06396003067493439,
0.04566451534628868,
-0.08377844095230103,
0.0396786704659462,
0.005335201043635607,
-0.12527349591255188,
0.12055053561925888,
-0.006880813743919134,
-0.09142325818538666,
0.03348327800631523,
0.07568421959877014,
0.04226279258728027,
-0.02419411577284336,
0.020921627059578896,
0.10384595394134521,
0.006550794001668692,
0.07478589564561844,
-0.0870962142944336,
0.12100285291671753,
-0.013834432698786259,
-0.04682571440935135,
0.08150073140859604,
-0.056627217680215836,
0.1872071921825409,
-0.03814096376299858,
-0.07932909578084946,
0.05786705017089844,
-0.13316303491592407,
-0.07769382745027542,
-0.006944010965526104,
-0.06159946694970131,
-0.04493115469813347,
-0.007420779671519995,
0.13323475420475006,
0.18262439966201782,
-0.07106205821037292,
-0.05302226543426514,
-0.031445980072021484,
-0.02489101141691208,
0.000813501828815788,
-0.07451480627059937,
-0.025770384818315506,
-0.062490880489349365,
-0.0699884220957756,
0.007989433594048023,
-0.040856800973415375,
-0.11968424916267395,
0.020554935559630394,
0.0880383774638176,
0.22226466238498688,
0.10078579932451248,
-0.017668049782514572,
-0.17499220371246338,
-0.03004644438624382,
-0.0033071672078222036,
-0.17245212197303772,
-0.11720609664916992,
-0.02762744389474392,
-0.061117347329854965,
-0.03527677431702614,
-0.1503964364528656,
0.06012518331408501,
-0.1398426592350006,
0.04088214039802551,
-0.035246193408966064,
0.009349428117275238,
-0.11894751340150833,
0.006096429191529751,
-0.043593887239694595,
0.08615622669458389,
0.009678558446466923,
-0.15557125210762024,
-0.10265935212373734,
-0.17441651225090027,
0.03179491311311722,
0.06712978333234787,
-0.01956605724990368,
0.04342236742377281,
-0.014247236773371696,
0.020952094346284866,
-0.04448122903704643,
-0.0017224060138687491,
0.11268135905265808,
-0.030762407928705215,
0.020864682272076607,
-0.040894538164138794,
0.061037272214889526,
-0.058956027030944824,
0.1294110268354416,
-0.1730348765850067,
0.10584895312786102,
-0.017795143648982048,
0.018853584304451942,
0.04830087721347809,
-0.11793568730354309,
-0.031768471002578735,
0.08694852888584137,
-0.06941016018390656,
-0.05525922775268555,
-0.10124431550502777,
-0.1266070306301117,
-0.0695447027683258,
0.04262610152363777,
0.09159933030605316,
0.03570886328816414,
-0.027136867865920067,
-0.07908520847558975,
0.07756536453962326,
0.10047240555286407,
0.06827547401189804,
-0.13008424639701843,
0.022973259910941124,
0.029952947050333023,
0.15707647800445557,
0.05838789418339729,
0.016972482204437256,
-0.09101586043834686,
-0.08044678717851639,
-0.08097174018621445,
0.015302972868084908,
0.015886498615145683,
-0.024586614221334457,
0.055577799677848816,
-0.054581932723522186,
-0.019824231043457985,
0.03579481691122055,
-0.14641815423965454,
0.0226783137768507,
0.028619514778256416,
0.1620781570672989,
0.12988433241844177,
-0.0009503589826636016,
-0.17507754266262054,
0.12482371181249619,
0.05425862595438957,
-0.03423885256052017,
-0.0005546323955059052,
-0.1134968101978302,
-0.0986645519733429,
-0.09255045652389526,
0.015242583118379116,
-0.005302933044731617,
-0.22472140192985535,
-0.00459631159901619,
0.04625304415822029,
0.1137937381863594,
0.005051648709923029,
-0.1066640093922615,
-0.0760088786482811,
-0.0613999105989933,
0.021608276292681694,
-0.0333281084895134,
0.018475988879799843,
-0.0488683320581913,
-0.04588024318218231,
-0.06879527121782303,
0.0654280036687851,
0.044519390910863876,
0.015907637774944305,
0.06887008994817734,
0.07140782475471497,
0.005468145478516817,
0.0644095167517662,
-0.0013647095765918493,
0.0436331182718277,
-0.06610153615474701,
0.03409988805651665,
0.019528796896338463,
0.0633545070886612,
-0.009770749136805534,
0.04495421424508095,
0.014539564959704876,
0.10867930203676224,
0.045907169580459595,
0.10540477931499481,
-0.01441352628171444,
0.07013662904500961,
0.04533668980002403,
0.02549922466278076,
-0.03578607365489006,
-0.04150475934147835,
-0.09060408174991608,
-0.024921264499425888,
-0.07127015292644501,
0.042247623205184937,
-0.03727329894900322,
0.029274728149175644,
0.051367275416851044,
0.07823783159255981,
0.044910773634910583,
0.04500933364033699,
0.048016857355833054,
-0.04786616563796997,
0.202547088265419,
0.025500932708382607,
0.12113601714372635,
0.036075349897146225,
-0.03498735651373863,
-0.017076123505830765,
0.031185828149318695,
0.0021473874803632498,
-0.03312791883945465,
-0.038009293377399445,
-0.0025626763235777617,
0.1424136757850647,
0.06866472214460373,
-0.08209840953350067,
0.14938828349113464,
0.09474198520183563,
-0.027122218161821365,
0.07977830618619919,
0.042648546397686005,
-0.06803001463413239,
0.09202172607183456,
-0.03779282420873642,
-0.07760625332593918,
-0.05873866751790047,
-0.02220056764781475,
0.041682202368974686,
0.027023402974009514,
-0.11730624735355377,
-0.08473650366067886,
-0.013967808336019516,
-0.007664723787456751,
-0.08210906386375427,
-0.05557120591402054,
0.05630768835544586,
0.06942769140005112,
-0.0031897984445095062,
-0.024500122293829918,
-0.06683105230331421,
-0.06410586833953857,
0.0965251699090004,
-0.051548659801483154,
-0.04034784063696861,
0.06336746364831924,
0.07072918117046356,
0.07968000322580338,
0.03949001058936119,
0.009409657679498196,
-0.08735685050487518,
-0.12402502447366714,
-0.03246495500206947,
0.1208198219537735,
0.12007994204759598,
0.02291429229080677,
0.09459640085697174,
0.05299769714474678,
0.107843317091465,
0.04422178119421005,
0.06395909190177917,
0.0722486600279808,
-0.11461191624403,
-0.07794910669326782,
0.0322161540389061,
0.0006655189208686352,
0.019572418183088303,
0.06376369297504425,
0.01210844237357378,
-0.10138555616140366,
0.015338384546339512,
-0.08383867144584656,
0.05612517148256302,
0.07742740958929062,
0.043899014592170715,
0.0013629571767523885,
-0.05213208869099617,
0.021123509854078293,
0.07131598144769669,
-0.12031833082437515,
0.08163982629776001,
0.0727492943406105,
0.01137562282383442,
0.048249416053295135,
0.010744498111307621,
0.08112266659736633,
0.12660132348537445,
-0.0943705290555954,
-0.013902823440730572,
-0.04143214225769043,
0.05591176450252533,
-0.15815559029579163,
-0.0985696017742157,
-0.03240719065070152,
0.0044838134199380875,
-0.08211112022399902,
0.12054372578859329,
-0.12683743238449097,
0.10841716825962067,
0.11574790626764297,
0.011852005496621132,
0.0034186707343906164,
0.06780651211738586,
-0.044086605310440063,
0.04694383591413498,
0.009520325809717178,
0.06488017737865448,
-0.018480010330677032,
-0.06162785738706589,
0.051108792424201965,
-0.0170192401856184,
-0.10815054923295975,
0.1316073089838028,
-0.03925251215696335,
-0.1146828830242157,
-0.10789500921964645,
0.05191371589899063,
0.06667611002922058,
0.10060548782348633,
-0.014543745666742325,
0.09812431782484055,
-0.016393670812249184,
0.07692591845989227,
0.010354684665799141,
0.07139807939529419,
0.18395401537418365,
-0.036103732883930206,
-0.04665439948439598,
-0.07239238917827606,
-0.02782340720295906,
-0.08516968041658401,
-0.14358192682266235,
-0.009391228668391705,
0.08128797262907028,
0.15676282346248627,
-0.09341228753328323,
0.0769493356347084,
-0.08190696686506271,
-0.06407294422388077,
-0.002793962135910988,
-0.09130910038948059,
-0.01355778705328703,
0.0117797227576375,
-0.13539671897888184,
-0.02978149801492691,
-0.024795517325401306,
0.0227645356208086,
0.18262740969657898,
-0.004531496670097113,
0.08152829110622406,
0.03108455426990986,
-0.11714104562997818,
-0.010059263557195663,
-0.10513459891080856,
-0.011859032325446606,
-0.009689198806881905,
-0.050204917788505554,
0.006312829442322254,
0.02577999047935009,
-0.10567785799503326,
0.10164616256952286,
0.10075859725475311,
-0.09729968756437302,
0.020152583718299866,
0.08177211880683899,
-0.056567948311567307,
0.0869363471865654,
-0.07873007655143738,
0.044083308428525925,
0.03358345851302147,
0.049609601497650146,
-0.07242593169212341,
0.008628934621810913,
-0.057859983295202255,
0.041576992720365524,
-0.1089901253581047,
-0.030488496646285057,
0.06430716067552567,
-0.01258670911192894,
0.08238594979047775,
-0.07823465764522552,
-0.04935720935463905,
0.031102227047085762,
-0.07001541554927826,
-0.023283258080482483,
-0.17227981984615326,
-0.17393089830875397,
-0.03952125832438469,
0.05011729151010513,
0.12957902252674103,
0.01095204334706068,
-0.15254752337932587,
0.1564335823059082,
-0.06352539360523224,
-0.14037087559700012,
-0.01865774393081665,
0.053355611860752106,
-0.07259911298751831,
0.19299253821372986,
0.05744076520204544,
0.007262233179062605,
-0.07772676646709442,
0.05025313049554825,
0.03892794996500015,
-0.007450220640748739,
-0.036343056708574295,
0.03620803356170654,
-0.11516699939966202,
-0.01695092022418976,
-0.11944586038589478,
-0.1122891828417778,
0.08841031789779663,
0.07348841428756714,
-0.14609679579734802,
0.1500438153743744,
0.058359574526548386,
0.03511259704828262,
0.13688793778419495,
-0.10312789678573608,
-0.1034015417098999,
0.09948845207691193,
-0.04417591914534569,
-0.007622553966939449,
-0.09520330280065536,
0.07456271350383759,
0.04645548015832901,
0.050651371479034424,
0.13459526002407074,
0.19053779542446136,
0.08029397577047348,
0.08354651927947998,
0.009874414652585983,
-0.06638222932815552,
0.0071542891673743725,
-0.05538323521614075,
-0.10559249669313431,
0.05500346049666405,
-0.122578464448452,
-0.09051181375980377,
0.02202504873275757,
-0.13501723110675812,
0.15177521109580994,
-0.04977504163980484,
0.022772181779146194,
0.09242873638868332,
0.05679912120103836,
0.06988680362701416,
-0.008901083841919899,
-0.09629847854375839,
0.07311466336250305,
0.07243672013282776,
-0.0034384550526738167,
0.01858573965728283,
-0.007518129423260689,
-0.0388413704931736,
-0.04484404996037483,
-0.010360301472246647,
-0.024637004360556602,
0.07457590103149414,
0.13089431822299957,
0.0204123817384243,
0.1290649175643921,
0.009387288242578506,
0.07288457453250885,
0.056155528873205185,
0.020943524315953255,
0.09474125504493713,
0.02907748520374298,
-0.08415088057518005,
-0.008318816311657429,
0.11024594306945801,
0.093601755797863,
-0.08988901972770691,
-0.02351449429988861,
0.04948921874165535,
-0.044748157262802124,
0.054718103259801865,
0.019062982872128487,
-0.06957810372114182,
0.021282987669110298,
0.026427090167999268,
0.15674521028995514,
0.03603532910346985,
-0.04626904055476189,
0.15820933878421783,
0.06635382026433945,
0.027342090383172035,
-0.02818947657942772,
0.04122239723801613,
0.029850708320736885,
-0.06975579261779785,
-0.06649525463581085,
-0.0065216561779379845,
0.053663261234760284,
-0.02492421679198742,
0.030889861285686493,
-0.10745999217033386,
0.17157691717147827,
-0.1238543689250946,
-0.040754955261945724,
-0.09044523537158966,
0.047255028039216995,
0.04881642758846283,
-0.04338114708662033,
-0.0452551506459713,
0.01918407343327999,
-0.0936334952712059,
-0.12933535873889923,
-0.010770967230200768,
0.04980630800127983,
-0.09509166330099106,
-0.019115203991532326,
0.1342783272266388,
-0.01677907072007656,
-0.027318308129906654,
-0.09578810632228851,
-0.10690560191869736,
0.09568485617637634,
0.1089814305305481,
-0.05352778360247612,
-0.020506050437688828,
0.004152426030486822,
-0.01361999474465847,
-0.02186558023095131,
-0.025320081040263176,
0.09127078950405121,
0.15033544600009918,
-0.016223346814513206,
0.10862359404563904,
0.011445172131061554,
-0.06404384970664978,
-0.01419191062450409,
0.0393778458237648,
0.10037699341773987,
-0.0648200735449791,
-0.14391711354255676,
0.05602079629898071,
-0.061588872224092484,
-0.11105149984359741,
0.10852515697479248,
0.006179741118103266,
0.08336050063371658,
0.016764109954237938,
0.034849874675273895,
-0.028323974460363388,
0.09658823162317276,
-0.03516543284058571,
0.042431458830833435,
0.14533433318138123,
0.014191718772053719,
0.07052764296531677,
-0.005930199287831783,
-0.037536025047302246,
0.00010732343071140349,
-0.06857048720121384,
-0.022955264896154404,
0.08795993775129318,
0.13006669282913208,
-0.008498202078044415,
-0.1262749284505844,
0.013432408683001995,
0.1102629005908966,
0.08892317116260529,
0.16613706946372986,
0.0412939228117466,
0.09697584062814713,
0.058639317750930786,
0.0273891668766737,
0.03258347883820534,
0.060212038457393646,
-0.056969836354255676,
0.03892054408788681,
0.07025977969169617,
-0.08013308048248291,
0.08470679819583893,
0.06404254585504532,
0.03478957340121269,
0.03850260749459267,
0.09194548428058624,
0.16914743185043335,
0.10560055822134018,
-0.05655302852392197,
-0.11600042134523392,
-0.057454898953437805,
-0.04092371091246605,
0.003801509039476514,
0.04760570079088211,
-0.04173986613750458,
-0.07654792815446854,
-0.014707100577652454,
0.12428435683250427,
-0.06178298220038414,
0.12233417481184006,
-0.10821475833654404,
0.027021653950214386,
-0.04606075584888458,
-0.03502028062939644,
0.03375649452209473,
-0.13770125806331635,
-0.08995754271745682,
0.0008629910298623145,
0.11123042553663254,
-0.03780720755457878,
-0.048323240131139755,
0.053264111280441284,
-0.1585046350955963,
0.18104656040668488,
0.040594641119241714,
0.04123934730887413,
-0.01456821896135807,
0.10583679378032684,
-0.013317870907485485,
0.12803533673286438,
0.05870223790407181,
-0.08690299093723297,
-0.06252012401819229,
-0.00036480245762504637,
0.08294746279716492,
-0.20095574855804443,
0.1017388179898262,
-0.050662342458963394,
-0.04465590417385101,
0.009260856546461582,
-0.08032415062189102,
0.034187354147434235,
0.1391371637582779,
0.06251175701618195,
0.01372296828776598,
0.013573470525443554,
0.015999825671315193,
-0.061792634427547455,
0.01966310851275921,
-0.0750497579574585,
-0.05512981116771698,
0.11430685222148895,
-0.08994212746620178,
-0.02462322823703289,
0.023553669452667236,
0.021406957879662514,
-0.03705836459994316,
0.13097713887691498,
0.1110139787197113,
-0.044041018933057785,
-0.0001427459646947682,
0.08500805497169495,
-0.060937777161598206,
-0.07165656238794327,
0.1120435893535614,
0.09766163676977158,
-0.1272961050271988,
0.02458302304148674,
-0.08681660145521164,
-0.031697969883680344,
0.024648573249578476,
0.06523021310567856,
0.11874384433031082,
0.057444799691438675,
0.03216163441538811,
0.07924666255712509,
0.12933801114559174,
0.008821964263916016,
0.03257651999592781,
-0.02533506602048874,
-0.07141532003879547,
-0.063143789768219,
-0.04626832529902458,
-0.11999428272247314,
0.07413150370121002,
-0.11146131902933121,
-0.07466797530651093,
-0.07502183318138123,
0.015310009941458702,
0.0590120330452919,
0.05818270519375801,
0.0921436995267868,
-0.10031650960445404,
0.003105404321104288,
-9.093437984120101e-05,
0.002409212524071336,
0.07070756703615189,
0.03360501304268837,
0.07413284480571747,
-0.066334567964077,
0.19238483905792236,
0.104027658700943,
0.04254421591758728,
-0.09859483689069748,
-0.014778613112866879,
-0.0547429658472538,
0.15363532304763794,
-0.0028404532931745052,
-0.10218150168657303,
-0.05942818894982338,
0.13072612881660461,
0.020890722051262856,
-0.02191830240190029,
0.10439123958349228,
0.1148509755730629,
-0.0789031982421875,
0.10207213461399078,
-0.016262853518128395,
0.07987472414970398,
0.06163705512881279,
-0.12639060616493225,
-0.06259158998727798,
-0.027894560247659683,
-0.1266947090625763,
-0.04733734577894211,
-0.07413078099489212,
-0.17531026899814606,
0.079895980656147,
-0.0026054854970425367,
-0.016526389867067337,
0.07283572852611542,
0.0013249682961031795,
0.08687616884708405,
-0.0887274295091629,
0.10078686475753784,
-0.05032184347510338,
-0.03538200631737709,
-0.08574327826499939,
0.03031502477824688,
0.009071370586752892,
0.04849953204393387,
0.07888515293598175,
0.0254619512706995,
0.06071305274963379,
-0.046514011919498444,
-0.08436938375234604,
-0.030767491087317467,
0.04189359396696091,
-0.09618104994297028,
0.0686313733458519,
0.03484535589814186,
0.07056671380996704,
0.1890442818403244,
-0.06586456298828125,
0.11933524906635284,
-0.0626174658536911,
-0.08311984688043594,
0.04309746250510216,
-0.09370836615562439,
0.046231552958488464,
-0.10503188520669937,
-0.09255736321210861,
-0.09986216574907303,
0.08787589520215988,
-0.03278977423906326,
0.00012305179552640766,
-0.010594972409307957,
0.02227604389190674,
0.08842207491397858,
0.023148924112319946,
0.06599624454975128,
-0.0350029319524765,
-0.030342692509293556,
-0.023587897419929504,
0.10966037958860397,
0.03582547977566719,
-0.12382043898105621,
-0.08269781619310379,
-0.07182605564594269,
-0.08654683083295822,
-0.10607711970806122,
0.08266843110322952,
-0.014584098942577839,
0.034998342394828796,
-0.03994227573275566,
-0.030707599595189095,
-0.06210079789161682,
-0.08289975672960281,
0.046085238456726074,
-0.1073739230632782,
0.10882360488176346,
0.051701515913009644,
0.02276301383972168,
-0.004754136316478252,
-0.05854625627398491,
-0.04136589169502258,
-0.10327628999948502,
0.0852121114730835,
-0.06823617219924927,
-0.054008498787879944,
0.08919896930456161,
0.03340530022978783,
-0.029916035011410713,
-0.008390776813030243,
-0.11118437349796295,
-0.007441794034093618,
-0.0328708291053772,
-0.012315071187913418,
-0.09695697575807571,
-0.1092657819390297,
-0.07719392329454422,
0.10228808969259262,
-0.012138358317315578,
-0.08293217420578003,
-0.007414225488901138,
-0.06623601168394089,
-0.07852403074502945,
0.06995738297700882,
-0.020407693460583687,
-0.05200732871890068,
-0.14372344315052032,
0.08227952569723129,
-0.10791236907243729,
-0.0029974074568599463,
0.12788301706314087,
0.010069985873997211,
0.08170729875564575,
-0.013838371261954308,
-0.0007909966516308486,
0.030080154538154602,
-0.07894573360681534,
-0.13042771816253662,
0.03360030800104141,
-0.10920288413763046,
-0.04492928460240364,
-0.03126512095332146,
-0.026539122685790062,
0.0441773496568203,
0.05890745669603348,
-0.03745182603597641,
-0.09262879937887192,
0.000568633433431387,
0.04431753605604172,
-0.09638610482215881,
0.06683191657066345,
0.022844836115837097,
-0.03489069268107414,
-0.11073967814445496,
-0.084547258913517,
-0.039891019463539124,
0.043880801647901535,
-0.04302855581045151,
0.1153157576918602,
0.05090392008423805,
0.03301404416561127,
-0.13267026841640472,
0.090458944439888,
0.046569835394620895,
-0.1397673636674881,
-0.08074021339416504,
0.038646601140499115,
0.0325455516576767,
-0.027280505746603012,
0.016249706968665123,
0.10278765857219696,
-0.07449693977832794,
0.029300367459654808,
-0.10341233015060425,
0.12054049968719482,
0.019384348765015602,
0.010298887267708778,
-0.07472880929708481,
-0.024685001000761986,
0.09683652222156525,
0.0010226145386695862,
-0.20914341509342194,
-0.08967682719230652,
-0.07195644825696945,
-0.011110903695225716,
0.06778068095445633,
-0.05308372527360916,
-0.11847808957099915,
-0.14097581803798676,
-0.011829969473183155,
-0.08497879654169083,
-0.09273388981819153,
0.16207291185855865,
-0.06575886160135269,
0.016163067892193794,
0.08261151611804962,
0.024799689650535583,
-0.11775054037570953,
0.07542546093463898,
-0.10175903886556625,
-0.024121500551700592,
0.1801159679889679,
0.15901228785514832,
0.09624191373586655,
-0.18837668001651764,
0.04811583086848259,
-0.13687840104103088,
-0.03752965107560158,
-0.06155233085155487,
-0.0027067207265645266,
-0.07628408819437027,
0.13368354737758636,
0.002336082048714161,
0.05195659399032593,
0.11016523092985153,
0.10586993396282196,
-0.06019493192434311,
0.026600880548357964,
0.09114108979701996,
0.09242621809244156,
-0.04170829430222511,
-0.05476418137550354,
-0.024962829425930977,
0.061384182423353195,
0.08930307626724243,
0.019589785486459732,
0.04277878254652023,
0.12197410315275192,
-0.041491203010082245,
0.04639175534248352,
-0.043361905962228775,
-0.09529435634613037,
0.04083026945590973,
-0.08009731024503708,
0.02394203469157219,
0.004739328753203154,
0.11018682271242142,
-0.100302554666996,
-0.013977264985442162,
0.017775902524590492,
-0.00981995277106762,
0.039747439324855804,
0.0716407299041748,
0.13378746807575226,
-0.08242029696702957,
-0.08428338915109634,
-0.1399986296892166,
-0.05760284513235092,
0.007991526275873184,
0.021367577835917473,
-0.10640526562929153,
0.036264337599277496,
-0.07093149423599243,
0.04361581802368164,
0.11970696598291397,
0.005627391394227743,
-0.15183787047863007,
-0.10765963792800903,
0.04496416449546814,
-0.10815126448869705,
-0.19706964492797852,
0.003941192291676998,
-0.09075313061475754,
-0.0029098624363541603,
-0.03186206519603729,
-0.025748712942004204,
-0.01974252238869667,
-0.027615133672952652,
-0.2304898500442505,
0.020478827878832817,
0.08551127463579178,
-0.034805770963430405,
-0.02193549834191799,
0.03245875611901283,
-0.1420535296201706,
0.025599591434001923,
-0.01419180165976286,
-0.08980883657932281,
-0.05691802501678467,
-0.023543329909443855,
-0.09632439911365509,
0.19683735072612762,
0.046438079327344894,
-0.03684159740805626,
-0.10649856925010681,
-0.08415089547634125,
0.06525973230600357,
-0.10219694674015045,
0.058077093213796616,
0.010721842758357525,
-0.054991334676742554,
0.10695180296897888,
0.09241828322410583,
-0.013583794236183167,
-0.04615386947989464,
-0.0705045536160469,
-0.045623574405908585,
0.061405159533023834,
0.07375768572092056,
0.0038561448454856873,
-0.08529379963874817,
0.10235632210969925,
0.08868604898452759,
-0.001305130310356617,
0.17007938027381897,
-0.11203967034816742,
-0.030599648132920265,
0.08542243391275406,
-0.06932605803012848,
-0.058475520461797714,
0.02370355650782585,
0.09276893734931946,
0.015581773594021797,
-0.0006752451881766319,
-0.063784658908844,
0.09263836592435837,
0.05580912157893181,
0.06624799221754074,
0.013129246421158314,
0.028466735035181046,
-0.022658586502075195,
-0.04483502730727196,
-0.031511422246694565,
0.05455629155039787,
-0.07276139408349991,
0.0046376981772482395,
-0.022918228060007095,
-0.10577882826328278,
0.09396790713071823,
0.021842436864972115,
0.0226299948990345,
-0.09258505702018738,
-0.09949161112308502,
-0.052230242639780045,
0.03378988802433014,
0.10465504974126816,
-0.018781745806336403,
-0.06564335525035858,
0.04696858301758766,
0.06178799644112587,
0.018062850460410118,
0.04489876329898834,
0.12052346765995026,
-0.02259068563580513,
-0.05772180110216141,
-0.08540935814380646,
0.10591470450162888,
0.002193682361394167,
-0.02148207649588585,
0.1320197433233261,
0.0840858742594719,
-0.053055617958307266,
0.027381746098399162,
-0.05511694774031639,
-0.05174767225980759,
-0.05184775963425636,
0.0469193235039711,
-0.08255971223115921,
0.0009849087800830603,
-0.07565492391586304,
-0.055288877338171005,
0.029185257852077484,
0.043688349425792694,
-0.05592096969485283,
-0.1079893633723259,
0.13381659984588623,
0.027560511603951454,
-0.04864846169948578,
0.020093843340873718,
0.01009295042604208,
-0.08198521286249161,
0.06899718940258026,
0.11720850318670273,
0.12177075445652008,
0.02202911116182804,
-0.04978107288479805,
0.11667846888303757,
0.11686889827251434,
0.07757903635501862,
-0.07079288363456726,
-0.029060829430818558,
0.12018878757953644,
0.009557180106639862,
-0.026827607303857803,
0.05944030359387398,
0.015563912689685822,
0.10351508855819702,
0.03406533598899841,
-0.0003051629173569381,
0.11448479443788528,
0.06434981524944305,
0.10069290548563004,
0.10189168155193329,
0.03338053822517395,
-0.05856383219361305,
0.10619866102933884,
-0.06930864602327347,
-0.0610804557800293,
-0.03567899763584137,
-0.011030199937522411,
-0.04004732519388199,
0.03122463822364807,
-0.052364468574523926,
-0.005463772919028997,
0.01678844913840294,
0.06130320206284523,
0.12627793848514557,
-0.09823915362358093,
0.018372738733887672,
0.13581961393356323,
0.07222411036491394,
0.021913720294833183,
-0.021168572828173637,
0.09240962564945221,
-0.06921019405126572,
0.018067574128508568,
0.04247630760073662,
0.05107056722044945,
0.049051135778427124,
0.06400096416473389,
0.06833194196224213,
-0.06895673274993896,
-0.01102454774081707,
0.00023334199795499444,
-0.032508980482816696,
0.010398187674582005,
0.1137910783290863,
-0.11232111603021622,
0.055016614496707916,
0.01049795188009739,
0.0699072927236557,
-0.09656770527362823,
0.0879531279206276,
0.09825172275304794,
0.07047993689775467,
0.02143619954586029,
-0.07694008946418762,
0.012357063591480255,
-0.08880538493394852,
0.042946528643369675,
-0.02965598925948143,
0.04913921281695366,
0.01900656335055828,
-0.05734714865684509,
-0.038029082119464874,
0.03127044439315796,
0.09758946299552917,
-0.03355070948600769,
-0.050332535058259964,
0.10882784426212311,
-0.07747291028499603,
-0.041299764066934586,
-0.11025269329547882,
-0.048907000571489334,
-0.06616935133934021,
-0.0795598104596138,
0.021280556917190552,
-0.022480253130197525,
-0.16075366735458374,
0.02182532288134098,
-0.042016610503196716,
-0.05921865254640579,
0.10865308344364166,
0.031586091965436935,
0.08093280345201492,
-0.09095572680234909,
0.00851178914308548,
-0.04057839512825012,
0.016885532066226006,
0.14449617266654968,
-0.05535570904612541,
0.02735002152621746,
0.1145569309592247,
-0.024638496339321136,
-0.06578803062438965,
0.05075770244002342,
0.02440238744020462,
-0.0743860974907875,
-0.09963473677635193,
-0.12392627447843552,
-0.0574917308986187,
0.01232381071895361,
-0.006421365775167942,
0.03662167862057686,
-0.08294227719306946,
-0.10921038687229156,
-0.10256294161081314,
-0.061766449362039566,
-0.036332204937934875,
0.06468188762664795,
-0.05592995136976242,
0.0914892926812172,
0.02786078304052353,
0.0214254017919302,
-0.0994354858994484,
0.0013946850085631013,
0.02008052170276642,
-0.07612927258014679,
-0.041729316115379333,
0.07478861510753632,
-0.0601341538131237,
-0.05998290330171585,
0.08337247371673584,
0.11405996978282928,
-0.0358232706785202,
-0.002829786157235503,
0.08357427269220352,
-0.18467816710472107,
0.0332932285964489,
0.1188720092177391,
0.06635397672653198,
0.11944998800754547,
-0.050246816128492355,
0.009244761429727077,
-0.022244006395339966,
0.04860835522413254,
0.05645320191979408,
0.055699530988931656,
-0.006108135916292667,
0.0176739189773798,
-0.05915779247879982,
0.04021516442298889,
-0.07969161123037338,
-0.18424268066883087,
0.0015290147857740521,
-0.09551878273487091,
-0.058420199900865555,
-0.060938332229852676,
-0.07147367298603058,
0.07008638978004456,
-0.09526441246271133,
-0.14972816407680511,
-0.04947012662887573,
0.03466830775141716,
-0.04054069146513939,
-0.10617614537477493,
0.11659570783376694,
-0.01217946968972683,
-0.08977387845516205,
-0.08410193771123886,
-0.04806094616651535,
0.04580942168831825,
0.09028320014476776,
0.034288521856069565,
-0.04647844657301903,
0.02492169477045536,
-0.022110017016530037,
0.023281749337911606,
-0.023472173139452934,
-0.07398761063814163,
0.037783585488796234,
-0.12545977532863617,
-0.032404396682977676,
-0.033425357192754745,
-0.10255388170480728,
-0.016083188354969025,
0.041038744151592255,
0.046479735523462296,
0.07191326469182968,
-0.06331924349069595,
-0.01741662621498108,
0.012043111026287079,
-0.10157797485589981,
0.018273673951625824,
-0.09374579042196274,
-0.11436591297388077,
0.016415368765592575,
0.0027482567820698023,
-0.01659558340907097,
0.011420011520385742,
-0.028815865516662598,
0.14944672584533691,
-0.0019093258306384087,
-0.005691261496394873,
0.02766602672636509,
0.06744611263275146,
-0.0842423215508461,
-0.018795212730765343,
-0.09403447061777115,
-0.0723109021782875,
0.057464685291051865,
0.0008113260846585035,
-0.06522522121667862,
-0.035169053822755814,
0.022997602820396423,
-0.13840866088867188,
0.09212558716535568,
-0.15347878634929657,
-0.06430649757385254,
0.07285115867853165,
-0.12294420599937439,
-0.08688785135746002,
0.055272553116083145,
0.11156845837831497,
-0.04887307062745094,
-0.16062240302562714,
-0.041467562317848206,
0.054288290441036224,
-0.03635348379611969,
-0.038575947284698486,
-0.04440297186374664,
-0.12612256407737732,
0.12225919216871262,
-0.09550727158784866,
0.0227133147418499,
0.049293141812086105,
0.04438484460115433,
-0.0666673332452774,
-0.07223697751760483,
0.15769512951374054,
-0.09693445265293121,
-0.03664319962263107,
-0.034523025155067444,
-0.02207017131149769,
-0.039163652807474136,
-0.06471753120422363,
-0.10409288108348846,
0.05301884934306145,
0.07444034516811371,
0.00805007666349411,
0.027400143444538116,
-0.04555807635188103,
0.11668992787599564,
0.0770028680562973,
0.000898314465302974,
0.06374642252922058,
0.043346159160137177,
0.04140661656856537,
0.04978089779615402,
0.015883076936006546,
-0.10365232825279236,
-0.04417802765965462,
-0.0750594288110733,
-0.003409902099519968,
-0.07568459212779999,
0.025284500792622566,
0.08914168179035187,
0.04190213233232498,
0.08299098163843155,
-0.026267902925610542,
-0.163999542593956,
-0.15190669894218445,
-0.09028857201337814,
-0.06522110849618912,
-0.07813379168510437,
-0.04924652352929115,
-0.09101632982492447,
-0.03257330507040024,
-0.13612978160381317,
-0.08172498643398285,
-0.018420884385704994,
0.09074967354536057,
-0.05105936899781227,
-0.03648129478096962,
-0.1665525883436203,
0.05297835171222687,
-0.051939260214567184,
-0.08668527007102966,
-0.07985869795084,
-0.015828844159841537,
0.08610513061285019,
0.08962175995111465,
-0.18368330597877502,
0.0030751130543649197,
0.05203462019562721,
0.05549289658665657,
0.09329859912395477,
-0.04073353111743927,
0.08114782720804214,
0.10442046076059341,
0.004768918734043837,
-0.002970492234453559,
0.07510780543088913,
0.036716874688863754,
-0.07989974319934845,
0.006698914337903261,
-0.0010745180770754814,
-0.13190282881259918,
-0.062391385436058044,
-0.12311992049217224,
0.023138385266065598,
-0.02213362231850624,
0.04633031412959099,
-0.01055136602371931,
-0.013134808279573917,
0.09248408675193787,
0.05167810246348381,
-0.12625566124916077,
-0.04344179108738899,
0.03668976202607155,
-0.11230277270078659,
-0.0154581218957901,
0.08682932704687119,
0.03002193011343479,
-0.06724769622087479,
-0.0153132239356637,
-0.0349113866686821,
0.02309711091220379,
0.04435198754072189,
0.0896017998456955,
0.03954732045531273,
0.11071772128343582,
0.08908209949731827,
-0.07636838406324387,
-0.04751685634255409,
0.06406527012586594,
0.0034283993300050497,
-0.14700229465961456,
-0.10009487718343735,
0.11848795413970947,
-0.0919671431183815,
0.08779668807983398,
-0.12272723019123077,
0.062303654849529266,
-0.007028711959719658,
0.06983379274606705,
0.16785019636154175,
-0.029844069853425026,
-0.02431010641157627,
-0.06942757964134216,
-0.004840501118451357,
-0.06868766993284225,
-0.07988257706165314,
-0.09212839603424072,
0.016600467264652252,
0.062530517578125,
0.027291757985949516,
0.022749321535229683,
-0.06669797003269196,
0.002883359557017684,
-0.06326943635940552,
-0.0010357194114476442,
-0.013849952258169651,
0.07236821204423904,
0.04172201827168465,
0.020946431905031204,
-0.14079730212688446,
-0.04550759121775627,
0.030846193432807922,
-0.09561125189065933,
-0.004200831986963749,
0.00451787281781435,
0.0532299242913723,
0.024606451392173767,
0.08962670713663101,
0.0020510193426162004,
-0.07410720735788345,
-0.02746186964213848,
0.0017282727640122175,
-0.15642251074314117,
0.0722816064953804,
0.08154842257499695,
-0.0215457770973444,
-0.05183034390211105,
0.006315446924418211,
-0.01661805249750614,
0.05116156488656998,
0.04174039140343666,
-0.07733302563428879,
-0.009718787856400013,
-0.03667466714978218,
0.08694250881671906,
0.040176983922719955,
-0.016990527510643005,
0.06317418813705444,
0.07899224013090134,
-0.041771646589040756,
0.06736091524362564,
-0.08405895531177521,
-0.1350802630186081,
-0.10235185921192169,
-0.02669234201312065,
0.002717446768656373,
-0.11941564083099365,
0.0010984305990859866,
0.028313420712947845,
0.016406919807195663,
-0.07647111266851425,
0.02807840146124363,
0.12311523407697678,
-0.039760008454322815,
0.025359269231557846,
-0.030469322577118874,
-0.01661931909620762,
0.12312085926532745,
0.06067429482936859,
0.015813924372196198,
0.033519282937049866,
0.026566242799162865,
0.05548258125782013,
0.1308078020811081,
0.11920113116502762,
-0.027080373838543892,
-0.0997200608253479,
0.02897052839398384,
0.018651887774467468,
0.13789211213588715,
-0.036461878567934036,
0.0025338013656437397,
-0.02129707857966423,
0.004005047958344221,
-0.07819242775440216,
-0.010296329855918884,
0.025377865880727768,
-0.07523758709430695,
-0.0010331105440855026,
-0.039311010390520096,
0.148727685213089,
-0.056454166769981384,
0.09549156576395035,
-0.032545190304517746,
0.08902337402105331,
-0.07069044560194016,
-0.09465041756629944,
0.01741465926170349,
-0.09439750015735626,
-0.005402921233326197,
0.09164132177829742,
0.0562124140560627,
0.06564080715179443,
0.0018870994681492448,
0.09430162608623505,
-0.0839923694729805,
0.13021613657474518,
-0.07195033878087997,
0.10938923805952072,
-0.09319838136434555,
-0.00474718539044261,
-0.04352869838476181,
0.09831716865301132,
-0.005799461621791124,
0.11818894743919373,
-0.026501722633838654,
-0.05628059804439545,
0.12109076976776123,
-0.09875177592039108,
0.10118328779935837,
-0.08886465430259705,
0.00798250362277031,
0.06729575246572495,
0.009210308082401752,
0.05978654697537422,
0.12058553844690323,
0.12083829194307327,
0.10382962971925735,
-0.06015530601143837,
0.04844667389988899,
0.026656046509742737,
-0.09903637319803238,
-0.05412088334560394,
-0.05299722030758858,
-0.07751140743494034,
0.12292872369289398,
-0.010777945630252361,
-0.004764849785715342,
0.09970569610595703,
0.10229639708995819,
-0.09612617641687393,
0.016447117552161217,
-0.08445485681295395,
0.12681923806667328,
0.06695118546485901,
0.04225045442581177,
0.12162962555885315,
0.08040635287761688,
0.08982241153717041,
-0.04221692308783531,
-0.09319458901882172,
0.15596801042556763,
-0.04036008566617966,
0.014853013679385185,
0.07218365371227264,
0.05290360376238823,
-0.03522476926445961,
0.01623113453388214,
-0.04205775260925293,
0.13357438147068024,
-0.11221765726804733,
0.026142414659261703,
0.06899420917034149,
-0.0017809609416872263,
-0.09356629103422165,
-0.06688765436410904,
-0.025026854127645493,
-0.07549676299095154,
-0.03029857948422432,
0.11113593727350235,
0.044470030814409256,
-0.012980897910892963,
0.07169058173894882,
-0.08950225263834,
-0.07646632939577103,
0.0297822467982769,
-0.0469135083258152,
-0.03212250769138336,
-0.06013154983520508,
0.09358155727386475,
-0.03179316222667694,
0.009309648536145687,
0.050818268209695816,
-0.05484696850180626,
-0.039344146847724915,
0.11936146765947342,
-0.10886161029338837,
-0.02180938795208931,
0.037845712155103683,
0.10143698006868362,
0.04937398061156273,
0.1613779217004776,
0.07226492464542389,
0.07303739339113235,
-0.027768081054091454,
0.04532097280025482,
-0.0849643126130104,
-0.004093348979949951,
-0.003673704108223319,
-0.07645519822835922,
-0.08698831498622894,
0.07650461047887802,
0.04996688291430473,
-0.00043288737651892006,
-0.12301117926836014,
0.05136539041996002,
0.05290732532739639,
-0.020464356988668442,
0.03652632609009743,
-0.07779846340417862,
-0.00686301663517952,
-0.03719419240951538,
0.04985805228352547,
0.08105914294719696,
0.03986542671918869,
0.1288813352584839,
-0.01957668364048004,
0.09635157883167267,
-0.04839305952191353,
0.09204421192407608,
0.0031562510412186384,
-0.04215588793158531,
-0.05022582784295082,
0.045921891927719116,
-9.201769717037678e-05,
0.053825099021196365,
0.13691672682762146,
0.13919885456562042,
-0.04997125267982483,
0.024980491027235985,
-0.06171507388353348,
0.0016715802485123277,
-0.08539664000272751,
0.12762324512004852,
0.01686418056488037,
-0.02586178481578827,
-0.0068761990405619144,
-0.004982951562851667,
-0.11835428327322006,
-0.011673519387841225,
-0.036584801971912384,
0.04243294522166252,
0.03775157779455185,
-0.01740674301981926,
0.011513588950037956,
0.12440980225801468,
0.00889927800744772,
0.14548908174037933,
0.04087856784462929,
0.04935779422521591,
0.16115666925907135,
-0.040741562843322754,
-0.11817372590303421,
0.021127372980117798,
-0.04343784227967262,
0.034849077463150024,
0.1652233600616455,
0.05008423328399658,
0.052373167127370834,
-0.032389044761657715,
0.06808441132307053,
0.06739011406898499,
-0.17389602959156036,
-0.13816462457180023,
0.012439202517271042,
-0.07074231654405594,
-0.04039112478494644,
-0.0007070144638419151,
-0.03169283643364906,
0.03469913825392723,
-0.005044079851359129,
0.05037283897399902,
0.09972245991230011,
0.05785784125328064,
0.048894573003053665,
-0.03792840614914894,
-0.021886197850108147,
0.08616669476032257,
-0.1210932731628418,
0.0683256983757019,
0.11035864055156708,
0.05897162854671478,
-0.04710625857114792,
-0.02857152745127678,
-0.10249175131320953,
-0.0987548977136612,
0.009542854502797127,
0.021240347996354103,
-0.08733901381492615,
0.1514860987663269,
-0.04689045250415802,
0.08013460785150528,
-0.08817823231220245,
0.00621616467833519,
-0.018193319439888,
0.006728233303874731,
0.055487632751464844,
-0.002491351682692766,
0.054412104189395905,
-0.0639827772974968,
-0.09169262647628784,
0.024164503440260887,
0.04260622709989548,
0.05777842923998833,
-0.03406495973467827,
-0.06085916981101036,
-0.12268950790166855,
-0.11845161765813828,
-0.053660642355680466,
-0.09507665038108826,
0.04867129400372505,
0.07266604155302048,
0.07201497256755829,
-0.12054038047790527,
-0.02884892001748085,
0.06408486515283585,
-0.06886427849531174,
-0.01679742895066738,
-0.07709868252277374,
0.08329302817583084,
0.03600805625319481,
0.12454188615083694,
-0.12589624524116516,
0.011319533921778202,
-0.0313231535255909,
-0.0012200410710647702,
-0.013097790069878101,
-0.06852452456951141,
0.06253799796104431,
-0.15524011850357056,
0.0859745591878891,
0.029544973745942116,
-0.03809814900159836,
-0.08753813058137894,
-0.09754392504692078,
-0.10249195247888565,
-0.1268046349287033,
-0.031800124794244766,
-0.16585960984230042,
0.18705184757709503,
0.104668989777565,
-0.08774448186159134,
0.0846477672457695,
-0.04302632808685303,
0.11189828813076019,
-0.17928992211818695,
-0.10644623637199402,
-0.11596333980560303,
-0.1096990555524826,
0.06535947322845459,
-0.11258824914693832,
0.06109297648072243,
0.01099651399999857,
0.01810363493859768,
0.04946838319301605,
-0.13340099155902863,
-0.04047370329499245,
0.050739601254463196,
-0.13855937123298645,
0.06439917534589767,
0.10813434422016144,
-0.08168846368789673,
-0.07016623020172119,
0.08650004863739014,
-0.10860785841941833,
0.06775078922510147,
-0.0322139747440815,
-0.027299480512738228,
-0.066899374127388,
0.009385882876813412,
0.06392142921686172,
0.0910981073975563,
-0.07294633239507675,
0.01070649828761816,
-0.11246693134307861,
-0.005909963510930538,
-0.07263161987066269,
-0.11879536509513855,
-0.10306145995855331,
-0.07041529566049576,
-0.026313824579119682,
0.051463834941387177,
0.06758484244346619,
-0.11535050719976425,
-0.06223932281136513,
0.1355379819869995,
0.0838729739189148,
0.01884811371564865,
-0.11366911232471466,
-0.007326408755034208,
0.05019160360097885,
-0.008043328300118446,
0.05938686057925224,
-0.0006234550382941961,
0.09068675339221954,
-0.08665621280670166,
-0.06532087177038193,
-0.021839207038283348,
0.08735915273427963,
0.016811290755867958,
0.09699802845716476,
-0.019689731299877167,
-0.06679770350456238,
0.020599642768502235,
-0.06330882012844086,
-0.06194370239973068,
0.05074465647339821,
-0.07404603809118271,
0.08344342559576035,
-0.02595948986709118,
-0.11422418802976608,
-0.1240016520023346,
0.09334728121757507,
0.14486806094646454,
0.05994996055960655,
-0.042305100709199905,
0.09402422606945038,
0.07947958260774612,
-0.10993559658527374,
0.15646274387836456,
-0.017523879185318947,
-0.07712273299694061,
0.0026741770561784506,
-0.019322630017995834,
-0.04115455225110054,
-0.13515238463878632,
-0.16852954030036926,
0.15482158958911896,
-0.11220972239971161,
-0.10669249296188354,
-0.017913972958922386,
0.07439150661230087,
-0.0542912483215332,
0.09961871802806854,
0.11305154860019684,
-0.0679248794913292,
0.03980303555727005,
-0.0006848922348581254,
0.09340560436248779,
-0.018491903319954872,
0.11821828037500381,
0.01971367932856083,
0.07724219560623169,
0.07305333018302917,
-0.16302981972694397,
-0.09206853061914444,
0.006550583988428116,
0.016774209216237068,
0.07754155248403549,
-0.017090003937482834,
0.008689247071743011,
0.06449737399816513,
0.030890043824911118,
0.0713433250784874,
-0.0344572477042675,
0.012344634160399437,
0.06711859256029129,
-0.08603466302156448,
0.030120600014925003,
-0.019472748041152954,
-0.08056779205799103,
0.0421435721218586,
-0.09101192653179169,
-0.07907356321811676,
-0.0326075404882431,
-0.02004591003060341,
-0.041485175490379333,
-0.07978586852550507,
0.0690181776881218,
0.02705380693078041,
0.07459793239831924,
-0.004785685800015926,
-0.014071328565478325,
-0.025475671514868736,
-0.024045757949352264,
-0.07478420436382294,
-0.07026351243257523,
-0.005636101588606834,
0.039189182221889496,
-0.0058411527425050735,
0.03807755932211876,
0.10631018877029419,
-0.04276544228196144,
0.010166099295020103,
0.07106149941682816,
-0.0040850224904716015,
0.032239023596048355,
-0.06882592290639877,
-0.053223125636577606,
0.09009473770856857,
0.071241095662117,
0.05754426121711731,
0.024880509823560715,
-0.056551411747932434,
-0.07193388789892197,
0.07149381935596466,
0.012545429170131683,
-0.030334847047924995,
0.09516870975494385,
0.06234220415353775,
0.03307025879621506,
-0.0741708055138588,
0.043318528681993484,
-0.1347542703151703,
0.00537745701149106,
-0.01625916175544262,
-0.14000150561332703,
0.04581248760223389,
-0.007045356091111898,
-0.11762385815382004,
0.021383261308073997,
0.03720646724104881,
-0.05210880935192108,
-0.0005354413879103959,
0.07773465663194656,
-0.13468296825885773,
0.0036311959847807884,
0.05946531519293785,
-0.05912055820226669,
0.07329823821783066,
0.03487101197242737,
0.14640188217163086,
0.0001135755519499071,
-0.017718428745865822,
-0.03971945494413376,
0.007368090096861124,
0.010859969072043896,
0.1020335853099823,
0.07643723487854004,
0.11611232906579971,
0.03497123718261719,
0.029577011242508888,
-0.07889263331890106,
0.11344846338033676,
0.03666846454143524,
-0.06608187407255173,
-0.021475231274962425,
-0.09777998924255371,
-0.008538167923688889,
-0.08889879286289215,
-0.01242811419069767,
0.0890011340379715,
0.05349737033247948,
-0.11980307847261429,
0.14171765744686127,
0.07109936326742172,
0.15110458433628082,
-0.04731138423085213,
0.03404468670487404,
0.04953387752175331,
-0.0016910277772694826,
-0.08606388419866562,
0.05628938600420952,
-0.07650238275527954,
-0.06975823640823364,
-0.04295457899570465,
0.040591564029455185,
-0.08974486589431763,
-0.07227563112974167,
0.045475952327251434,
-0.058152373880147934,
0.07450750470161438,
-0.0776887908577919,
-0.010878914035856724,
-0.043825533241033554,
-0.02767227031290531,
-0.08034627884626389,
-0.07618170231580734,
-0.11867982894182205,
0.011598780751228333,
-0.003375546308234334,
0.030439801514148712,
0.0010210364125669003,
-0.051863882690668106,
0.015416436828672886,
-0.06848122179508209,
0.13089169561862946,
0.12175343930721283,
-0.017735447734594345,
-0.1022912785410881,
-0.11996722966432571,
-0.026665909215807915,
-0.011401370167732239,
-0.06729257851839066,
0.0675998404622078,
-0.08506514132022858,
0.051432278007268906,
0.004599856678396463,
0.05581911280751228,
-0.01095142588019371,
0.032480426132678986,
0.04810471087694168,
0.04099274054169655,
0.026495711877942085,
0.05625088885426521,
-0.11723874509334564,
0.08378449827432632,
-0.07539798319339752,
-0.09508135914802551,
-0.07010781019926071,
0.02001243643462658,
0.09617859125137329,
0.11936265230178833,
0.12277481704950333,
-0.02114604227244854,
-0.024661898612976074,
-0.08318112045526505,
0.07862081378698349,
0.04184497892856598,
0.08230970054864883,
-0.03398422524333,
-0.07710857689380646,
0.1064629852771759,
0.009280596859753132,
0.11793026328086853,
0.005211394280195236,
0.06524110585451126,
-0.20044752955436707,
-0.018424522131681442,
0.08569464087486267,
0.04892624542117119,
-0.028046468272805214,
0.1136346235871315,
0.12045726180076599,
-0.08353188633918762,
-0.0037579163908958435,
0.043017029762268066,
0.06687992811203003,
-0.03858606144785881,
0.07113301008939743,
0.029734108597040176,
-0.023502223193645477,
0.026660531759262085,
-0.058339256793260574,
0.05709397420287132,
-0.03882449120283127,
0.09291630238294601,
-0.02662394382059574,
0.16845841705799103,
-0.06427261233329773,
0.08650527894496918,
-0.02804550714790821,
-0.024791710078716278,
0.11293590068817139,
-0.13939091563224792,
-0.07637636363506317,
-0.0428217388689518,
-0.04928731173276901,
-0.12104947865009308,
-0.14925740659236908,
0.05728188157081604,
0.0107986219227314,
0.0023071984760463238,
-0.01892988197505474,
0.16304883360862732,
0.10173196345567703,
0.19761288166046143,
0.14896160364151,
-0.003380607580766082,
0.02631932869553566,
-0.05063392594456673,
0.07069747895002365,
0.04879699647426605,
-0.10274334996938705,
-0.02558979205787182,
-0.01750553585588932,
0.06834789365530014,
0.004039717838168144,
0.08279243856668472,
-0.012877484783530235,
-0.07457815110683441,
-0.0024933628737926483,
-0.110491544008255,
-0.012829692102968693,
-0.04699785262346268,
0.11474609375,
0.04002368077635765,
-0.07444064319133759,
-0.05799037963151932,
-0.009497826918959618,
0.05633174255490303,
-0.06400975584983826,
-0.018047954887151718,
0.02850664034485817,
-0.012434130534529686,
-0.05242304503917694,
-0.07002358138561249,
-0.039553508162498474,
0.023067444562911987,
0.06417660415172577,
-0.10204074531793594,
-0.06841442734003067,
0.048224348574876785,
-0.07922671735286713,
-0.007258715573698282,
-0.07425536215305328,
0.040499407798051834,
-0.060651712119579315,
0.0018306742422282696,
-0.03272970765829086,
0.09793031960725784,
0.09081926941871643,
-0.14015816152095795,
0.13385988771915436,
-0.08602867275476456,
-0.03646131977438927,
-0.09021368622779846,
0.059693340212106705,
-0.03905215114355087,
-0.08098400384187698,
-0.12119297683238983,
0.11328113079071045,
0.00908483937382698,
-0.0017450068844482303,
0.07862910628318787,
0.02143920212984085,
0.1377914547920227,
0.07165699452161789,
-0.038113515824079514,
0.07042039930820465,
-0.10066208988428116,
-0.07544809579849243,
0.024430949240922928,
-0.047010451555252075,
-0.011187001131474972,
-0.09512665122747421,
-0.07392656803131104,
0.13442640006542206,
0.16953225433826447,
0.010021834634244442,
0.1067548543214798,
-0.06348203867673874,
0.014326960779726505,
-0.013352999463677406,
-0.1241488978266716,
-0.08448739349842072,
-0.01606040634214878,
-0.058470990508794785,
-0.07240945100784302,
-0.06280327588319778,
-0.02680414542555809,
0.031490229070186615,
-0.01834931969642639,
-0.036472346633672714,
0.08402757346630096,
0.07046099752187729,
0.21530751883983612,
-0.08163280785083771,
-0.0071736471727490425,
0.023906398564577103,
-0.07360313832759857,
0.03706160932779312,
-0.06754301488399506,
0.06735888868570328,
-0.08195225149393082,
-0.0025903377681970596,
0.0134346354752779,
0.05352690815925598,
0.1168486624956131,
0.045517727732658386,
-0.023707062005996704,
0.04187234491109848,
0.04662269353866577,
-0.09813982993364334,
-0.00037741014966741204,
0.10150063037872314,
-0.09495483338832855,
0.03462979570031166,
0.11374280601739883,
-0.018704168498516083,
0.01661442592740059,
0.0033689190167933702,
-0.1304028034210205,
0.004729376640170813,
0.011472254060208797,
0.07480157166719437,
-0.06501071900129318,
-0.059135258197784424,
0.06504319608211517,
-0.09530659019947052,
-0.14772266149520874,
0.07439124584197998,
-0.0810028687119484,
0.05987273529171944,
0.07432054728269577,
-0.14164398610591888,
-0.05255943909287453,
-0.05568326264619827,
-0.06892969459295273,
-0.09407531470060349,
-0.09843805432319641,
0.11204240471124649,
0.09024649113416672,
-0.015941010788083076,
-0.0005791576113551855,
-0.08430614322423935,
-0.024977410212159157,
-0.07484407722949982,
-0.07775741070508957,
0.14302225410938263,
-0.08506952971220016,
-0.0942494124174118,
-0.02993144653737545,
-0.12514524161815643,
0.09332619607448578,
0.057538919150829315,
0.06821288168430328,
0.08734001219272614,
-0.02107224240899086,
-0.10183470696210861,
0.129740372300148,
0.007527071982622147,
0.022720811888575554,
-0.004733859561383724,
-0.07061407715082169,
0.07227388769388199,
-0.026877757161855698,
0.07276930660009384,
-0.16101866960525513,
0.06733729690313339,
0.11473037302494049,
0.10781307518482208,
0.07371213287115097,
0.04502636194229126,
0.03308182582259178,
0.04325397312641144,
0.027771156281232834,
-0.07886280119419098,
-0.05155480280518532,
0.15988215804100037,
0.09133123606443405,
-0.07233642041683197,
0.030325688421726227,
-0.09969933331012726,
0.047462109476327896,
-0.06549880653619766,
-0.07399062067270279,
0.04796534404158592,
0.017596030607819557,
-0.043627046048641205,
-0.002769863698631525,
0.07817386090755463,
-0.03287334740161896,
-0.02649211511015892,
-0.16499824821949005,
0.05478837341070175,
-0.05098923295736313,
0.047596342861652374,
-0.03507371246814728,
-0.08972412347793579,
0.15319721400737762,
-0.011809276416897774,
-0.030188560485839844,
0.14216071367263794,
-0.06199265643954277,
-0.04590707644820213,
0.011222830973565578,
0.011180915869772434,
0.06880698353052139,
0.03607602044939995,
-0.004855622071772814,
0.11322782188653946,
-0.1359584778547287,
0.029097668826580048,
-0.0076562510803341866,
-0.005609641317278147,
0.05029820278286934,
-0.11373604089021683,
-0.05697163939476013,
-0.06429218500852585,
0.07930248230695724,
-0.1431279331445694,
0.010353120043873787,
0.1190749853849411,
-0.010014927946031094,
0.01633397303521633,
-0.11596822738647461,
-0.08933057636022568,
0.001905453740619123,
0.001305946265347302,
-0.04013533890247345,
-0.04992572218179703,
-0.09078273922204971,
-0.06555372476577759,
-0.046794965863227844,
0.039819858968257904,
0.034059230238199234,
-0.07644796371459961,
-0.022142542526125908,
-0.1317625790834427,
-0.05110517889261246,
-0.012798826210200787,
-0.07945354282855988,
0.038560718297958374,
-0.1979755461215973,
0.051790133118629456,
0.06306169182062149,
-0.05809943750500679,
-0.15920057892799377,
0.05559167265892029,
0.1759423017501831,
0.058243636041879654,
-0.06907356530427933,
0.01573585905134678,
0.10260873287916183,
-0.0565497986972332,
-0.09639354795217514,
0.009221640415489674,
-0.01684875227510929,
-0.0007535497425124049,
0.11329066008329391,
0.018308144062757492,
0.050817329436540604,
0.05083611607551575,
0.10907737165689468,
-0.04684760794043541,
0.1299116611480713,
-0.0479995496571064,
0.0189155712723732,
0.14180399477481842,
0.13381150364875793,
-0.0011070057516917586,
-0.01684679090976715,
0.08967456221580505,
0.015236805193126202,
0.19260844588279724,
-0.07144507765769958,
0.013732575811445713,
0.04069536551833153,
0.10795919597148895,
-0.008902615867555141,
-0.0017307016532868147,
-0.0529702827334404,
0.053485408425331116,
0.004702650476247072,
0.01029058638960123,
-0.000166703321156092,
0.08954675495624542,
-0.03568638861179352,
-0.014569034799933434,
0.05069345235824585,
-0.0036047145258635283,
-0.0725032314658165,
0.01249381061643362,
0.011014023795723915,
0.09235835075378418,
0.10484068840742111,
0.09309247881174088,
-0.021182239055633545,
0.06224023923277855,
-0.09235341101884842,
-0.04565256088972092,
-0.05363179370760918,
-0.04508409649133682,
-0.02819102257490158,
0.05122293159365654,
-0.1318216770887375,
-0.06047898530960083,
-0.06969646364450455,
0.12745270133018494,
0.0004288118507247418,
-0.012006363831460476,
-0.04257071390748024,
0.013480340130627155,
-0.031845539808273315,
-0.034616537392139435,
-0.09386474639177322,
-0.019075943157076836,
-0.056556809693574905,
-0.008570040576159954,
0.05437850579619408,
-0.08187421411275864,
-0.028644395992159843,
0.03237158805131912,
-0.05801599845290184,
-0.046302761882543564,
0.09759006649255753,
-0.06287340074777603,
-0.05824459344148636,
-0.05326415225863457,
0.07750855386257172,
-0.11418101191520691,
0.03721974417567253,
-0.020572422072291374,
0.0327117033302784,
-0.01566753163933754,
-0.10211730003356934,
-0.01953466609120369,
0.10538927465677261,
0.06970324367284775,
-0.01858832687139511,
-0.02472560666501522,
-0.03702707961201668,
0.06306193023920059,
0.06250051409006119,
0.09449703246355057,
0.020655924454331398,
0.05785718187689781,
-0.010842572897672653,
-0.015422485768795013,
-0.01549482811242342,
0.06230301037430763,
0.000819104490801692,
0.08824492990970612,
-0.06850798428058624,
0.010121222585439682,
0.17344748973846436,
-0.005810473579913378,
0.009670010767877102,
-0.05734485387802124,
-0.0981350690126419,
-0.03258588910102844,
0.09937578439712524,
0.04827599599957466,
0.09486883133649826,
0.11853969842195511,
0.13808532059192657,
0.03167356550693512,
0.021904315799474716,
0.006231103558093309,
0.05952583625912666,
0.013620815239846706,
0.05345242843031883,
-0.004929846152663231,
-0.09893660992383957,
0.07136241346597672,
-0.1024276465177536,
0.08837147802114487,
0.007368835154920816,
0.07914874702692032,
-0.03244824334979057,
0.11055082827806473,
-0.03551807627081871,
0.07977953553199768,
0.12899094820022583,
-0.035342440009117126,
-0.10456035286188126,
-0.012699920684099197,
-0.0826684907078743,
0.10834312438964844,
0.07115137577056885,
0.023700470104813576,
-0.00452679255977273,
0.07886333018541336,
0.029375651851296425,
0.029600387439131737,
-0.01054823212325573,
-0.060677431523799896,
0.039363760501146317,
-0.15107972919940948,
0.008501293137669563,
-0.005983282811939716,
-0.03919336944818497,
-0.16607367992401123,
0.01886700466275215,
0.0699695348739624,
-0.07781746983528137,
0.06629620492458344,
-0.013752179220318794,
-0.09035629779100418,
0.05238354951143265,
0.08028263598680496,
0.012661835178732872,
-0.10265259444713593,
-0.033293627202510834,
-0.07138413190841675,
0.0986509621143341,
-0.0009020197903737426,
-0.11443885415792465,
-0.09728246927261353,
-0.1112021952867508,
0.030817905440926552,
-0.021625090390443802,
-0.025232601910829544,
0.06839635968208313,
-0.1229567676782608,
-0.15779052674770355,
-0.07711967825889587,
-0.10996030271053314,
-0.12461208552122116,
0.0013131145387887955,
-0.07529601454734802,
-0.045766450464725494,
-0.15703655779361725,
0.06676309555768967,
0.09563164412975311,
-0.0019013171549886465,
-0.0616290420293808,
-0.10658835619688034,
0.04001524671912193,
-0.13013312220573425,
-0.029891589656472206,
0.09205731004476547,
-0.04886686056852341,
-0.09353763610124588,
0.023156113922595978,
0.012112277559936047,
-0.010236777365207672,
0.0004192308406345546,
-0.048304181545972824,
0.06360509246587753,
-0.10887321084737778,
0.03296196833252907,
-0.03157772868871689,
0.01748461276292801,
-0.14201626181602478,
-0.09148576855659485,
0.00131289626006037,
-0.033275775611400604,
-0.09073784947395325,
-0.11238960176706314,
0.07970184832811356,
0.11652273684740067,
-0.013229978270828724,
0.0665101632475853,
-0.034955091774463654,
0.015286751091480255,
-0.04223143309354782,
0.04772942513227463,
0.018281571567058563,
-0.05598222091794014,
0.13160647451877594,
0.012388975359499454,
-0.17181359231472015,
-0.04364050179719925,
-0.06518670171499252,
-0.09115320444107056,
-0.002231831196695566,
0.06835070997476578,
0.11965228617191315,
0.11554867029190063,
-0.13078875839710236,
-0.04597970098257065,
0.04149515554308891,
0.03936154395341873,
-0.053780052810907364,
0.09043511748313904,
-0.07264383137226105,
-0.010490791872143745,
-0.03220665454864502,
-0.10291525721549988,
0.11515282094478607,
-0.1968737095594406,
-0.01558600552380085,
0.05222814157605171,
0.028910845518112183,
0.03432030975818634,
-0.1221391037106514,
-0.029969967901706696,
-0.07283083349466324,
0.04957195371389389,
0.011320200748741627,
0.0632096603512764,
0.03804422542452812,
0.06342523545026779,
-0.04802580177783966,
0.018364062532782555,
-0.05416044965386391,
0.026989327743649483,
-0.038529276847839355,
-0.0703730434179306,
0.1323527842760086,
-0.022127699106931686,
-0.15107746422290802,
-0.02395845204591751,
-0.0048551843501627445,
0.07147706300020218,
-0.049330420792102814,
-0.04638747125864029,
0.011243926361203194,
-0.04571767523884773,
0.09176056832075119,
-0.02100355550646782,
-0.09327781945466995,
-0.04302544519305229,
0.03595694527029991,
-0.05255454033613205,
-0.10540033131837845,
-0.08417969197034836,
-0.10972127318382263,
0.001749182352796197,
-0.005848242435604334,
-0.034781601279973984,
0.07207698374986649,
-0.05083327740430832,
0.06747022271156311,
-0.08445878326892853,
0.014747804962098598,
-0.0132571617141366,
0.05479329451918602,
0.09821702539920807,
0.13511325418949127,
0.02444854937493801,
0.08354402333498001,
-0.005070780869573355,
0.12233936041593552,
-0.046727314591407776,
0.043257441371679306,
0.1073998436331749,
0.14489305019378662,
0.08972980827093124,
-0.005218277685344219,
-0.07133101671934128,
-0.09866207093000412,
0.003921741619706154,
-0.04262961447238922,
0.029331179335713387,
0.1920175999403,
0.06848696619272232,
0.16744372248649597,
0.1211543157696724,
0.06818705797195435,
0.052741892635822296,
-0.028784532099962234,
0.09412315487861633,
0.13539578020572662,
0.0476965606212616,
-0.03040936402976513,
-0.012810326181352139,
-0.07334144413471222,
-0.0268993116915226,
0.12038183212280273,
-0.023934779688715935,
-0.02449342980980873,
-0.03819729760289192,
-0.0007584413979202509,
0.11773437261581421,
0.019784152507781982,
0.033344294875860214,
0.10576815158128738,
-0.07427896559238434,
-0.17137542366981506,
0.11080802977085114,
-0.04661117494106293,
0.09012603759765625,
-0.013754282146692276,
0.11341412365436554,
-0.06192583218216896,
-0.13449548184871674,
0.04291592910885811,
0.0012749312445521355,
-0.015394413843750954,
-0.03469594568014145,
-0.09626522660255432,
-0.10177256911993027,
0.07121024280786514,
0.10105269402265549,
0.0566595122218132,
-0.07382739335298538,
0.10119739174842834,
-0.035092175006866455,
-0.03495305776596069,
0.09405922144651413,
-0.061854034662246704,
-0.014389780350029469,
-0.1119050458073616,
0.0751589834690094,
-0.06681612879037857,
-0.009421749971807003,
0.04247279092669487,
-0.018769096583127975,
0.15397553145885468,
0.06415915489196777,
0.16561384499073029,
-0.03720923140645027,
-0.1095103994011879,
0.0021130444947630167,
0.04031908139586449,
-0.05079450458288193,
0.03422008082270622,
0.012984836474061012,
0.07838258147239685,
-0.0644526332616806,
0.1007569432258606,
-0.053474996238946915,
0.05127348750829697,
-0.14377529919147491,
-0.014359060674905777,
0.05910508334636688,
0.06706968694925308,
0.09565851092338562,
0.030300864949822426,
0.10308336466550827,
-0.06761261075735092,
0.04712929576635361,
-0.0699487179517746,
0.0864332839846611,
0.0747927874326706,
0.12351708859205246,
-0.0032223283778876066,
0.1414651870727539,
0.021316220983862877,
0.058455921709537506,
-0.08449917286634445,
0.025197217240929604,
0.06302861124277115,
-0.05321960523724556,
0.05326578766107559,
-0.024395596235990524,
-0.09248600155115128,
0.01706928387284279,
-0.05753690004348755,
0.11699540913105011,
0.06279776245355606,
0.034737493842840195,
0.003695205319672823,
-0.05518506467342377,
0.08970515429973602,
-0.02826235070824623,
0.09184680134057999,
-0.08998068422079086,
0.08259201794862747,
-0.015593929216265678,
-0.029327556490898132,
0.02937764674425125,
-0.034136902540922165,
0.09620565176010132,
0.014317022636532784,
-0.023770920932292938,
0.07098067551851273,
0.0950363427400589,
0.06389155238866806,
0.04280715435743332,
0.0354500487446785,
0.10095757991075516,
0.08157484978437424,
-0.00641788262873888,
0.013161437585949898,
0.022568359971046448,
0.11014261841773987,
0.03993862867355347,
0.021025072783231735,
-0.10161375254392624,
-0.08814334869384766,
-0.048645272850990295,
0.10439065843820572,
-0.013425995595753193,
0.05716162174940109,
-0.07042531669139862,
0.03848696127533913,
-0.07840188592672348,
0.08469080179929733,
-0.004269873723387718,
0.004474957007914782,
-0.1043008342385292,
-0.03826479613780975,
0.058322615921497345,
-0.08245772123336792,
0.102559395134449,
-0.08556541055440903,
-0.07071386277675629,
0.010258621536195278,
0.09843248873949051,
0.1053387001156807,
-0.07135417312383652,
0.0249773059040308,
-0.1199108436703682,
0.06472885608673096,
-0.13954244554042816,
0.0005806972621940076,
-0.09791621565818787,
0.1415974646806717,
-0.03886159509420395,
0.03415658324956894,
0.03561064228415489,
0.12124089896678925,
-0.022337283939123154,
0.0505489818751812,
0.010801161639392376,
-0.13740894198417664,
-0.14655371010303497,
0.05063023790717125,
0.09348464757204056,
-0.043495986610651016,
-0.13882164657115936,
-0.09043528884649277,
0.00836238730698824,
0.08918353170156479,
0.055074542760849,
0.06019476801156998,
-0.02087770588696003,
0.0291424747556448,
-0.0009697127970866859,
-0.02508743479847908,
0.015172653831541538,
-0.012564131990075111,
-0.08491651713848114,
0.011847134679555893,
0.005109067540615797,
0.06991441547870636,
-0.16527266800403595,
0.17987339198589325,
0.1337313950061798,
0.01548001542687416,
-0.0355055071413517,
-0.01510805543512106,
0.03140425309538841,
0.10776100307703018,
-0.0002077258686767891,
-0.03817141056060791,
0.09033972769975662,
-0.18464040756225586,
-0.009101108647882938,
-0.005740905646234751,
-0.04628906399011612,
-0.03438575565814972,
-0.1296272873878479,
0.16869543492794037,
0.0006231200532056391,
-0.10877960920333862,
-0.12188215553760529,
-0.03320010378956795,
0.008807559497654438,
-0.08948679268360138,
-0.07166185230016708,
0.0539371557533741,
0.020238861441612244,
-0.06360749900341034,
0.08095955848693848,
0.016965987160801888,
0.039864592254161835,
-0.1284324675798416,
-0.006461510434746742,
0.043080393224954605,
0.06421346217393875,
-0.08509022742509842,
-0.07176018506288528,
0.06646587699651718,
0.11287929862737656,
-0.06212090700864792,
-0.012341597117483616,
-0.012452755123376846,
0.042879607528448105,
-0.030828192830085754,
0.09693679213523865,
0.06438428163528442,
-0.012018276378512383,
-0.12745842337608337,
0.05647677183151245,
0.12238792330026627,
-0.03654021397233009,
-0.10698926448822021,
0.06948595494031906,
0.07039108872413635,
-0.009492249228060246,
0.10407941788434982,
0.048660408705472946,
-0.007627709303051233,
-0.10238881409168243,
-0.07786732167005539,
-0.05924524739384651,
-0.0446423664689064,
0.061767566949129105,
0.0936204344034195,
0.23129598796367645,
0.041602104902267456,
0.05154090002179146,
-0.11187459528446198,
0.02952270209789276,
-0.06716623902320862,
-0.129102423787117,
0.11364109814167023,
0.05983978137373924,
-0.05542997270822525,
0.006790247280150652,
-0.029232898727059364,
0.09090911597013474,
-0.048974473029375076,
-0.006290289107710123,
-0.04976198822259903,
0.026108097285032272,
-0.14872238039970398,
0.08389327675104141,
-0.24269405007362366,
0.06314468383789062,
-0.05686577036976814,
0.0032903787214308977,
-0.061249226331710815,
0.0007006419473327696,
0.030970895662903786,
-0.06255457550287247,
0.08004903048276901,
0.038521312177181244,
0.027082154527306557,
-0.18113857507705688,
-0.016547860577702522,
-0.032961249351501465,
-0.06950660049915314,
0.019933100789785385,
-0.11586702615022659,
0.033671144396066666,
-0.014020622707903385,
-0.0013972982997074723,
-0.07755664736032486,
-0.05195064842700958,
-0.0976804569363594,
0.0626499280333519,
-0.11762025207281113,
-0.025556566193699837,
0.03177968040108681,
-0.17427659034729004,
0.06410835683345795,
-0.039784058928489685,
0.08464638888835907,
-0.03674177825450897,
-0.0921410545706749,
-0.15276843309402466,
-0.010760863311588764,
0.06024608388543129,
-0.05394995957612991,
0.03646119311451912,
-0.14021021127700806,
-0.09234921634197235,
-0.10779820382595062,
-0.007297565694898367,
-0.07703231275081635,
0.01748795062303543,
0.1142532154917717,
0.02060733735561371,
-0.1053229421377182,
-0.023178037256002426,
0.008439755998551846,
-0.037143632769584656,
-0.09349046647548676,
0.040533795952796936,
-0.11717192083597183,
-0.04376167431473732,
-0.09191755205392838,
-0.04665428772568703,
-0.20936131477355957,
-0.07856395840644836,
-0.097072534263134,
-0.0030184313654899597,
0.04590959846973419,
-0.11158426851034164,
-0.04832857474684715,
0.11126600950956345,
0.040742695331573486,
-0.036021679639816284,
0.1485913246870041,
0.05431447550654411,
-0.09186706691980362,
-0.06757757067680359,
-0.02062610723078251,
-0.1095626950263977,
0.026690496131777763,
-0.0866897702217102,
0.049560822546482086,
-0.039642274379730225,
0.14221012592315674,
-0.010881942696869373,
0.13163460791110992,
0.08705157041549683,
0.06762417405843735,
0.07093270868062973,
-0.015402611345052719,
0.05004197359085083,
-0.022359410300850868,
-0.1553417444229126,
-0.08132894337177277,
-0.011878487654030323,
0.09464479237794876,
-0.04281162843108177,
0.0719090923666954,
-0.02171040140092373,
0.0603598915040493,
-0.15027591586112976,
-0.07835853099822998,
0.03485250100493431,
0.13580676913261414,
-0.04385039210319519,
0.08791439235210419,
-0.073384128510952,
-0.02116936258971691,
0.07040408253669739,
-0.03490347042679787,
0.1046966165304184,
0.07033022493124008,
-0.04021076485514641,
0.10315769165754318,
0.07254403829574585,
-0.06689289212226868,
-0.03662935644388199,
-0.08678978681564331,
0.10452000796794891,
0.10979755967855453,
-0.06307083368301392,
0.1624273955821991,
-0.07940256595611572,
-0.12206427752971649,
0.009540747851133347,
0.027994273230433464,
0.08710920065641403,
0.014631408266723156,
0.09038446098566055,
0.01365681178867817,
0.09188371896743774,
-0.05441996827721596,
-0.022396065294742584,
-0.1738997846841812,
0.10610360652208328,
0.12172969430685043,
0.06389323621988297,
0.1014510914683342,
-0.12243595719337463,
0.07154352962970734,
0.10270308703184128,
-0.043925873935222626,
0.049459442496299744,
-0.02599792182445526,
0.0833413228392601,
-0.05557696148753166,
-0.021057147532701492,
-0.04173567518591881,
0.018848277628421783,
0.04282670468091965,
0.010421660728752613,
-0.03197435289621353,
-0.04775474965572357,
0.1170109435915947,
-0.053929153829813004,
0.11962925642728806,
0.03864692151546478,
-0.09710879623889923,
-0.11191731691360474,
-0.041876308619976044,
-0.02549416944384575,
-0.09223946183919907,
-0.09152457118034363,
0.10180478543043137,
0.016913237050175667,
-0.0014698455343022943,
-0.030697839334607124,
0.0870797336101532,
-0.03223388269543648,
0.05101868882775307,
-0.014202400110661983,
0.12272323668003082,
0.02304190769791603,
0.015099129639565945,
-0.03981231525540352,
0.017267797142267227,
0.09349159151315689,
-0.03636649250984192,
-0.08869419246912003,
-0.0031424572225660086,
-0.04467546567320824,
0.011296425014734268,
0.00812115054577589,
0.13929195702075958,
0.02500150166451931,
-0.00813753716647625,
0.013408424332737923,
-0.06109669804573059,
-0.023455996066331863,
-0.01714971289038658,
0.08617489039897919,
0.04483935609459877,
-0.01086512953042984,
-0.056976959109306335,
-0.09323208779096603,
-0.0594770647585392,
-0.027289297431707382,
0.07449758052825928,
-0.07555874437093735,
-0.01892341487109661,
-0.11058267951011658,
-0.13690242171287537,
0.056195784360170364,
0.04438100382685661,
-0.03771207854151726,
0.09511443227529526,
-0.03860243782401085,
-0.06665950268507004,
0.08003466576337814,
-0.08836612105369568,
-0.0077193621546030045,
-0.04366525262594223,
0.05805473402142525,
0.01487814076244831,
-0.04945945739746094,
-0.06692653149366379,
0.020424991846084595,
-0.012405870482325554,
-0.00739151518791914,
0.022966552525758743,
0.09218251705169678,
-0.03146927058696747,
-0.03519194945693016,
-0.0732671394944191,
-0.05060862377285957,
-0.05448734760284424,
-0.03608541935682297,
-0.025131842121481895,
-0.1166093647480011,
-0.07551035284996033,
-0.057671986520290375,
0.0077048600651323795,
0.00044607024756260216,
0.009729648940265179,
0.08189588040113449,
-0.12093605101108551,
0.12825436890125275,
-0.04859961196780205,
0.10713357478380203,
0.020451391115784645,
-0.015155119821429253,
0.15601179003715515,
0.09028671681880951,
-0.0028375403489917517,
0.12150711566209793,
0.016812628135085106,
0.05742322653532028,
0.16511644423007965,
-0.043398354202508926,
0.13448329269886017,
0.08928117156028748,
0.04980241879820824,
0.10438191145658493,
-0.06229057535529137,
-0.02936156652867794,
-0.016234444454312325,
0.0010623072739690542,
-0.034311484545469284,
0.07698105275630951,
-0.11130964010953903,
-0.04848780483007431,
-0.06360948830842972,
0.0650029107928276,
0.10257558524608612,
-0.08311677724123001,
0.1253756582736969,
0.038802988827228546,
0.0030320282094180584,
0.1270928978919983,
0.05317268893122673,
0.05876186490058899,
0.15557003021240234,
-0.03652365878224373,
-0.03349892050027847,
0.12067419290542603,
-0.1404224932193756,
-0.10433880984783173,
0.03251480311155319,
0.04378635063767433,
0.017156891524791718,
-0.0829114019870758,
0.08215457201004028,
-0.03670657053589821,
-0.037098925560712814,
-0.04685065895318985,
0.08170656859874725,
-0.11909496784210205,
0.08564456552267075,
-0.07197641581296921,
0.032973986119031906,
-0.03858380764722824,
0.020368875935673714,
0.060657791793346405,
-0.1565673053264618,
0.05466519668698311,
0.09549371898174286,
-0.06431900709867477,
-0.1318826526403427,
-0.10429278761148453,
0.08197642862796783,
0.11708451807498932,
-0.04371064156293869,
0.05748144909739494,
0.008153025060892105,
0.036744456738233566,
0.02257465571165085,
0.040005430579185486,
-0.018686914816498756,
0.09378991276025772,
0.09122660011053085,
-0.03685945272445679,
-0.053199321031570435,
0.041395243257284164,
-0.07359712570905685,
-0.09732814878225327,
0.06431850790977478,
-0.06388439983129501,
-0.025819284841418266,
0.023691534996032715,
0.04944205656647682,
0.06466896086931229,
0.07601352035999298,
0.009053690358996391,
-0.13222892582416534,
-0.0473720021545887,
0.1358417123556137,
-0.1137230396270752,
0.07359294593334198,
-0.09826825559139252,
-0.03803803771734238,
-0.11250453442335129,
-0.012363282963633537,
-0.005040732678025961,
-0.04972635582089424,
0.10713117569684982,
0.05222667008638382,
-0.06791254132986069,
-0.02797379158437252,
0.0807032436132431,
-0.09593392163515091,
0.06025411933660507,
-0.03607471287250519,
-0.08678801357746124,
-0.019894076511263847,
0.14374129474163055,
-0.16004864871501923,
-0.0503961481153965,
-0.06276021897792816,
0.034216295927762985,
-0.029088428243994713,
0.0169843677431345,
-0.0606345534324646,
0.06226633861660957,
0.06615439802408218,
0.05060939863324165,
0.17025761306285858,
-0.07354199886322021,
-0.0353778712451458,
0.09736309200525284,
-0.07053567469120026,
-0.002702862722799182,
-0.016463302075862885,
0.031591951847076416,
0.14420147240161896,
-0.09097133576869965,
-0.059926290065050125,
0.05490556359291077,
-0.05107685178518295,
-0.023029187694191933,
-0.062387626618146896,
-0.02964397892355919,
0.13711698353290558,
-0.03331945464015007,
0.08495568484067917,
-0.003447500057518482,
0.11845127493143082,
-0.04988313093781471,
0.020971186459064484,
0.04060927778482437,
-0.0486459955573082,
-0.17616821825504303,
0.12979218363761902,
-0.019582267850637436,
0.13744264841079712,
0.08740610629320145,
-0.057569220662117004,
0.014015929773449898,
0.15507866442203522,
0.0005391459562815726,
0.018636958673596382,
0.09628293663263321,
-0.03830096498131752,
0.062149856239557266,
0.040291815996170044,
0.09405980259180069,
0.08960516005754471,
-0.10424205660820007,
0.02895161136984825,
0.0645146518945694,
0.019091244786977768,
0.0669340193271637,
-0.0293292049318552,
0.07405587285757065,
-0.07962150126695633,
-0.07098203897476196,
-0.009562867693603039,
0.10863348841667175,
-0.06656815111637115,
-0.05472914129495621,
0.03905140236020088,
-0.17626751959323883,
0.0403272919356823,
-0.05640403553843498,
-0.08129192143678665,
-0.10315392911434174,
-0.030829889699816704,
-0.13780483603477478,
-0.007232734002172947,
-0.12374845147132874,
0.09837742149829865,
-0.09639902412891388,
-0.07865587621927261,
0.07571662962436676,
0.009922858327627182,
-0.044849738478660583,
-0.0704641342163086,
-0.04511646926403046,
-0.1188412681221962,
-0.029964864253997803,
0.07335790991783142,
0.07014475017786026,
0.02188388630747795,
-0.05646238103508949,
0.00513774249702692,
-0.11402037739753723,
0.04364366829395294,
0.12871889770030975,
-0.055847328156232834,
0.03506588935852051,
-0.07007693499326706,
0.12132444977760315,
-0.06773808598518372,
-0.014074272476136684,
0.08050686120986938,
-0.10251317918300629,
-0.040566373616456985,
0.13463012874126434,
-0.14927998185157776,
-0.02107791230082512,
0.06298945099115372,
-0.05820342153310776,
0.05414466932415962,
-0.05042395368218422,
0.07865224778652191,
0.079582579433918,
-0.09925898164510727,
-0.020416811108589172,
-0.13566920161247253,
0.0736793801188469,
0.037809740751981735,
-0.11904780566692352,
-0.028833158314228058,
-0.021766291931271553,
-0.040632352232933044,
-0.15516355633735657,
-0.08649173378944397,
-0.09568586945533752,
0.028289394453167915,
-0.05560148507356644,
-0.10524587333202362,
-0.10320893675088882,
0.04118579253554344,
-0.127317875623703,
0.07983267307281494,
0.13355085253715515,
0.031169340014457703,
0.09844139218330383,
-0.13058318197727203,
-0.06709837168455124,
-0.16078460216522217,
-0.04820811748504639,
-0.0416729599237442,
-0.034632358700037,
0.07687119394540787,
0.05819684639573097,
-0.20444661378860474,
0.06798139959573746,
0.09148897230625153,
0.11149591207504272,
-0.006022459827363491,
-0.07439939677715302,
0.009614985436201096,
0.01601177267730236,
-0.06711655855178833,
8.422521932516247e-05,
0.09690429270267487,
0.05054851993918419,
-0.12257649004459381,
-0.07083219289779663,
0.04441981762647629,
0.09609812498092651,
-0.07875259965658188,
-0.06056114658713341,
-0.13511745631694794,
0.054185476154088974,
0.0372251532971859,
-0.04921407252550125,
-0.09364690631628036,
0.07405463606119156,
0.058056049048900604,
-0.05221998319029808,
-0.014472831040620804,
0.05104633420705795,
-0.032018888741731644,
0.0028849036898463964,
0.027280785143375397,
-0.09679481387138367,
-0.12079234421253204,
-0.07295110076665878,
0.0648486390709877,
-0.08018609881401062,
0.1269332468509674,
0.11988746374845505,
0.06424558907747269,
-0.09331605583429337,
-0.052943482995033264,
-0.024363121017813683,
0.13331565260887146,
0.022428732365369797,
0.04386058822274208,
0.13901633024215698,
0.04101948440074921,
0.07899926602840424,
0.04494407773017883,
-0.04302836209535599,
0.11759035289287567,
0.027718985453248024,
-0.0126864705234766,
0.08546299487352371,
0.1303679645061493,
0.030445871874690056,
-0.06920954585075378,
0.10784222185611725,
0.045638374984264374,
0.1137203648686409,
0.074217289686203,
0.08926387876272202,
-0.10472483187913895,
-0.1419023722410202,
-0.06433029472827911,
0.038352735340595245,
-0.060232799500226974,
-0.046454187482595444,
0.059198636561632156,
0.11387387663125992,
-0.033814042806625366,
-0.00018713658209890127,
-0.00807288195937872,
-0.118543840944767,
-0.08178279548883438,
-0.046310603618621826,
-0.12158118933439255,
-0.009646238759160042,
0.12315130233764648,
0.11219154298305511,
-0.23973940312862396,
0.04945686087012291,
0.0846920982003212,
-0.06726014614105225,
0.0015032753581181169,
0.007613659370690584,
0.14748647809028625,
0.10101721435785294,
-0.021304169669747353,
0.06948017328977585,
0.024006523191928864,
0.08241479843854904,
0.0818212628364563,
-0.06109416112303734,
-0.019432706758379936,
-0.06793366372585297,
0.07071450352668762,
-0.022333737462759018,
-0.053128186613321304,
0.07367982715368271,
-0.13244947791099548,
0.08699733763933182,
0.11524110287427902,
-0.13136331737041473,
-0.02206731215119362,
0.0839928686618805,
-0.04109013453125954,
0.09449954330921173,
0.041855402290821075,
-0.025617748498916626,
-0.08528605103492737,
-0.11820028722286224,
0.1011553481221199,
0.07113802433013916,
0.039266493171453476,
-0.011981550604104996,
-0.1142435148358345,
-0.047236207872629166,
0.03123106062412262,
-0.08743762224912643,
-0.008644168265163898,
-0.016413629055023193,
0.05629153922200203,
0.024247420951724052,
0.030648179352283478,
-0.03536319360136986,
-0.05746141076087952,
-0.08753610402345657,
0.16134274005889893,
0.10393799841403961,
-0.05998824164271355,
0.03370269387960434,
-0.09781607985496521,
0.06245840713381767,
0.010579121299088001,
-0.025273801758885384,
0.12960076332092285,
-0.03913778439164162,
-0.0754021555185318,
0.08881698548793793,
-0.056328099220991135,
-0.01143081858754158,
-0.08064156025648117,
-0.08826106041669846,
0.1131444200873375,
0.06107759848237038,
0.13298213481903076,
0.11284765601158142,
-0.07710381597280502,
-0.11767105013132095,
0.06656389683485031,
-0.0024750190787017345,
0.05375183746218681,
-0.043738141655921936,
-0.1403268426656723,
0.022533882409334183,
-0.0299701951444149,
0.0191635824739933,
0.10121198743581772,
-0.06165783479809761,
-0.020357850939035416,
-0.09675344079732895,
-0.08573206514120102,
-0.03827010467648506,
0.014743927866220474,
0.06463173031806946,
-0.05528128892183304,
-0.02994503825902939,
-0.032171908766031265,
0.00981887336820364,
0.06642027199268341,
-0.06903631240129471,
-0.013702429831027985,
0.059792276471853256,
-0.07061158865690231,
0.04429032281041145,
-0.036155957728624344,
0.013687890954315662,
-0.0532500185072422,
0.0098154591396451,
0.008122263476252556,
0.04798131063580513,
-0.067428819835186,
0.029581662267446518,
-0.05748962610960007,
0.003787870053201914,
0.039956871420145035,
0.17122043669223785,
0.05312860757112503,
-0.08503847569227219,
0.04234056919813156,
0.04396221786737442,
-0.015932483598589897,
0.009984574280679226,
0.008798724040389061,
-0.036976657807826996,
-0.011457744054496288,
0.033398233354091644,
-0.018574703484773636,
0.0759599581360817,
-0.027182336896657944,
-0.03581530973315239,
0.01434708759188652,
0.03567948192358017,
0.05342724546790123,
-0.0908534824848175,
-0.03912736102938652,
-0.11621682345867157,
0.04583286866545677,
0.006633827928453684,
0.1253812313079834,
-0.02990182861685753,
-0.03768094256520271,
-0.038096290081739426,
0.08539611846208572,
0.07015567272901535,
-0.039016056805849075,
0.007628826890140772,
-0.06738778948783875,
-0.06733325868844986,
-0.03414386883378029,
0.039587847888469696,
-0.0728825032711029,
-0.028849856927990913,
0.020876968279480934,
-0.09643258899450302,
0.0060877674259245396,
0.05035232752561569,
-0.04559164494276047,
0.0021689373534172773,
-0.04676913097500801,
-0.08436432480812073,
0.12187153846025467,
-0.04941315948963165,
-0.0036571777891367674,
-0.06215560808777809,
0.11689070612192154,
-0.040125273168087006,
-0.03297819197177887,
-0.0885511264204979,
0.07515375316143036,
0.008384816348552704,
0.03809421509504318,
-0.07577558606863022,
0.08918038010597229,
0.11655551195144653,
0.07811155170202255,
0.11943051218986511,
0.08062446117401123,
0.13401687145233154,
-0.14814813435077667,
0.09496646374464035,
-0.04740931838750839,
-0.04424543306231499,
-0.07407461851835251,
0.07950399816036224,
0.053759437054395676,
0.0738253965973854,
-0.08365102112293243,
-0.12022247910499573,
-0.09854882210493088,
0.04253840446472168,
-0.043400149792432785,
0.05673053115606308,
0.15580102801322937,
-0.004303654655814171,
-0.04252554476261139,
0.22227764129638672,
-0.029154019430279732,
-0.03594619408249855,
-0.008687625639140606,
-0.016901569440960884,
-0.07436875998973846,
0.0845571905374527,
0.03244052827358246,
0.07964155822992325,
0.052531663328409195,
0.07338178902864456,
-0.02747887372970581,
0.03690315783023834,
-0.09715566784143448,
-0.038790833204984665,
-0.14338083565235138,
-0.07956483960151672,
0.0796666070818901,
-0.08274342119693756,
-0.07526537775993347,
-0.013889476656913757,
0.17591740190982819,
0.049673616886138916,
-0.09509069472551346,
0.11464182287454605,
-0.009657196700572968,
0.028571870177984238,
-0.05411577597260475,
0.014409584924578667,
-0.051606833934783936,
0.04721807688474655,
-0.12761849164962769,
-0.06451037526130676,
0.13433317840099335,
-0.012671968899667263,
0.11373447626829147,
0.11891389638185501,
0.01944640651345253,
0.04440191388130188,
-0.03513096645474434,
-0.04125945642590523,
0.018281718716025352,
0.04063001647591591,
0.056317493319511414,
-0.135372593998909,
-0.09197267889976501,
0.079371877014637,
0.10981346666812897,
0.1417529284954071,
-0.010209280997514725,
0.1653987616300583,
0.007667736150324345,
0.01228739507496357,
-0.050280358642339706,
-0.014125593937933445,
0.13676588237285614,
0.10190144926309586,
0.10071538388729095,
0.017718523740768433,
-0.006067550275474787,
0.11364682763814926,
0.07296832650899887,
0.1277715414762497,
-0.09542328119277954,
-0.024876687675714493,
-0.06061640754342079,
0.09938183426856995,
0.02412654086947441,
0.09884794801473618,
-0.051647454500198364,
-0.014225142076611519,
0.15644292533397675,
0.08432859927415848,
-0.04449671506881714,
-0.0782974511384964,
-0.037835314869880676,
0.09193777292966843,
-0.06101887673139572,
-0.09296691417694092,
-0.026458468288183212,
-0.09103596955537796,
0.06487758457660675,
0.09620659053325653,
0.10139406472444534,
-0.09053194522857666,
0.06504448503255844,
-0.013667043298482895,
0.038422830402851105,
0.009447685442864895,
0.01654381863772869,
-0.016009055078029633,
0.010274657048285007,
0.09329989552497864,
-0.05275995656847954,
0.05449960008263588,
0.09612367302179337,
-0.0036728731356561184,
0.007567530032247305,
0.07257240265607834,
-0.06850092113018036,
-0.03979036957025528,
-0.05285380035638809,
-0.06883008033037186,
0.031094865873456,
0.015489500015974045,
0.07986452430486679,
0.11262410134077072,
0.04657662287354469,
0.07393777370452881,
0.09927269071340561,
0.02797292359173298,
0.05844876915216446,
-0.026098323985934258,
0.04284747317433357,
0.08711446821689606,
0.05025415122509003,
-0.11972811073064804,
-0.0912238359451294,
0.10607601702213287,
0.06574689596891403,
0.09587833285331726,
-0.038498640060424805,
0.08320655673742294,
0.04614539444446564,
-0.05454900860786438,
0.05869181081652641,
0.013120479881763458,
0.11795853823423386,
-0.01586196944117546,
-0.006411318201571703,
0.014818407595157623,
-0.0650540217757225,
-0.11101920157670975,
0.043893590569496155,
-0.014314490370452404,
0.10773780196905136,
-0.048968806862831116,
-0.007864633575081825,
0.06306184083223343,
0.06604745984077454,
0.15381576120853424,
0.09456046670675278,
-0.026807185262441635,
-0.08610612154006958,
0.005429948680102825,
0.030647331848740578,
0.12332376837730408,
-0.1277940273284912,
-0.08514662086963654,
-0.004897197708487511,
-0.139589324593544,
0.02706793136894703,
0.02694227732717991,
0.0867636427283287,
0.028934167698025703,
-0.043586768209934235,
-0.03274393454194069,
-0.05077580735087395,
-0.09209123998880386,
0.030466726049780846,
-0.008183928206562996,
0.09505411237478256,
0.13009564578533173,
-0.11093549430370331,
-0.10937630385160446,
-0.009965382516384125,
0.012423698790371418,
-0.11206365376710892,
0.08931348472833633,
-0.06627865880727768,
-0.10020144283771515,
-0.08177471905946732,
-0.0834483876824379,
0.04291500151157379,
-0.04851296544075012,
-0.021464265882968903,
-0.05255014821887016,
-0.05634201318025589,
0.09758310765028,
0.029707305133342743,
0.009948467835783958,
0.039377667009830475,
0.046747270971536636,
-0.12658976018428802,
-0.08870843797922134,
-0.012422556057572365,
0.06921625137329102,
-0.04356168955564499,
0.0556325726211071,
0.08869137614965439,
0.006196983158588409,
0.059105418622493744,
-0.03370850905776024,
0.022505173459649086,
0.07736814767122269,
0.03935551270842552,
0.07207059860229492,
-0.029131319373846054,
-0.034654077142477036,
-0.12270138412714005,
-0.06885410845279694,
0.015808885917067528,
0.03803504630923271,
0.08796674758195877,
0.028534188866615295,
0.039639513939619064,
0.13032981753349304,
0.055066075176000595,
0.0482458770275116,
-0.08230779320001602,
0.0029723276384174824,
0.1174434944987297,
0.004573934245854616,
-0.01841265708208084,
0.02694757841527462,
-0.07393728196620941,
-0.09041598439216614,
0.0008537550456821918,
0.04282323643565178,
0.03568333387374878,
0.0009459593566134572,
-0.028541507199406624,
0.07378930598497391,
-0.08789604902267456,
-0.0756201297044754,
0.02434389665722847,
-0.02440226823091507,
0.10546401143074036,
0.08003702014684677,
-0.042120251804590225,
-0.06575202941894531,
0.08060397207736969,
-0.08112483471632004,
0.016692668199539185,
-0.010913648642599583,
-0.07800088077783585,
0.03547770529985428,
0.0793754979968071,
-0.0214755330234766,
-0.06095019727945328,
-0.07805336266756058,
-0.012562272138893604,
-0.00436410354450345,
0.15616454184055328,
0.044911690056324005,
-0.018348127603530884,
0.043129391968250275,
0.01579369232058525,
-0.05612775683403015,
0.03233269602060318,
0.007852183654904366,
0.04274669289588928,
0.08889474719762802,
-0.057210519909858704,
-0.006798276212066412,
0.1274421513080597,
0.09414887428283691,
-0.0016471851849928498,
-0.026671960949897766,
0.12294523417949677,
0.018561378121376038,
0.015672020614147186,
-0.0011955949012190104,
-0.019459672272205353,
-0.04257085546851158,
0.026178205385804176,
0.16028103232383728,
-0.1307930201292038,
0.05320049077272415,
0.05182814598083496,
0.0784093514084816,
0.02634386718273163,
-0.11976424604654312,
0.12295226007699966,
0.06717941164970398,
0.007046354468911886,
-0.1596136838197708,
0.09524019062519073,
-0.1435561627149582,
0.047846511006355286,
-0.09651483595371246,
0.20753473043441772,
0.05708291009068489,
-0.08443522453308105,
0.03833026811480522,
0.08685047924518585,
0.1149979829788208,
-0.05093909800052643,
0.010871482081711292,
-0.0040922886691987514,
0.0691090077161789,
-0.05876970663666725,
-0.10860732942819595,
0.0641213059425354,
0.03599289804697037,
0.0752817690372467,
0.01611275225877762,
-0.06421389430761337,
0.027913004159927368,
-0.047075219452381134,
-0.05930907651782036,
0.06010777875781059,
-0.05889791622757912,
0.10900971293449402,
0.07066908478736877,
-0.07019553333520889,
0.044593654572963715,
-0.010280400514602661,
-0.07109178602695465,
0.05322839692234993,
0.020542528480291367,
0.06359036266803741,
-0.11357489228248596,
-0.0940437987446785,
0.08306221663951874,
-0.036452628672122955,
0.038879018276929855,
-0.04321694001555443,
-0.004268210846930742,
0.030130965635180473,
-0.03539906069636345,
-0.07422525435686111,
0.038497306406497955,
-0.039800163358449936,
0.040724169462919235,
-0.03173909708857536,
-0.007043428253382444,
0.031036710366606712,
-0.03205001354217529,
0.1085965484380722,
0.045246534049510956,
0.08713729679584503,
0.08656126260757446,
-0.0461312010884285,
-0.05880708992481232,
0.06760603189468384,
0.013329106383025646,
0.0684940442442894,
-0.12337848544120789,
-0.12579618394374847,
0.0192590169608593,
-0.07785875350236893,
-0.1028561219573021,
0.03038853593170643,
0.04473007842898369,
-0.052829109132289886,
0.03845234587788582,
-0.06478165090084076,
-0.06671257317066193,
-0.1010650098323822,
-0.08285802602767944,
-0.13982008397579193,
-0.21578742563724518,
-0.106709323823452,
-0.048525482416152954,
0.026381393894553185,
-0.0257588941603899,
0.035011257976293564,
-0.08394518494606018,
0.04829223081469536,
0.027955561876296997,
0.037453170865774155,
-0.10399916023015976,
-0.10200855880975723,
0.06947311013936996,
-0.04264591261744499,
-0.015766896307468414,
-0.04418986663222313,
-0.12178730964660645,
0.04011034220457077,
-0.1291494220495224,
0.05993985757231712,
-0.15158456563949585,
-0.01928609237074852,
-0.08841981738805771,
-0.07442508637905121,
-0.004934491124004126,
-0.08997045457363129,
0.03877928853034973,
-0.055164944380521774,
-0.10080352425575256,
-0.13386960327625275,
-0.012554722838103771,
0.04240042343735695,
-0.0747504010796547,
0.02572701871395111,
0.012440166436135769,
-0.10467877984046936,
-0.1279882788658142,
0.004720091354101896,
0.07045220583677292,
0.046217840164899826,
0.010409675538539886,
-0.061429113149642944,
-0.08631564676761627,
0.005797542165964842,
0.07116669416427612,
-0.06255839020013809,
0.02014467865228653,
-0.0391644649207592,
-0.03255352005362511,
0.07868016511201859,
0.02691255509853363,
-0.03292721137404442,
0.07773391157388687,
-0.027071654796600342,
0.01456376165151596,
0.06820248067378998,
-0.16411614418029785,
-0.06825500726699829,
0.11063914746046066,
-0.05297002196311951,
0.09059206396341324,
-0.012902087531983852,
-0.04889153316617012,
-0.047158628702163696,
0.00431852089241147,
-0.03325818479061127,
0.020692866295576096,
0.04157703369855881,
0.025285901501774788,
-0.05611232668161392,
0.05538874864578247,
0.02908910997211933,
-0.014705611392855644,
0.04156915843486786,
-0.19556106626987457,
0.0011840717634186149,
0.11229519546031952,
0.029999516904354095,
-0.0824064090847969,
-0.08612290769815445,
-0.0037708431482315063,
-0.1483863890171051,
-0.07210321724414825,
-0.002754561835899949,
0.17582479119300842,
-0.13528531789779663,
0.07016133517026901,
-0.010352865792810917,
-0.005496188998222351,
-0.1457151174545288,
-0.031177915632724762,
0.02249884232878685,
-0.08583853393793106,
-0.12057902663946152,
-0.09823617339134216,
0.060448016971349716,
-0.12535755336284637,
0.02114143967628479,
-0.025332484394311905,
-0.008149469271302223,
-0.05925451219081879,
-0.15349729359149933,
-0.07467744499444962,
-0.042503226548433304,
0.009484426118433475,
-0.05681924521923065,
0.006816316861659288,
0.0479600727558136,
-0.019326101988554,
0.02039317972958088,
0.03041030280292034,
-0.10653290897607803,
0.055395521223545074,
0.057603564113378525,
0.0861930176615715,
0.09597517549991608,
0.01567387953400612,
-0.1895613670349121,
-0.09106484800577164,
-0.07229255139827728,
-0.16656289994716644,
-0.10933520644903183,
0.10235535353422165,
-0.14234504103660583,
0.10931716114282608,
-0.035128749907016754,
0.09459859132766724,
-0.10109177976846695,
0.10241898894309998,
0.07137030363082886,
0.09229777008295059,
-0.07392126321792603,
0.1377822458744049,
-0.0895468220114708,
0.09493696689605713,
0.06596142053604126,
-0.07984787225723267,
0.037506718188524246,
-0.04494357854127884,
-0.09329310059547424,
-0.011588378809392452,
0.1542639583349228,
0.00639214925467968,
0.1559707522392273,
0.12875394523143768,
0.08314542472362518,
0.02486051432788372,
-0.15901429951190948,
0.08600445091724396,
0.0958978608250618,
-0.004378875717520714,
0.04606914147734642,
0.05677780508995056,
0.01457385253161192,
-0.093028225004673,
0.17072793841362,
-0.03552908077836037,
-0.029490793123841286,
-0.08417514711618423,
0.09720964729785919,
0.10292338579893112,
0.05095089226961136,
-0.03075498342514038,
-0.11118762940168381,
0.2007065713405609,
0.15556374192237854,
0.15292108058929443,
-0.0216584000736475,
0.06009010225534439,
-0.11656227707862854,
0.023732615634799004,
0.2024213820695877,
-0.15951232612133026,
-0.12584777176380157,
-0.09454846382141113,
-0.1418078988790512,
-0.051791075617074966,
0.0731528252363205,
-0.021736038848757744,
0.07404640316963196,
0.001561832381412387,
-0.13386259973049164,
-0.09850805997848511,
-0.11725367605686188,
-0.046107612550258636,
0.07765303552150726,
0.028569364920258522,
0.05342728644609451,
0.01675821654498577,
-0.11983171105384827,
-0.058404114097356796,
-0.09803325682878494,
0.008104544132947922,
0.08104108273983002,
-0.08389848470687866,
-0.039835575968027115,
-0.09050172567367554,
-0.1150018498301506,
-0.06168106943368912,
-0.05122853070497513,
-0.09742076694965363,
-0.027907010167837143,
-0.018807116895914078,
0.025609539821743965,
0.054771579802036285,
-0.06100836023688316,
-0.016349639743566513,
-0.06687501817941666,
0.02313980460166931,
0.03675011917948723,
-0.054864902049303055,
0.05082966759800911,
0.12590473890304565,
-0.008891455829143524,
-0.024009380489587784,
-0.1541113406419754,
0.011300314217805862,
0.13125410676002502,
0.14319553971290588,
-0.0740702822804451,
0.12892206013202667,
0.05841340497136116,
0.0010834411950781941,
0.01710479147732258,
-0.03448037803173065,
0.14959931373596191,
0.14507026970386505,
-0.03063693642616272,
-0.03180641308426857,
-0.013301633298397064,
0.06802212446928024,
0.034844715148210526,
-0.10646403580904007,
-0.03661029413342476,
0.06428298354148865,
-0.04772936925292015,
0.11983995884656906,
0.01820831559598446,
0.09887804836034775,
0.013644794002175331,
-0.05305344611406326,
-0.03370901942253113,
-0.1019035056233406,
0.013509278185665607,
0.052993860095739365,
0.08081600069999695,
0.09437057375907898,
0.07780497521162033,
-0.07370553910732269,
0.11955595016479492,
0.0989152044057846,
0.0292782224714756,
-0.04821855202317238,
-0.03518682345747948,
0.08293650299310684,
-0.057797547429800034,
0.06448435038328171,
0.06667950004339218,
-0.05363014340400696,
-0.0927295982837677,
0.0029001208022236824,
-0.022822802886366844,
0.02773948758840561,
-0.020397506654262543,
0.08687763661146164,
0.09065935760736465,
0.0024490009527653456,
-0.09415984898805618,
0.1159759908914566,
-0.07320711016654968,
0.09265539795160294,
-0.0428384467959404,
-0.08827408403158188,
0.05613328143954277,
0.017621969804167747,
-0.0075378138571977615,
-0.009135772474110126,
-0.10023079067468643,
-0.028383372351527214,
0.11486052721738815,
0.06507299840450287,
-0.061088740825653076,
0.03097505494952202,
-0.022898422554135323,
-0.08458376675844193,
-0.05053909122943878,
-0.08405344933271408,
0.019126566126942635,
-0.043942105025053024,
-0.00323804491199553,
0.09158062934875488,
0.01837608404457569,
0.10776276886463165,
-0.1423637568950653,
-0.1372053474187851,
0.09288619458675385,
-0.023845616728067398,
-0.006494443863630295,
0.005437576211988926,
-0.07548807561397552,
-0.07560978084802628,
0.12127947807312012,
-0.038149166852235794,
0.06514186412096024,
0.13431264460086823,
0.00919412449002266,
-0.025379672646522522,
0.06676645576953888,
0.0063757519237697124,
-0.09183752536773682,
-0.040851444005966187,
-0.07165707647800446,
-0.042682137340307236,
0.08096946030855179,
-0.02517516352236271,
-0.00936234649270773,
-0.026546159759163857,
0.10795143246650696,
-0.05805547907948494,
0.06961773335933685,
0.0017786254175007343,
0.04010121151804924,
0.08978452533483505,
0.03381739929318428,
-0.08944085985422134,
-0.1136203408241272,
0.09784063696861267,
0.10108955204486847,
-0.034009188413619995,
0.025463204830884933,
0.030158841982483864,
0.05175328999757767,
0.09582314640283585,
0.07099656760692596,
-0.02276262827217579,
-0.03559889644384384,
0.0553533211350441,
-0.05844349041581154,
0.06815141439437866,
0.07186301797628403,
-0.043731439858675,
-0.03223593533039093,
-0.059736281633377075,
0.014678213745355606,
-0.037766069173812866,
0.042801644653081894,
-0.050946835428476334,
0.030402187258005142,
0.06032566726207733,
0.09621386229991913,
-0.03747481107711792,
-0.007847960107028484,
-0.09358593821525574,
0.04429647698998451,
-0.023841634392738342,
-0.050222769379615784,
-0.026877829805016518,
-0.11039436608552933,
0.05765910819172859,
-0.10319045931100845,
-0.04775390401482582,
-0.027306322008371353,
-0.020785033702850342,
0.0015793171478435397,
0.13094550371170044,
0.0630517303943634,
-0.09427277743816376,
-0.011236019432544708,
-0.1557314246892929,
-0.028394406661391258,
0.023352935910224915,
-0.07335947453975677,
-0.05946372076869011,
-0.009655699133872986,
0.06602290272712708,
-0.025354919955134392,
0.017708299681544304,
0.036008864641189575,
-0.121353879570961,
-0.05135733261704445,
-0.041534990072250366,
-0.05457702651619911,
0.04338464140892029,
0.08147377520799637,
-0.1353931874036789,
-0.0742352083325386,
0.13394178450107574,
0.07429555058479309,
-0.10605964064598083,
-0.09634237736463547,
0.03453383594751358,
0.08914189785718918,
0.04756906256079674,
0.019924012944102287,
-0.04912257939577103,
-0.028958331793546677,
0.017983803525567055,
0.08387286216020584,
0.048303861171007156,
0.0789770632982254,
-0.10266335308551788,
0.09957665950059891,
0.07756035029888153,
0.08987843990325928,
0.013275732286274433,
-0.0837562084197998,
-0.06064513325691223,
0.038142357021570206,
-0.10932018607854843,
0.03264550119638443,
0.04578005149960518,
-0.09209699928760529,
-0.006251102779060602,
0.06494316458702087,
0.049074072390794754,
-0.04145107418298721,
-0.041087694466114044,
-0.06415640562772751,
0.10612203925848007,
-0.026080258190631866,
-0.08272388577461243,
-0.07320015132427216,
0.11002249270677567,
-0.09423583745956421,
0.10542987287044525,
-0.08270744979381561,
0.06338232755661011,
-0.05903450772166252,
0.031843848526477814,
0.01702946051955223,
-0.024169839918613434,
0.011105959303677082,
0.07054613530635834,
-0.07422579824924469,
0.1580055207014084,
-0.011263594962656498,
-0.10915893316268921,
-0.09412270039319992,
0.02829878218472004,
0.08422302454710007,
-0.029976705089211464,
0.006147816311568022,
0.019639404490590096,
-0.03960854932665825,
0.0860857293009758,
-0.0685669556260109,
-0.004055355209857225,
-0.027266109362244606,
0.04923141002655029,
0.031414154917001724,
-0.14453719556331635,
0.026653306558728218,
-0.005411229096353054,
-0.01978069357573986,
0.16213561594486237,
-0.07710260152816772,
-0.06821015477180481,
-0.0134848328307271,
-0.03787285089492798,
0.029480895027518272,
0.04463166743516922,
0.04674439877271652,
-0.05396189168095589,
-0.04782630503177643,
0.04337626323103905,
-0.09199889749288559,
-0.02406756579875946,
0.06420072168111801,
-0.05634976923465729,
0.021156687289476395,
-0.03387890011072159,
0.015444370917975903,
0.07525783032178879,
0.09788013249635696,
-0.017951125279068947,
-0.044430505484342575,
-0.05001668259501457,
-0.09548134356737137,
-0.04910228028893471,
-0.0018560002790763974,
0.01124983187764883,
0.09703131765127182,
0.02866719663143158,
0.03672042116522789,
-0.12853240966796875,
0.06227228045463562,
0.07441850006580353,
0.05008578673005104,
0.000826414383482188,
-0.03794579207897186,
0.012195657938718796,
0.03947506844997406,
0.09334690868854523,
-0.01508362777531147,
0.09367579966783524,
-0.02595399133861065,
-0.10627373307943344,
0.006000525318086147,
0.09352821111679077,
-0.03693351894617081,
0.1327124983072281,
0.023111075162887573,
0.08810075372457504,
0.07040651887655258,
-0.027365412563085556,
0.004086492583155632,
-0.01677394099533558,
0.08867352455854416,
0.011145209893584251,
-0.08574634790420532,
0.11882124841213226,
0.04381311684846878,
-0.026927514001727104,
0.10086164623498917,
0.006077640224248171,
-0.11093949526548386,
0.04326208308339119,
-0.051159292459487915,
0.07181352376937866,
0.05643296241760254,
-0.08086896687746048,
-0.015397733077406883,
-0.04593890905380249,
0.03568100929260254,
0.10631968826055527,
0.029949551448225975,
-0.00993780605494976,
-0.014876400120556355,
0.036644548177719116,
-0.04170078784227371,
0.053857896476984024,
-0.10169723629951477,
-0.10901041328907013,
-0.024309581145644188,
-0.1437964141368866,
-0.05535011738538742,
-0.04041324183344841,
0.12305746227502823,
0.04437747970223427,
-0.028396159410476685,
0.14363114535808563,
-0.08281988650560379,
-0.008270074613392353,
-0.0036605969071388245,
-0.07196380943059921,
-0.11018925160169601,
0.04325323924422264,
-0.004671899601817131,
0.046925824135541916,
-0.030873149633407593,
-0.08236080408096313,
0.06819253414869308,
0.08810385316610336,
-0.10891088843345642,
-0.029079243540763855,
-0.052053313702344894,
0.027989832684397697,
-0.04565727338194847,
-0.05730370804667473,
0.10105332732200623,
-0.021708350628614426,
0.01584070362150669,
0.015468785539269447,
0.13444142043590546,
0.05838043615221977,
-0.08761826157569885,
0.03788284957408905,
0.054401181638240814,
-0.04025735333561897,
-0.011405696161091328,
0.007474798709154129,
0.11597920954227448,
0.09506717324256897,
0.1997530609369278,
0.16001558303833008,
0.04966262727975845,
0.029983840882778168,
0.0883612185716629,
0.021152786910533905,
0.04898504167795181,
0.09119126200675964,
0.1335706114768982,
0.07615818828344345,
-0.020809009671211243,
0.08758482336997986,
-0.036889106035232544,
-0.07785879075527191,
-0.019488146528601646,
-0.00877928826957941,
0.0021877519320696592,
0.08969169855117798,
-0.09321309626102448,
-0.043899036943912506,
-0.05128955841064453,
-0.02406206913292408,
0.041626960039138794,
0.010155814699828625,
-0.04635366424918175,
0.02922498993575573,
-0.05012493208050728,
-0.011852660216391087,
0.06355426460504532,
-0.09263619035482407,
-0.05512479320168495,
0.051169756799936295,
0.07796847820281982,
-0.10597540438175201,
0.0426216684281826,
-0.11659381538629532,
-0.1332324594259262,
0.10445619374513626,
-0.008804959245026112,
-0.1008673831820488,
0.01612975262105465,
0.0791483074426651,
0.12183953076601028,
-0.1182514876127243,
0.06035276874899864,
0.021881218999624252,
0.021276675164699554,
0.00677636731415987,
0.05692772567272186,
-0.074289970099926,
-0.0069893039762973785,
0.09080938249826431,
0.044231243431568146,
0.008213337510824203,
0.19431543350219727,
0.08561979979276657,
0.033198725432157516,
0.10223103314638138,
0.07333497703075409,
-0.06503352522850037,
-0.14507907629013062,
0.06639041751623154,
0.05351005494594574,
-0.057282041758298874,
-0.05678940936923027,
0.03943624719977379,
-0.023946208879351616,
0.1079259142279625,
-0.06269141286611557,
-0.023108549416065216,
0.05182825028896332,
-0.03496937453746796,
-0.07722483575344086,
0.05435178801417351,
0.045019786804914474,
-0.03952626511454582,
-0.03374747186899185,
0.1804121881723404,
-0.003350992687046528,
-0.16364005208015442,
0.097757488489151,
0.1498422920703888,
0.0034978005569428205,
0.17533425986766815,
0.11006056517362595,
0.1319899559020996,
0.03611873462796211,
0.092335544526577,
-0.09334078431129456,
-0.03681229427456856,
0.15050970017910004,
0.06896550208330154,
0.06809019297361374,
0.0504106841981411,
-0.011038536205887794,
-0.05246656388044357,
0.0987749844789505,
0.05907408520579338,
-0.02876761369407177,
0.15010851621627808,
-0.029494406655430794,
0.08932796120643616,
0.1028781607747078,
-0.06474415212869644,
-0.00492993975058198,
0.022948361933231354,
0.0346822589635849,
0.03300492838025093,
-0.02113484963774681,
0.041111208498477936,
0.04030655324459076,
-0.03556990250945091,
-0.0012296128552407026,
0.04778508096933365,
0.016373278573155403,
-0.04116739705204964,
-0.10189659148454666,
-0.10309574753046036,
0.10317102074623108,
0.07006747275590897,
-0.07096799463033676,
0.045495714992284775,
0.005074998829513788,
0.027227452024817467,
-0.13984502851963043,
-0.08811607211828232,
0.008762938901782036,
0.0603848397731781,
0.1281103938817978,
0.12348495423793793,
-0.04131446033716202,
-0.07129598408937454,
0.019396202638745308,
0.061051201075315475,
-0.004727000370621681,
0.04988400265574455,
0.09004334360361099,
0.04723399132490158,
-0.029214147478342056,
-0.035870544612407684,
-0.09956860542297363,
0.023016463965177536,
-0.06424104422330856,
-0.13151666522026062,
0.09366349875926971,
0.18424910306930542,
-0.10811126232147217,
0.10224511474370956,
0.020080264657735825,
-0.06065915524959564,
-0.08015318959951401,
0.004224563017487526,
0.1272948831319809,
-0.0810316801071167,
0.08778300136327744,
0.06453028321266174,
0.12817585468292236,
0.11685113608837128,
0.12472737580537796,
0.02861214056611061,
0.023728489875793457,
0.04682711511850357,
-0.06534282863140106,
0.02316528558731079,
0.09081360697746277,
0.004865228198468685,
0.03988891839981079,
0.07337289303541183,
-0.10787837952375412,
-0.1435813009738922,
-0.1481727510690689,
-0.16971859335899353,
0.02628464251756668,
-0.09300863742828369,
0.06603483855724335,
0.09869496524333954,
-0.07754389196634293,
0.08067896217107773,
-0.0033075339160859585,
0.011008256115019321,
0.017635855823755264,
0.10447955131530762,
0.113400898873806,
-0.06440520286560059,
-0.08942704647779465,
-0.0016941461944952607,
-0.09564649313688278,
-0.13556288182735443,
-0.030527491122484207,
-0.0727863535284996,
-0.08486362546682358,
-0.030858654528856277,
-0.01921774260699749,
0.05732813850045204,
0.02750503458082676,
0.09111572057008743,
-0.024224834516644478,
-0.06779694557189941,
-0.07452794909477234,
0.0226890929043293,
-0.04285553842782974,
0.06697452068328857,
-0.10334264487028122,
0.0022793198004364967,
0.01375320553779602,
0.0570586621761322,
-0.10195466130971909,
-0.058913737535476685,
-0.05807395651936531,
0.09903278946876526,
-0.037526946514844894,
0.1284450888633728,
-0.054448679089546204,
-0.058226414024829865,
-0.08649089187383652,
-0.14481733739376068,
0.14417406916618347,
-0.04831567779183388,
-0.11115879565477371,
0.049364037811756134,
0.030025241896510124,
0.10645978897809982,
0.04101961478590965,
0.08805769681930542,
-0.053241461515426636,
0.11780725419521332,
-0.07262740284204483,
0.09960652887821198,
0.062242865562438965,
0.14473046362400055,
-0.13026003539562225,
-0.13832694292068481,
-0.04286321997642517,
-0.11164869368076324,
0.12354754656553268,
-0.17371156811714172,
0.19127196073532104,
-0.09054678678512573,
-0.057553183287382126,
0.03351965919137001,
-0.040579769760370255,
-0.04975041747093201,
-0.012868987396359444,
0.06174498796463013,
-0.06968890875577927,
-0.10551919788122177,
-0.05967343598604202,
-0.05478820577263832,
-0.10772861540317535,
-0.02850738726556301,
-0.13048295676708221,
-0.049897365272045135,
-0.032372280955314636,
0.006874821148812771,
-0.09713242948055267,
0.0886603519320488,
-0.029602454975247383,
-0.0007602077093906701,
-0.05597839131951332,
-0.038076236844062805,
0.004503142554312944,
0.10665193200111389,
0.08623713254928589,
-0.0504416786134243,
-0.18361058831214905,
0.056638043373823166,
-0.01502214651554823,
0.05405452847480774,
-0.024253105744719505,
-0.04915403947234154,
-0.047363560646772385,
0.04410004988312721,
0.11849502474069595,
-0.027545873075723648,
0.07363840192556381,
0.010881596244871616,
0.07954805344343185,
-0.018889937549829483,
0.027425849810242653,
-0.12432388961315155,
0.002526563126593828,
0.07898162305355072,
0.015014817006886005,
0.030337275937199593,
-0.053716029971838,
0.04904336854815483,
-0.034105513244867325,
-0.1343267560005188,
0.03756023198366165,
-0.041808079928159714,
-0.03710205480456352,
-0.06438131630420685,
-0.0687456727027893,
-0.16255410015583038,
-0.0455639511346817,
-0.031519580632448196,
0.0006863815360702574,
-0.022103359922766685,
0.06679016351699829,
-0.0955183207988739,
0.07316415756940842,
-0.013845240697264671,
0.07817728072404861,
-0.022889908403158188,
-0.1474020630121231,
-0.0016045953379943967,
-0.14552035927772522,
-0.15317302942276,
-0.0784996822476387,
-0.0333264023065567,
-0.13179394602775574,
-0.10238946229219437,
-0.011013861745595932,
0.034835007041692734,
0.09814570844173431,
-0.11589376628398895,
0.009083855897188187,
-0.06393363326787949,
-0.05219577997922897,
0.01616830937564373,
-0.027924327179789543,
-0.056026969105005264,
-0.12207931280136108,
-0.11784063279628754,
0.07603157311677933,
0.07782955467700958,
0.06027792766690254,
0.06812691688537598,
0.023457225412130356,
0.08950234949588776,
0.07640744000673294,
-0.008355197496712208,
-0.04076114296913147,
0.03559347614645958,
-0.08105438202619553,
0.09042427688837051,
-0.07476086914539337,
-0.071505106985569,
-0.09484852850437164,
0.09467195719480515,
0.044082220643758774,
0.10400904715061188,
0.06012796238064766,
0.02068089321255684,
-0.020714890211820602,
-0.02612948603928089,
0.017106426879763603,
0.07436351478099823,
0.056935179978609085,
-0.013570521958172321,
-0.0757337212562561,
0.013549253344535828,
0.08024299889802933,
0.0342421755194664,
-0.09091179817914963,
-0.04625096917152405,
0.015075561590492725,
0.1530575454235077,
0.08687415719032288,
0.030524928122758865,
-0.23008698225021362,
0.03844337537884712,
-0.1386498063802719,
-0.09965355694293976,
0.11412689834833145,
0.141259104013443,
0.017255814746022224,
-0.0021072495728731155,
0.028933756053447723,
-0.017294375225901604,
0.08665505051612854,
0.07976303994655609,
-0.014876599423587322,
-0.022814741358160973,
-0.05260619521141052,
0.02991117537021637,
0.014075903221964836,
0.046159788966178894,
-0.07897745072841644,
0.02042436972260475,
0.043005526065826416,
0.00361187313683331,
-0.05618029460310936,
0.1575947254896164,
0.07060454040765762,
0.1202654093503952,
0.13121147453784943,
-0.1590675264596939,
0.161650612950325,
0.03629464656114578,
-0.01821829564869404,
0.12088841199874878,
0.05955403670668602,
0.05459260195493698,
0.08068934082984924,
-0.034285470843315125,
0.12451254576444626,
0.0828559547662735,
-0.024472268298268318,
-0.03452419862151146,
0.07528544217348099,
0.11845909059047699,
0.054954834282398224,
0.045533083379268646,
0.07679364085197449,
0.043988607823848724,
-0.03220642730593681,
0.04693588614463806,
-0.013417718932032585,
0.07864178717136383,
0.05118383839726448,
0.11391868442296982,
-0.016070209443569183,
0.06843879818916321,
0.10262591391801834,
-0.15502099692821503,
0.08309626579284668,
-0.07813095301389694,
-0.019823096692562103,
-0.05417126417160034,
0.0924246609210968,
-0.09958753734827042,
0.06030864641070366,
-0.021803243085741997,
-0.07265753298997879,
0.029416996985673904,
-0.039476145058870316,
0.0781196728348732,
0.023548530414700508,
0.09781869500875473,
0.10166086256504059,
-0.021990256384015083,
0.08105397969484329,
0.08460400253534317,
0.05353201925754547,
0.08949494361877441,
0.05530542880296707,
0.013794511556625366,
-0.03652431443333626,
-0.100062794983387,
-0.12263916432857513,
0.0595475398004055,
-0.10851284861564636,
0.00675472617149353,
0.08504655212163925,
0.01922954060137272,
0.09779179841279984,
-0.014682769775390625,
0.118844173848629,
-0.04536665976047516,
0.06050680950284004,
0.05777224525809288,
-0.015382749028503895,
0.10988946259021759,
-0.009048635140061378,
0.06445159763097763,
-0.020398756489157677,
-0.008241616189479828,
-0.03875768929719925,
-0.03653435781598091,
0.02357344888150692,
-0.049333665519952774,
0.04435865953564644,
0.18127156794071198,
-0.05139462277293205,
0.004742567893117666,
-0.013423725962638855,
-0.04499802365899086,
0.12427651882171631,
-0.007157243322581053,
-0.19462652504444122,
-0.11020680516958237,
0.04005672037601471,
-0.09457256644964218,
0.030492667108774185,
-0.014403062872588634,
0.22266462445259094,
0.09390471130609512,
-0.04411664977669716,
0.13299019634723663,
0.12776468694210052,
0.10729773342609406,
0.014183472841978073,
-0.12080797553062439,
0.1209213063120842,
0.0748634785413742,
-0.11918380111455917,
-0.06621068716049194,
-0.08262521773576736,
0.09729456901550293,
-0.013441153801977634,
0.10950029641389847,
0.06129120662808418,
0.12255611270666122,
-0.053454432636499405,
0.07763361185789108,
0.11877854913473129,
-0.044453635811805725,
-0.04317436367273331,
0.006434549577534199,
0.014044053852558136,
0.06364184617996216,
-0.06345798075199127,
-0.04541808366775513,
-0.1158251017332077,
-0.039441756904125214,
0.034406136721372604,
0.09665068238973618,
0.12791427969932556,
0.04902954399585724,
0.0651828870177269,
-0.04919394478201866,
-0.0696130245923996,
0.11097651720046997,
-0.09838981181383133,
-0.10454423725605011,
0.0918869599699974,
0.05344916135072708,
0.046527013182640076,
0.07828748226165771,
-0.03035004809498787,
-0.03848438709974289,
-0.019946185871958733,
-0.04966065287590027,
0.09544310718774796,
-0.07160450518131256,
-0.03441821411252022,
0.14637592434883118,
-0.09370984882116318,
-0.10618932545185089,
0.08171365410089493,
-0.042416371405124664,
0.10665354132652283,
-0.0007485109381377697,
-0.08032025396823883,
0.09408611059188843,
-0.035904716700315475,
-0.006552581675350666,
0.12557965517044067,
0.032819557934999466,
0.07588506489992142,
0.056571174412965775,
0.0017465242417529225,
-0.04166590794920921,
-0.1462136209011078,
0.04434463009238243,
-0.035975925624370575,
-0.12673623859882355,
-0.07247848808765411,
-0.02217162400484085,
-0.12389253079891205,
0.008382814936339855,
0.03394705429673195,
-0.10125352442264557,
-0.057421158999204636,
-0.09535326063632965,
0.02755371853709221,
-0.055686354637145996,
-0.11257476359605789,
-0.003812831360846758,
-0.1454346925020218,
-0.06566130369901657,
0.047116469591856,
0.04831801727414131,
-0.06749521940946579,
-0.07419303059577942,
-0.023929819464683533,
-0.007724488154053688,
0.10265877842903137,
-0.03328882157802582,
0.013459034264087677,
-0.1028580367565155,
0.029673893004655838,
-0.08781810104846954,
-0.1208098828792572,
-0.09174063801765442,
-0.0441441647708416,
-0.005382155533879995,
-0.037858642637729645,
-0.0579640194773674,
-0.08415604382753372,
-0.031283751130104065,
-0.13751469552516937,
-0.13686047494411469,
-0.06310123950242996,
-0.1438664197921753,
-0.08481405675411224,
-0.035515062510967255,
-0.014878242276608944,
-0.06597151607275009,
-0.09701022505760193,
0.0809846743941307,
0.056669920682907104,
-0.020577440038323402,
-0.13167910277843475,
-0.10110063850879669,
0.03972506895661354,
0.1168726459145546,
-0.12353193014860153,
-0.12132440507411957,
-0.04109816998243332,
0.06262630224227905,
-0.08279416710138321,
0.015568520873785019,
-0.0660979300737381,
-0.11708801239728928,
0.04992644861340523,
-0.0634564459323883,
-0.0884118601679802,
-0.10390239953994751,
-0.0022360319271683693,
0.01067645289003849,
0.05132964998483658,
-0.05083570256829262,
0.036090653389692307,
-0.003899568924680352,
-0.1269158124923706,
0.016520418226718903,
-0.029051190242171288,
0.015577839687466621,
0.07240258902311325,
-0.11692826449871063,
-0.09706427901983261,
0.11915683001279831,
0.043376851826906204,
0.043300896883010864,
-0.029235711321234703,
-0.10752758383750916,
0.0646897703409195,
0.017631232738494873,
-0.03474872186779976,
-0.058370523154735565,
0.0015714580658823252,
0.08451130241155624,
0.13213294744491577,
-0.02266007475554943,
-0.008825546130537987,
-0.08092357963323593,
0.031108062714338303,
0.04627898335456848,
-0.08137194067239761,
0.025327129289507866,
0.030478017404675484,
-0.026409374549984932,
-0.08683560788631439,
-0.05089622735977173,
0.07368596643209457,
-0.08267751336097717,
-0.01314421184360981,
-0.07404033094644547,
-0.060488633811473846,
-0.07422757893800735,
0.05863677337765694,
0.0875728577375412,
-0.12059491872787476,
-0.1309964805841446,
0.050982579588890076,
0.03489653021097183,
-0.07730615139007568,
0.033544812351465225,
0.09340362995862961,
-0.12167412042617798,
0.008464990183711052,
-0.03919290751218796,
0.04345935955643654,
-0.07106097787618637,
0.11572891473770142,
0.046898677945137024,
0.024536216631531715,
0.01628664880990982,
0.004030338954180479,
-0.03785405308008194,
0.007022167555987835,
-0.11750444769859314,
-0.06615042686462402,
-0.02001246251165867,
-0.12329459190368652,
-0.10370528697967529,
0.0951426550745964,
0.12140236794948578,
-0.1072603389620781,
0.029992368072271347,
-0.07214801013469696,
-0.08156539499759674,
0.02710554376244545,
-0.12179818004369736,
-0.02360711060464382,
0.16770747303962708,
-0.17337974905967712,
-0.05387311056256294,
-0.12192096561193466,
0.005348019767552614,
0.026219217106699944,
-0.08434847742319107,
-0.11881542205810547,
0.008884134702384472,
-0.05130412429571152,
0.08073806762695312,
0.06047587841749191,
-0.06262380629777908,
0.015020745806396008,
0.031306929886341095,
-0.032564677298069,
-0.009735442698001862,
-0.006259083282202482,
-0.013218024745583534,
0.039282090961933136,
-0.1125696673989296,
0.033798474818468094,
0.13728004693984985,
-0.056910768151283264,
-0.08869166672229767,
-0.10770994424819946,
-0.138933002948761,
-0.0953829288482666,
-0.020894406363368034,
-0.018784530460834503,
-0.07155311107635498,
0.01680227927863598,
0.145443856716156,
-0.12720803916454315,
-0.14759932458400726,
0.025211120024323463,
-0.08186131715774536,
0.0032455718610435724,
0.02339136227965355,
-0.04974358528852463,
0.01411646418273449,
-0.022267665714025497,
-0.034197136759757996,
-0.023904964327812195,
0.10388276726007462,
-0.03583168238401413,
0.03298891708254814,
-0.09886348992586136,
0.12143820524215698,
-0.09329458326101303,
0.09003232419490814,
-0.1326669454574585,
-0.04821562394499779,
0.08701860159635544,
-0.06874987483024597,
-0.06475914269685745,
0.06651173532009125,
-0.16985832154750824,
0.06375341862440109,
0.1491137146949768,
0.03244755417108536,
0.10065008699893951,
-0.06330049782991409,
-0.09710158407688141,
0.06871697306632996,
-0.01896783336997032,
-0.09094582498073578,
0.06382689625024796,
0.013204870745539665,
-0.029048390686511993,
-0.01937095634639263,
0.02219768427312374,
0.03505726158618927,
-0.058309197425842285,
0.056023791432380676,
0.10878748446702957,
0.038952119648456573,
0.03584861010313034,
-0.07385296374559402,
-0.12543459236621857,
0.0918559730052948,
0.08422020822763443,
0.04262504726648331,
0.02012948878109455,
0.14008167386054993,
0.015127806924283504,
0.026426460593938828,
0.09213794022798538,
0.141610786318779,
-0.12769457697868347,
0.06472104042768478,
-0.16331422328948975,
-0.09366222470998764,
-0.007062253542244434,
0.0754358321428299,
-0.016691608354449272,
0.060681045055389404,
0.07622497528791428,
0.05771023780107498,
0.04057605192065239,
-0.0252857469022274,
-0.05348155274987221,
-0.040578603744506836,
0.08496832847595215,
0.07956153154373169,
0.05555490031838417,
-0.03250758722424507,
-0.0617554597556591,
-0.017305349931120872,
0.059783510863780975,
0.10239654779434204,
0.1320430487394333,
-0.045908067375421524,
-0.003362750168889761,
0.0676925852894783,
0.07615004479885101,
0.13884788751602173,
0.048336610198020935,
-0.006117876619100571,
-0.0954563096165657,
0.08330591768026352,
-0.11415331810712814,
-0.10105279833078384,
0.028849443420767784,
0.06596821546554565,
-0.038785312324762344,
-0.0524902418255806,
-0.10729404538869858,
0.14198653399944305,
0.06736373901367188,
-0.11066677421331406,
-0.06096694618463516,
-0.012813997454941273,
0.05119607597589493,
0.02952689677476883,
0.04280029609799385,
-0.0002834484330378473,
-0.15223324298858643,
-0.06974288076162338,
0.009168432094156742,
0.06034097075462341,
-0.007739047985523939,
-0.052108652889728546,
-0.012528880499303341,
0.05891645699739456,
0.04369742050766945,
-0.12399455904960632,
-0.023483093827962875,
-0.08229830116033554,
0.0019338377751410007,
-0.02930133417248726,
-0.01999850757420063,
-0.0809101089835167,
-0.02393265627324581,
0.028826581314206123,
-0.011925384402275085,
-0.06110300496220589,
-0.07507452368736267,
-0.04055185616016388,
0.10225461423397064,
-0.008554420433938503,
0.0001248076296178624,
-0.11083902418613434,
-0.058873455971479416,
-0.11958063393831253,
-0.09684555232524872,
-0.029452789574861526,
0.05665351450443268,
-0.1129925325512886,
-0.048005133867263794,
-0.01705184020102024,
-0.16160349547863007,
-0.07056237012147903,
-0.10042329132556915,
0.11356479674577713,
0.09662830084562302,
-0.09455997496843338,
0.09041674435138702,
0.08505520969629288,
0.08098647743463516,
0.017438417300581932,
0.08483359962701797,
0.03875590115785599,
0.015241820365190506,
0.08018351346254349,
0.004707784857600927,
-0.05207713693380356,
-0.08923719078302383,
0.05285119265317917,
-0.04110993444919586,
0.012657011859118938,
0.08905474841594696,
-0.0813579112291336,
-0.04566660895943642,
-0.05462179705500603,
0.016376320272684097,
-0.055659662932157516,
-0.08731608837842941,
0.0854928195476532,
0.05645780265331268,
0.01792788691818714,
-0.1457921713590622,
0.04780067130923271,
0.049971986562013626,
-0.15090464055538177,
0.03151680901646614,
-0.08935047686100006,
-0.058619968593120575,
-0.12397268414497375,
0.0363798588514328,
0.016379859298467636,
-0.006416119169443846,
-0.0404929518699646,
0.03896455094218254,
-0.01598581112921238,
0.13516472280025482,
0.08468169718980789,
-0.1360766440629959,
0.02957567572593689,
-0.04686001315712929,
-0.06361230462789536,
0.053176261484622955,
0.07015680521726608,
-0.0610140785574913,
-0.1310608834028244,
0.1458011418581009,
0.02128429152071476,
-0.04136808216571808,
-0.012126636691391468,
0.06412487477064133,
0.07365211099386215,
-0.01602565497159958,
-0.030952060595154762,
0.07202401012182236,
0.026014277711510658,
-0.08654920011758804,
-0.06516564637422562,
0.05481910705566406,
-0.025625357404351234,
0.09658218920230865,
-0.018422067165374756,
0.03916304558515549,
-0.02607102133333683,
0.02195017971098423,
-0.12650232017040253,
-0.10562850534915924,
0.0010511461878195405,
0.10409597307443619,
0.10581009089946747,
-0.032379113137722015,
0.10176592320203781,
-0.023356812074780464,
0.08620479702949524,
0.07760123908519745,
-0.046621546149253845,
-0.09513095021247864,
-0.004815102554857731,
-0.036254532635211945,
0.06726966798305511,
0.015923192724585533,
0.09275534749031067,
-0.02846504934132099,
0.09225891530513763,
-0.09378964453935623,
-0.013129206374287605,
-0.05245057865977287,
0.0772499293088913,
0.003927165642380714,
-0.10188321769237518,
0.04129821062088013,
0.11999497562646866,
0.02745593711733818,
-0.07902985066175461,
0.004330079071223736,
0.06362460553646088,
0.09998000413179398,
0.11119117587804794,
0.016704270616173744,
0.04919656366109848,
0.1352681815624237,
-0.07780645042657852,
-0.11844742298126221,
0.098253034055233,
-0.18459182977676392,
-0.14590883255004883,
-0.06420403718948364,
0.11335431039333344,
-0.07565154135227203,
-0.04278600960969925,
-0.036676179617643356,
0.021379584446549416,
0.00144813337828964,
-0.11156938225030899,
0.02012970671057701,
0.10093799978494644,
0.12834785878658295,
-0.1041896790266037,
-0.12646517157554626,
0.04263383522629738,
0.04784402251243591,
-0.03185532987117767,
0.023839151486754417,
-0.01702037826180458,
-0.03649543598294258,
0.046145372092723846,
0.05614090710878372,
0.06920646876096725,
-0.007636168971657753,
-0.1038084328174591,
0.10377238690853119,
-0.020089441910386086,
-0.0325610414147377,
0.06588529050350189,
-0.06474776566028595,
0.059739891439676285,
-0.10511911660432816,
-0.11833403259515762,
0.05315263941884041,
-0.06061197817325592,
0.10249585658311844,
0.07023638486862183,
-0.04807712137699127,
0.009884466417133808,
-0.047373343259096146,
-0.012222230434417725,
-0.09978669881820679,
-0.13346177339553833,
0.05084618180990219,
0.06431513279676437,
0.04391224682331085,
0.08116097003221512,
0.00190917297732085,
0.11763252317905426,
0.10705345869064331,
-0.04140494018793106,
0.03807025030255318,
-0.10039634257555008,
-0.06973186880350113,
0.044030554592609406,
0.002005588496103883,
-0.15649574995040894,
-0.023996900767087936,
-0.1016794815659523,
0.00884208269417286,
0.10395755618810654,
-0.08453868329524994,
-0.07126591354608536,
-0.05648304894566536,
-0.07016433030366898,
0.032062429934740067,
0.08682055026292801,
-0.08879992365837097,
0.08329997956752777,
-0.04896586760878563,
0.11921427398920059,
-0.03977372124791145,
-0.09378515928983688,
-0.0527757927775383,
0.008133918978273869,
0.04416036233305931,
-0.009662716649472713,
-0.14934493601322174,
-0.0697956308722496,
-0.025138147175312042,
0.07747078686952591,
0.14600452780723572,
-0.07738935202360153,
-0.04174654185771942,
0.03288570046424866,
-0.07158782333135605,
-0.0945788025856018,
-0.08395220339298248,
0.03065759874880314,
0.02385779283940792,
0.16799841821193695,
0.07380489259958267,
0.0110239926725626,
-0.006024418864399195,
0.053717371076345444,
0.06092645972967148,
-0.02328946627676487,
-0.05253675580024719,
0.011593134142458439,
0.03752239793539047,
0.13731779158115387,
-0.05601922795176506,
-0.007292190566658974,
0.051664456725120544,
-0.08074946701526642,
0.020893165841698647,
0.01493932493031025,
0.015231183730065823,
0.0020339875482022762,
-0.08033870160579681,
0.09333266317844391,
-0.07832545787096024,
0.034551288932561874,
0.10398675501346588,
-0.01222428772598505,
0.06717315316200256,
-0.1146334782242775,
-0.07227487862110138,
0.09360530227422714,
0.03975473344326019,
-0.0829165056347847,
-0.03465673699975014,
-0.007857079617679119,
-0.019068175926804543,
-0.0568823404610157,
0.08970829844474792,
-0.07540588080883026,
0.0885348916053772,
-0.07854440063238144,
-0.031537145376205444,
0.1005423367023468,
-0.03792349621653557,
-0.08905427157878876,
-0.13101786375045776,
-0.08639964461326599,
-0.13063867390155792,
-0.22848892211914062,
0.12419923394918442,
0.03783627972006798,
0.04510260373353958,
-0.008492390625178814,
0.035670991986989975,
-0.020155170932412148,
0.01797739788889885,
-0.08964744210243225,
-0.0411674827337265,
0.05823259800672531,
-0.037565842270851135,
0.08848071843385696,
-0.13689646124839783,
0.008527141064405441,
-0.09293940663337708,
-0.0692182332277298,
0.08412615209817886,
-0.11434174329042435,
0.04610266163945198,
0.11043671518564224,
-0.08759653568267822,
0.061297882348299026,
-0.03987771272659302,
0.006654094438999891,
-0.04480137676000595,
-0.021299326792359352,
-0.005148753523826599,
0.013194002211093903,
-0.023494815453886986,
-0.10734428465366364,
-0.11640378832817078,
-0.08144122362136841,
0.012174831703305244,
0.019556092098355293,
-0.05602215602993965,
-0.017342671751976013,
-0.08937849849462509,
-0.013846838846802711,
-0.010223784483969212,
0.0827321708202362,
-0.08201845735311508,
-0.09373960644006729,
0.081085205078125,
0.11360051482915878,
0.020574983209371567,
-0.08383295685052872,
-0.10760927945375443,
-0.029953325167298317,
0.019085580483078957,
0.10082520544528961,
0.09243380278348923,
0.02754167839884758,
0.04226265475153923,
-0.003918921109288931,
-0.06254128366708755,
0.12261231243610382,
0.03379254788160324,
-0.035938844084739685,
0.024605004116892815,
0.1220354363322258,
0.032672345638275146,
0.029994811862707138,
0.11282561719417572,
-0.04035660997033119,
0.019958937540650368,
-0.03348451852798462,
-0.07425239682197571,
-0.025075560435652733,
-0.13984957337379456,
0.09168031066656113,
-0.029590945690870285,
-0.05035073310136795,
-0.10379444062709808,
0.06865901499986649,
0.0695364773273468,
0.0315890796482563,
0.06284946203231812,
0.10763347148895264,
0.13986007869243622,
0.0597630999982357,
0.03498995676636696,
-0.09453584253787994,
0.030777404084801674,
0.006346289999783039,
0.1467347890138626,
-0.0090596629306674,
-0.01999535970389843,
-0.007200768683105707,
0.01895131543278694,
0.03584511950612068,
0.01946357823908329,
0.023131681606173515,
0.16023747622966766,
0.17128491401672363,
0.1329270899295807,
0.007327463943511248,
-0.07961423695087433,
0.06710146367549896,
-0.16202916204929352,
0.12789544463157654,
0.020458705723285675,
-0.11102870851755142,
0.028194306418299675,
0.040724191814661026,
-0.04358939826488495,
-0.03867792338132858,
0.020333096385002136,
0.046168405562639236,
-0.022949213162064552,
0.029232243075966835,
0.09509435296058655,
0.06155281513929367,
-0.050892945379018784,
-0.033946648240089417,
-0.09865391254425049,
0.13935455679893494,
-0.056319575756788254,
-0.02207358367741108,
-0.009267795830965042,
-0.04351478070020676,
0.09566222876310349,
0.07737401127815247,
0.01718924194574356,
-0.027544287964701653,
0.049759071320295334,
-0.09994218498468399,
0.12707030773162842,
0.010611909441649914,
-0.07198648154735565,
0.08732080459594727,
0.02286147139966488,
-0.06608662009239197,
-0.12634986639022827,
-0.05542375147342682,
-0.05797219276428223,
0.08722374588251114,
-0.09000584483146667,
-0.109751395881176,
0.048737406730651855,
0.0805954709649086,
0.011070315726101398,
0.07313843816518784,
0.15277573466300964,
-0.16707289218902588,
0.07995505630970001,
0.006962025538086891,
0.05199994146823883,
0.08151900768280029,
-0.0704890638589859,
0.04558931291103363,
0.05313436686992645,
0.06583315134048462,
0.07614714652299881,
0.13211601972579956,
0.05568962171673775,
0.0015336287906393409,
0.0870581790804863,
-3.065001510549337e-05,
0.06160425394773483,
0.012173021212220192,
-0.05195397883653641,
-0.1779765784740448,
-0.11475588381290436,
-0.15342329442501068,
0.01343812420964241,
-0.014626257121562958,
0.04607817158102989,
-0.09352228045463562,
-0.04048962518572807,
0.1847413331270218,
0.05163327232003212,
-0.09349747747182846,
0.17632955312728882,
0.0628315731883049,
0.21627913415431976,
0.01770785264670849,
0.009627314284443855,
0.11272954195737839,
0.10379447042942047,
0.0371062196791172,
-0.06906326860189438,
0.1204497367143631,
-0.06847043335437775,
0.047122202813625336,
-0.014392261393368244,
-0.12023071199655533,
-0.06881169974803925,
-0.014024910517036915,
-0.07237735390663147,
-0.00894638430327177,
-0.074605293571949,
0.0826304703950882,
0.09072232991456985,
0.060670021921396255,
0.14458473026752472,
-0.016566980630159378,
-0.07122373580932617,
0.019576281309127808,
0.002521922579035163,
-0.01389552466571331,
0.0826447457075119,
0.01837957836687565,
-0.02381189912557602,
0.002157311188057065,
0.08505070209503174,
0.11895707994699478,
-0.005018554162234068,
-0.1148693785071373,
0.0018526999047026038,
-0.07980376482009888,
0.1021973267197609,
0.1130652129650116,
0.006847111973911524,
0.03851679340004921,
-0.012378274463117123,
-0.07288679480552673,
0.014277019537985325,
0.08160785585641861,
-0.07119180262088776,
-0.04692140221595764,
0.05497244372963905,
-0.09297063946723938,
0.025818295776844025,
-0.09554845839738846,
0.04570520296692848,
-0.08248177170753479,
0.002859674161300063,
0.10511656105518341,
0.06412085145711899,
-0.05986741930246353,
-0.13806705176830292,
0.06247900426387787,
-0.12366756051778793,
0.08048567175865173,
-0.09836182743310928,
0.11515899747610092,
-0.0691232904791832,
-0.07704672962427139,
-0.02197282388806343,
-0.025939857587218285,
0.011731426231563091,
-0.03457559645175934,
-0.07228335738182068,
-0.13275684416294098,
0.13831278681755066,
-0.09474938362836838,
0.07368296384811401,
0.04634598270058632,
0.051475103944540024,
-0.029856372624635696,
0.06542733311653137,
-0.011832228861749172,
0.04124397039413452,
-0.045614589005708694,
0.0010192047338932753,
-0.07623820751905441,
-0.0855918899178505,
0.03842279687523842,
0.007877079769968987,
-0.06218534708023071,
0.05926239490509033,
-0.01710762456059456,
-0.11468298733234406,
-0.020237240940332413,
-0.008605824783444405,
-0.05905698612332344,
0.0011166345793753862,
0.004040277097374201,
0.06861760467290878,
0.06941480934619904,
0.07549106329679489,
-0.1102636381983757,
0.08921419084072113,
0.06782792508602142,
-0.07497639209032059,
-0.05993330106139183,
-0.0680919662117958,
-0.024790506809949875,
-0.011991473846137524,
-0.1119617149233818,
0.04626525565981865,
0.037352055311203,
-0.053992047905921936,
-0.05491539463400841,
0.03773169592022896,
-0.0761459469795227,
0.03217996656894684,
0.004202764481306076,
-0.08197218924760818,
-0.040343549102544785,
-0.0067420778796076775,
-0.1848790943622589,
-0.10152006894350052,
-0.0684637725353241,
0.02336834743618965,
-0.031601302325725555,
-0.027029532939195633,
0.04594060778617859,
-0.05482758581638336,
0.1283315122127533,
-0.09346529096364975,
-0.04458275064826012,
0.030381612479686737,
-0.12424732744693756,
-0.017717787995934486,
0.08884623646736145,
-0.1465597301721573,
-0.05430072918534279,
-0.07005836814641953,
-0.09434927999973297,
0.055542852729558945,
-0.013021282851696014,
0.134205624461174,
0.009150180965662003,
-0.10169770568609238,
-0.0212621558457613,
0.04086240753531456,
-0.01857822947204113,
-0.02266334369778633,
-0.05838462710380554,
0.05609823018312454,
0.05629554018378258,
-0.025420784950256348,
0.017797036096453667,
0.06546764820814133,
-0.11319392919540405,
0.01795641891658306,
0.060383573174476624,
0.020748578011989594,
-0.08984270691871643,
-0.04303433373570442,
0.05669304355978966,
0.019602518528699875,
-0.010871152393519878,
-0.03368581831455231,
-0.10366787761449814,
0.09367751330137253,
-0.025476699694991112,
-0.11747833341360092,
-0.08799558877944946,
0.08365767449140549,
-0.05870453640818596,
0.04354356601834297,
-0.045418914407491684,
0.08165089786052704,
0.13500761985778809,
0.1065644696354866,
-0.07044855505228043,
-0.040070950984954834,
-0.022849759086966515,
-0.09344373643398285,
-0.05625198781490326,
0.12272702902555466,
-0.1479313224554062,
-0.09469329565763474,
-0.09866093844175339,
0.14763477444648743,
0.03741840273141861,
-0.01737752929329872,
-0.1082402765750885,
0.13827171921730042,
0.11710025370121002,
-0.023046551272273064,
0.06875836104154587,
-0.11946606636047363,
-0.1010885089635849,
-0.10255169123411179,
-0.10115616023540497,
-0.0021961990278214216,
0.06358551979064941,
-0.10773579776287079,
0.06640789657831192,
0.10400549322366714,
0.011394116096198559,
0.1142900139093399,
0.045020800083875656,
-0.06380566954612732,
0.002443266799673438,
0.0535709373652935,
0.11898025125265121,
0.0060787321999669075,
-0.05777429789304733,
0.02188250795006752,
0.008622166700661182,
-0.05483653023838997,
-0.1342298686504364,
0.0277083832770586,
-0.030878204852342606,
-0.028468437492847443,
0.03709312900900841,
-0.03857036679983139,
0.019693903625011444,
-0.0528673455119133,
-0.09856200218200684,
0.09033314138650894,
-0.06107647716999054,
-0.10416611284017563,
0.07848131656646729,
0.03153841570019722,
0.03704799711704254,
-0.10485882312059402,
-0.05303491652011871,
0.1838320642709732,
0.006706399843096733,
-0.05144655704498291,
-0.036378033459186554,
-0.08099550008773804,
-0.006972781382501125,
-0.0984250083565712,
-0.09314167499542236,
-0.10099942237138748,
-0.002572673140093684,
-0.022487754002213478,
-0.11753220856189728,
-0.10016622394323349,
-0.0019799252040684223,
0.02259659953415394,
-0.06707292795181274,
0.022148624062538147,
0.01678626239299774,
0.14523163437843323,
0.14288412034511566,
-0.11958347260951996,
0.0550689771771431,
-0.1276894211769104,
0.057993724942207336,
0.09865385293960571,
-0.152499720454216,
-0.01982576958835125,
0.09461130201816559,
-0.09447198361158371,
0.09521985054016113,
0.0998419001698494,
-0.20206710696220398,
-0.10850454121828079,
0.041042398661375046,
0.10401519387960434,
-0.009213180281221867,
0.056963734328746796,
0.11119619011878967,
-0.0895344465970993,
0.1905047744512558,
-0.0396571159362793,
-0.071625716984272,
-0.07419364154338837,
0.014106824062764645,
-0.051545947790145874,
0.11156580597162247,
-0.011486375704407692,
-0.02740771509706974,
-0.07364051789045334,
-0.0408804789185524,
-0.01742406003177166,
-0.04660354182124138,
-0.014522900804877281,
0.09961807727813721,
0.029247812926769257,
0.019903583452105522,
0.06911979615688324,
0.0934629961848259,
0.07449682056903839,
-0.0979197770357132,
-0.10648828744888306,
0.12483970820903778,
-0.024553846567869186,
0.07233616709709167,
0.06517024338245392,
0.04419288411736488,
0.007726255338639021,
-0.017651623114943504,
-0.0961528867483139,
-0.07406178116798401,
-0.12523971498012543,
-0.015606958419084549,
0.012874042615294456,
-0.05016574263572693,
-0.053856316953897476,
0.05218542739748955,
0.0030936612747609615,
0.0090304184705019,
-0.0727413073182106,
-0.08261361718177795,
0.02782396599650383,
0.08529626578092575,
-0.006395510397851467,
0.029587574303150177,
-0.10928492248058319,
-0.03944530338048935,
-0.033080440014600754,
0.049242716282606125,
-0.047470685094594955,
-0.09580715000629425,
-0.08343484997749329,
0.12731055915355682,
-0.047415196895599365,
-0.01805589161813259,
-0.03924950584769249,
0.07549882680177689,
-0.11756674200296402,
0.04170655459165573,
-0.07575119286775589,
-0.06959148496389389,
0.10784744471311569,
0.1506754606962204,
-0.06145881116390228,
-0.011765921488404274,
0.08092085272073746,
-0.14485850930213928,
0.14017944037914276,
-0.05018681287765503,
-0.07337816059589386,
0.08177845925092697,
0.05513976886868477,
-0.09664686769247055,
-0.06227019429206848,
0.036149393767118454,
0.1163695678114891,
0.11013046652078629,
0.13162054121494293,
0.042491279542446136,
-0.0405171737074852,
-0.019797639921307564,
0.12815867364406586,
-0.15137679874897003,
0.06119713559746742,
0.038296401500701904,
0.10391904413700104,
-0.023898718878626823,
0.07156413048505783,
-0.09114108979701996,
-0.07406751066446304,
-0.039187848567962646,
0.09723247587680817,
-0.09507547318935394,
0.0018397120293229818,
0.06394705921411514,
0.16412651538848877,
-0.01810227707028389,
-0.0506351999938488,
0.007558153010904789,
-0.033449601382017136,
-0.0015851766802370548,
-0.0030404729768633842,
-0.01390388235449791,
-0.0759626179933548,
-0.012810337357223034,
0.06959572434425354,
-0.13605329394340515,
-0.02154301293194294,
0.08362790942192078,
-0.0697546899318695,
0.08636055886745453,
-0.05192236602306366,
0.11637619882822037,
-0.07957097887992859,
-0.0738806426525116,
0.06032533943653107,
-0.07130926847457886,
0.03507072851061821,
-0.04114260524511337,
0.10124180465936661,
0.04650687426328659,
0.06505481153726578,
0.05709478631615639,
0.0733373686671257,
-0.0600002259016037,
0.006477938033640385,
-0.037651535123586655,
0.04951285570859909,
0.04913676530122757,
-0.07099725306034088,
-0.02949964813888073,
0.02118920162320137,
0.05478757992386818,
0.030535470694303513,
-0.006824640557169914,
0.016225814819335938,
-0.037519849836826324,
-0.12225515395402908,
-0.011137012392282486,
0.0522732213139534,
-0.08581757545471191,
0.0044159842655062675,
0.10183907300233841,
0.07835493236780167,
0.09812751412391663,
0.07248321175575256,
0.05779334902763367,
0.11026749014854431,
0.06861263513565063,
0.09246603399515152,
0.007935811765491962,
-0.017801504582166672,
0.0483279824256897,
0.023374155163764954,
0.0022644312120974064,
-0.007237900514155626,
0.08806388080120087,
0.019296608865261078,
0.16980186104774475,
0.07710784673690796,
0.04636596515774727,
0.11843986064195633,
0.05277521535754204,
0.14660052955150604,
0.0351635180413723,
0.1112930104136467,
0.15699346363544464,
-0.01742425188422203,
-0.039819661527872086,
-0.010307276621460915,
0.026769239455461502,
-0.05288129672408104,
-0.09224497526884079,
0.05585333704948425,
0.11524648219347,
0.010807687416672707,
0.08387631922960281,
0.06053279712796211,
-0.05460256338119507,
0.04387974366545677,
-0.09187468141317368,
-0.04392729327082634,
0.07798002660274506,
-0.0240243561565876,
0.026026155799627304,
0.019534390419721603,
0.030126703903079033,
-0.002370662521570921,
-0.03492428734898567,
0.0042709349654614925,
0.08856102079153061,
-0.10253969579935074,
-0.010518397204577923,
0.0677998811006546,
-0.10029559582471848,
-0.08705169707536697,
0.02228846214711666,
-0.09794742614030838,
-0.009729617275297642,
0.08978696912527084,
-0.15053024888038635,
-0.035378728061914444,
0.061530377715826035,
-0.0357438363134861,
0.08660555630922318,
-0.028648532927036285,
0.09225355833768845,
0.0413539744913578,
-0.05345538258552551,
0.033865299075841904,
0.1085749939084053,
-0.09516460448503494,
-0.04787106066942215,
-0.14393167197704315,
0.06813894212245941,
0.01936851069331169,
-0.08347278088331223,
-0.025519290938973427,
0.08874784409999847,
-0.0669899433851242,
-0.07455643266439438,
0.08547361195087433,
-0.16462740302085876,
-0.11575141549110413,
0.024096090346574783,
-0.04314381256699562,
-0.017702985554933548,
0.054020144045352936,
-0.03129908815026283,
-0.050796788185834885,
-0.09431245923042297,
-0.06071092560887337,
-0.004218098241835833,
0.09412705898284912,
-0.11581778526306152,
0.04823310673236847,
0.05857883766293526,
0.07952161133289337,
-0.08165872097015381,
-0.10372212529182434,
0.057015642523765564,
-0.029394088312983513,
-0.1554642766714096,
0.021818015724420547,
0.021978817880153656,
0.05270780995488167,
0.11869806796312332,
0.03859100118279457,
0.06688014417886734,
-0.11373251676559448,
-0.03701323643326759,
-8.847856952343136e-05,
-0.07322251796722412,
0.08096612989902496,
0.020613376051187515,
-0.040482815355062485,
-0.023590631783008575,
0.0939323678612709,
-0.02101924829185009,
-0.07059432566165924,
-0.0786290168762207,
-0.03460889309644699,
0.02802242711186409,
-0.0308710727840662,
-0.04361668974161148,
-0.09196347743272781,
0.02985633909702301,
-0.007938642986118793,
0.07465236634016037,
0.014983152039349079,
0.09832224249839783,
0.13946633040905,
0.04635770246386528,
-0.03349313512444496,
-0.025022059679031372,
0.06407777220010757,
0.09040924161672592,
-0.0003257006173953414,
-0.10820090770721436,
-0.09455538541078568,
0.09333787113428116,
-0.059351272881031036,
0.057023245841264725,
-0.04511675983667374,
0.06067640706896782,
-0.05846010893583298,
-0.003967964090406895,
0.04357362166047096,
0.016578247770667076,
-0.0408855639398098,
-0.057953473180532455,
0.02210773341357708,
-0.13316185772418976,
-0.1510990560054779,
-0.11434698849916458,
-0.06044721230864525,
-0.1385742574930191,
-0.03873884677886963,
0.09302045404911041,
-0.01991431973874569,
-0.01796577125787735,
-0.125921830534935,
-0.02295476756989956,
-0.22196026146411896,
0.10078415274620056,
-0.04654577374458313,
-0.1056818962097168,
-0.036825984716415405,
-0.05562989041209221,
0.04319126904010773,
-0.06794890016317368,
-0.05052993819117546,
0.009818191640079021,
-0.04256841912865639,
-0.08656929433345795,
0.17378781735897064,
0.09377172589302063,
-0.11824209988117218,
-0.10625897347927094,
0.012744017876684666,
-0.04307840019464493,
-0.024256642907857895,
0.07199793308973312,
0.016651833429932594,
-0.04877384379506111,
0.016507335007190704,
-0.07561654597520828,
-0.03330672159790993,
0.027438797056674957,
-0.10682123154401779,
0.14797580242156982,
0.06136777251958847,
-0.09236237406730652,
0.0370771661400795,
-0.15640480816364288,
-0.021560031920671463,
0.10900519788265228,
-0.01684998907148838,
0.11582288891077042,
-0.025885755196213722,
0.0682053193449974,
0.038166023790836334,
0.04402425140142441,
0.09709016233682632,
0.1347472071647644,
0.03859053552150726,
0.09197183698415756,
0.11558789014816284,
-0.047108009457588196,
-0.08561668545007706,
0.04087010398507118,
-0.00173559517133981,
-0.04076952114701271,
-0.016963571310043335,
0.12253907322883606,
-0.07084627449512482,
0.004957756493240595,
-0.07545189559459686,
0.01994270086288452,
-0.06988725066184998,
0.07356222718954086,
-0.12202715128660202,
0.1452072113752365,
-0.08964113891124725,
-0.022007355466485023,
-0.0853477194905281,
-0.026838362216949463,
-0.028469692915678024,
-0.059588078409433365,
-0.10496585071086884,
0.018296467140316963,
-0.08742076903581619,
-0.09653501957654953,
0.033169250935316086,
-0.09050341695547104,
-0.015573317185044289,
0.02802850864827633,
-0.11142314970493317,
0.13854221999645233,
0.010931088589131832,
0.04931360110640526,
0.09918024390935898,
0.0445990264415741,
0.05039531737565994,
0.07919399440288544,
0.0415755957365036,
0.01056433841586113,
0.04908610135316849,
0.054409630596637726,
-0.04286675155162811,
0.05636163428425789,
0.13264259696006775,
-0.04804667830467224,
-0.05753372609615326,
-0.03537926450371742,
0.022881893441081047,
-0.07350226491689682,
-0.029509341344237328,
-0.010263721458613873,
-0.06895390897989273,
0.009231574833393097,
-0.0062682246789336205,
0.0020474495831876993,
-0.13692063093185425,
-0.10875819623470306,
-0.11255274713039398,
-0.16926121711730957,
-0.0952920913696289,
0.13397032022476196,
-0.05089747905731201,
-0.02208082191646099,
-0.06681132316589355,
-0.01425811555236578,
-0.014072590507566929,
-0.09607288986444473,
0.04170875623822212,
-0.013391522690653801,
-0.06812345236539841,
-0.04684637859463692,
0.06625675410032272,
-0.04947025328874588,
-0.11097870022058487,
0.009486174210906029,
-0.006706480402499437,
0.18375977873802185,
0.08416921645402908,
-0.0348820798099041,
0.007950922474265099,
0.027516353875398636,
-0.06164498254656792,
0.0874151960015297,
-0.09322042018175125,
-0.0014434875920414925,
0.10539112985134125,
0.0628243088722229,
-0.0006080453749746084,
0.1025904193520546,
0.05740472674369812,
0.2615800201892853,
-0.04548972472548485,
0.12596088647842407,
0.0056705595925450325,
0.029895367100834846,
0.09035319089889526,
0.028043443337082863,
-0.05213246867060661,
-0.09427161514759064,
0.060069434344768524,
0.034986209124326706,
0.05580351501703262,
0.008886830881237984,
0.1614357978105545,
0.10327965021133423,
0.06327825784683228,
0.2504640221595764,
0.06322670727968216,
-0.07839667052030563,
0.08518311381340027,
-0.05364255979657173,
0.05398855730891228,
-0.009419670328497887,
-0.10805327445268631,
-0.04360714554786682,
-0.009062202647328377,
0.09706663340330124,
-0.028918471187353134,
0.00125736219342798,
-0.06251098215579987,
0.044222332537174225,
0.010923700407147408,
-0.07239478081464767,
-0.07394420355558395,
0.032598577439785004,
-0.017921410501003265,
-0.0820888876914978,
-0.03245023265480995,
-0.15497136116027832,
0.07416805624961853,
-0.04470877721905708,
0.0781538337469101,
0.08725510537624359,
-0.11200115084648132,
0.09439177811145782,
0.034079134464263916,
0.09991063177585602,
0.03595515340566635,
-0.12478920072317123,
0.038811132311820984,
-0.11096334457397461,
-0.004212487954646349,
-0.050705600529909134,
-0.0005524403532035649,
-0.1234612986445427,
-0.15332961082458496,
0.09124784916639328,
-0.004750911146402359,
-0.12521639466285706,
-0.12024780362844467,
-0.0029044360853731632,
0.10436057299375534,
-0.08195813000202179,
-0.07712239772081375,
0.05207706242799759,
-0.11062800884246826,
0.05369935184717178,
-0.04199584573507309,
-0.054997798055410385,
0.055237554013729095,
-0.014509806409478188,
-0.05774188041687012,
-0.12007935345172882,
-0.1750611960887909,
-0.02702953852713108,
-0.09294290840625763,
-0.03354226052761078,
0.026496384292840958,
0.04664890840649605,
-0.0590062253177166,
0.07554879784584045,
0.10663618892431259,
-0.022703742608428,
-0.07384701073169708,
-0.09695611894130707,
0.0623813234269619,
-0.07496649771928787,
-0.12356141209602356,
0.05984199047088623,
0.12580552697181702,
0.024961834773421288,
0.10400950163602829,
0.050363365560770035,
0.11351354420185089,
0.15831401944160461,
-0.13267694413661957,
0.1758185774087906,
-0.014013376086950302,
-0.11043541878461838,
-0.001089363475330174,
0.06224847212433815,
-0.003954186569899321,
-0.04598916694521904,
0.08404524624347687,
0.043353475630283356,
0.10400213301181793,
-0.06617825478315353,
0.07296280562877655,
0.06689378619194031,
0.006388496141880751,
-0.02884739637374878,
-0.0996776893734932,
-0.03553147614002228,
0.09904047101736069,
0.11448012292385101,
-0.10323788225650787,
0.057560909539461136,
0.019745761528611183,
0.0007709740893915296,
-0.06678696721792221,
-0.09685023128986359,
0.14076276123523712,
0.003548179753124714,
0.026385022327303886,
-0.03503779321908951,
-0.11467062681913376,
0.03480605036020279,
-0.0932684913277626,
0.05175106227397919,
-0.045931365340948105,
0.018870137631893158,
0.12754598259925842,
-0.019115334376692772,
0.03403171896934509,
0.06930889189243317,
-0.04390375688672066,
0.05988495424389839,
-0.028014158830046654,
-0.08633142709732056,
-0.11226590722799301,
-0.03663445636630058,
-0.06631764024496078,
0.03210283815860748,
0.02214675396680832,
-0.10190479457378387,
-0.08208190649747849,
-0.029322538524866104,
0.016126278787851334,
-0.10916415601968765,
0.02565830387175083,
0.07125035673379898,
-0.03673737868666649,
-0.08458339422941208,
0.03485402092337608,
-0.010407050140202045,
-0.0049596731550991535,
-0.016481509432196617,
0.0899970680475235,
0.09821392595767975,
-0.07400300353765488,
-0.0558173805475235,
0.12306126207113266,
-0.0018942856695502996,
0.07114964723587036,
-0.12527428567409515,
-0.048509497195482254,
-0.04458841308951378,
0.12339377403259277,
0.0011806002585217357,
0.07435037195682526,
0.047076012939214706,
0.05041958764195442,
0.09565327316522598,
0.0774497389793396,
0.11994999647140503,
-0.11469680070877075,
-0.11509096622467041,
-0.005390041507780552,
0.18223828077316284,
-0.0550948791205883,
0.06251314282417297,
0.011615987867116928,
-0.14613035321235657,
0.034936826676130295,
0.0243625957518816,
0.11297911405563354,
0.0055200220085680485,
-0.03612577170133591,
0.20705187320709229,
0.05658501014113426,
-0.05490339547395706,
-0.06963510066270828,
0.021438082680106163,
-0.0941372960805893,
0.12956535816192627,
-0.059463128447532654,
0.11945133656263351,
0.014688166789710522,
-0.10786126554012299,
-0.06782713532447815,
-0.012159476988017559,
-0.08180604130029678,
-0.028025254607200623,
-0.05453578755259514,
-0.10007108002901077,
0.04087505489587784,
-0.07671506702899933,
-0.03805911913514137,
0.019177643582224846,
0.024568015709519386,
-0.0446474589407444,
-0.08594878017902374,
-0.005711371544748545,
-0.07462301850318909,
0.03146301582455635,
0.0017139919800683856,
0.05954790115356445,
0.046889398247003555,
0.027722833678126335,
0.07114633172750473,
-0.12863725423812866,
-0.018308188766241074,
0.10714535415172577,
-0.020204756408929825,
0.10199441760778427,
-0.08865226805210114,
-0.16373221576213837,
-0.014112351462244987,
-0.1219850555062294,
-0.049335725605487823,
0.07340399920940399,
0.10677417367696762,
-0.02162003703415394,
0.015562993474304676,
-0.0850987657904625,
0.07054515182971954,
0.01719505339860916,
-0.10616007447242737,
0.044160474091768265,
-0.09275231510400772,
0.03253549337387085,
-0.032350391149520874,
0.045831117779016495,
0.11889287829399109,
-0.09406343102455139,
0.04198528453707695,
0.043316490948200226,
0.007270742207765579,
0.04216086491942406,
-0.03680893033742905,
0.0025156326591968536,
0.004072063136845827,
-0.037284005433321,
-0.07844283431768417,
-0.11716505140066147,
-0.18249982595443726,
-0.10817836225032806,
-0.005182543769478798,
-0.01603451371192932,
-0.06333676725625992,
0.04709809273481369,
-0.1376824826002121,
0.04615515097975731,
-0.1668487787246704,
-0.013318248093128204,
0.09235072135925293,
-0.14235042035579681,
-0.09815096110105515,
0.006555453408509493,
0.04823283106088638,
-0.05786719173192978,
0.0043463981710374355,
-0.03348985314369202,
-0.03002135455608368,
0.1333746761083603,
-0.1386079490184784,
0.07789502292871475,
0.03354789689183235,
0.021022597327828407,
-0.002659290563315153,
-0.15125323832035065,
-0.007514388300478458,
0.054944802075624466,
-0.11006645858287811,
-0.04530663415789604,
0.03572510555386543,
-0.11554742604494095,
-0.11018450558185577,
0.055031850934028625,
0.0305581483989954,
0.004861051216721535,
-0.010077961720526218,
0.10700567066669464,
-0.02884066291153431,
0.08552808314561844,
0.0632338598370552,
-0.034634847193956375,
-0.008624760434031487,
0.037666063755750656,
0.057488806545734406,
-0.12418528646230698,
-0.006654979195445776,
0.06836247444152832,
0.06486188620328903,
0.16421036422252655,
0.004839214030653238,
-0.16767773032188416,
-0.13699913024902344,
-0.07451578229665756,
0.056765567511320114,
-0.04090011119842529,
0.10704736411571503,
0.09895587712526321,
0.12071149051189423,
-0.03389784321188927,
-0.09989678859710693,
-0.02296822890639305,
0.05146242678165436,
-0.0737433061003685,
0.03895258903503418,
0.050908319652080536,
0.1033143624663353,
0.04620583355426788,
-0.08255759626626968,
-0.07886458188295364,
0.022194985300302505,
0.037805456668138504,
-0.09851210564374924,
-0.07715625315904617,
-0.0254309494048357,
0.028989780694246292,
-0.018899843096733093,
0.1231515184044838,
-0.02224869839847088,
-0.11340257525444031,
-0.027752893045544624,
-0.12472445517778397,
0.03091319464147091,
-0.10962522029876709,
0.06616473197937012,
-0.09810849279165268,
0.04612164944410324,
0.12028741091489792,
-0.1453505903482437,
0.027208486571907997,
-0.13983745872974396,
0.02291150763630867,
0.021378004923462868,
0.008955806493759155,
0.02278164029121399,
0.010801141150295734,
0.0893860012292862,
0.00033401319524273276,
-0.09577526152133942,
-0.032281819730997086,
0.13497449457645416,
-0.08392966538667679,
0.05258869379758835,
-0.07673115283250809,
-0.13552910089492798,
-0.07276447862386703,
-0.005955057218670845,
0.004495324566960335,
-0.04819865524768829,
-0.06762805581092834,
-0.10107962042093277,
0.04047764465212822,
-0.03965836390852928,
0.07909578830003738,
0.08677026629447937,
-0.08653417229652405,
-0.016423683613538742,
0.07046794146299362,
0.011675950139760971,
0.026174981147050858,
-0.07467401772737503,
-0.20341286063194275,
-0.08047638833522797,
0.12212073057889938,
-0.09929058700799942,
-0.06380630284547806,
-0.03108936734497547,
-0.0357428677380085,
-0.028343532234430313,
0.12435968220233917,
-0.03333347663283348,
-0.05747402086853981,
-0.02373499609529972,
0.08509327471256256,
-0.10087618976831436,
0.011411641724407673,
0.03477336838841438,
-0.007912098430097103,
-0.013183604925870895,
-0.022718001157045364,
-0.03406573086977005,
-0.05876035615801811,
0.0379047654569149,
0.0027156020514667034,
-0.11586219072341919,
0.03562955930829048,
-0.06724509596824646,
-0.08524605631828308,
0.005413897801190615,
0.11382726579904556,
0.030968360602855682,
0.013401806354522705,
-0.004364110995084047,
0.04977833852171898,
0.026727205142378807,
-0.0304510947316885,
0.1449955254793167,
0.07533106207847595,
0.05477453023195267,
0.04603724554181099,
-0.14564818143844604,
0.13574844598770142,
-0.059109847992658615,
-0.030924808233976364,
-0.07949051260948181,
-0.09764669835567474,
0.11213717609643936,
0.030914973467588425,
0.06641291826963425,
0.0324985608458519,
0.14526686072349548,
-0.026269346475601196,
-0.03492297604680061,
-0.02025783061981201,
-0.03913721814751625,
0.0945817232131958,
0.09991222620010376,
0.11732210963964462,
0.051808279007673264,
0.0983964279294014,
0.03368017077445984,
-0.059203922748565674,
0.008496616035699844,
0.06150079518556595,
-0.04534116014838219,
0.02063939720392227,
0.18725179135799408,
-0.09383945912122726,
0.020829588174819946,
-0.03852873295545578,
0.0658285990357399,
0.04535383731126785,
-0.14052814245224,
-0.006453183479607105,
0.04637632146477699,
0.0848064199090004,
0.008878439664840698,
-0.1938602775335312,
0.015119491145014763,
-0.05307168886065483,
0.0036894571967422962,
-0.05295918881893158,
0.15090590715408325,
-0.037519421428442,
0.04251353070139885,
0.10482145845890045,
-0.0679318830370903,
0.08262768387794495,
0.001349164405837655,
0.013185877352952957,
-0.0018592815613374114,
0.1819125860929489,
-0.03868986293673515,
-0.035247620195150375,
-0.06743466854095459,
-0.03427160158753395,
0.04865109547972679,
-0.14802612364292145,
-0.009010828100144863,
-0.00622533680871129,
0.05100761353969574,
0.17078015208244324,
0.016094153746962547,
0.01463581994175911,
0.06911170482635498,
0.03309626132249832,
0.15063199400901794,
0.10336083173751831,
0.04120020940899849,
-0.0064132981933653355,
-0.026810836046934128,
-0.029494576156139374,
-0.037910349667072296,
0.004942166153341532,
0.10473532229661942,
0.04258072376251221,
0.04688914120197296,
0.02055497094988823,
0.08739306777715683,
-0.051073990762233734,
-0.056193817406892776,
0.03989014774560928,
0.10614324361085892,
0.10816193372011185,
-0.06706291437149048,
-0.1032010093331337,
0.10935163497924805,
-0.0869131088256836,
0.05136449635028839,
0.09097977727651596,
-0.00034207763383165,
0.036742959171533585,
0.06557458639144897,
0.015558762475848198,
0.041478872299194336,
0.05379767715930939,
0.044986166059970856,
0.052762720733881,
-0.03260483965277672,
-0.11671826988458633,
-0.015950053930282593,
-0.12167558819055557,
0.1271306574344635,
0.058168668299913406,
0.06177936866879463,
0.09698650240898132,
-0.04116082936525345,
-0.14180026948451996,
0.05510782450437546,
0.11510376632213593,
-0.06618450582027435,
-0.08189196139574051,
-0.1131289005279541,
-0.032691601663827896,
-0.047442998737096786,
-0.036504268646240234,
-0.00018143115448765457,
-0.021907534450292587,
0.1256258487701416,
-0.07693089544773102,
-0.002398148411884904,
-0.07228811830282211,
-0.03156174719333649,
-0.10442405194044113,
-0.12083020806312561,
0.06452024728059769,
0.023280654102563858,
-0.12327982485294342,
0.05326744541525841,
-0.10668506473302841,
-0.04141400381922722,
0.03063914179801941,
0.032452292740345,
-0.06073354184627533,
0.10486377030611038,
0.055419012904167175,
-0.07586869597434998,
-0.15244129300117493,
-0.05566827952861786,
-0.02794465608894825,
0.03897276893258095,
-0.0556885227560997,
0.021502161398530006,
0.11105835437774658,
-0.08975164592266083,
0.12003771960735321,
-0.05804689601063728,
0.09578005224466324,
0.16805750131607056,
-0.0525810681283474,
0.10242759436368942,
0.16210992634296417,
-0.015168540179729462,
0.014232892543077469,
0.10595468431711197,
0.11556274443864822,
-0.10053961724042892,
0.07771386951208115,
0.03364092484116554,
0.1618616282939911,
-0.0019336554687470198,
0.09303547441959381,
0.02486816793680191,
0.14183826744556427,
-0.09984414279460907,
0.03680809959769249,
0.07649239897727966,
-0.006161888595670462,
0.0009471013909205794,
0.10041241347789764,
-0.03340931981801987,
-0.05444134399294853,
-0.10247398912906647,
0.08091466873884201,
0.02533523365855217,
-0.0712110847234726,
0.008062939159572124,
-0.01179460994899273,
-0.09238220006227493,
0.06714353710412979,
-0.1418580859899521,
-0.015418813563883305,
0.04545380920171738,
-0.01895238645374775,
0.1477123200893402,
-0.08058219403028488,
0.06172655150294304,
-0.08097254484891891,
-0.06544433534145355,
-0.09249421954154968,
0.0912909135222435,
0.06346992403268814,
0.07048496603965759,
0.019243743270635605,
-0.0343124158680439,
-0.11357678472995758,
0.012295123189687729,
-0.10731079429388046,
-0.07141822576522827,
0.004973109345883131,
0.09673207998275757,
-0.012518288567662239,
-0.005096130073070526,
-0.1377790868282318,
0.03079056553542614,
0.05535454675555229,
-0.016921665519475937,
-0.11124050617218018,
-0.016091151162981987,
0.014426523819565773,
-0.013692475855350494,
0.09224793314933777,
0.09914105385541916,
-0.04653220251202583,
0.10359467566013336,
0.01440370362251997,
0.03967641666531563,
-0.10381147265434265,
-0.00965096428990364,
0.0687677338719368,
-0.09810355305671692,
0.07101507484912872,
0.06761115789413452,
0.0021730216685682535,
-0.05114135891199112,
0.00044290200457908213,
-0.07948316633701324,
0.12679916620254517,
-0.07476784288883209,
-0.13291959464550018,
-0.11398404091596603,
0.0219797994941473,
-0.020489275455474854,
0.05436978489160538,
0.10752243548631668,
0.03549685701727867,
-0.002830824349075556,
0.11695865541696548,
0.080777108669281,
0.008161614648997784,
-0.15112102031707764,
-0.07187438011169434,
0.07274593412876129,
-0.06268931180238724,
-0.0983068123459816,
-0.009730082005262375,
0.17321261763572693,
-0.11010493338108063,
0.047466475516557693,
-0.07452931255102158,
-0.04218592867255211,
0.08373066782951355,
0.05740976333618164,
0.1950579136610031,
-0.021840330213308334,
0.07402857393026352,
0.06283371150493622,
-0.04049278050661087,
0.041259121149778366,
0.13009516894817352,
-0.07963220030069351,
0.07795080542564392,
0.08164532482624054,
0.08619747310876846,
-0.08587916940450668,
-0.010906234383583069,
-0.0988813191652298,
-0.09115364402532578,
-0.1180146336555481,
-0.056361790746450424,
-0.00496816448867321,
-0.12849944829940796,
-0.023004896938800812,
-0.00582018680870533,
0.06655488908290863,
-0.10972993075847626,
0.014917121268808842,
-0.004903644323348999,
-0.03551362454891205,
-0.08833219110965729,
-0.04006378725171089,
-0.050624486058950424,
-0.048158396035432816,
-0.007080440409481525,
0.08058024942874908,
0.09880436956882477,
-0.03775229677557945,
-0.03876499459147453,
-0.028353067114949226,
-0.08339517563581467,
0.056267499923706055,
-0.07698899507522583,
0.079006627202034,
0.022295130416750908,
0.06709182262420654,
0.006534127984195948,
-0.011888098903000355,
-0.03493558615446091,
0.0769350603222847,
0.05319713056087494,
0.06459035724401474,
0.10392796248197556,
-0.10594159364700317,
-0.09810484945774078,
0.014987068250775337,
-0.17005042731761932,
0.017992330715060234,
-0.11764790117740631,
-0.13341794908046722,
-0.0052803801372647285,
-0.03552514687180519,
0.07113824039697647,
0.07113739848136902,
0.046448033303022385,
0.09904360771179199,
0.10142842680215836,
0.04548342898488045,
-0.021684519946575165,
0.004235837142914534,
-0.0652703195810318,
0.007281115744262934,
0.0791502520442009,
0.03808794543147087,
-0.04716629907488823,
0.04155450686812401,
0.10330929607152939,
0.10956113785505295,
-0.10873826593160629,
0.11568665504455566,
0.042729295790195465,
-0.04573104903101921,
0.09164181351661682,
0.04115836322307587,
0.04963286966085434,
-0.05773988738656044,
0.017141712829470634,
-0.10356302559375763,
0.048573773354291916,
-0.04801511391997337,
-0.05791737139225006,
-0.0473204143345356,
-0.024488216266036034,
0.04235183447599411,
0.045015450567007065,
0.12231706082820892,
0.11527355015277863,
0.109891876578331,
-0.06709026545286179,
0.11405801773071289,
-0.028505640104413033,
-0.12365250289440155,
0.09140931814908981,
-0.1507503092288971,
-0.09361997991800308,
0.0891454741358757,
0.022946113720536232,
-0.12587250769138336,
-0.019259437918663025,
-0.09646527469158173,
0.016013432294130325,
0.05764967203140259,
0.10552804172039032,
0.13090729713439941,
-0.11977165192365646,
0.03727265074849129,
-0.03466076776385307,
0.08858455717563629,
0.0751013532280922,
-0.06244007498025894,
-0.0038874074816703796,
-0.07158469408750534,
0.12506841123104095,
-0.044472694396972656,
-0.023428170010447502,
-0.09764882922172546,
0.05590616539120674,
0.018780436366796494,
-0.03271155804395676,
-0.012223049998283386,
0.1005028486251831,
0.0691685825586319,
-0.013292074203491211,
-0.01767626218497753,
-0.025098945945501328,
0.06594464927911758,
-0.05595613643527031,
-0.0584108866751194,
0.005751613527536392,
-0.0481729656457901,
0.09937993437051773,
-0.07380738854408264,
-0.06348451226949692,
0.08057430386543274,
-0.08445107936859131,
0.05824078619480133,
0.024247054010629654,
0.10774876922369003,
0.14526832103729248,
0.12530703842639923,
-0.037087008357048035,
-0.030078725889325142,
0.096101775765419,
0.010491144843399525,
-0.04481325298547745,
-0.14467723667621613,
-0.010834453627467155,
0.16708628833293915,
-0.02651594765484333,
-0.049215808510780334,
0.04332636296749115,
-0.03881670907139778,
0.09259311109781265,
0.09200713783502579,
-0.009895808063447475,
-0.07655522227287292,
0.07015448808670044,
0.01305077038705349,
0.16483639180660248,
-0.007068709935992956,
-0.1005367785692215,
-0.11700132489204407,
0.09422092139720917,
0.21790845692157745,
-0.06345316022634506,
0.12869839370250702,
-0.008912081830203533,
0.10243230313062668,
-0.05059121176600456,
0.11073441058397293,
-0.019769364967942238,
-0.029489848762750626,
-0.03856540471315384,
-0.09506098926067352,
-0.044467706233263016,
0.03470933064818382,
-0.017756715416908264,
0.038790397346019745,
-0.043540917336940765,
0.022245541214942932,
-0.12449419498443604,
0.08855460584163666,
0.06354809552431107,
0.10106881707906723,
-0.07976765185594559,
-0.023205727338790894,
0.036037493497133255,
0.05108243599534035,
-0.05420956015586853,
-0.04343646764755249,
-0.0962601900100708,
0.030505912378430367,
-0.03809307515621185,
-0.07932160794734955,
0.06233856827020645,
0.08974514156579971,
-0.09504835307598114,
-0.0016045914962887764,
-0.06370966136455536,
0.06545539945363998,
-0.04111794754862785,
-0.07025082409381866,
-0.04264863580465317,
-0.030487412586808205,
0.09493334591388702,
-0.049803584814071655,
-0.13132254779338837,
-0.055259134620428085,
0.14715978503227234,
-0.12962181866168976,
0.015936700627207756,
-0.021346597000956535,
-0.0799788162112236,
-0.05593198537826538,
0.049802377820014954,
-0.053665101528167725,
0.05461639165878296,
0.027400963008403778,
0.12799282371997833,
0.16837544739246368,
0.13756181299686432,
0.15824827551841736,
0.12487698346376419,
-0.0006681382656097412,
0.0021897011902183294,
-0.18028508126735687,
0.0284434761852026,
0.04220700263977051,
-0.14730529487133026,
-0.03332771733403206,
0.10239644348621368,
-0.011827214621007442,
-0.10573964565992355,
0.0352930948138237,
0.043596301227808,
-0.06849502772092819,
-0.02510145865380764,
0.040098417550325394,
-0.008326909504830837,
0.09440423548221588,
0.06907853484153748,
-0.06297097355127335,
0.07113563269376755,
0.09084074944257736,
-0.08432472497224808,
0.09273140132427216,
-0.07188835740089417,
-0.05773155391216278,
0.07782294601202011,
-0.09724222868680954,
0.060165729373693466,
-0.09534070640802383,
-0.006773476954549551,
0.00511223403736949,
-0.06783757358789444,
-0.060459982603788376,
-0.04223064333200455,
0.027756057679653168,
0.022708412259817123,
-0.08524945378303528,
0.04128990322351456,
-0.01335944328457117,
-0.11664321273565292,
0.05574183166027069,
-0.036101486533880234,
0.04557795077562332,
0.0001952357852132991,
0.02827959880232811,
-0.09244979918003082,
-0.10405027121305466,
-0.08144038170576096,
0.04464735835790634,
0.1193634569644928,
0.023589899763464928,
-0.03772079199552536,
-0.006252214778214693,
-0.0757165178656578,
0.036614399403333664,
-0.06625980138778687,
-0.019363217055797577,
0.0443737618625164,
-0.012249074876308441,
-0.015219487249851227,
0.06649661064147949,
0.04249202087521553,
-0.019353242591023445,
-0.06945692002773285,
0.08347374200820923,
-0.14451123774051666,
-0.08257658034563065,
0.11490951478481293,
0.08029192686080933,
-0.0830376073718071,
-0.08721859008073807,
-0.024192851036787033,
-0.0802081897854805,
0.05073951929807663,
0.08435273170471191,
0.07975289225578308,
0.053556930273771286,
0.0632302314043045,
-0.04812852665781975,
0.0977376326918602,
0.1227600947022438,
0.1517128199338913,
-0.10557346791028976,
-0.035207588225603104,
0.05467870458960533,
0.027809904888272285,
-0.10801009833812714,
-0.1952252835035324,
-0.02715771645307541,
-0.05822024121880531,
-0.008424870669841766,
0.10415706783533096,
0.07593490183353424,
-0.01893363706767559,
-0.05171596258878708,
-0.03284608945250511,
0.011186564341187477,
0.10190446674823761,
0.032630328088998795,
-0.018753301352262497,
-0.020348843187093735,
-0.05355922505259514,
0.031170319765806198,
-0.03577873110771179,
0.043124329298734665,
-0.007880653254687786,
0.0796671062707901,
0.11777844280004501,
0.01448353473097086,
-0.10880763828754425,
-0.020255647599697113,
0.022637901827692986,
-0.00535138975828886,
0.07545913755893707,
-0.004233338870108128,
0.003928148187696934,
0.03185838833451271,
-0.13621187210083008,
-0.11258207261562347,
-0.12512768805027008,
-0.06226004660129547,
-0.06612053513526917,
0.027625318616628647,
0.0020442274399101734,
-0.1431630551815033,
-0.11084068566560745,
-0.0031662913970649242,
0.08017660677433014,
0.08333120495080948,
-0.02274664305150509,
-0.06695455312728882,
0.14925242960453033,
0.03766138106584549,
-0.026680003851652145,
0.02097293920814991,
0.009786194190382957,
0.15123705565929413,
0.05037657916545868,
-0.021136220544576645,
0.007689983583986759,
0.004164020996540785,
-0.0838102251291275,
-0.005479729268699884,
-0.019620686769485474,
0.10817960649728775,
-0.029783915728330612,
-0.04265349358320236,
0.029683364555239677,
0.11887496709823608,
-0.029537709429860115,
0.02644810825586319,
-0.0011273558484390378,
0.09728787839412689,
0.02415853552520275,
0.07330615073442459,
0.02194543369114399,
0.041358500719070435,
-0.08913441002368927,
-0.01910954713821411,
0.1026478186249733,
-0.09875743091106415,
0.024612082168459892,
-0.12725263833999634,
0.10460908710956573,
-0.20663952827453613,
-0.16575366258621216,
-0.10888247191905975,
-0.027625123038887978,
0.047511182725429535,
-0.02050481177866459,
-0.1429232954978943,
0.03864879533648491,
0.10248400270938873,
-0.08093051612377167,
0.07426270097494125,
0.10544155538082123,
0.0022204031702131033,
0.11451274901628494,
-0.047628261148929596,
-0.05761059373617172,
-0.09886463731527328,
-0.043994560837745667,
-0.08265713602304459,
0.048060156404972076,
0.0023160928394645452,
0.07078927755355835,
0.05743714049458504,
-0.08040883392095566,
0.023209556937217712,
0.1039460077881813,
-0.024425499141216278,
0.0491718165576458,
-0.004074987024068832,
-0.05518524348735809,
-0.055420055985450745,
-0.019137531518936157,
-0.03317816182971001,
-0.0014458908699452877,
-0.07696481794118881,
0.033684052526950836,
0.08732300251722336,
0.0194474495947361,
0.04325108975172043,
-0.0800209566950798,
0.038249433040618896,
-0.1041293814778328,
-0.05465555936098099,
0.03034435771405697,
-0.006717335898429155,
0.0948854312300682,
-0.05858411267399788,
0.028669262304902077,
0.05690997093915939,
-0.07086529582738876,
-0.15859881043434143,
-0.07059942930936813,
0.018119337037205696,
0.1433236300945282,
-0.105374276638031,
-0.1353882998228073,
-0.06441431492567062,
0.003138941014185548,
-0.07174523174762726,
-0.05664192885160446,
-0.051158152520656586,
-0.08226941525936127,
-0.04160277172923088,
-0.15728892385959625,
0.057815466076135635,
-0.12280332297086716,
-0.13273434340953827,
0.045391425490379333,
-0.050637226551771164,
-0.08957618474960327,
0.03745540603995323,
-0.03870096057653427,
0.02638111263513565,
-0.040871236473321915,
0.10120828449726105,
-0.017937244847416878,
-0.05046370252966881,
-0.1326867789030075,
0.014246904291212559,
-0.011521893553435802,
-0.05204497650265694,
0.08064180612564087,
0.08064108341932297,
-0.06497740000486374,
0.03598787635564804,
-0.027046654373407364,
-0.10225283354520798,
-0.0810793936252594,
0.001170395058579743,
0.00012159185280324891,
-0.07855358719825745,
0.062056541442871094,
-0.11232911050319672,
-0.057318635284900665,
-0.007923858240246773,
-0.1424272209405899,
-0.008046484552323818,
-0.05122557282447815,
-0.050156671553850174,
-0.08777133375406265,
0.07928614318370819,
-0.04616185650229454,
-0.1414618343114853,
0.10936666280031204,
-0.14760734140872955,
0.06857232004404068,
-0.10375948250293732,
-0.08579885959625244,
-0.018578629940748215,
0.06962255388498306,
0.008038782514631748,
0.028088776394724846,
0.008830077946186066,
0.0444454662501812,
0.0646730288863182,
-0.0031037635635584593,
-0.05092469975352287,
0.013603366911411285,
-0.017618775367736816,
0.09954846650362015,
0.02453393116593361,
0.06279881298542023,
0.12678411602973938,
-0.0261436365544796,
0.12153535336256027,
-0.08207298815250397,
-0.002100344281643629,
-0.06407158076763153,
-0.10541243851184845,
-0.08565154671669006,
0.024548476561903954,
-0.1477457582950592,
0.08430906385183334,
0.030816953629255295,
-0.05110226571559906,
0.03922545909881592,
-0.03485248610377312,
0.015438320115208626,
-0.06974315643310547,
0.13436633348464966,
-0.029931845143437386,
-0.052019279450178146,
-0.07344948500394821,
0.0796048641204834,
0.0014946366427466273,
-0.1127016693353653,
0.0038611204363405704,
0.05424704775214195,
-0.02950133942067623,
0.018856514245271683,
0.11998242884874344,
0.13703538477420807,
0.12169252336025238,
0.10788946598768234,
-0.03769485279917717,
0.10141725093126297,
-0.04619714245200157,
0.08946738392114639,
-0.0316394679248333,
0.04160374775528908,
-0.02557205595076084,
-0.05642162263393402,
0.11604245752096176,
-0.10061617940664291,
0.04049602150917053,
-0.02554401382803917,
-0.06148567423224449,
0.014000684954226017,
-0.0455937534570694,
0.044671595096588135,
0.006874975748360157,
0.0442134290933609,
0.08474534749984741,
0.08138971775770187,
-0.11116305738687515,
0.08614496886730194,
-0.17017801105976105,
0.05849115550518036,
0.020686790347099304,
-0.02447514235973358,
-0.008525046519935131,
-0.035905882716178894,
-0.025592010468244553,
0.008986478671431541,
-0.10393283516168594,
-0.035681162029504776,
0.1029401421546936,
-0.06430558860301971,
0.04894322529435158,
0.05721019208431244,
-0.06093882396817207,
-0.08869805186986923,
-0.13347704708576202,
0.06046874448657036,
-0.02552640624344349,
-0.047436416149139404,
0.0009395767701789737,
0.047028761357069016,
-0.11771244555711746,
0.05019013211131096,
0.032613035291433334,
-0.010695870965719223,
0.042379703372716904,
-0.09387720376253128,
-0.018978625535964966,
0.05944833904504776,
-0.05795992910861969,
0.040175918489694595,
-0.00365814077667892,
0.10664785653352737,
-0.03803356736898422,
-0.09552189707756042,
0.15022078156471252,
0.04542358219623566,
0.093691386282444,
0.012899495661258698,
-0.061549652367830276,
0.14453643560409546,
-0.06295966356992722,
-0.008707283064723015,
0.07664123177528381,
0.03462527319788933,
0.003081694943830371,
0.013003713451325893,
0.006843694485723972,
0.040043387562036514,
0.07678647339344025,
-0.10406914353370667,
0.1976882666349411,
0.021117959171533585,
0.08553498238325119,
-0.03740677610039711,
0.04661879315972328,
-0.01039622351527214,
0.03895306587219238,
0.0017793432343751192,
-0.04343419522047043,
-0.016868818551301956,
0.02861352637410164,
0.0014847060665488243,
-0.06578399240970612,
0.10357999056577682,
-0.06685791164636612,
-0.09129846096038818,
0.041398972272872925,
-0.029012111946940422,
-0.07703869789838791,
-0.02641386166214943,
-0.023457124829292297,
-0.050505902618169785,
0.1159767284989357,
-0.021528111770749092,
0.09645875543355942,
0.005307098384946585,
0.08771868795156479,
-0.07966060191392899,
-0.0808960348367691,
-0.02802266553044319,
-0.062167637050151825,
0.024136466905474663,
-0.034814510494470596,
-0.09222550690174103,
-0.10649934411048889,
-0.11958734691143036,
0.07375817745923996,
-0.0059935855679214,
0.03366462141275406,
-0.07821199297904968,
0.08838239312171936,
0.04471459239721298,
-0.06732621788978577,
0.055209577083587646,
-0.029463959857821465,
0.005262582562863827,
-0.11355610191822052,
0.01030332874506712,
0.0586463138461113,
0.054411496967077255,
-0.11315333098173141,
-0.007384131196886301,
-0.08020545542240143,
-0.08917461335659027,
0.1129886731505394,
0.05851222947239876,
-0.0465611070394516,
0.0019454212160781026,
0.049487125128507614,
-0.02813875861465931,
-0.09464433044195175,
0.009943220764398575,
0.04358286038041115,
-0.09031636267900467,
-0.015310182236135006,
0.05382874980568886,
-0.0810011625289917,
-0.005537132266908884,
-0.0899324119091034,
-0.07512692362070084,
0.03185594454407692,
-0.1114814281463623,
-0.09446122497320175,
0.04996905103325844,
0.01508772000670433,
0.00042026201845146716,
-0.07665019482374191,
0.014469393528997898,
0.013171151280403137,
0.01944546587765217,
0.04872315376996994,
0.11556857079267502,
0.07222608476877213,
-0.04637320712208748,
0.1026877835392952,
-0.0727432370185852,
0.08771423250436783,
0.022976666688919067,
0.017034322023391724,
-0.07696010917425156,
-0.12034149467945099,
0.02747941017150879,
0.031542953103780746,
0.02391957677900791,
-0.09032680094242096,
-0.09112578630447388,
-0.045771144330501556,
0.07207328826189041,
-0.060665443539619446,
-0.09640009701251984,
0.0744340643286705,
-0.0027952948585152626,
0.05348188802599907,
0.04941755160689354,
0.08034634590148926,
-0.09290693700313568,
-0.11706307530403137,
-0.1288411170244217,
-0.017033133655786514,
-0.08696478605270386,
0.00590308615937829,
-0.05336013436317444,
0.01154661551117897,
0.07326967269182205,
-0.029483791440725327,
-0.0544031597673893,
0.048012908548116684,
-0.10784163326025009,
0.12095323204994202,
-0.03668378293514252,
0.10439596325159073,
-0.08306018263101578,
-0.005875743925571442,
-0.03498902544379234,
-0.12284083664417267,
0.07709066569805145,
0.053936511278152466,
0.03736028075218201,
0.053416769951581955,
0.1260155886411667,
0.06795692443847656,
0.052345335483551025,
0.07109661400318146,
-0.023918135091662407,
-0.019113151356577873,
0.005041355267167091,
0.01003064401447773,
0.14158448576927185,
-0.1445571482181549,
0.07485616207122803,
-0.09318168461322784,
0.0006894564721733332,
-0.08951269090175629,
-0.1390337347984314,
0.05489746108651161,
0.013533064164221287,
-0.014475525356829166,
0.09330854564905167,
0.07867655903100967,
-0.04815332591533661,
0.09966437518596649,
-0.060769498348236084,
0.0702139139175415,
-0.04369955509901047,
-0.0679858922958374,
0.056881848722696304,
0.03971235081553459,
-0.062240444123744965,
0.06295449286699295,
0.004183907527476549,
-0.06042628735303879,
-0.10205522179603577,
-0.09218207746744156,
0.02457902766764164,
0.1335250586271286,
-0.023860592395067215,
0.15289580821990967,
0.0512823686003685,
-0.039779920130968094,
0.017142198979854584,
-0.04251738265156746,
0.07736355066299438,
-0.053590066730976105,
-0.1482505351305008,
-0.01711914874613285,
0.10484355688095093,
-0.0874318778514862,
-0.04375598579645157,
0.01322433166205883,
-0.046717721968889236,
-0.13194571435451508,
-0.043793682008981705,
0.04420853406190872,
0.045338261872529984,
-0.015435431152582169,
-0.09273925423622131,
0.04002005606889725,
-0.02805289626121521,
-0.1143258661031723,
-0.01404022891074419,
0.04091431573033333,
-0.09344306588172913,
-0.023455176502466202,
-0.0951572135090828,
0.07092000544071198,
-0.0833316370844841,
0.030969902873039246,
0.08557974547147751,
0.08008002489805222,
-0.04617563635110855,
-0.017625262960791588,
0.009507609531283379,
0.0366545207798481,
-0.15909044444561005,
0.010045900009572506,
0.07024875283241272,
0.03907996416091919,
0.13616064190864563,
-0.010027497075498104,
-0.08877106010913849,
0.04827987775206566,
-0.12359718233346939,
0.0025410454254597425,
0.02364930510520935,
0.031788840889930725,
-0.1089910939335823,
-0.025404874235391617,
-0.0019953525625169277,
0.0111001618206501,
-0.25465208292007446,
0.07319393008947372,
-0.09732221066951752,
0.013676105998456478,
-0.08888068795204163,
0.00520772859454155,
0.10229314118623734,
-0.044175345450639725,
0.05820069462060928,
0.07404055446386337,
-0.019500387832522392,
0.08100816607475281,
-0.1628044843673706,
0.0028851155657321215,
0.07555027306079865,
0.005592005327343941,
-0.16224369406700134,
0.04471443593502045,
-0.09970080107450485,
0.0392097607254982,
-0.053248148411512375,
0.018201956525444984,
0.04781215265393257,
-0.08911343663930893,
-0.010184015147387981,
-0.05103355646133423,
0.019393032416701317,
0.13466954231262207,
-0.04473990574479103,
0.07714318484067917,
-0.09745147824287415,
0.015181896276772022,
-0.0008605052717030048,
0.04031771421432495,
0.06640664488077164,
-0.026924042031168938,
-0.14650997519493103,
0.023830221965909004,
0.0359015017747879,
-0.03850296512246132,
-0.04186481237411499,
0.06411314010620117,
-0.05341169610619545,
-0.08484967052936554,
-0.036559879779815674,
-0.02583935856819153,
-0.052872590720653534,
0.04358137771487236,
0.06381881237030029,
0.056169137358665466,
-0.09051366150379181,
0.15063226222991943,
0.043386347591876984,
0.11556149274110794,
0.048497274518013,
0.07270525395870209,
-0.09907535463571548,
-0.13229668140411377,
-0.0005681741749867797,
-0.04756791517138481,
-0.11218075454235077,
-0.03186694532632828,
-0.026182854548096657,
-0.041240379214286804,
0.02466575801372528,
-0.06084192916750908,
-0.035612016916275024,
0.050287868827581406,
0.009177190251648426,
-0.09385751932859421,
-0.03239361569285393,
-0.024971026927232742,
-0.05996747314929962,
0.07392366230487823,
0.016646623611450195,
-0.02918003499507904,
0.08385530114173889,
-0.07767772674560547,
0.03751462697982788,
-0.0366247296333313,
0.07504607737064362,
-0.07284443825483322,
-0.02998894639313221,
-0.11860119551420212,
-0.0866369679570198,
-0.025384513661265373,
0.04369539022445679,
-0.06921659409999847,
-0.025334160774946213,
0.15032604336738586,
-0.009319599717855453,
0.1501598358154297,
0.019262803718447685,
0.031202074140310287,
-0.13526205718517303,
-0.026123465970158577,
0.1334856003522873,
0.10317651182413101,
0.11719796806573868,
-0.06367535144090652,
0.10993888974189758,
-0.06475614756345749,
-0.11980175226926804,
0.031287215650081635,
-0.13535428047180176,
0.028507916256785393,
0.08183656632900238,
0.026160910725593567,
0.17328527569770813,
-0.08686844259500504,
-0.023160167038440704,
-0.14546361565589905,
-0.08148960024118423,
0.09037891775369644,
-0.1350279301404953,
-0.007744657341390848,
0.008799271658062935,
-0.05417187139391899,
0.015513855963945389,
0.028883321210741997,
-0.020454686135053635,
0.00022174058540258557,
0.04588523507118225,
-0.009835631586611271,
0.10335159301757812,
-0.1268872171640396,
-0.05581646412611008,
0.031208138912916183,
0.0392119437456131,
-0.057323701679706573,
0.07186359167098999,
-0.047468915581703186,
0.024326680228114128,
-0.011252793483436108,
-0.014681132510304451,
-0.061398085206747055,
0.002221869770437479,
0.03510669618844986,
0.07037198543548584,
0.044704288244247437,
0.04045514762401581,
0.03180183097720146,
-0.01271072868257761,
-0.09246719628572464,
-0.06659877300262451,
-0.0009957558941096067,
-0.009990057907998562,
0.03381829708814621,
-0.019215300679206848,
0.07571417093276978,
-0.11413738131523132,
-0.03659924119710922,
-0.06920034438371658,
-0.00013229154865257442,
-0.05676741153001785,
-0.029498739168047905,
0.10898549854755402,
-0.09877669811248779,
-0.04493969306349754,
-0.03445160388946533,
-0.012368516996502876,
-0.12852692604064941,
-0.03751751407980919,
0.04529566317796707,
-0.1482488363981247,
0.046005092561244965,
0.09861920028924942,
0.06100168451666832,
-0.06205971539020538,
0.09150398522615433,
0.105596162378788,
0.10313566029071808,
0.11502981930971146,
0.01109354104846716,
0.08966239541769028,
-0.15887966752052307,
-0.01850597746670246,
0.07468687742948532,
0.032712407410144806,
0.0001306631020270288,
-0.05109838768839836,
0.09827986359596252,
-0.028697596862912178,
-0.046090856194496155,
0.06331655383110046,
0.1057538092136383,
0.05952952429652214,
0.031172756105661392,
0.10420412570238113,
-0.05683578550815582,
0.05236523598432541,
-0.03355037048459053,
-0.09945012629032135,
0.15380963683128357,
-0.04462245851755142,
0.07655800133943558,
0.13523831963539124,
-0.20044231414794922,
0.032872509211301804,
-0.0009260775987058878,
-0.05330808460712433,
0.002337744692340493,
-0.03171927109360695,
-0.07352165132761002,
-0.08713014423847198,
-0.08885806798934937,
-0.0991138219833374,
-0.03413328900933266,
-0.1717355102300644,
0.11781085282564163,
-0.012201092205941677,
-0.029675224795937538,
0.04312273487448692,
0.05176906660199165,
-0.10118521004915237,
-0.04345645755529404,
0.020045418292284012,
-0.023559438064694405,
0.07595793902873993,
-0.005582143552601337,
-0.1207847148180008,
-0.021804818883538246,
0.05452898517251015,
0.05304767191410065,
-0.10955703258514404,
-0.04551006481051445,
0.009518233127892017,
-0.011661897413432598,
-0.023637956008315086,
-0.052306242287158966,
-0.1490263193845749,
-0.12036442011594772,
-5.908531602472067e-05,
-0.10422313213348389,
0.033756647258996964,
-0.08420170098543167,
0.006643416825681925,
0.029581241309642792,
-0.017610661685466766,
-0.05698269233107567,
-0.03692631423473358,
0.03398510068655014,
-0.0940447598695755,
-0.06049560755491257,
0.0003085335192736238,
-0.06820197403430939,
0.11540478467941284,
-0.11898382753133774,
-0.02206612192094326,
-0.016006654128432274,
0.07390078157186508,
-0.010850350372493267,
-0.031014779582619667,
-0.057207901030778885,
0.052650630474090576,
-0.19078725576400757,
0.07244492322206497,
0.015186935663223267,
0.023636454716324806,
0.01984306611120701,
-0.003064958844333887,
0.10971973836421967,
-0.07379720360040665,
-0.062140271067619324,
0.08417786657810211,
-0.007898300886154175,
0.06422778218984604,
0.004067828878760338,
0.12993018329143524,
-0.10840591043233871,
-0.15324030816555023,
-0.05551332235336304,
0.04957602545619011,
0.0493081659078598,
0.12548229098320007,
-0.06696046143770218,
0.14206792414188385,
-0.1384667158126831,
-0.017637016251683235,
-0.03198087587952614,
-0.02650494873523712,
0.08862133324146271,
0.01035686768591404,
0.09368161112070084,
0.04949680343270302,
0.03411071375012398,
-0.1614118069410324,
0.023995421826839447,
-0.07619015127420425,
0.09666050970554352,
-0.0657648891210556,
0.029152341187000275,
0.08272059261798859,
0.007620319724082947,
-0.06808370351791382,
0.006998201832175255,
-0.016437556594610214,
-0.055544495582580566,
0.039628949016332626,
-0.04583617299795151,
-0.12185782194137573,
-0.017248908057808876,
0.07635752856731415,
-0.08638930320739746,
-0.14375819265842438,
0.0985121801495552,
0.08622604608535767,
0.07097849994897842,
0.12068567425012589,
0.13184170424938202,
0.06303847581148148,
0.08831899613142014,
0.03507182002067566,
0.05566487833857536,
-0.08263831585645676,
0.007672579027712345,
0.054618097841739655,
0.004929992835968733,
0.013507954776287079,
0.015316151082515717,
0.07360857725143433,
-0.03578701615333557,
-0.09021013230085373,
0.08499281108379364,
-0.09101078659296036,
0.012182964943349361,
0.09414711594581604,
0.0504322424530983,
-0.018651165068149567,
-0.06800104677677155,
0.05359715595841408,
0.09983806312084198,
0.05312388017773628,
-0.07702584564685822,
0.10820578783750534,
0.09899800270795822,
-0.015784353017807007,
0.09500667452812195,
-0.0585143119096756,
0.004788822028785944,
-0.08962219953536987,
0.11540994048118591,
0.07233595848083496,
-0.0659136027097702,
-0.007262994069606066,
-0.10859475284814835,
0.027057545259594917,
-0.021717015653848648,
0.08291516453027725,
-0.0017105556325986981,
0.07375417649745941,
0.12929053604602814,
-0.001069310586899519,
-0.018393944948911667,
-0.043507400900125504,
0.061174459755420685,
0.061397213488817215,
-0.08866054564714432,
-0.05478943884372711,
0.09329672902822495,
-0.04161117225885391,
-0.08511948585510254,
0.08987269550561905,
-0.020671308040618896,
-0.06124473735690117,
-0.09075504541397095,
-0.036655351519584656,
0.09958965331315994,
0.006800793576985598,
0.043780021369457245,
0.016255995258688927,
0.08114362508058548,
0.1744319200515747,
0.07054288685321808,
-0.027489179745316505,
0.1498648077249527,
-0.0853273943066597,
0.032810311764478683,
-0.05805592983961105,
-0.048793260008096695,
-0.09496248513460159,
-0.07216902077198029,
-0.0006151044508442283,
0.0026178164407610893,
-0.11290372908115387,
0.03026566468179226,
0.036814793944358826,
0.16425107419490814,
0.16776511073112488,
-0.05035412684082985,
-0.032842133194208145,
-0.000498989422339946,
0.010551630519330502,
0.08011844754219055,
-0.11870046705007553,
-0.01274286862462759,
-0.2121187299489975,
-0.019749708473682404,
-0.09549365937709808,
0.1329003870487213,
-0.1902955174446106,
-0.10340023040771484,
0.05908060446381569,
0.03434447944164276,
-0.05356055498123169,
-0.08304647356271744,
-0.026317473500967026,
-0.003166197333484888,
0.030056267976760864,
0.06847642362117767,
0.09708361327648163,
0.0684405267238617,
-0.007879981771111488,
-0.045708369463682175,
0.02407284639775753,
0.09901289641857147,
-0.1793847382068634,
-0.04182107746601105,
-0.05578354373574257,
0.03794689476490021,
0.08522200584411621,
0.04339854046702385,
-0.04172542318701744,
-0.06033752113580704,
0.017380934208631516,
0.06564628332853317,
0.07452039420604706,
0.03196321427822113,
-0.11862236261367798,
-0.06373129785060883,
-0.3031575083732605,
0.08156948536634445,
-0.11011805385351181,
0.14121150970458984,
0.07196605205535889,
-0.09010454267263412,
0.0595676451921463,
-0.12508246302604675,
0.005300522316247225,
-0.003818801837041974,
-0.1674276441335678,
-0.05196300894021988,
0.030684396624565125,
-0.02274901792407036,
-0.09347701817750931,
-0.024952996522188187,
-0.16329364478588104,
-0.04230190068483353,
-0.14053678512573242,
0.03796711936593056,
0.020213527604937553,
-0.13680513203144073,
0.0087341433390975,
0.07222365587949753,
-0.0008760196506045759,
-0.07277479022741318,
-0.11325477063655853,
-0.0806044414639473,
-0.03499646484851837,
0.010455016978085041,
0.07780271768569946,
-0.10350606590509415,
-0.0675189420580864,
-0.12710922956466675,
0.0030872670467942953,
0.079289510846138,
-0.14249978959560394,
0.0031826412305235863,
-0.05342302471399307,
-0.1221897080540657,
0.06221345439553261,
0.028464853763580322,
-0.0507589727640152,
0.09511708468198776,
0.0843644067645073,
0.04026440531015396,
0.13068117201328278,
0.01352432370185852,
-0.08164510875940323,
-0.07392148673534393,
0.07075609266757965,
0.017227889969944954,
0.09745439141988754,
-0.034143444150686264,
-0.043754611164331436,
-0.14250856637954712,
-0.12454107403755188,
0.04703189805150032,
0.00415587704628706,
-0.01867596060037613,
0.12997335195541382,
0.0697198435664177,
0.03824044391512871,
-0.1347082406282425,
-0.14914995431900024,
-0.04454989731311798,
-0.047612305730581284,
0.059681039303541183,
0.1191270723938942,
-0.1037466824054718,
-0.02350110188126564,
-0.2566414475440979,
0.02585780620574951,
0.07493892312049866,
-0.020208824425935745,
0.01790618896484375,
-0.030247313901782036,
-0.04895060509443283,
0.11583422124385834,
0.042248766869306564,
0.07978498190641403,
-0.013373841531574726,
0.04562707617878914,
0.0765242651104927,
-0.10724063962697983,
0.04351026564836502,
-0.021171920001506805,
0.23277755081653595,
-0.048963576555252075,
-0.07829014956951141,
0.13587146997451782,
0.01659839041531086,
0.08093566447496414,
0.01338434498757124,
0.07096391171216965,
0.045921195298433304,
0.06258277595043182,
-0.08822586387395859,
0.0716458112001419,
0.0335150808095932,
0.09218980371952057,
0.0818050280213356,
-0.007519443053752184,
0.06827430427074432,
0.013466733507812023,
-0.07590465247631073,
0.08114053308963776,
-0.016454244032502174,
0.11405351758003235,
0.026043767109513283,
-0.04755794256925583,
0.06030402332544327,
-0.11038105934858322,
-0.023106787353754044,
0.016334103420376778,
-0.06419678032398224,
-0.08908821642398834,
-0.0803740844130516,
0.04950660467147827,
-0.054651252925395966,
0.04678432643413544,
-0.03813199698925018,
-0.022098220884799957,
-0.0027981004677712917,
-0.03498838096857071,
0.018490618094801903,
-0.060861025005578995,
0.001796051161363721,
0.07157785445451736,
0.07453650236129761,
-0.08405966311693192,
0.0668138638138771,
0.10368512570858002,
-0.13412323594093323,
-0.027239933609962463,
-0.11862288415431976,
0.06627324968576431,
-0.05278916284441948,
-0.1255442500114441,
0.07314599305391312,
0.00478674890473485,
-0.02511565387248993,
0.05315898358821869,
0.0971418172121048,
-0.19218535721302032,
-0.06100180000066757,
-0.015513356775045395,
0.004265876021236181,
-0.05315684527158737,
0.018956482410430908,
-0.08782733231782913,
0.056489892303943634,
0.0022888286039233208,
0.0752897560596466,
-0.0270039401948452,
0.2147972583770752,
0.008135794661939144,
0.007234975229948759,
0.08482765406370163,
-0.1123015433549881,
0.08007524907588959,
0.17628738284111023,
-0.01990259252488613,
0.04675405099987984,
0.07003849744796753,
-0.02564084902405739,
-0.0738968774676323,
-0.06379540264606476,
-0.08107384294271469,
-0.05388873815536499,
-0.16315072774887085,
0.020069142803549767,
0.06671873480081558,
-0.03475385904312134,
-0.03561446815729141,
-0.03740920498967171,
0.05586794391274452,
0.02887927182018757,
-0.04941626265645027,
-0.10828914493322372,
-0.004238966852426529,
-0.1780467927455902,
0.09594301134347916,
0.046428434550762177,
0.016690844669938087,
0.03327712416648865,
0.04854573309421539,
0.09282679110765457,
-0.06379152089357376,
0.1343575268983841,
0.05100003257393837,
-0.06995746493339539,
0.011901256628334522,
0.05903978273272514,
0.0914316400885582,
0.06720373034477234,
0.06811497360467911,
0.05255924165248871,
-0.023305151611566544,
0.04258570447564125,
0.016977759078145027,
0.09027136862277985,
0.07798873633146286,
-0.12463119626045227,
-0.09372825175523758,
0.04271114245057106,
-0.024725312367081642,
-0.004872719757258892,
-0.06917206943035126,
0.08254299312829971,
-0.12979282438755035,
0.006868686992675066,
0.0274979081004858,
-0.018532102927565575,
0.006150450557470322,
-0.044749464839696884,
0.008083761669695377,
-0.0587962381541729,
0.12155567109584808,
-0.04028921574354172,
-0.002585279755294323,
-0.13186131417751312,
-0.07751473784446716,
0.07306975871324539,
-0.02100709080696106,
0.013951289467513561,
-0.07092420756816864,
0.06414374709129333,
0.03918175399303436,
0.07428453862667084,
-0.0035418281331658363,
0.16569755971431732,
-0.00447920523583889,
-0.09399892389774323,
-0.07245449721813202,
0.16788984835147858,
0.10124097019433975,
0.04064518213272095,
-0.004999612458050251,
-0.059964220970869064,
0.0069634453393518925,
0.12423443794250488,
0.06303462386131287,
-0.09009234607219696,
-0.048504538834095,
-0.09228385984897614,
0.04812842607498169,
0.02186691015958786,
-0.020733145996928215,
-0.00016022412455640733,
-0.10675770789384842,
-0.06968946754932404,
0.10580264776945114,
-0.04315019026398659,
-0.02597435750067234,
-0.04519496113061905,
0.08007711172103882,
0.08374886214733124,
-0.00026403722586110234,
0.07417324930429459,
-0.0562794990837574,
-0.03728795051574707,
0.06827946752309799,
-0.006392889656126499,
0.1466708928346634,
-0.0051310108974576,
0.13639986515045166,
0.03505807742476463,
0.012982623651623726,
0.10095500200986862,
0.08804309368133545,
0.030579308047890663,
-0.09609641879796982,
-0.13267917931079865,
-0.09613368660211563,
-0.006511526647955179,
-0.044425707310438156,
-0.0027652676217257977,
-0.02719341591000557,
-0.01865965500473976,
-0.038557182997465134,
-0.011327394284307957,
-0.030152523890137672,
0.10533489286899567,
0.09670130908489227,
-0.040278393775224686,
-0.028723450377583504,
0.11164180189371109,
-0.07393404096364975,
-0.011771843768656254,
-0.07939979434013367,
0.055860135704278946,
-0.11148396879434586,
0.12307429313659668,
0.002621770603582263,
-0.018519917502999306,
0.028854481875896454,
0.03703633323311806,
-0.039265602827072144,
-0.060403019189834595,
-0.07008286565542221,
0.1135781779885292,
0.1334766149520874,
-0.0026821123901754618,
-0.029341109097003937,
-0.026274902746081352,
0.043600816279649734,
-0.07223740965127945,
-0.0030825890135020018,
0.05470779910683632,
0.0593891441822052,
0.07480642199516296,
0.021615352481603622,
0.05675113573670387,
0.056682031601667404,
0.10788365453481674,
0.007964412681758404,
0.08102002739906311,
0.0436130054295063,
0.08777698129415512,
0.05828525871038437,
-0.15300501883029938,
0.19931824505329132,
-0.08972413837909698,
0.05142036825418472,
-0.04533390700817108,
0.07155045121908188,
0.09143639355897903,
0.025509851053357124,
0.06340862065553665,
0.125043585896492,
-0.09515310823917389,
0.06331949681043625,
-0.02764059230685234,
-0.007940190844237804,
0.03123013861477375,
0.14206624031066895,
-0.023120885714888573,
0.07155271619558334,
-0.03392964228987694,
0.029171090573072433,
-0.02085334248840809,
0.07263186573982239,
0.03431505337357521,
-0.041512660682201385,
0.04924019053578377,
0.06879047304391861,
0.03360025957226753,
0.050799958407878876,
0.09124868363142014,
0.09028515219688416,
0.11157975345849991,
0.08015967905521393,
0.11175484955310822,
-0.03303016722202301,
0.012401976622641087,
-0.0463545024394989,
0.0014444137923419476,
0.04337644577026367,
-0.05675461143255234,
-0.03938276320695877,
0.12598823010921478,
-0.0052217282354831696,
-0.08388194441795349,
0.011403515003621578,
0.12054828554391861,
0.07818607985973358,
-0.07190027087926865,
0.09750911593437195,
-0.041288748383522034,
-0.09077432006597519,
0.06473343074321747,
-0.0375385619699955,
-0.008698088116943836,
-0.03171747550368309,
-0.12167061865329742,
0.06847009062767029,
-0.08127856999635696,
0.0975286141037941,
-0.03404496982693672,
0.07365208864212036,
0.07229926437139511,
-0.024611499160528183,
-0.10015346109867096,
0.11356259882450104,
0.1262446939945221,
0.017241302877664566,
-0.02043941058218479,
-0.02059762179851532,
0.02722691185772419,
0.04855518415570259,
0.10008236765861511,
0.010889922268688679,
-0.048797618597745895,
-0.014623912051320076,
0.044517882168293,
0.0673944354057312,
-0.0038216249085962772,
0.14214050769805908,
0.09352704882621765,
0.056700270622968674,
-0.1616499274969101,
-0.04880919307470322,
0.1471160352230072,
-0.04058348760008812,
0.10988884419202805,
-0.07349107414484024,
0.0345582515001297,
-0.040368713438510895,
0.07186422497034073,
0.103990338742733,
-0.004496538080275059,
-0.04200424253940582,
-0.07266033440828323,
-0.007424387149512768,
0.1386989951133728,
0.012000088579952717,
-0.014828251674771309,
-0.07421664148569107,
0.07380618155002594,
-0.08630841225385666,
0.08234177529811859,
0.10992883890867233,
-0.007992171682417393,
-0.08931691199541092,
0.07128714770078659,
-0.047248613089323044,
-0.01897931471467018,
0.04144608974456787,
-0.05890271067619324,
-0.13902051746845245,
-0.003447065595537424,
-0.1210632175207138,
-0.05973076447844505,
0.03270507603883743,
0.03804231435060501,
-0.09848415106534958,
-0.06931125372648239,
-0.004661307670176029,
-0.04785160347819328,
-0.09961986541748047,
0.08167317509651184,
0.04675192013382912,
-0.05673740431666374,
-0.06974625587463379,
-0.10053686797618866,
-0.04299650713801384,
0.08058709651231766,
0.05017511174082756,
-0.11402631551027298,
-0.04167761281132698,
-0.03653453290462494,
-0.09553278982639313,
-0.005100533831864595,
-0.09885312616825104,
-0.019490918144583702,
-0.017916930839419365,
-0.08338462561368942,
-0.13829895853996277,
0.11149883270263672,
-0.08673477172851562,
-0.04688398912549019,
0.08167363703250885,
-0.023588182404637337,
0.005444922484457493,
0.006226753816008568,
-0.047357793897390366,
0.08473961055278778,
0.08614479005336761,
-0.10645829141139984,
0.006412984803318977,
-0.06561347842216492,
0.02589941956102848,
0.05774453282356262,
-0.023820888251066208,
-0.062492161989212036,
0.049230754375457764,
0.03941379487514496,
-0.007368400692939758,
0.08041039109230042,
-0.04127702862024307,
0.07053424417972565,
-0.05232879891991615,
0.11380639672279358,
0.04606309533119202,
0.044662706553936005,
0.03820568695664406,
-0.11070698499679565,
0.12820038199424744,
0.04817197471857071,
-0.2086251974105835,
0.03399746119976044,
0.08048631995916367,
0.1015150249004364,
-0.05132751911878586,
0.07042941451072693,
-0.09987694025039673,
-0.049725424498319626,
-0.11300966888666153,
-0.017548836767673492,
0.051088739186525345,
0.08654969185590744,
0.039476629346609116,
0.01029175240546465,
-0.04722251743078232,
0.0040752943605184555,
-0.13411445915699005,
-0.07915615290403366,
-0.10295146703720093,
0.027628129348158836,
-0.06334633380174637,
-0.10882221162319183,
-0.03240402415394783,
0.006793470587581396,
-0.012597640976309776,
-0.04098501428961754,
0.04233568534255028,
-0.0043607791885733604,
-0.03301326185464859,
-0.055395711213350296,
-0.12268581241369247,
-0.027726026251912117,
-0.06875797361135483,
0.07484244555234909,
-0.012410739436745644,
-0.09707050770521164,
0.01889704540371895,
-0.006321161985397339,
0.006748438812792301,
-0.05023537948727608,
-0.11870325356721878,
0.07463424652814865,
-0.026427900418639183,
-0.12592445313930511,
0.01867935247719288,
-0.058280568569898605,
0.07416124641895294,
0.03994271904230118,
0.0029356610029935837,
0.03001590445637703,
0.08587878942489624,
0.1088208258152008,
0.05852723866701126,
0.028698986396193504,
-0.18585459887981415,
-0.021785138174891472,
-0.07449506223201752,
-0.0876060202717781,
0.07615812867879868,
-0.056496474891901016,
-0.002648022724315524,
0.05825908109545708,
-0.09193091839551926,
0.037200357764959335,
0.03782220557332039,
-0.019923968240618706,
0.09540480375289917,
0.10206008702516556,
0.02369391731917858,
-0.005834181793034077,
-0.030683495104312897,
-0.017921682447195053,
0.16767039895057678,
0.030569806694984436,
0.06217042729258537,
0.11378311365842819,
0.0642201155424118,
0.07766622304916382,
-0.036445409059524536,
-0.02498410828411579,
0.07734282314777374,
-0.017148397862911224,
0.11342073976993561,
-0.06684127449989319,
-0.009862213395535946,
-0.07068558782339096,
0.030142992734909058,
-0.032822418957948685,
0.034515105187892914,
-0.060648489743471146,
0.08491482585668564,
-0.052129581570625305,
0.05147141218185425,
0.03367404639720917,
-0.015270107425749302,
0.007511062081903219,
0.024318942800164223,
-0.13162432610988617,
0.07701485604047775,
-0.04860088601708412,
0.002090879250317812,
-0.09293103963136673,
0.07020602375268936,
-0.028467901051044464,
-0.09909683465957642,
-0.087374746799469,
0.06905042380094528,
0.09358406811952591,
-0.006305525545030832,
0.07181504368782043,
0.02030031941831112,
-0.06045139953494072,
-0.014265003614127636,
-0.07186269760131836,
0.017664490267634392,
0.0030764543917030096,
0.028673065826296806,
0.03946719691157341,
0.10343118757009506,
-0.0028325177263468504,
-0.04064691811800003,
-0.057094499468803406,
0.003027253318578005,
0.05652228742837906,
-0.11230602115392685,
0.11768463999032974,
-0.0995253250002861,
-0.04762956500053406,
0.018587389960885048,
0.029150836169719696,
-0.09858273714780807,
-0.16412389278411865,
0.010150158777832985,
-0.0920102447271347,
-0.05997585877776146,
0.0642862468957901,
0.03336049243807793,
0.054185863584280014,
0.11168766021728516,
0.03955024853348732,
-0.017075438052415848,
-0.022110309451818466,
0.03127394616603851,
-0.09478078782558441,
0.07496432214975357,
-0.0780341699719429,
0.11742054671049118,
-0.09076202660799026,
0.06040305644273758,
0.048370443284511566,
0.039738040417432785,
-0.17469379305839539,
0.14061178267002106,
0.014686373993754387,
-0.1758747100830078,
0.016846317797899246,
-0.041918374598026276,
-0.09472484141588211,
0.0739574283361435,
-0.117546446621418,
0.004850229248404503,
0.0675458163022995,
-0.033265601843595505,
-0.003584902500733733,
0.11756635457277298,
-0.0900544673204422,
0.07044203579425812,
-0.06076527759432793,
-0.02462385967373848,
0.07249164581298828,
-0.07401110976934433,
0.037449948489665985,
0.04389793053269386,
0.08042125403881073,
0.022173753008246422,
0.029764840379357338,
-0.08892091363668442,
0.06463632732629776,
0.11083254963159561,
0.11412917822599411,
0.16239391267299652,
0.029334204271435738,
0.01729137822985649,
0.10712282359600067,
-0.00495172617956996,
-0.0095895454287529,
0.03781259432435036,
0.014319803565740585,
0.08018524199724197,
-0.08792901039123535,
0.02722279541194439,
-0.04600128158926964,
-0.07812508940696716,
-0.10670655965805054,
-0.07843024283647537,
0.06020573899149895,
-0.1272624135017395,
0.06740836799144745,
0.0619051419198513,
0.014877649024128914,
-0.0975300520658493,
-0.052123844623565674,
0.07404529303312302,
0.048015743494033813,
-0.07174194604158401,
0.032368388026952744,
0.023642074316740036,
0.03394670411944389,
0.10753414034843445,
-0.07811415195465088,
0.01880647800862789,
0.03115765191614628,
-0.18881644308567047,
-0.025031844154000282,
-0.02741101384162903,
0.019551044330000877,
0.029003387317061424,
0.06340793520212173,
-0.001738215796649456,
-0.11624878644943237,
0.04364105314016342,
-0.04261007532477379,
0.04582851752638817,
0.03222021088004112,
0.14652951061725616,
-0.13230110704898834,
-0.04757748916745186,
0.014729744754731655,
-0.09231199324131012,
0.016357822343707085,
-0.054005805402994156,
0.022558121010661125,
-0.021052256226539612,
-0.09224066138267517,
0.07215829938650131,
-0.09643170982599258,
-0.029032256454229355,
-0.09850674122571945,
0.011694463901221752,
0.00922390352934599,
-0.18696096539497375,
0.13118888437747955,
0.03833622485399246,
0.0832725465297699,
0.027231916785240173,
0.06562317907810211,
-0.07382812350988388,
0.030671605840325356,
-0.2052762806415558,
0.15091902017593384,
0.06365057080984116,
0.03964332863688469,
0.0027606231160461903,
-0.017972948029637337,
0.0048099178820848465,
0.03189994394779205,
-0.10301283746957779,
0.047102127224206924,
0.2066749781370163,
0.19712769985198975,
0.04633794724941254,
0.023158511146903038,
-0.026522643864154816,
0.056770067662000656,
0.03013603389263153,
0.03833790123462677,
0.011907056905329227,
-0.01416112668812275,
0.008228160440921783,
-0.0528828389942646,
0.02135610766708851,
0.0673808753490448,
-0.007274177391082048,
0.06528837233781815,
-0.06916831433773041,
0.12972845137119293,
-0.0316898413002491,
0.07961226254701614,
-0.03799173980951309,
0.06918949633836746,
-0.06485805660486221,
-0.09768956899642944,
-0.01983409747481346,
0.06604158878326416,
-0.10905246436595917,
0.02082519605755806,
-0.11689367890357971,
-0.05128828436136246,
0.052887819707393646,
-0.07769601792097092,
-0.03882288932800293,
0.028611956164240837,
-0.1278354972600937,
0.042453594505786896,
0.03170089051127434,
0.04715423285961151,
-0.03621073067188263,
0.06366802752017975,
-0.1294141560792923,
0.09989983588457108,
-0.13904912769794464,
0.04930860176682472,
-0.12966890633106232,
0.01044449582695961,
-0.06671298295259476,
-0.13811801373958588,
-0.09872329980134964,
-0.048396430909633636,
-0.1303977072238922,
-0.013070248067378998,
-0.053323689848184586,
0.06149448826909065,
-0.1283169388771057,
0.012454599142074585,
-0.04590888321399689,
0.060634735971689224,
0.04112546518445015,
-0.054231658577919006,
-0.008649024181067944,
0.06883647292852402,
-0.0798223614692688,
-0.02601226232945919,
0.06976128369569778,
0.06213464215397835,
-0.052263807505369186,
0.07530377805233002,
-0.024692770093679428,
-0.15845012664794922,
-0.043081946671009064,
-0.04762591794133186,
0.02966945618391037,
0.1677829921245575,
-0.07152322679758072,
-0.015388057567179203,
-0.0007849472458474338,
-0.11056117713451385,
-0.07403608411550522,
-0.039758723229169846,
0.014667988754808903,
0.07926934212446213,
-0.06963098049163818,
-0.07701766490936279,
-0.05495103821158409,
0.06210033968091011,
-0.0022533456794917583,
0.08590767532587051,
-0.021095234900712967,
0.08862518519163132,
-0.06195276975631714,
0.03826562315225601,
-0.09280015528202057,
-0.011053263209760189,
0.0894910991191864,
0.10899285227060318,
0.0020063435658812523,
-0.02235032059252262,
-0.005718842148780823,
-0.032434795051813126,
0.05230340361595154,
0.05315335467457771,
-0.022897863760590553,
-0.05232394114136696,
0.06323782354593277,
-0.07537409663200378,
0.016185490414500237,
0.008700667880475521,
-0.02304287627339363,
-0.08737687021493912,
-0.1538359671831131,
0.001512826420366764,
0.07373616099357605,
0.09728842228651047,
0.18288554251194,
-0.08676115423440933,
-0.14260530471801758,
0.05153180658817291,
-0.0585465282201767,
-0.08377238363027573,
0.04632791504263878,
-0.14904499053955078,
-0.07218905538320541,
0.14336255192756653,
-0.05446131154894829,
0.08288151025772095,
-0.09008758515119553,
0.07780178636312485,
0.04667423665523529,
-0.08848516643047333,
0.043742939829826355,
-0.020764673128724098,
0.06188059598207474,
0.011026996187865734,
0.01923743449151516,
0.07334116846323013,
0.0015323718544095755,
-0.08130199462175369,
-0.04128175228834152,
-0.08240555226802826,
-0.04152641445398331,
-0.09256759285926819,
-0.07407526671886444,
0.0421660877764225,
-0.05011911317706108,
0.0016882235649973154,
-0.016202382743358612,
0.05094091594219208,
0.004893295932561159,
-0.059903550893068314,
-0.046011704951524734,
0.03251689299941063,
0.03711164742708206,
0.14533358812332153,
0.0421452559530735,
0.06842563301324844,
0.009539349935948849,
0.022689463570713997,
-0.04160022735595703,
0.00797233171761036,
-0.007422512862831354,
0.10502452403306961,
-0.0037079767789691687,
-0.11899348348379135,
-0.07687485218048096,
0.15168936550617218,
0.07299815118312836,
0.0902647003531456,
0.06861855089664459,
0.0124006737023592,
-0.06838348507881165,
-0.0702928900718689,
0.08691463619470596,
-0.14302869141101837,
0.01286635734140873,
0.08136048167943954,
0.03783944621682167,
0.0886850357055664,
-0.06312251091003418,
0.029455043375492096,
-0.10792878270149231,
0.09012685716152191,
0.041106101125478745,
-0.15501698851585388,
-0.046480391174554825,
-0.1046280488371849,
-0.15655282139778137,
0.04109350964426994,
0.003473647404462099,
-0.12471223622560501,
0.023470310494303703,
-0.06893415004014969,
0.1221599280834198,
-0.029624078422784805,
-0.03551981598138809,
-0.08383910357952118,
-0.03409988433122635,
-0.06815280765295029,
-0.04203545302152634,
0.012026531621813774,
-0.0699627622961998,
-0.024246571585536003,
-0.048554759472608566,
0.014317425899207592,
0.11301707476377487,
-0.028958376497030258,
-0.04848925396800041,
0.010366554372012615,
-0.03826993703842163,
-0.08771900832653046,
0.002807660959661007,
-0.017980696633458138,
-0.020220313221216202,
0.0304681695997715,
-0.014479476027190685,
0.06473324447870255,
-0.04998251423239708,
0.0010363261681050062,
-0.007826714776456356,
0.003576466115191579,
-0.030290134251117706,
-0.01038555521517992,
0.014656179584562778,
0.0031464570201933384,
-0.1194910928606987,
-0.012298286892473698,
-0.06490472704172134,
-0.0006857233820483088,
0.099269799888134,
-0.005168459843844175,
0.0906570702791214,
-0.08820794522762299,
0.026663102209568024,
0.0315941721200943,
0.02338952012360096,
0.05825067311525345,
0.023025354370474815,
0.028598759323358536,
0.07312203198671341,
-0.04666845500469208,
-0.025173256173729897,
-0.07202159613370895,
-0.04983096942305565,
-0.11456739157438278,
-0.12158945947885513,
-0.005727429408580065,
-0.03724440932273865,
-0.07129906862974167,
0.0841805636882782,
0.03000504896044731,
-0.043843939900398254,
0.11871828138828278,
0.05853662267327309,
0.03757108375430107,
-0.05404827371239662,
0.09644526988267899,
0.003838425036519766,
-0.08838072419166565,
-0.041099585592746735,
-0.09916599094867706,
-0.04425463825464249,
-0.028533758595585823,
-0.04938766360282898,
0.009223580360412598,
-0.05776936933398247,
0.028779707849025726,
0.06502927094697952,
0.023790091276168823,
0.04472087696194649,
-0.0675869807600975,
0.04729217663407326,
-0.11575029045343399,
0.08227535337209702,
-0.005527076311409473,
-0.1648520529270172,
0.06366371363401413,
-0.03666624799370766,
0.1486484557390213,
-0.18821009993553162,
-0.09125462919473648,
0.0594470389187336,
-0.07674253731966019,
0.029042111709713936,
0.1067977026104927,
0.05412621423602104,
-0.07701323181390762,
-0.004843068774789572,
0.028304800391197205,
-0.10145442187786102,
-0.13773488998413086,
-0.08057471364736557,
-0.066909059882164,
-0.1120464876294136,
0.1873215138912201,
-0.038548242300748825,
-0.015844691544771194,
0.031042885035276413,
-0.012209457345306873,
0.006005843169987202,
-0.020212097093462944,
-0.06750684231519699,
0.04768628254532814,
-0.038571227341890335,
-0.05018538236618042,
-0.04433925449848175,
-0.004293212201446295,
0.08638141304254532,
0.027156362310051918,
-0.1439344882965088,
0.004966738633811474,
0.1388912945985794,
0.041473645716905594,
0.09220908582210541,
-0.027267826721072197,
0.06511412560939789,
0.0381103977560997,
-0.07662397623062134,
0.04357386380434036,
-0.016997240483760834,
-0.10803605616092682,
0.06988793611526489,
0.09805049002170563,
-0.0667545422911644,
0.0486101433634758,
-0.06238512694835663,
-0.04417670890688896,
-0.02337939850986004,
-0.045850805938243866,
0.02719859778881073,
0.07560904324054718,
-0.046290963888168335,
0.08754097670316696,
0.02452343888580799,
0.059146448969841,
-0.059868309646844864,
0.045318853110075,
-0.027811739593744278,
0.023771541193127632,
-0.01142642181366682,
0.058314673602581024,
-0.09009356051683426,
0.03349686414003372,
-0.06073181703686714,
0.06348098069429398,
0.01246586162596941,
0.08396003395318985,
0.08178558945655823,
0.0795115977525711,
-0.10892977565526962,
0.05140578746795654,
0.03963766247034073,
-0.20084185898303986,
-0.014116957783699036,
-0.1285419911146164,
-0.21953006088733673,
0.018447697162628174,
0.038541000336408615,
0.042277731001377106,
0.02030133083462715,
-0.039414647966623306,
-0.036553457379341125,
-0.05978723615407944,
-0.14911551773548126,
0.11920040845870972,
0.00990233849734068,
-0.13879035413265228,
0.030523838475346565,
-0.12277864664793015,
0.02212931588292122,
-0.003418717999011278,
-0.11336763203144073,
-0.006344919092953205,
0.16334539651870728,
0.09635482728481293,
0.0769757628440857,
-0.027501171454787254,
0.05526389554142952,
0.026736559346318245,
-0.08591198176145554,
0.1024765595793724,
0.05879402905702591,
0.07826025784015656,
0.05742078647017479,
-0.04283463582396507,
0.11760866641998291,
-0.05806584283709526,
0.09971413761377335,
0.06116640195250511,
0.10158951580524445,
0.077194444835186,
0.20125947892665863,
0.0979609563946724,
0.02166438102722168,
0.043989285826683044,
-0.02487332746386528,
-0.057877473533153534,
-0.03543347492814064,
-0.05774378776550293,
0.06547338515520096,
-0.05012599751353264,
0.0908409133553505,
0.09606976807117462,
0.1729331910610199,
0.035068925470113754,
-0.029948372393846512,
0.070594422519207,
0.08112481236457825,
-0.1369195580482483,
0.11130670458078384,
-0.06726108491420746,
0.10456284880638123,
-0.06663016229867935,
0.0423397496342659,
0.1332777887582779,
-0.05189184099435806,
-0.026880161836743355,
0.10353222489356995,
0.09645698964595795,
0.03738110139966011,
0.049415700137615204,
-0.04033790901303291,
0.13956119120121002,
0.09814602881669998,
-0.09879095107316971,
-0.02040081098675728,
0.08836106956005096,
0.0841478556394577,
0.11969663947820663,
2.829400182235986e-05,
0.13530394434928894,
-0.044762395322322845,
-0.046811167150735855,
-0.08277233690023422,
-0.020841771736741066,
-0.07551628351211548,
-0.10243190824985504,
-0.002526259748265147,
0.0970713198184967,
0.10209694504737854,
-0.032679710537195206,
0.10326246172189713,
0.012865147553384304,
0.14986760914325714,
-0.06668297201395035,
-0.04455176740884781,
0.07705672085285187,
0.06415106356143951,
0.00910461600869894,
-0.0717959925532341,
0.11680679023265839,
-0.041297879070043564,
0.05496582016348839,
-0.06356295198202133,
-0.01727314665913582,
-0.09612299501895905,
-0.06711859256029129,
-0.006689218804240227,
0.03269732743501663,
0.0917549729347229,
-0.10030794888734818,
0.17065879702568054,
0.029675094410777092,
0.041618216782808304,
-0.10059083253145218,
0.03623528406023979,
0.04299282655119896,
-0.05755390599370003,
0.03246799856424332,
0.06413725763559341,
0.03260669857263565,
-0.01857812888920307,
-0.04661078378558159,
-0.11586230248212814,
0.10557998716831207,
-0.13750165700912476,
-0.0600104033946991,
-0.05638182535767555,
0.10595282167196274,
0.05656428262591362,
-0.1485440731048584,
0.09541942179203033,
0.0417383648455143,
-0.07585352659225464,
-0.0530942901968956,
-0.07579080015420914,
-0.06039591133594513,
-0.07221616059541702,
-0.02198600023984909,
0.035537995398044586,
0.04656331613659859,
0.014181762002408504,
0.06643955409526825,
-0.02635449543595314,
0.027317065745592117,
0.015464474447071552,
-0.09559665620326996,
0.001937124994583428,
-0.013516470789909363,
-0.0342034175992012,
0.02516954578459263,
0.04067789763212204,
0.036757394671440125,
0.06322979182004929,
-0.003495090175420046,
-0.01571316085755825,
-0.06504708528518677,
-0.04850206896662712,
0.012030555866658688,
0.07265646010637283,
0.018347078934311867,
-0.07861801981925964,
-0.0555286779999733,
-0.022578073665499687,
0.10911372303962708,
0.15752722322940826,
-0.07461149990558624,
-0.01611521653831005,
-0.02347523719072342,
-0.05476395785808563,
0.10267306119203568,
0.10538282990455627,
-0.004234755411744118,
0.17133809626102448,
-0.0915934219956398,
-0.04478249326348305,
0.06725289672613144,
0.007568789646029472,
0.14362286031246185,
0.08250779658555984,
-0.0801660418510437,
0.018639136105775833,
0.1366351991891861,
-0.0419144481420517,
-0.07285279780626297,
-0.03331024572253227,
0.010464111343026161,
0.08644812554121017,
0.07851411402225494,
-0.015265555121004581,
0.11050873249769211,
-0.09833589196205139,
0.11487997323274612,
-0.005472367629408836,
-0.10962903499603271,
0.08710198104381561,
0.10755116492509842,
-0.029170125722885132,
-0.0016271461499854922,
0.15643268823623657,
-0.05754398927092552,
-0.041012126952409744,
-0.09580143541097641,
-0.0005971002974547446,
0.09058936685323715,
0.07451672852039337,
0.03022908978164196,
-0.07473479211330414,
0.06916902214288712,
0.1715431809425354,
0.13395941257476807,
0.08662378787994385,
0.07332974672317505,
-0.0795583724975586,
0.02082265354692936,
0.011601035483181477,
0.1103312224149704,
-0.06041313335299492,
0.056970901787281036,
-0.037393394857645035,
-0.006167845334857702,
-0.00376645615324378,
-0.06404228508472443,
0.005335737019777298,
0.10604391247034073,
-0.04960717633366585,
0.08283611387014389,
0.003070224542170763,
0.08812607824802399,
-0.009472562931478024,
0.009724453091621399,
0.08768609166145325,
0.039632201194763184,
0.08316688984632492,
0.04549754783511162,
0.0780385285615921,
-0.05651285499334335,
-0.099953293800354,
0.043365683406591415,
-0.03577854111790657,
-0.06525024771690369,
0.04117840528488159,
0.10153551399707794,
0.14374999701976776,
0.12244648486375809,
-0.02995108999311924,
-0.03041713684797287,
-0.11078384518623352,
0.11156816780567169,
0.029562583193182945,
0.019175659865140915,
-0.014852073974907398,
-0.09609492123126984,
-0.09759913384914398,
-0.12111559510231018,
0.15423108637332916,
0.018314670771360397,
0.08434676378965378,
0.14040426909923553,
0.22504058480262756,
0.007837149314582348,
0.058035071939229965,
0.08969259262084961,
0.0722612589597702,
-0.04048947989940643,
0.007616303861141205,
-0.0930478647351265,
-0.03481017425656319,
0.06937281787395477,
-0.07409679144620895,
0.0031410015653818846,
-0.021814990788698196,
0.05420885980129242,
-0.051418185234069824,
-0.06014874204993248,
0.05545290187001228,
-0.02002471312880516,
0.010118595324456692,
0.04903833195567131,
-0.010301876813173294,
0.022422494366765022,
-0.07402420789003372,
0.013217494823038578,
0.03724365681409836,
0.11906541138887405,
0.1253991425037384,
-0.08842164278030396,
-0.026551833376288414,
-0.055674538016319275,
-0.012190715409815311,
-0.012406681664288044,
0.027915557846426964,
-0.11443958431482315,
0.0559840090572834,
0.025085018947720528,
-0.026729444041848183,
0.1218729168176651,
0.009150836616754532,
-0.03545142710208893,
0.06914810091257095,
0.01425463892519474,
0.02310940809547901,
-0.09179488569498062,
-0.0595085546374321,
-0.10157541185617447,
0.12094520032405853,
0.015634747222065926,
-0.024057572707533836,
0.029718155041337013,
0.01295504905283451,
-0.0016365573974326253,
-0.04139108583331108,
0.12698718905448914,
-0.03699782118201256,
0.05058016628026962,
0.11841495335102081,
0.07233905792236328,
0.007663266267627478,
0.05759120732545853,
0.07185181975364685,
0.041655439883470535,
0.06602687388658524,
-0.008013585582375526,
0.06513846665620804,
-0.1058792695403099,
-0.06974391639232635,
0.0508127398788929,
0.07944145798683167,
0.003895060159265995,
-0.19446808099746704,
0.0129338214173913,
-0.06262992322444916,
-0.0012425773311406374,
-0.05464770644903183,
0.13968952000141144,
0.10849601030349731,
-0.028933390974998474,
0.06172812357544899,
-0.07630360126495361,
0.07430294901132584,
-0.15216724574565887,
0.08415350317955017,
0.07498069852590561,
0.04499136656522751,
-0.057375647127628326,
0.030270608142018318,
-0.006757466588169336,
-0.07104291021823883,
0.057595476508140564,
0.0384395495057106,
0.07567877322435379,
0.04714661464095116,
-0.03251432999968529,
-0.01301741786301136,
-0.015715403482317924,
-0.07383523136377335,
-0.0848141461610794,
0.09032508730888367,
-0.09692544490098953,
-0.03647420182824135,
-0.03368363529443741,
0.041820358484983444,
-0.025114206597208977,
-0.03641766309738159,
-0.012981599196791649,
-0.09347765147686005,
0.11353038251399994,
-0.08791425824165344,
-0.10756738483905792,
0.03715892136096954,
0.07068682461977005,
-0.03427288681268692,
-0.07726150751113892,
0.003151532495394349,
0.05972554534673691,
0.04471556469798088,
-0.09049505740404129,
0.04317926988005638,
-0.10689277946949005,
-0.0743660107254982,
-0.0540640763938427,
0.07855719327926636,
0.1311315894126892,
0.06951893866062164,
-0.07496433705091476,
0.06483028829097748,
-0.10135744512081146,
-0.08753948658704758,
0.01274457573890686,
0.0001954984327312559,
-0.0852881595492363,
-0.08474142849445343,
-0.1320318579673767,
-0.11878235638141632,
0.061323121190071106,
-0.11308573931455612,
0.14172129333019257,
-0.12279792875051498,
0.07006967812776566,
-0.06688995659351349,
0.023490501567721367,
0.08513025939464569,
-0.12302932143211365,
-0.03511945530772209,
-0.14667914807796478,
0.06769981235265732,
0.1199975311756134,
-0.09951398521661758,
-0.005668172612786293,
-0.18329507112503052,
-0.032191164791584015,
-0.052734505385160446,
-0.012093951925635338,
-0.0053678895346820354,
0.16584041714668274,
-0.07528244704008102,
-0.1124868392944336,
0.14665217697620392,
-0.2093922197818756,
0.029955383390188217,
-0.07541494071483612,
0.010084273293614388,
0.057838212698698044,
0.16122283041477203,
-0.025523461401462555,
0.17198671400547028,
-0.14150094985961914,
-0.17309701442718506,
-0.1499432921409607,
-0.1873706728219986,
0.059548843652009964,
-0.13579872250556946,
-0.12976814806461334,
0.18193590641021729,
0.024928145110607147,
-0.07861978560686111,
-0.07358639687299728,
0.0657605230808258,
-0.04709022492170334,
0.11314297467470169,
-0.06639466434717178,
0.1656925231218338,
0.025381440296769142,
0.014603979885578156,
0.06700412184000015,
-0.023827409371733665,
-0.07726897299289703,
0.09749849140644073,
-0.010847922414541245,
-0.10263597965240479,
0.020901409909129143,
-0.033154312521219254,
0.11901447176933289,
-0.004200614523142576,
0.018206676468253136,
-0.034069761633872986,
-0.051847778260707855,
-0.16694068908691406,
-0.007693971507251263,
-0.08056427538394928,
0.03590322285890579,
-0.10774239152669907,
-0.08400622010231018,
0.03435507416725159,
-0.036615412682294846,
0.05559508875012398,
-0.07452830672264099,
0.05871983990073204,
0.1076025515794754,
-0.01711953803896904,
0.0727488249540329,
-0.15221761167049408,
-0.04356011375784874,
-0.05100780725479126,
-0.05848843604326248,
-0.032648343592882156,
-0.00034166473778896034,
-0.046483833342790604,
-0.15521202981472015,
-0.03498050570487976,
-0.11929389089345932,
-0.02469126507639885,
0.05655462294816971,
0.0922183245420456,
-0.03642873838543892,
0.05090288072824478,
-0.008171256631612778,
0.039523374289274216,
-0.1272345781326294,
-0.09664159268140793,
0.027873311191797256,
-0.1192464604973793,
-0.05723055452108383,
0.03955080732703209,
0.01820180006325245,
0.0032283442560583353,
-0.10837242007255554,
0.07140368968248367,
-0.13447603583335876,
-0.09972409904003143,
-0.07500769942998886,
-0.06186366826295853,
-0.09426410496234894,
0.03201800584793091,
0.011244552209973335,
-0.0504256933927536,
-0.03684950992465019,
-0.00941930990666151,
-0.11398530006408691,
0.08608365803956985,
0.13468797504901886,
0.08376164734363556,
-0.06548663228750229,
0.042758759111166,
0.075991190969944,
0.03787072002887726,
0.056914959102869034,
-0.00026635953690856695,
-0.0770404040813446,
-0.11638488620519638,
0.15683428943157196,
0.020393608137965202,
-0.16488420963287354,
-0.07624096423387527,
-0.08594074100255966,
-0.012376978993415833,
0.04915551841259003,
-0.08402105420827866,
-0.06613752990961075,
0.06446994096040726,
-0.10373614728450775,
-0.022201960906386375,
0.008527462370693684,
0.07229387760162354,
-0.0907173603773117,
-0.022326329723000526,
-0.08956313133239746,
-0.14917097985744476,
-0.14050693809986115,
0.0032989303581416607,
-0.10494843125343323,
0.024811284616589546,
0.10173338651657104,
0.019977420568466187,
0.011702675372362137,
0.06876172870397568,
-0.0010913613950833678,
-0.09249518811702728,
0.024225493893027306,
-0.15454670786857605,
0.010439455509185791,
-0.10332387685775757,
-0.07226670533418655,
-0.14425934851169586,
0.03261985629796982,
0.07640371471643448,
0.024831777438521385,
0.010625551454722881,
0.0024006434250622988,
0.04407649487257004,
-0.0224777664989233,
0.0030437482055276632,
-0.11818388849496841,
-0.1670151650905609,
-0.11429037898778915,
-0.17094120383262634,
0.08626201003789902,
0.15834468603134155,
0.0676364079117775,
-0.008749262429773808,
0.004186688456684351,
-0.08737953752279282,
0.01354618277400732,
-0.03197483718395233,
0.0545736625790596,
-0.08871177583932877,
0.006796706933528185,
0.10897570848464966,
-0.13630525767803192,
-0.11019685119390488,
-0.022973624989390373,
-0.2731967866420746,
-0.11609967052936554,
0.026733873412013054,
-0.07563746720552444,
0.0737420842051506,
-0.014622929506003857,
-0.011422790586948395,
0.10593106597661972,
0.035709936171770096,
0.1832522749900818,
0.031779419630765915,
-0.03612307086586952,
0.12091143429279327,
0.08479966223239899,
0.013955248519778252,
-0.030730288475751877,
-0.09424106031656265,
-0.10054715722799301,
0.16613131761550903,
0.1458243429660797,
0.03321003541350365,
-0.12691669166088104,
-0.06114417314529419,
0.05192158743739128,
0.042326007038354874,
-0.004773051477968693,
0.024088740348815918,
-0.07627358287572861,
-0.09775545448064804,
-0.017427023500204086,
-0.00838007777929306,
0.17009992897510529,
-0.09289254248142242,
0.08236592262983322,
0.006233248859643936,
-0.041489727795124054,
0.13563048839569092,
-0.07571326196193695,
0.040417056530714035,
-0.06178364157676697,
-0.033330533653497696,
0.036974746733903885,
-0.04730366915464401,
0.12693151831626892,
-0.061813920736312866,
0.004651945549994707,
0.018098054453730583,
0.08075390756130219,
-0.11910445988178253,
-0.07939216494560242,
0.07886585593223572,
0.06164216995239258,
-0.0153745012357831,
-0.10845947265625,
0.12484659254550934,
-0.008806752040982246,
-0.0158048365265131,
0.03620528429746628,
-0.03686313331127167,
0.08855032175779343,
-0.1287839561700821,
-0.20050279796123505,
-0.19343267381191254,
0.014915116131305695,
-0.10361618548631668,
-0.16392742097377777,
0.048262711614370346,
0.15847834944725037,
-0.052346371114254,
0.017254242673516273,
0.17518733441829681,
0.05690542608499527,
-0.02642805688083172,
-0.1452445238828659,
-0.06338296085596085,
-0.010764389298856258,
-0.14438144862651825,
-0.08186839520931244,
-0.17913299798965454,
-0.01448038686066866,
-0.19832101464271545,
-0.036144956946372986,
0.027450459077954292,
-0.09349065274000168,
0.04089930281043053,
-0.030866945162415504,
-0.10892945528030396,
-0.02392258495092392,
0.026952864602208138,
0.11860474944114685,
-0.05469626933336258,
0.050790220499038696,
0.06870193034410477,
-0.121810682117939,
0.057607777416706085,
0.008759328164160252,
-0.10307152569293976,
-0.050973158329725266,
-0.044144101440906525,
0.02266787365078926,
0.057655368000268936,
0.003071925137192011,
0.0935819149017334,
-0.09808993339538574,
-0.10047813504934311,
-0.11188948154449463,
0.036629755049943924,
0.005013741087168455,
0.03645101189613342,
0.04623238742351532,
-0.038584187626838684,
-0.008582337759435177,
-0.11705712974071503,
0.09022793918848038,
0.09867895394563675,
-0.07355953007936478,
0.008465759456157684,
-0.06364192068576813,
-0.03890867158770561,
-0.14278088510036469,
-0.05357490852475166,
0.03201780095696449,
-0.01615849696099758,
0.10534612089395523,
0.04063132032752037,
-0.09601934999227524,
-0.03271200880408287,
0.04338879883289337,
-0.04896682873368263,
-0.05210821330547333,
0.08827295899391174,
0.01730979233980179,
-0.03885653242468834,
-0.084189772605896,
0.024559203535318375,
0.013815319165587425,
-0.01903637684881687,
0.11725740134716034,
-0.0009438504930585623,
-0.014856813475489616,
0.07805612683296204,
0.060735832899808884,
0.04097593575716019,
0.044321030378341675,
-0.01088708732277155,
0.013481151312589645,
0.04447039216756821,
0.08826751261949539,
0.018475595861673355,
0.005620830692350864,
0.0911184549331665,
-0.05298382416367531,
0.08188257366418839,
0.1167202815413475,
0.05976799502968788,
0.045383941382169724,
0.013883636333048344,
-0.05344720557332039,
0.0518227145075798,
0.11210953444242477,
-0.15010061860084534,
0.0029370703268796206,
-0.07383807003498077,
-0.02590589039027691,
0.029106227681040764,
-0.019310899078845978,
0.049667418003082275,
0.06654009222984314,
0.06979142129421234,
-0.0727190151810646,
-0.08169292658567429,
0.01628885231912136,
-0.011072575114667416,
0.013920500874519348,
0.014173407107591629,
0.05795358866453171,
-0.015135765075683594,
-0.016784485429525375,
-0.024302126839756966,
0.12765556573867798,
0.05464596301317215,
-0.08657078444957733,
0.07011231780052185,
0.0287984199821949,
0.015811864286661148,
0.014398508705198765,
0.09067419171333313,
0.01369905099272728,
-0.09806142747402191,
-0.06911498308181763,
0.1169070228934288,
-0.07037679105997086,
-0.10422550141811371,
-0.021159442141652107,
-0.0995982363820076,
-0.06464554369449615,
0.0091568473726511,
-0.01401868462562561,
0.02632632851600647,
-0.05910523980855942,
-0.07143404334783554,
-0.05276430398225784,
-0.023042239248752594,
-0.020223796367645264,
0.051107294857501984,
-0.07071010768413544,
0.01284552738070488,
-0.021470513194799423,
-0.10921520739793777,
-0.05898277834057808,
0.09560956060886383,
0.11116822808980942,
0.003647780977189541,
-0.18768513202667236,
0.038339488208293915,
0.016287777572870255,
0.02849651873111725,
-0.09586136788129807,
0.052970316261053085,
0.06761293113231659,
0.1395629197359085,
0.031402382999658585,
0.01962481066584587,
-0.11085202544927597,
-0.1104038879275322,
0.02774297446012497,
0.13136667013168335,
-0.05305192247033119,
0.030401788651943207,
-0.06560342013835907,
0.08067839592695236,
0.15180809795856476,
0.03378046303987503,
0.07736847549676895,
-0.051053646951913834,
0.077791228890419,
0.06614312529563904,
-0.021268779411911964,
0.02747395820915699,
0.042434848845005035,
-0.002329175593331456,
-0.07720939069986343,
0.13370276987552643,
0.031984057277441025,
0.03960227966308594,
-0.04603267088532448,
-0.005371285602450371,
-0.019863691180944443,
-0.04597989097237587,
-0.026475466787815094,
0.014535696245729923,
0.08497557789087296,
-0.055397238582372665,
0.07409702986478806,
0.0303414985537529,
0.08590106666088104,
-0.028143711388111115,
0.07764231413602829,
-0.011113142594695091,
-0.034625038504600525,
0.12209366261959076,
-0.1001647561788559,
0.030693121254444122,
0.07398436218500137,
0.11724331974983215,
-0.023034611716866493,
0.10879997909069061,
0.10101021826267242,
-0.03392445668578148,
0.06647301465272903,
-0.054136037826538086,
-0.08787845820188522,
-0.05216230824589729,
-0.09250040352344513,
0.10466107726097107,
-0.006392763927578926,
0.028530526906251907,
-0.07848481833934784,
0.05301007255911827,
0.16103310883045197,
-0.04752958565950394,
0.058349862694740295,
-0.10493279248476028,
-0.08845867216587067,
0.19786173105239868,
0.02972595766186714,
-0.061358898878097534,
-0.044956136494874954,
0.038706954568624496,
-0.062165550887584686,
0.16192002594470978,
-0.028776496648788452,
0.12262459099292755,
-0.1077139601111412,
0.01950773037970066,
-0.045351896435022354,
0.060667507350444794,
0.018898453563451767,
0.003925215918570757,
-0.10500594228506088,
0.15764211118221283,
-0.10625233501195908,
-0.08834873139858246,
0.10081197321414948,
0.046103060245513916,
0.1007378101348877,
0.033627450466156006,
-0.02174649015069008,
-0.10680913925170898,
0.06178425997495651,
-0.06637188047170639,
-0.01585114188492298,
0.048742856830358505,
0.04256651550531387,
0.04375683516263962,
0.12351410835981369,
-0.04616205021739006,
-0.10688139498233795,
0.03763311356306076,
-0.0002847816504072398,
-0.23299714922904968,
0.0670018121600151,
-0.08271446079015732,
0.03414038568735123,
0.07930896431207657,
0.07305753231048584,
0.06602825224399567,
-0.09935161471366882,
0.041670750826597214,
-7.037491741357371e-05,
0.053899288177490234,
0.047003671526908875,
-0.10469403117895126,
-0.009534238837659359,
-0.07379566133022308,
0.08160427212715149,
-0.0679129883646965,
-0.009293407201766968,
-0.03205488249659538,
-0.00831534806638956,
0.11579579859972,
-0.0043714637868106365,
-0.02784869074821472,
-0.004330550320446491,
-0.06069912761449814,
-0.007721096742898226,
-0.0889790803194046,
-0.09512854367494583,
-0.09659132361412048,
-0.024263529106974602,
0.011228247545659542,
-0.03505833446979523,
-0.09681051969528198,
-0.09990107268095016,
-0.0005719317123293877,
0.04595988616347313,
-0.011687985621392727,
0.0800379291176796,
0.08740758895874023,
0.07420985400676727,
-0.06027526408433914,
-0.08013883978128433,
0.04901894927024841,
-0.08604875206947327,
-0.14720815420150757,
-0.04224072024226189,
0.11582261323928833,
0.07445580512285233,
-0.063911072909832,
-0.09617814421653748,
-0.12030356377363205,
-0.08133696764707565,
-0.059001412242650986,
-0.06906887143850327,
-0.05321236699819565,
-0.08583138883113861,
0.10042952746152878,
0.04393588379025459,
0.09874077886343002,
-0.03224975988268852,
0.05023970827460289,
-0.05673646181821823,
0.0015569513197988272,
-0.09869414567947388,
0.055020637810230255,
0.06898698210716248,
-0.16080696880817413,
-0.13795769214630127,
-0.03879930078983307,
-0.03804191201925278,
-0.07827158272266388,
-0.1170358881354332,
-0.0835631936788559,
0.04949721321463585,
0.08730638772249222,
0.013000993989408016,
-0.0006627565016970038,
-0.0661689043045044,
0.14383497834205627,
-0.016925284639000893,
-0.09198029339313507,
0.09612644463777542,
-0.047451432794332504,
-0.05798647552728653,
0.12326623499393463,
0.09080623835325241,
0.033525507897138596,
-0.07055902481079102,
-0.021983249112963676,
0.06924843788146973,
0.07425370067358017,
0.005131007172167301,
-0.11275600641965866,
0.026443535462021828,
0.056163083761930466,
0.0915282592177391,
-0.00694262282922864,
0.09575813263654709,
0.09912808984518051,
0.10239184647798538,
0.07800509035587311,
0.03841955587267876,
0.05866685137152672,
-0.11767846345901489,
0.0669628158211708,
0.018140355125069618,
-0.04260312393307686,
-0.10711958259344101,
-0.03528806194663048,
0.03376214951276779,
0.04561590775847435,
-0.03639644756913185,
-0.09157365560531616,
0.1293337494134903,
-0.06931878626346588,
-0.1622757613658905,
0.04993663728237152,
-0.02705349028110504,
0.00027837115339934826,
-0.0934491828083992,
-0.08474238216876984,
0.08778351545333862,
-0.008627205155789852,
0.10412493348121643,
0.08508293330669403,
0.013987017795443535,
-0.03592747077345848,
0.0298662930727005,
0.14685581624507904,
0.10299289971590042,
0.023480268195271492,
-0.009461723268032074,
0.022632885724306107,
-0.08191851526498795,
-0.11095631122589111,
-0.10080109536647797,
0.056194450706243515,
0.13736049830913544,
-0.04769543930888176,
0.023676035925745964,
0.15204955637454987,
0.005217580124735832,
-0.06702729314565659,
-0.1543055921792984,
-0.08465712517499924,
0.02958553470671177,
0.07986660301685333,
0.14221760630607605,
-0.05602264404296875,
-0.028636550530791283,
-0.05156395211815834,
0.0640147402882576,
0.04515219107270241,
-0.05045304819941521,
0.08485580235719681,
-0.005241211038082838,
0.008608010597527027,
-0.0061632017605006695,
0.047169279307127,
-0.038725078105926514,
-0.025526056066155434,
0.05696139484643936,
0.07534296065568924,
-0.05436786636710167,
0.043504565954208374,
0.006959941238164902,
-0.1242734044790268,
0.020285582169890404,
-0.061626043170690536,
0.22071997821331024,
-0.09659474343061447,
0.0810636430978775,
0.2387506067752838,
-0.10164105892181396,
-0.006438565906137228,
-0.06905017048120499,
0.1536966860294342,
0.00046048080548644066,
0.0924883633852005,
-0.2115863859653473,
0.1441279649734497,
-0.04140099138021469,
-0.09230552613735199,
0.14078734815120697,
0.08768469095230103,
0.05412185937166214,
-0.06483175605535507,
-0.07090737670660019,
0.1096213310956955,
-0.11165455728769302,
-0.15354833006858826,
-0.17299140989780426,
0.02313770353794098,
-0.050636690109968185,
-0.048088185489177704,
-0.07166466116905212,
0.02871701307594776,
-0.03190182149410248,
-0.11249209940433502,
0.02470177225768566,
-0.010526470839977264,
0.05204635486006737,
-0.029832618311047554,
-0.04567500576376915,
-0.003286926308646798,
-0.028256600722670555,
0.057572171092033386,
0.048957884311676025,
-0.10637455433607101,
-0.09233938157558441,
0.1556415855884552,
0.13550011813640594,
-0.13391819596290588,
-0.13361911475658417,
0.11112882196903229,
-0.004282125271856785,
0.03330669924616814,
0.10710505396127701,
-0.06487621366977692,
0.05113840848207474,
0.044296883046627045,
0.16375982761383057,
0.00811669323593378,
0.025532526895403862,
-0.06369363516569138,
-0.011244315654039383,
0.06512942165136337,
-0.07418632507324219,
-0.09087914228439331,
0.04168742522597313,
-0.01729724556207657,
-0.0418098121881485,
-0.03956938907504082,
0.019648080691695213,
-0.003521365113556385,
0.06709226220846176,
0.02128893882036209,
-0.012410281226038933,
0.08114263415336609,
-0.02785595878958702,
0.015147475525736809,
0.07255937159061432,
0.08616551756858826,
0.021223753690719604,
-0.0191340409219265,
0.01226086262613535,
-0.09156795591115952,
0.013957001268863678,
0.02136758342385292,
0.05840739980340004,
0.028989043086767197,
0.09454309940338135,
0.01862146519124508,
0.06694198399782181,
0.016612960025668144,
0.06358317285776138,
-0.06037979573011398,
-0.12330865859985352,
-0.06498128175735474,
0.051480405032634735,
-0.043176114559173584,
-0.05648624897003174,
-0.029581980779767036,
-0.03699209541082382,
0.1047542616724968,
0.03043452464044094,
-0.08910888433456421,
-0.09278933703899384,
-0.08105192333459854,
-0.023363573476672173,
0.05096727982163429,
0.044406209141016006,
0.01238086074590683,
-0.002303979592397809,
-0.12055753916501999,
0.14771686494350433,
0.05866586044430733,
-0.015273282304406166,
0.03618260845541954,
-0.05773988738656044,
0.12543940544128418,
0.0294312983751297,
-0.0780123770236969,
0.0740511566400528,
0.025379354134202003,
0.03800408914685249,
0.015174878761172295,
0.05651088431477547,
-0.14899086952209473,
-0.061756718903779984,
-0.15527617931365967,
0.0075950901955366135,
0.09568003565073013,
-0.04806884378194809,
-0.04725252464413643,
-0.04560139402747154,
0.10678180307149887,
0.011037580668926239,
-0.08640577644109726,
0.03318653628230095,
-0.015764055773615837,
-0.1535061001777649,
-0.015578641556203365,
-0.07660934329032898,
-0.1668115109205246,
0.04146101325750351,
-0.034299567341804504,
0.024333737790584564,
0.0467488057911396,
-0.07316508889198303,
0.023720404133200645,
0.05020934343338013,
0.008173379115760326,
0.1144648864865303,
0.016103561967611313,
-0.0758628398180008,
0.14867334067821503,
0.0005565659957937896,
0.05942873656749725,
-0.10048966109752655,
-0.11928220093250275,
-0.029803182929754257,
0.10366112738847733,
0.06912034749984741,
0.11303690075874329,
-0.11350186169147491,
-0.036216724663972855,
-0.06180303543806076,
-0.0010496103204786777,
0.08544234186410904,
-0.030408984050154686,
0.018091395497322083,
0.031963806599378586,
0.01124573964625597,
-0.014073058031499386,
0.20801092684268951,
-0.0017942867707461119,
-0.0075819664634764194,
0.01887194812297821,
0.08222544938325882,
-0.01799907349050045,
-0.002434944035485387,
-0.02893044240772724,
-0.0697443038225174,
0.07906433939933777,
-0.04062749072909355,
-0.049236003309488297,
-0.06318005174398422,
-0.06799069046974182,
0.07336250692605972,
-0.09907136857509613,
-0.030316941440105438,
-0.06021539494395256,
-0.06203071027994156,
0.018474215641617775,
0.06789670139551163,
0.10651987791061401,
-0.11464590579271317,
-0.05739463493227959,
-0.14847472310066223,
-0.01895776018500328,
0.1090012937784195,
-0.05558226630091667,
-0.0781000405550003,
0.11654306948184967,
0.08342525362968445,
-0.04389890655875206,
-0.09239619225263596,
0.06857062131166458,
0.07186687737703323,
-0.066744863986969,
-0.03270399942994118,
-0.002830860670655966,
-0.033491674810647964,
-0.08091118186712265,
0.031645163893699646,
0.08139859139919281,
-0.005809272639453411,
0.04902031645178795,
-0.030816467478871346,
0.03429251164197922,
0.057949334383010864,
0.06691648066043854,
0.07190649956464767,
0.15057697892189026,
0.05593707039952278,
0.00850099790841341,
-0.042747534811496735,
0.13901181519031525,
0.08922164887189865,
0.12805192172527313,
0.11233056336641312,
0.11921447515487671,
-0.0872742161154747,
-0.0007164737908169627,
0.06026262417435646,
0.06311196088790894,
0.03771530091762543,
0.014784270897507668,
-0.07795555144548416,
0.09964089840650558,
-0.01661926507949829,
0.011793946847319603,
0.007433212362229824,
0.025608152151107788,
0.04335685819387436,
-0.052152641117572784,
0.015524717047810555,
-0.046117544174194336,
-0.006146243307739496,
-0.03059536963701248,
0.025301292538642883,
0.022274618968367577,
-0.04684419184923172,
0.05874823033809662,
0.09971436113119125,
-0.07596250623464584,
-0.04839593917131424,
-0.004463404882699251,
0.05087243393063545,
-0.0635790228843689,
0.03389131277799606,
0.05186568200588226,
0.03490862250328064,
-0.12577566504478455,
0.1324877291917801,
0.10386921465396881,
-0.09521971642971039,
-0.029564963653683662,
-0.05062858760356903,
-0.052539970725774765,
-0.07201620936393738,
0.0093544851988554,
-0.05223824083805084,
0.06664630770683289,
0.07892483472824097,
0.07340957224369049,
-0.002373975934460759,
-0.08058507740497589,
-0.06777497380971909,
0.03771777078509331,
0.12274890393018723,
-0.010896832682192326,
-0.10588430613279343,
0.14411328732967377,
-0.0669783279299736,
0.10302197188138962,
0.029377030208706856,
-0.07438035309314728,
-0.005549051333218813,
0.12217388302087784,
-0.11288299411535263,
0.10202846676111221,
0.022280098870396614,
-0.04738866910338402,
0.11980839818716049,
0.0479106679558754,
0.14453740417957306,
0.1151186153292656,
0.006763657089322805,
0.13318367302417755,
0.08358564972877502,
-0.020886102691292763,
0.062067389488220215,
-0.06250147521495819,
-0.054984427988529205,
0.01943938061594963,
-0.01358598843216896,
-0.004639432765543461,
0.05217592790722847,
0.15212233364582062,
0.07221075147390366,
0.061358775943517685,
0.056632690131664276,
-0.12076269090175629,
-0.03291451558470726,
0.12345511466264725,
-0.005174619145691395,
0.008589324541389942,
0.03341291844844818,
0.11367917060852051,
-0.009120815433561802,
-0.054386693984270096,
0.03689102083444595,
-0.0060597071424126625,
-0.015903176739811897,
-0.06478270888328552,
-0.053485725075006485,
0.012012412771582603,
-0.09077803790569305,
0.06940498948097229,
-0.04877462238073349,
0.1312643438577652,
0.01233708392828703,
-0.11592074483633041,
0.03622916713356972,
0.07697586715221405,
-0.002161309588700533,
0.019504426047205925,
0.046514399349689484,
0.023042304441332817,
-0.18333084881305695,
0.07706295698881149,
0.07590559124946594,
-0.11539006978273392,
0.041272833943367004,
-0.07295095175504684,
-0.061110932379961014,
-0.041881415992975235,
-0.10661441832780838,
0.0020431901793926954,
-0.10830235481262207,
-0.08828549832105637,
-0.07827971875667572,
-0.06287326663732529,
0.013984935358166695,
0.155582994222641,
-0.1521032154560089,
-0.01067557092756033,
0.06083222106099129,
0.01972387358546257,
0.09375268220901489,
-0.053377509117126465,
-0.11819341778755188,
0.1083453968167305,
0.05473148077726364,
-0.09102190285921097,
0.09649872779846191,
-0.0651363879442215,
0.09495198726654053,
-0.04479186609387398,
0.0657813549041748,
-0.016968540847301483,
0.016473902389407158,
-0.044063277542591095,
0.09517233073711395,
0.05459976941347122,
-0.08604644984006882,
0.01869702711701393,
-0.07048220932483673,
-0.04317997395992279,
0.07066448032855988,
0.1388077586889267,
0.11801166832447052,
-0.038468699902296066,
0.07257809489965439,
-0.061430830508470535,
0.19424903392791748,
0.015063456259667873,
0.09965844452381134,
0.19365541636943817,
0.0676366314291954,
0.13454829156398773,
-0.14015066623687744,
-0.03377856686711311,
-0.01584809646010399,
-0.08888313919305801,
0.07468931376934052,
-0.01674073562026024,
0.1125388890504837,
0.11554325371980667,
-0.06748896092176437,
0.07150792330503464,
0.03727457672357559,
-0.07058435678482056,
-0.019880758598446846,
0.022945815697312355,
-0.04608369991183281,
0.006192885339260101,
-0.06983530521392822,
-0.04883434623479843,
-0.08252456784248352,
-0.04651033133268356,
-0.02007395774126053,
-0.10656698793172836,
-0.1480644792318344,
-0.11907529830932617,
-0.10887835174798965,
0.10736372321844101,
0.023618623614311218,
0.04227918013930321,
-0.12473750859498978,
-0.11568419635295868,
-0.028721502050757408,
-0.030943868681788445,
-0.06460067629814148,
0.01551483292132616,
-0.020468654111027718,
-0.12739190459251404,
-0.0641135424375534,
-0.00515697430819273,
-0.11256753653287888,
-0.009585834108293056,
-0.11907365173101425,
0.0130903460085392,
0.08112524449825287,
0.0932396948337555,
-0.013972286134958267,
-0.0032806764356791973,
0.05542955547571182,
0.06784780323505402,
0.01108788326382637,
-0.06272562593221664,
-0.03198070451617241,
0.024771185591816902,
0.05302732065320015,
-0.05700277164578438,
0.001401921734213829,
-0.07110030204057693,
0.05954108387231827,
0.016170194372534752,
-0.04931061342358589,
0.0888230949640274,
-0.023370996117591858,
-0.030390337109565735,
0.09858871251344681,
-0.10315710306167603,
-0.03056621178984642,
0.14868991076946259,
0.017127716913819313,
-0.11833753436803818,
0.10005894303321838,
0.06680721044540405,
-0.013119685463607311,
-0.008375872857868671,
0.04099011793732643,
0.043163690716028214,
-0.023840589448809624,
0.07583195716142654,
0.010923431254923344,
0.09442698955535889,
-0.0002988474443554878,
0.02688618004322052,
-0.03129616007208824,
0.03349898010492325,
0.05831432715058327,
0.03511777147650719,
0.02337263524532318,
0.13173045217990875,
-0.09174755215644836,
0.029710596427321434,
0.043611034750938416,
-0.10404277592897415,
0.09504157304763794,
-0.07912679761648178,
-0.10307784378528595,
0.05400894954800606,
-0.07133948057889938,
0.09126372635364532,
-0.10182540863752365,
0.04150625318288803,
-0.07922644913196564,
0.1119765117764473,
-0.06594324856996536,
0.01252803299576044,
0.11047609150409698,
-0.018092600628733635,
-0.1055007204413414,
0.0382118746638298,
-0.0065141101367771626,
-0.1140323206782341,
-0.05225224420428276,
0.11680898815393448,
-0.05965875834226608,
-0.11708813905715942,
-0.08670451492071152,
-0.08077351748943329,
-0.06917458027601242,
-0.02134213224053383,
-0.034587711095809937,
-0.10462363809347153,
-0.10574668645858765,
-0.09294722229242325,
0.07052869349718094,
-0.02497262880206108,
0.10691773891448975,
0.07708098739385605,
-0.12143515050411224,
0.12982328236103058,
-0.15922681987285614,
-0.06065870821475983,
-0.09506912529468536,
-0.00413456279784441,
0.06692443042993546,
0.045833833515644073,
-0.10468138009309769,
0.12041383981704712,
-0.14000724256038666,
-0.007189960218966007,
0.11806145310401917,
-0.08517885208129883,
-0.06258000433444977,
-0.044864363968372345,
0.09613920003175735,
-0.07593577355146408,
0.10123632103204727,
0.09699366241693497,
-0.02676820196211338,
0.029080308973789215,
0.07769327610731125,
-0.012823513709008694,
0.04569955915212631,
0.08630464226007462,
-0.08213420957326889,
-0.1592540591955185,
0.09149432927370071,
0.010606176219880581,
0.10139284282922745,
-0.02362476848065853,
-0.09287941455841064,
-0.031309451907873154,
-0.039537154138088226,
0.058632057160139084,
0.04974246397614479,
0.027141975238919258,
-0.08943521231412888,
0.0432557687163353,
-0.05389193817973137,
0.11359737813472748,
-0.09613805264234543,
-0.1121903732419014,
0.06663839519023895,
-0.035443734377622604,
-0.010084019973874092,
0.08554254472255707,
-0.10144437104463577,
0.007346979808062315,
-0.00859034899622202,
0.01700802892446518,
-0.017297212034463882,
-0.03929796814918518,
-0.09514573961496353,
-3.168599505443126e-05,
-0.010297523811459541,
-0.04213191568851471,
0.09979944676160812,
-0.015429742634296417,
0.051891669631004333,
-0.003130444325506687,
-0.036376744508743286,
0.023046046495437622,
-0.1229110062122345,
-0.08152198046445847,
-0.02689783088862896,
0.019632672891020775,
-0.03194992616772652,
-0.05843612179160118,
-0.11871657520532608,
0.15498384833335876,
-0.08734694868326187,
-0.03560343384742737,
0.051832668483257294,
-0.0611208938062191,
0.09880324453115463,
-0.045986149460077286,
-0.049630001187324524,
-0.09840518236160278,
0.10043300688266754,
-0.017578747123479843,
-0.2396644651889801,
-0.08636871725320816,
0.0778205618262291,
0.01765103079378605,
0.023456741124391556,
0.0427035391330719,
-0.13267067074775696,
0.09632445871829987,
-0.1112838089466095,
0.061308328062295914,
-0.07324451208114624,
-0.14235524833202362,
-0.1268572360277176,
0.1538451761007309,
-0.017776714637875557,
-0.09660007804632187,
-0.06225284934043884,
0.0771162137389183,
0.0609436109662056,
0.04641493782401085,
0.04177519679069519,
-0.003968511708080769,
-0.07645628601312637,
0.06072345748543739,
-0.1062919870018959,
0.0480135940015316,
-0.01549964677542448,
0.17272625863552094,
0.07764025777578354,
0.2301347255706787,
0.061328988522291183,
-0.07782401889562607,
-0.09804899990558624,
0.06814280897378922,
-0.04215703159570694,
-0.05897781625390053,
-0.06166323274374008,
-0.010032810270786285,
-0.024355512112379074,
-0.10115792602300644,
-0.0683518573641777,
-0.11868881434202194,
-0.001288657309487462,
-0.08500410616397858,
-0.04396761208772659,
-0.0326928049325943,
-0.011304946616292,
0.025648245587944984,
-0.11477836966514587,
0.0005561860161833465,
-0.1207086369395256,
0.040580980479717255,
0.08984168618917465,
0.01374722644686699,
-0.051279790699481964,
0.03496061637997627,
-0.06317434459924698,
-0.0004848701355513185,
-0.06733343005180359,
-0.08769289404153824,
0.0776548683643341,
-0.0603562667965889,
-0.026528282091021538,
-0.08896654844284058,
0.02981950342655182,
-0.0013765997719019651,
-0.12093159556388855,
0.022697700187563896,
-0.015248569659888744,
0.06889312714338303,
0.04165378212928772,
-0.0059517752379179,
0.06565836071968079,
-0.0380149781703949,
0.09046076983213425,
0.07444317638874054,
0.06272722035646439,
0.034510064870119095,
0.06959652155637741,
-0.02624942734837532,
-0.08814121037721634,
0.034335535019636154,
0.04692588001489639,
0.04714641347527504,
0.07935799658298492,
-0.06137871369719505,
0.03997526690363884,
0.07374989986419678,
0.016389276832342148,
0.08331304788589478,
0.03042246215045452,
-0.02218637987971306,
-0.033688612282276154,
0.007513794582337141,
-0.15379899740219116,
-0.13482758402824402,
-0.11206860840320587,
-0.1402929127216339,
-0.014376950450241566,
-0.011555894277989864,
-0.07779403775930405,
0.03031129576265812,
0.0269071813672781,
0.06862296164035797,
-0.018995385617017746,
0.11145216226577759,
-0.0795011967420578,
-0.00017168419435620308,
0.00610502902418375,
-0.012292394414544106,
-0.0243801511824131,
0.05426540970802307,
0.03278175741434097,
-0.012175599113106728,
-0.16126684844493866,
-0.10035761445760727,
-0.025646237656474113,
-0.13161885738372803,
-0.043863095343112946,
-0.008378771133720875,
-0.04668812081217766,
-0.0694558396935463,
0.05836257338523865,
-0.042745135724544525,
0.01968516781926155,
-0.06640337407588959,
0.07024575769901276,
-0.07014947384595871,
-0.08618577569723129,
-0.06597279757261276,
-0.13679924607276917,
-0.03689972311258316,
-0.05380675569176674,
-0.05315527319908142,
0.024657733738422394,
-0.030931735411286354,
0.0517776757478714,
0.05634448304772377,
0.003419287037104368,
-0.021102461963891983,
0.10016652196645737,
0.031737491488456726,
-0.016935594379901886,
0.016362322494387627,
-0.06350136548280716,
0.03183015063405037,
-0.09586776047945023,
0.013932344503700733,
-0.0598842091858387,
-0.03238912299275398,
-0.00513587798923254,
0.09675971418619156,
-0.05376676842570305,
0.027258196845650673,
0.008307243697345257,
-0.10171089321374893,
0.03641737252473831,
-0.06360314786434174,
-0.03818170353770256,
0.0461491234600544,
0.08093434572219849,
-0.04324307292699814,
-0.07032900303602219,
0.03457095846533775,
0.09478428959846497,
-0.03034946694970131,
0.06573963910341263,
-0.07947275787591934,
-0.11483689397573471,
-0.03372523933649063,
0.00680203502997756,
0.027346832677721977,
0.08025476336479187,
-0.0852900817990303,
-0.0811702087521553,
0.12460871785879135,
-0.022334909066557884,
-0.03196243569254875,
0.013182638213038445,
0.08599396795034409,
-0.0641271322965622,
-0.08025041967630386,
0.09702258557081223,
-0.01415092684328556,
-0.03611922636628151,
0.041557393968105316,
-0.0015899045392870903,
-0.18837971985340118,
0.09286396205425262,
-0.04833115637302399,
0.10591842979192734,
-0.002655753633007407,
0.06341499090194702,
0.05885544419288635,
-0.07707107067108154,
-0.025617316365242004,
-0.05498692765831947,
0.020448101684451103,
0.09257423877716064,
0.12318282574415207,
0.06790745258331299,
0.08991933614015579,
0.04977119341492653,
-0.0014623376773670316,
0.05284713953733444,
0.011290134862065315,
0.016118289902806282,
0.10123778134584427,
0.04167560860514641,
0.07799863815307617,
-0.18198995292186737,
0.1015675812959671,
0.10351398587226868,
-0.12921813130378723,
-0.000806746887974441,
0.02484225295484066,
-0.013793147169053555,
-0.11667037755250931,
-0.07240781933069229,
-0.16969290375709534,
-0.008338377811014652,
-0.012267089448869228,
-0.0513889417052269,
-0.023882512003183365,
-0.11166144907474518,
0.028135336935520172,
-0.04117373004555702,
-0.03543860465288162,
-0.014863709919154644,
-0.13219019770622253,
-0.08764622360467911,
0.07715103030204773,
-0.152258962392807,
-0.14555063843727112,
0.09355661273002625,
-0.012923995032906532,
0.019339732825756073,
-0.06401802599430084,
0.1306620091199875,
-0.006786278914660215,
0.06265968084335327,
-0.07181980460882187,
0.15860359370708466,
-0.03337628394365311,
-0.05224647745490074,
0.012620484456419945,
0.044004425406455994,
-0.08209109306335449,
0.05145451799035072,
0.13629493117332458,
-0.06501037627458572,
0.03590632975101471,
-0.10274619609117508,
0.020293859764933586,
0.09323091804981232,
0.006019909866154194,
0.08050549030303955,
0.06196912005543709,
-0.007566401734948158,
-0.04215381294488907,
-0.08096682280302048,
0.13988345861434937,
0.008514591492712498,
0.017006492242217064,
0.08792097866535187,
0.11997517943382263,
0.07938812673091888,
0.05140412226319313,
-0.10186029970645905,
0.022492360323667526,
-0.01134447380900383,
0.02757444977760315,
-0.017824159935116768,
-0.1438538134098053,
0.052173301577568054,
0.15104976296424866,
-0.05314641818404198,
0.11660903692245483,
0.1050058975815773,
-0.036076679825782776,
0.09401128441095352,
0.07541196793317795,
0.14049141108989716,
0.011376000009477139,
-0.1059662327170372,
0.028322316706180573,
-0.026104969903826714,
-0.12836486101150513,
-0.0970563068985939,
0.03654734790325165,
-0.08477934449911118,
0.044224224984645844,
0.12659849226474762,
-0.011629525572061539,
-0.09079068899154663,
0.061562638729810715,
-0.016584817320108414,
0.11877993494272232,
-0.054447516798973083,
-0.13164985179901123,
-0.22142605483531952,
-0.0015345800202339888,
0.16569945216178894,
-0.11935929954051971,
0.08259634673595428,
0.031424153596162796,
0.029367661103606224,
0.012495462782680988,
0.002023127628490329,
-0.03808722645044327,
-0.1372857689857483,
-0.0739644393324852,
-0.078040212392807,
-0.04793742299079895,
0.08156812936067581,
0.05774319916963577,
-0.010423766449093819,
-0.0566445030272007,
0.08900860697031021,
-0.13139411807060242,
-0.026861144229769707,
5.093708750791848e-06,
0.16186997294425964,
-0.09548154473304749,
0.003966286312788725,
-0.04125917702913284,
0.028087615966796875,
-0.00788634829223156,
0.11618892848491669,
0.09471593797206879,
-0.09708137810230255,
0.131143257021904,
-0.016719933599233627,
-0.038795214146375656,
-0.0720871314406395,
-0.15785539150238037,
0.05320429429411888,
0.016659818589687347,
-0.056534282863140106,
0.001726586720906198,
0.05457741767168045,
0.07268958538770676,
0.03816273435950279,
-0.0005573880625888705,
0.06561040878295898,
0.14301788806915283,
0.05431857332587242,
0.12342751771211624,
-0.03234126791357994,
-0.07234872877597809,
-0.017931660637259483,
0.06172024831175804,
0.0022205128334462643,
0.02330644801259041,
0.05581863224506378,
-0.003978009335696697,
-0.009429152123630047,
-0.010830889455974102,
-0.032166969031095505,
0.03342284634709358,
0.015920571982860565,
-0.01170416921377182,
0.12860074639320374,
0.04118833690881729,
-0.029903216287493706,
-0.060227248817682266,
0.08531922847032547,
-0.08678413182497025,
-0.0035214435774832964,
-0.08377989381551743,
0.09990653395652771,
-0.02811458520591259,
-0.09139149636030197,
0.0014839675277471542,
-0.009287729859352112,
-0.05282721668481827,
0.029146980494260788,
0.05096680298447609,
-0.040247268974781036,
0.08483017981052399,
-0.008292337879538536,
0.10496523231267929,
0.04969612509012222,
0.0222262442111969,
0.07049918174743652,
0.025718240067362785,
0.05970799922943115,
0.0462150014936924,
0.07864350080490112,
0.008826974779367447,
0.028594685718417168,
-0.02081259712576866,
0.09763149917125702,
0.043321643024683,
-0.0396897979080677,
0.0692111998796463,
-0.05379614979028702,
-0.11118726432323456,
-0.05297619476914406,
0.05597333237528801,
0.11851046979427338,
-0.03667839616537094,
-0.04942717030644417,
0.02252696268260479,
-0.11170318722724915,
-0.06747913360595703,
-0.05884581059217453,
-0.0811738669872284,
0.15394160151481628,
-0.061816487461328506,
-0.06998691707849503,
-0.09771902114152908,
0.039615679532289505,
-0.1735466569662094,
-0.0059566013514995575,
0.07543094456195831,
0.010555747896432877,
0.02770424634218216,
0.08959031105041504,
-0.02610285021364689,
0.07601931691169739,
-0.08402631431818008,
0.017361653968691826,
-0.022984517738223076,
0.039202407002449036,
-0.03575287386775017,
-0.07156606763601303,
-0.024638572707772255,
-0.16705211997032166,
-0.10549020767211914,
0.05712634325027466,
-0.11542270332574844,
-0.03655153512954712,
-0.04245298355817795,
-0.06851130723953247,
0.051482491195201874,
-0.027163488790392876,
0.05768434330821037,
-0.05493251979351044,
-0.049742139875888824,
-0.14771538972854614,
-0.0024652418214827776,
-0.026264550164341927,
-0.0033869417384266853,
0.14301808178424835,
-0.010011637583374977,
0.011558683589100838,
0.07451069355010986,
-0.09772150218486786,
-0.08825413137674332,
0.13350076973438263,
0.054149724543094635,
-0.09210439771413803,
0.05400644615292549,
0.09699323773384094,
-0.05032457411289215,
0.03986669331789017,
-0.10794493556022644,
0.062393706291913986,
0.14611691236495972,
0.0009098938899114728,
0.09428530186414719,
-0.060786981135606766,
0.013912172056734562,
-0.02024231106042862,
-0.006405670661479235,
0.11694905161857605,
0.05271340161561966,
-0.09342052787542343,
-0.048466071486473083,
0.037075627595186234,
0.02494141273200512,
0.055569492280483246,
-0.03797256201505661,
0.040451038628816605,
-0.02328086458146572,
0.018384285271167755,
0.01688135601580143,
0.026692764833569527,
0.17392846941947937,
0.0850435271859169,
-0.07988520711660385,
-0.02603040635585785,
0.014902566559612751,
0.06189588084816933,
-0.016233988106250763,
-0.050222523510456085,
-0.0954248309135437,
0.1332128345966339,
-0.14174200594425201,
0.11820365488529205,
0.10246285051107407,
0.031184634193778038,
0.0007691780920140445,
-0.037673767656087875,
0.006218123249709606,
-0.04142666608095169,
0.03156083822250366,
0.06855956465005875,
0.11677667498588562,
0.07333240658044815,
0.11494101583957672,
0.056017667055130005,
-0.009337370283901691,
-0.010974529199302197,
-0.03262795880436897,
0.02917369268834591,
0.09821801632642746,
-0.16559725999832153,
-0.01851392164826393,
0.022587263956665993,
-0.15378586947917938,
0.03382863476872444,
-0.11067966371774673,
0.029807088896632195,
-0.00907113030552864,
-0.061799608170986176,
0.218503937125206,
0.056303299963474274,
0.03742527589201927,
-0.0930141806602478,
-0.03658198192715645,
-0.03189707174897194,
0.052769292145967484,
-0.07741839438676834,
-0.1868065446615219,
-0.15168942511081696,
-0.08193927258253098,
-0.030843395739793777,
0.029317006468772888,
0.03444814309477806,
-0.11243313550949097,
0.02546231634914875,
-0.04568833112716675,
-0.04878012835979462,
0.07868421077728271,
0.05983136221766472,
-0.05688030645251274,
-0.06515710800886154,
-0.009752562269568443,
0.09922397136688232,
-0.009877248667180538,
0.12336941808462143,
-0.019285328686237335,
0.04700459539890289,
-0.09920766949653625,
-0.02531462162733078,
-0.039110757410526276,
-0.1391070932149887,
-0.05616401880979538,
-0.007458224426954985,
-0.02973119728267193,
0.014884013682603836,
0.06679010391235352,
0.06912336498498917,
-0.04007524624466896,
-0.02676086127758026,
0.038140665739774704,
-0.08689256012439728,
-0.00010253029176965356,
0.061879537999629974,
0.04109925776720047,
0.11191824078559875,
-0.03906968981027603,
-0.06936448067426682,
0.11306485533714294,
0.06861758977174759,
-0.05276909098029137,
-0.09966874122619629,
0.06382232159376144,
0.07850515097379684,
0.08372790366411209,
-0.04370963200926781,
0.13002343475818634,
-0.00011344504309818149,
-0.0533299595117569,
-0.046146247535943985,
0.01776825077831745,
-0.03148874267935753,
0.10019636154174805,
0.004918014630675316,
0.031234264373779297,
-0.048105426132678986,
-0.046199504286050797,
0.09467753767967224,
-0.055832795798778534,
-0.09549590945243835,
0.017182044684886932,
-0.09989568591117859,
0.08306519687175751,
-0.0656709149479866,
0.06943181157112122,
0.09121984988451004,
0.11945264786481857,
0.04909858480095863,
0.08660726249217987,
0.07739095389842987,
-0.012381838634610176,
-0.08349283784627914,
0.02631261944770813,
-0.026881230995059013,
0.059461560100317,
-0.07525038719177246,
-0.13329216837882996,
0.11033958941698074,
0.050628483295440674,
0.06360966712236404,
0.0027829622849822044,
0.00840604119002819,
-0.07420198619365692,
-0.0036717529874294996,
0.020291341468691826,
0.02346370741724968,
-0.10694380849599838,
0.08018385618925095,
-0.012210158631205559,
-0.05551249906420708,
-0.11472193151712418,
-0.04339052736759186,
0.01358861569315195,
0.11620845645666122,
0.029862023890018463,
-0.02141392230987549,
-0.0789155662059784,
-0.027364512905478477,
-0.0219868291169405,
0.06327006965875626,
-0.1078217476606369,
0.07038939744234085,
-0.06660474836826324,
0.07082205265760422,
-0.00782913900911808,
-0.07836152613162994,
0.11279818415641785,
-0.08916464447975159,
-0.08071780204772949,
0.029143603518605232,
-0.12105464190244675,
-0.09842585772275925,
-0.03408767282962799,
0.06910131871700287,
-0.01373713742941618,
-0.06378822028636932,
0.09545896202325821,
-0.1107463464140892,
0.04139690846204758,
0.07853849977254868,
-0.10186917334794998,
-0.0737735852599144,
-0.1153094694018364,
0.012086297385394573,
-0.016977649182081223,
0.08376380801200867,
-0.14947667717933655,
0.05412502959370613,
-0.09904562681913376,
0.001513820607215166,
0.08268619328737259,
0.06901172548532486,
0.04246261715888977,
0.02397589199244976,
-0.07320880889892578,
0.16125278174877167,
0.0996590331196785,
0.0649484172463417,
0.05887938290834427,
-0.06749695539474487,
-0.06874452531337738,
-0.1426374316215515,
-0.10086715966463089,
0.11966491490602493,
-0.0924321711063385,
0.09644471853971481,
-0.052558764815330505,
-0.0064652832224965096,
-0.10172399878501892,
0.08020979166030884,
0.028291184455156326,
-0.0727580264210701,
-0.05352723225951195,
-0.08696075528860092,
0.05763377621769905,
-0.05191787704825401,
0.04122099652886391,
0.0027186425868421793,
0.06969330459833145,
0.016566868871450424,
-0.04769537225365639,
0.014625845476984978,
-0.0663783997297287,
0.05455351993441582,
-0.04668338596820831,
0.06674270331859589,
0.036018043756484985,
0.01878843642771244,
-0.04063919186592102,
-0.10758928954601288,
0.0631491169333458,
0.09058384597301483,
-0.06159398704767227,
-0.011430664919316769,
-0.049927763640880585,
0.0657818540930748,
-0.016071463003754616,
-0.126922607421875,
-0.06313712894916534,
-0.038619231432676315,
0.08464325964450836,
0.0029962779954075813,
-0.006209449376910925,
0.004516523331403732,
-0.045349083840847015,
0.09328103810548782,
0.1884383261203766,
-0.038159728050231934,
-0.1297120302915573,
-0.10352937877178192,
-0.003843665588647127,
0.08936214447021484,
-0.10824193060398102,
-0.07424746453762054,
-0.014364057220518589,
0.022585084661841393,
-0.05644616484642029,
0.12639141082763672,
0.0012702362146228552,
0.01560247503221035,
-0.005432190839201212,
-0.07688278704881668,
0.027677075937390327,
-0.0413014255464077,
-0.10360307991504669,
0.09170549362897873,
-0.0922497808933258,
0.10553641617298126,
0.037167638540267944,
0.09190864115953445,
0.02249140478670597,
-0.055598221719264984,
-0.048167306929826736,
-0.085969477891922,
-0.0299663282930851,
-0.0842132493853569,
0.033945366740226746,
-0.07671179622411728,
0.020042240619659424,
-0.01844867318868637,
-0.075771763920784,
0.049590978771448135,
0.1052369773387909,
0.03726969286799431,
0.09472857415676117,
0.08383768796920776,
-0.01588009111583233,
-0.06515591591596603,
-0.08692667633295059,
-0.045251209288835526,
-0.15405838191509247,
-0.13297545909881592,
-0.07406282424926758,
-0.10990671813488007,
0.04062497988343239,
0.11946336179971695,
0.024418914690613747,
-0.17534352838993073,
-0.009297042153775692,
-0.14324750006198883,
-0.07124447822570801,
-0.12159471958875656,
-0.02006208896636963,
0.025541935116052628,
-0.052016355097293854,
-0.030974190682172775,
-0.044861309230327606,
0.04926402121782303,
-0.08604729175567627,
-0.07087336480617523,
0.08004346489906311,
0.09986285120248795,
0.045365747064352036,
0.019059166312217712,
0.11173851042985916,
0.044937338680028915,
-0.0664321556687355,
-0.03469126299023628,
0.006337658502161503,
-0.04123203083872795,
-0.01581634022295475,
-0.02419630065560341,
0.008909088559448719,
0.08625290542840958,
-0.07932198792695999,
0.033047039061784744,
0.07130159437656403,
0.10024118423461914,
0.006463108118623495,
-0.12715603411197662,
0.0011023756815120578,
0.03066907450556755,
-0.09248911589384079,
-0.09855841845273972,
0.016390128061175346,
-0.05041034519672394,
-0.11098557710647583,
-0.006217805668711662,
0.009461145848035812,
-0.05967821925878525,
-0.014850467443466187,
-0.029515938833355904,
0.04023892432451248,
-0.00649675726890564,
-0.04645555093884468,
-0.04470457136631012,
-0.009647960774600506,
0.03932861611247063,
-0.01881558634340763,
0.014390886761248112,
-0.09110628813505173,
0.03245086595416069,
-0.010301260277628899,
0.03276851773262024,
0.07830909639596939,
0.099384605884552,
0.041060127317905426,
0.12673036754131317,
0.1764139086008072,
0.07389156520366669,
-0.007090874947607517,
-0.014900851994752884,
0.042933352291584015,
0.09619506448507309,
-0.08030277490615845,
-0.08049222826957703,
0.12348517030477524,
-0.08137791603803635,
0.0696406364440918,
0.06654832512140274,
-0.012476722709834576,
0.04403882846236229,
0.0027281525544822216,
0.01749134063720703,
0.011849390342831612,
0.021502651274204254,
-0.10996845364570618,
-0.07275997847318649,
0.05533292144536972,
-0.10774680227041245,
0.01790185645222664,
-0.06438256055116653,
0.04387766122817993,
0.07338691502809525,
0.030525604262948036,
-0.024201881140470505,
0.12086690217256546,
-0.021605512127280235,
-0.008404587395489216,
-0.016588911414146423,
0.03176053985953331,
-0.014067744836211205,
-0.0848468765616417,
-0.11351177841424942,
-0.10260763019323349,
-0.041701655834913254,
-0.1122933179140091,
-0.014093812555074692,
-0.10753116011619568,
0.056752387434244156,
0.07001382857561111,
-0.0019587872084230185,
0.04418545588850975,
0.025546252727508545,
0.06407245993614197,
0.05855084955692291,
-0.08788161724805832,
0.009575102478265762,
0.13040576875209808,
-0.053634706884622574,
-0.06462196260690689,
0.06550326943397522,
0.04988577216863632,
0.05412351340055466,
-0.12135827541351318,
0.011821593157947063,
-0.059419743716716766,
-0.11149607598781586,
0.055064607411623,
-0.07013138383626938,
-0.005012486595660448,
0.10847791284322739,
0.09292124211788177,
-0.004150676541030407,
-0.018968380987644196,
0.047735799103975296,
-0.13793931901454926,
-0.07791757583618164,
0.026334883645176888,
-0.034957174211740494,
-0.011582648381590843,
0.05249999091029167,
-0.028728269040584564,
-0.01973675936460495,
0.14593328535556793,
0.02247953787446022,
0.06110355257987976,
0.11278995871543884,
-0.04871920868754387,
0.046849753707647324,
0.015129291452467442,
-0.07923494279384613,
-0.04852068051695824,
-0.11159627884626389,
-0.010903199203312397,
0.06530270725488663,
0.014406039379537106,
-0.028199775144457817,
-0.10450784116983414,
-0.07655645161867142,
0.1404210925102234,
0.09230351448059082,
-0.01737980917096138,
0.07010263949632645,
-0.093046635389328,
0.10856892913579941,
0.023025434464216232,
-0.2054324895143509,
0.06181611120700836,
-0.11639055609703064,
-0.09046149253845215,
0.07159748673439026,
-0.10860105603933334,
0.04937611147761345,
0.08338548988103867,
-0.052802674472332,
0.16137807071208954,
0.046293728053569794,
0.06966567784547806,
-0.06421473622322083,
-0.05867007002234459,
0.10778524726629257,
0.02880575694143772,
-0.004649613983929157,
-0.09192802757024765,
0.046172358095645905,
-0.006384615320712328,
0.012435518205165863,
0.1124686524271965,
0.1508949100971222,
0.008466383442282677,
0.004413221031427383,
0.12569661438465118,
-0.06894079595804214,
-0.08861938863992691,
0.05632589012384415,
0.08356422930955887,
0.07836979627609253,
0.0833885669708252,
-0.03132183104753494,
-0.04413479566574097,
-0.0164321418851614,
-0.0899159163236618,
0.06716295331716537,
-0.016126761212944984,
0.014069505967199802,
0.022000808268785477,
-0.020666323602199554,
-0.054146479815244675,
-0.08657359331846237,
0.005444388836622238,
-0.043117497116327286,
0.057841166853904724,
-0.12193512916564941,
-0.04676879569888115,
-0.017213977873325348,
0.014127756468951702,
0.0674310028553009,
-0.013595392927527428,
0.07380560785531998,
0.06873990595340729,
0.024436933919787407,
-0.10234687477350235,
0.025868915021419525,
-0.08676130324602127,
-0.02438749559223652,
-0.0333513468503952,
0.003566573141142726,
0.008378071710467339,
-0.11541220545768738,
-0.005930186714977026,
0.11886104196310043,
0.0552518330514431,
0.09808599203824997,
-0.08318429440259933,
0.028093529865145683,
0.03555310517549515,
-0.011236350983381271,
-0.12498126924037933,
0.062359295785427094,
-0.027384139597415924,
0.03925365209579468,
-0.1043325886130333,
0.08182241767644882,
-0.05553973466157913,
0.12308408319950104,
0.05213794857263565,
-0.14480827748775482,
0.11395477503538132,
-0.06751178205013275,
-0.08680934458971024,
-0.0024845239240676165,
-0.008939956314861774,
-0.05444614216685295,
-0.10389263927936554,
-0.08299372345209122,
0.03799019381403923,
0.05513393133878708,
-0.06636197119951248,
-0.03892345353960991,
-0.009609159082174301,
0.06013643741607666,
0.08416026830673218,
-0.004882202483713627,
0.0709819495677948,
-0.04726662486791611,
-0.06342771649360657,
-0.011105438694357872,
0.08152217417955399,
0.07765191793441772,
-0.009774499572813511,
0.04731540381908417,
0.07846064120531082,
0.07837917655706406,
0.07777771353721619,
0.06448181718587875,
0.1596812903881073,
-0.10732369869947433,
0.03681313619017601,
0.06280409544706345,
-0.07675794512033463,
-0.0970231294631958,
-0.06793361157178879,
-0.12375868111848831,
-0.013526582159101963,
-0.041480544954538345,
0.12854166328907013,
0.09694512188434601,
-0.03808694705367088,
0.1110718846321106,
-0.03030768781900406,
0.04084393009543419,
0.04133540391921997,
0.10613898932933807,
0.04153499752283096,
-0.0537126362323761,
-0.043656352907419205,
0.08632316440343857,
-0.07043840736150742,
-0.11323431134223938,
0.07362457364797592,
0.10084114968776703,
0.07811565697193146,
-0.07057823985815048,
-0.05902903899550438,
-0.04425369203090668,
0.0026692445389926434,
0.06919188797473907,
-0.044787585735321045,
0.034125957638025284,
-0.0539107546210289,
0.06775876134634018,
-0.09036912024021149,
0.0846378430724144,
-0.126888707280159,
-0.0802723690867424,
-0.0642072781920433,
0.047755442559719086,
-0.00981730967760086,
0.032379791140556335,
0.020291347056627274,
0.05730940029025078,
-0.025945276021957397,
0.06956446915864944,
0.04732552915811539,
-0.01685187965631485,
-0.00632814597338438,
0.016204366460442543,
0.010630173608660698,
-0.11272089928388596,
0.004181670490652323,
-0.02794906124472618,
0.06680343300104141,
-0.03600512817502022,
-0.03116406314074993,
-0.15247391164302826,
-0.011084303259849548,
-0.07113821059465408,
-0.13469713926315308,
0.046868205070495605,
0.08843695372343063,
0.057930395007133484,
0.041146062314510345,
-0.02750197798013687,
-0.11016766726970673,
-0.0911901444196701,
0.05722406879067421,
0.04334569722414017,
0.05734053626656532,
0.032244227826595306,
-0.027925223112106323,
0.0535048246383667,
0.0072820791974663734,
0.14252589643001556,
-0.08212614804506302,
0.022379068657755852,
0.13259091973304749,
-0.0482923798263073,
0.018955213949084282,
0.0010416036238893867,
-0.1303182691335678,
0.07171539217233658,
0.021467318758368492,
0.0224667489528656,
0.021337708458304405,
0.05707956477999687,
0.07670705020427704,
0.06241371110081673,
-0.10755863040685654,
0.13692227005958557,
-0.08104021102190018,
0.00509666558355093,
0.12140899896621704,
-0.08026959747076035,
-3.1581963412463665e-05,
0.014559777453541756,
0.04944769665598869,
0.004152149893343449,
0.014541209675371647,
0.055924225598573685,
0.019552208483219147,
-0.03276268392801285,
0.030923593789339066,
-0.11301745474338531,
0.09026391059160233,
0.10996413975954056,
0.05843668058514595,
-0.045841965824365616,
0.07041971385478973,
-0.027569366618990898,
0.11447443068027496,
-0.19233563542366028,
-0.0006984937936067581,
-0.004628720227628946,
-0.08106376975774765,
-0.10838840156793594,
-0.0972418561577797,
0.02455384097993374,
-0.07227268815040588,
0.0620991475880146,
-0.11912591010332108,
-0.049240317195653915,
0.05491714924573898,
0.021580277010798454,
-0.09564310312271118,
-0.1766957938671112,
-0.037117648869752884,
-0.05674610659480095,
0.10897405445575714,
-0.08363261818885803,
-0.09551975131034851,
-0.03567032516002655,
-0.04633377492427826,
0.002813181607052684,
-0.17790968716144562,
-0.049062877893447876,
0.09625940769910812,
-0.09684166312217712,
-0.03653264790773392,
0.10807829350233078,
-0.06517966091632843,
-0.15759089589118958,
0.050374552607536316,
-0.034876272082328796,
0.010395674034953117,
-0.057688429951667786,
-0.04322444647550583,
0.005478141363710165,
-0.00913603138178587,
-0.05469409003853798,
0.07980701327323914,
-0.09927155077457428,
-0.15416374802589417,
0.07710782438516617,
0.00043820778955705464,
0.07277382165193558,
-0.05346854776144028,
0.028015708550810814,
0.03106994554400444,
0.04227498918771744,
0.011582985520362854,
-0.057992659509181976,
0.09945166856050491,
0.011802044697105885,
0.030516132712364197,
-0.06331156939268112,
0.02084333635866642,
0.021633638069033623,
-0.03626246750354767,
-0.023184899240732193,
-0.10972857475280762,
0.13450808823108673,
0.036539047956466675,
-0.07027855515480042,
0.01134453620761633,
-0.0708269476890564,
-0.2324187308549881,
0.16182155907154083,
-0.00013520089851226658,
0.07627241313457489,
0.046175166964530945,
0.06936850398778915,
-0.012940171174705029,
-0.08190462738275528,
-0.045306894928216934,
0.003546859370544553,
-0.07673764228820801,
0.09492679685354233,
0.0861588642001152,
-0.06749209761619568,
-0.12167809903621674,
-0.2057999223470688,
-0.20732994377613068,
-0.02344825118780136,
-0.18341656029224396,
0.03728498890995979,
-0.024936439469456673,
0.06361885368824005,
0.06406668573617935,
-0.16102439165115356,
-0.04798587039113045,
0.04541800171136856,
-0.08347271382808685,
0.03625898435711861,
0.058514099568128586,
0.03627500310540199,
0.12908674776554108,
0.013791384175419807,
0.016646701842546463,
0.011232279241085052,
-0.061640363186597824,
0.0004655349475797266,
-0.05177191272377968,
0.08980056643486023,
-0.005695592612028122,
-0.13457843661308289,
0.07726172357797623,
-0.09891621768474579,
-0.003327487036585808,
-0.05383305996656418,
-0.12090552598237991,
-0.1064041331410408,
0.1374441683292389,
0.14863072335720062,
0.027241643518209457,
0.020949944853782654,
-0.04633684828877449,
-0.016610078513622284,
-0.13810324668884277,
0.031541433185338974,
-0.09058579057455063,
0.04140602424740791,
-0.09352461993694305,
-0.04755077138543129,
0.05773399397730827,
-0.012908401899039745,
0.014024497009813786,
-0.030300920829176903,
0.04070410877466202,
-0.10437912493944168,
-0.06630832701921463,
-0.15071502327919006,
0.06221255287528038,
-0.1398165374994278,
-0.029873769730329514,
-0.049419987946748734,
0.0683991014957428,
0.09799042344093323,
0.027758724987506866,
0.08669251203536987,
-0.014023642987012863,
0.08129953593015671,
-0.081507608294487,
0.12100131064653397,
0.07301080226898193,
-0.13087517023086548,
0.029306339100003242,
0.1694369912147522,
-0.08960996568202972,
0.019278965890407562,
0.0022854169365018606,
-0.08874636143445969,
-0.05525045469403267,
-0.03858600929379463,
0.006829461548477411,
0.045318420976400375,
-0.10988005995750427,
-0.13126344978809357,
0.01988459751009941,
-0.09549907594919205,
-0.014785791747272015,
-0.0018983042100444436,
0.08012235164642334,
0.06574007123708725,
0.0078687509521842,
0.0960017591714859,
-0.0019210438476875424,
0.0955682098865509,
-0.14932122826576233,
0.05932855233550072,
0.052783798426389694,
-0.14524397253990173,
-0.11103454977273941,
-0.07960852980613708,
-0.02294435352087021,
0.021239526569843292,
-0.07443226873874664,
-0.02185262367129326,
0.08604870736598969,
-0.14164474606513977,
-0.0925133228302002,
-0.052088215947151184,
-0.012426541186869144,
-0.016961248591542244,
-0.15267300605773926,
-0.07036039233207703,
0.14634418487548828,
-0.035382237285375595,
0.05336066335439682,
-0.019318049773573875,
-0.05733022838830948,
-0.09249144047498703,
0.1192898079752922,
0.03792690485715866,
0.07322464883327484,
-0.05054754763841629,
-0.050309423357248306,
-0.030439654365181923,
0.02007841318845749,
0.013044267892837524,
0.04723664000630379,
-0.10674923658370972,
-0.03207196667790413,
-0.08021707087755203,
-0.0031262277625501156,
-0.0444222018122673,
0.12394055724143982,
-0.0614553801715374,
0.028183525428175926,
-0.09344466775655746,
0.12145598232746124,
-0.09205466508865356,
-0.10214541852474213,
-0.14553625881671906,
0.012816237285733223,
-0.05589602515101433,
-0.019351424649357796,
-0.07304368913173676,
-0.01120713073760271,
-0.021691475063562393,
0.09474784135818481,
-0.01849597878754139,
-0.055696845054626465,
-0.04545595869421959,
-0.03404538705945015,
-0.10021941363811493,
-0.11179353296756744,
-0.0319996252655983,
-0.11142298579216003,
0.1113327369093895,
0.08461908996105194,
0.05483643710613251,
-0.11729398369789124,
0.04597463086247444,
0.09553026407957077,
0.0656203031539917,
-0.14539402723312378,
0.026638053357601166,
-0.0549585223197937,
-0.024159763008356094,
0.013449670746922493,
-0.031375352293252945,
-0.015252376906573772,
-0.0014491633046418428,
-0.008398681879043579,
-0.10923410207033157,
-0.014840221032500267,
-0.171721413731575,
0.022876890376210213,
0.0720425397157669,
0.0023236253764480352,
-0.1209072545170784,
-0.1218569278717041,
0.02511303685605526,
0.08714080601930618,
-0.11728714406490326,
0.0330178402364254,
-0.09359513968229294,
-0.0600503534078598,
-0.14245402812957764,
-0.14000855386257172,
-0.07915184646844864,
0.035393401980400085,
0.006004096008837223,
-0.022449374198913574,
-0.13777483999729156,
-0.024918245151638985,
0.046008143573999405,
-0.00362474680878222,
0.03151526674628258,
-0.09141647070646286,
0.0359010212123394,
-0.045458219945430756,
-0.09147907793521881,
-0.056638818234205246,
-0.029891207814216614,
-0.09412097185850143,
-0.016071463003754616,
-0.10848506540060043,
0.0018862762954086065,
-0.05724453181028366,
0.04270404204726219,
-0.0730554461479187,
-0.028483789414167404,
-0.051906030625104904,
0.03679298609495163,
-0.06018127501010895,
0.0737588182091713,
-0.018628384917974472,
-9.051291272044182e-06,
0.08117341250181198,
-0.17539243400096893,
-0.08924249559640884,
-0.019622396677732468,
0.03559521213173866,
-0.0443359911441803,
0.0367577038705349,
0.074564129114151,
0.017920879647135735,
-0.10108248889446259,
0.012083991430699825,
0.061382997781038284,
-0.00897439755499363,
-0.052270203828811646,
0.01512019895017147,
0.0444510392844677,
0.03291742131114006,
0.10175396502017975,
-0.1150263249874115,
-0.02417275868356228,
-0.011217926628887653,
-0.0343141183257103,
-0.006877184845507145,
-0.06673426926136017,
-0.0014590213540941477,
0.06058570370078087,
-0.019297117367386818,
-0.022462787106633186,
0.12378310412168503,
0.0019441917538642883,
-0.051525771617889404,
0.043000198900699615,
0.0223875492811203,
0.08743975311517715,
-0.10655347257852554,
-0.060256749391555786,
-0.003080201568081975,
-0.11270429939031601,
-0.021344533190131187,
0.04536009579896927,
-0.09038721770048141,
0.03413432091474533,
-0.02887827530503273,
0.01966017484664917,
0.006588325835764408,
-0.02809464931488037,
-0.02078573778271675,
0.09413918107748032,
-0.07344793528318405,
-0.029482806101441383,
-0.03549039363861084,
0.062367282807826996,
-0.0274264644831419,
0.04478401318192482,
0.06469010561704636,
-0.07161665707826614,
0.09526823461055756,
0.06462038308382034,
-0.1199464425444603,
-0.06935049593448639,
-0.12716849148273468,
-0.02757975272834301,
-0.07869453728199005,
-0.08636783063411713,
0.05886797606945038,
-0.10440821200609207,
-0.07797017693519592,
0.034926339983940125,
0.06663099676370621,
-0.07127454876899719,
0.00932674203068018,
-0.043712567538022995,
0.07229924947023392,
0.07928290963172913,
0.018683673813939095,
-0.010322719812393188,
0.07239964604377747,
-0.11742870509624481,
0.01892850734293461,
-0.11365187913179398,
0.065109983086586,
-0.13251809775829315,
0.05613214895129204,
-0.10477812588214874,
-0.053599853068590164,
0.02833704464137554,
0.0854741781949997,
-0.029238063842058182,
-0.022493820637464523,
0.07627706974744797,
-0.0026921017561107874,
0.08910539746284485,
0.049894001334905624,
-0.09580524265766144,
0.0855470821261406,
0.03050517849624157,
0.05659622326493263,
0.036019448190927505,
0.06625419110059738,
-0.018560854718089104,
0.07702318578958511,
-0.07773913443088531,
-0.04212792217731476,
0.006568120792508125,
-0.04436737298965454,
0.11080172657966614,
0.08929648250341415,
-0.019853152334690094,
0.06073120981454849,
0.09591065347194672,
-0.08664336055517197,
0.06729643791913986,
0.06488624960184097,
0.04490374028682709,
0.0413152314722538,
-0.019670218229293823,
0.0006732085021212697,
0.07782717049121857,
-0.06953470408916473,
-0.02787202224135399,
0.008238560520112514,
0.048758868128061295,
-0.00975172221660614,
0.09662704914808273,
0.1426667869091034,
-0.12234365195035934,
-0.013938509859144688,
0.08171409368515015,
-0.056751448661088943,
-0.05179936811327934,
0.04945196956396103,
0.057554103434085846,
0.0006978426827117801,
0.014460751786828041,
-0.032443493604660034,
-0.030354922637343407,
-0.13667602837085724,
-0.14030340313911438,
-0.024423325434327126,
-0.1350296586751938,
0.02537866123020649,
0.011267296969890594,
0.0896650180220604,
0.11936195939779282,
-0.007569754030555487,
0.12438839673995972,
-0.020286792889237404,
-0.02798144891858101,
0.10758288204669952,
-0.10746153444051743,
-0.15031954646110535,
0.07879605144262314,
0.10857375711202621,
-0.002190412487834692,
-0.0354418084025383,
-0.07506003975868225,
0.07238250970840454,
-0.12893672287464142,
0.0998346209526062,
-0.07128935307264328,
-0.10386526584625244,
-0.05385260656476021,
0.13851086795330048,
0.010605186223983765,
-0.020251313224434853,
-0.13802047073841095,
-0.1246505156159401,
0.04611659795045853,
-0.08365215361118317,
-0.024095624685287476,
0.08091320097446442,
0.11843307316303253,
-0.09675131738185883,
-0.11084727942943573,
-0.024354595690965652,
0.09901700168848038,
-0.05490562319755554,
0.06616313010454178,
0.030440349131822586,
0.008863842114806175,
-0.024780483916401863,
-0.00474686361849308,
-0.049574725329875946,
-0.09777935594320297,
-0.06523536890745163,
0.03416069969534874,
0.11408146470785141,
0.15064094960689545,
-0.09316979348659515,
0.09429136663675308,
-0.014658222906291485,
0.07813144475221634,
-0.05348826199769974,
-0.03572702407836914,
0.1260184943675995,
-0.07203364372253418,
0.027237817645072937,
0.005343846511095762,
-0.02385210618376732,
0.06758823990821838,
0.08102534711360931,
0.18881285190582275,
0.09713010489940643,
0.052630819380283356,
-0.05747757479548454,
0.012754683382809162,
-0.0050446162931621075,
-0.06936796754598618,
-0.08296436816453934,
0.0049384767189621925,
0.08268454670906067,
0.014406448230147362,
-0.0019928093533962965,
-0.15228642523288727,
0.020535320043563843,
0.06303418427705765,
-0.08840102702379227,
0.0071420748718082905,
-0.08129117637872696,
-0.0019745593890547752,
0.0787430852651596,
0.002736818976700306,
0.08527148514986038,
-0.040763188153505325,
-0.0668407529592514,
0.10969453305006027,
-0.04584838077425957,
0.1062307059764862,
-0.10479621589183807,
0.02795693278312683,
-0.07866636663675308,
-0.1084834560751915,
-0.0013111415319144726,
0.10585623979568481,
-0.013165934011340141,
-0.036670710891485214,
0.013322404585778713,
0.10331867635250092,
0.08413964509963989,
-0.059450309723615646,
0.01593010686337948,
0.06283732503652573,
-0.06954973936080933,
0.11783494800329208,
0.007193585392087698,
-0.10497380793094635,
0.11494959145784378,
-0.08471236377954483,
-0.07371602207422256,
0.03228522837162018,
0.05121849849820137,
-0.006908806972205639,
-0.023353703320026398,
-0.003939296118915081,
-0.004090793430805206,
-0.04336359351873398,
0.014103020541369915,
0.0635945126414299,
0.00754910334944725,
-0.020114853978157043,
0.08858173340559006,
-0.05834545940160751,
-0.04892158508300781,
0.10346567630767822,
-0.03438008204102516,
-0.08236430585384369,
-0.1456296741962433,
-0.11850481480360031,
0.09942027926445007,
-0.0009659171919338405,
-0.07891231030225754,
-0.020354894921183586,
-0.10738246142864227,
-0.09969551861286163,
-0.03768270090222359,
0.12709574401378632,
-0.07093340158462524,
0.07055062800645828,
-0.02200346812605858,
-0.04982301592826843,
-0.04014907404780388,
0.05453135445713997,
-0.09427695721387863,
-0.01684325933456421,
0.07260782271623611,
-0.03142502158880234,
0.04621480777859688,
-0.015624716877937317,
-0.0664726123213768,
0.06026649475097656,
0.08109407126903534,
-0.053166747093200684,
-0.015742631629109383,
0.030473990365862846,
0.011369206942617893,
0.06990709900856018,
-0.05212292820215225,
-0.04820416867733002,
-0.0698823630809784,
0.04709316045045853,
-0.02593613602221012,
-0.04093513265252113,
0.020468706265091896,
-0.04513590410351753,
-0.0002246890653623268,
-0.05322171002626419,
-0.021467696875333786,
0.11417370289564133,
-0.11833851784467697,
0.060516681522130966,
0.020175021141767502,
0.026545479893684387,
-0.06147274002432823,
-0.0572146512567997,
0.01825583353638649,
-0.09533660113811493,
-0.07564650475978851,
0.09654777497053146,
-0.0596940778195858,
0.010486099869012833,
0.024838579818606377,
0.008911739103496075,
0.01371205784380436,
0.015085374936461449,
0.0039012955967336893,
0.02910718508064747,
-0.004848238080739975,
0.019305765628814697,
-0.04540426656603813,
0.059760816395282745,
-0.09813177585601807,
-0.13012458384037018,
0.08160700649023056,
-0.04240701347589493,
0.0871620625257492,
0.0196540504693985,
-0.007098739501088858,
-0.07943426817655563,
-0.03642480447888374,
0.013986483216285706,
0.011424584314227104,
-0.1440134197473526,
-0.03175131976604462,
-0.06936942040920258,
-0.004099908750504255,
0.08900174498558044,
-0.12099958211183548,
0.025234941393136978,
-0.0136822909116745,
0.02204929292201996,
-0.15251725912094116,
0.07831516116857529,
0.07474561780691147,
-0.07118211686611176,
0.08558949828147888,
0.04428909346461296,
0.06354136765003204,
-0.08109485357999802,
-0.05091366544365883,
-0.05410161241889,
-0.20232221484184265,
0.063910573720932,
0.03702237084507942,
0.07327242195606232,
0.051832567900419235,
-0.0873715877532959,
0.1023549810051918,
-0.13797453045845032,
0.10038715600967407,
-0.1670728325843811,
-0.022168559953570366,
0.04022593796253204,
0.0523516871035099,
0.08286431431770325,
-0.11310914903879166,
0.024015899747610092,
-0.009708740748465061,
-0.03061484359204769,
-0.022188300266861916,
-0.0301088634878397,
0.01981395110487938,
0.044366735965013504,
-0.05302002653479576,
0.02129008062183857,
0.0834592878818512,
0.011827955022454262,
0.022156573832035065,
0.0422268845140934,
0.04521786794066429,
-0.09971899539232254,
-0.06082100421190262,
0.052251990884542465,
-0.03343290090560913,
0.09663783758878708,
-0.015566378831863403,
-0.028504062443971634,
0.17070430517196655,
0.048228275030851364,
-0.10765283554792404,
0.03872951120138168,
0.14270327985286713,
-0.07518825680017471,
0.0003337533271405846,
0.0033682985231280327,
0.12395574152469635,
-0.09081773459911346,
-0.10755190998315811,
-0.049065157771110535,
0.06758183985948563,
0.11551178246736526,
-0.029973745346069336,
-0.10384097695350647,
0.061648037284612656,
-0.11390239000320435,
0.06701124459505081,
0.09883822500705719,
0.07970535755157471,
-0.0918474793434143,
0.1473170518875122,
-0.06341924518346786,
-0.030796075239777565,
0.026300454512238503,
0.05370606482028961,
0.09050524979829788,
0.047166693955659866,
0.18040359020233154,
0.06688801944255829,
0.012197241187095642,
-0.020198222249746323,
0.08234201371669769,
-0.022874120622873306,
0.06838059425354004,
0.04511922225356102,
0.08264672756195068,
0.021159181371331215,
-0.04066680371761322,
0.057203084230422974,
0.008339452557265759,
0.07675619423389435,
0.05505344644188881,
-0.04747512936592102,
0.1940876990556717,
0.18081316351890564,
0.014983119443058968,
0.04262327775359154,
-0.05283147096633911,
0.0292816162109375,
0.1280195266008377,
-0.03021591529250145,
-0.1080322191119194,
0.09053239971399307,
-0.06430741399526596,
0.08001504838466644,
0.0296565443277359,
0.0532839335501194,
-0.02611805684864521,
0.07003527879714966,
-0.03517238050699234,
-0.04482932761311531,
0.14264492690563202,
-0.08498385548591614,
-0.10679622739553452,
0.017776818946003914,
-0.04237189516425133,
0.0993291363120079,
-0.04324421286582947,
0.023180490359663963,
-0.09837739169597626,
0.10545970499515533,
-0.14268502593040466,
-0.10839315503835678,
0.027157066389918327,
0.01876385137438774,
-0.04715971276164055,
0.03089890256524086,
0.04489618167281151,
-0.019876429811120033,
0.06603099405765533,
-0.008066062815487385,
0.003922028932720423,
0.03766878694295883,
-0.11877588927745819,
-0.05198374763131142,
-0.11486483365297318,
0.08301740139722824,
-0.11228455603122711,
-0.0826214924454689,
0.0010501982178539038,
0.07547508180141449,
0.04488831385970116,
-0.02831076830625534,
-0.01940103806555271,
-0.07514788210391998,
0.059122733771800995,
-0.04213692620396614,
0.03658197820186615,
0.0386110320687294,
-0.014281289651989937,
0.08495990186929703,
-0.11797336488962173,
0.003467333735898137,
0.018227694556117058,
0.05228085070848465,
-0.0884372815489769,
-0.0695791095495224,
0.06063360720872879,
-0.091403067111969,
0.0744025930762291,
0.1637008786201477,
0.09736855328083038,
-0.01564687490463257,
-0.006535016931593418,
0.0681842714548111,
0.10139158368110657,
-0.005605139769613743,
-0.047718826681375504,
-0.050721194595098495,
-0.025837043300271034,
0.08970452845096588,
-0.06280580163002014,
0.09595536440610886,
0.12766586244106293,
0.02973615750670433,
-0.0725952684879303,
0.03469965606927872,
-0.09669347107410431,
0.011677771806716919,
0.05889487266540527,
0.05278575047850609,
-0.1238643154501915,
0.18177418410778046,
0.03316885605454445,
0.06232434883713722,
-0.0432000607252121,
-0.06822722405195236,
-0.08281180262565613,
0.015059244818985462,
0.011167287826538086,
0.05463113263249397,
0.045518044382333755,
0.12756602466106415,
-0.023113593459129333,
0.04608112573623657,
-0.029251741245388985,
0.13669712841510773,
0.05717505142092705,
0.09126327931880951,
-0.15974493324756622,
-0.012404624372720718,
0.08658997714519501,
-0.0028059312608093023,
0.05560953542590141,
0.09336637705564499,
0.11483114957809448,
0.045718662440776825,
0.05400008708238602,
-0.04989141225814819,
0.1158221960067749,
-0.04467273876070976,
-0.0846518874168396,
0.04163648188114166,
-0.012289555743336678,
-0.010974065400660038,
-0.04487021639943123,
-0.08876410126686096,
0.09937971830368042,
0.03723519667983055,
0.12351495772600174,
0.04546331986784935,
0.029497463256120682,
-0.08407790958881378,
0.018404796719551086,
-0.013093640096485615,
-0.069823257625103,
-0.00121230015065521,
-0.09169948846101761,
0.18955029547214508,
0.008719142526388168,
-0.036269888281822205,
-0.09574403613805771,
0.06729108840227127,
-0.09862319380044937,
0.03492973372340202,
-0.06792739778757095,
0.043549902737140656,
0.005154422018676996,
0.016315804794430733,
0.03387149050831795,
0.21091999113559723,
0.07629632949829102,
-0.13221268355846405,
0.05010354891419411,
0.01971689611673355,
-0.04271654412150383,
-0.01596033200621605,
0.020450405776500702,
-0.0819406658411026,
0.009513028897345066,
0.11874669790267944,
0.14328894019126892,
-0.11232293397188187,
-0.05211331695318222,
-0.037701018154621124,
-0.18051069974899292,
0.056768402457237244,
0.09350186586380005,
0.1204197108745575,
0.06865007430315018,
0.020010393112897873,
0.06484449654817581,
0.014152375049889088,
0.0876505896449089,
-0.07950989156961441,
0.012896188534796238,
0.08512373268604279,
0.014617329463362694,
0.12684927880764008,
-0.041437238454818726,
-0.05571743845939636,
-0.05798255279660225,
-0.04109131917357445,
-0.046768877655267715,
0.19058792293071747,
-0.0037443197797983885,
0.001394400023855269,
-0.11628589779138565,
-0.0946626216173172,
-0.005811905488371849,
-0.0010547316633164883,
0.09400557726621628,
-0.12033713608980179,
0.013057984411716461,
-0.047426704317331314,
-0.08162029832601547,
0.04779179394245148,
-0.03581294044852257,
0.023790623992681503,
-0.02788831852376461,
0.05172056704759598,
-0.05026082694530487,
-0.03752746433019638,
-0.11927410215139389,
0.022843260318040848,
0.11866482347249985,
0.03304369002580643,
-0.0377485565841198,
-0.11450950056314468,
-0.029760537669062614,
-0.007752992678433657,
-0.09587026387453079,
-0.048121899366378784,
-0.08662161231040955,
-0.08243292570114136,
-0.03909672051668167,
-0.04569143429398537,
0.15230390429496765,
0.03818643465638161,
0.058018945157527924,
0.01167377457022667,
0.024292657151818275,
-0.019816622138023376,
-0.01973538286983967,
-0.004099748097360134,
-0.05349421873688698,
0.013154909014701843,
0.07248906046152115,
-0.04146387055516243,
-0.04897388815879822,
0.04722728207707405,
0.02541208453476429,
0.06250716000795364,
-0.060727205127477646,
0.011545959860086441,
0.07287026196718216,
-0.046533674001693726,
-0.11376772075891495,
-0.08367691934108734,
0.006274180021136999,
0.07861781120300293,
-0.017940761521458626,
0.06457246094942093,
0.026354854926466942,
0.07040638476610184,
0.0266620684415102,
0.08162941038608551,
-0.11221284419298172,
0.0507730171084404,
-0.02001105807721615,
-0.03377522900700569,
-0.011869123205542564,
-0.05571604520082474,
-0.040931809693574905,
-0.031318407505750656,
-0.09031321853399277,
-0.011901001445949078,
-0.03611191362142563,
0.03499329835176468,
0.014012167230248451,
0.014531784690916538,
0.10251913964748383,
0.010645811446011066,
-0.13631737232208252,
-0.06199658662080765,
0.0031308645848184824,
-0.01245376467704773,
-0.05772155895829201,
-0.09033404290676117,
-0.11016874760389328,
-0.10288811475038528,
-0.10182830691337585,
-0.08990374207496643,
0.08422205597162247,
-0.04283035919070244,
-0.017814770340919495,
-0.09892286360263824,
-0.030797306448221207,
-0.018371213227510452,
-0.005693904589861631,
0.11276449263095856,
0.048606690019369125,
-0.0246597807854414,
-0.10545141249895096,
-0.05698889121413231,
0.045931607484817505,
0.008350541815161705,
0.11054940521717072,
0.04237130284309387,
-0.10460377484560013,
-0.04304417967796326,
-0.09845919162034988,
0.09356160461902618,
-0.01702113449573517,
0.07936489582061768,
-0.033442482352256775,
-0.15004029870033264,
0.17670568823814392,
-0.055609915405511856,
-0.0051856329664587975,
-0.05464379861950874,
-0.15367841720581055,
0.024548286572098732,
0.03618917241692543,
0.09994551539421082,
0.0800340548157692,
-0.025460470467805862,
-0.09052270650863647,
0.08891467750072479,
-0.0798574760556221,
-0.058791887015104294,
0.11624401807785034,
-0.01046978309750557,
-0.0809653177857399,
-0.030546778813004494,
0.0339643731713295,
-0.11877288669347763,
-0.09006384015083313,
-0.17468994855880737,
0.05884847044944763,
0.11891594529151917,
-0.08473309129476547,
0.1811305433511734,
0.0675879567861557,
0.03298654779791832,
0.009833166375756264,
0.0704893246293068,
0.03943229839205742,
-0.017960187047719955,
-0.05186494439840317,
0.10779625922441483,
-0.11955158412456512,
-0.03847817704081535,
0.10066983848810196,
0.032031454145908356,
0.1772625595331192,
0.001928625744767487,
0.03916385397315025,
0.08515377342700958,
0.0235610194504261,
-0.043262094259262085,
-0.08498846739530563,
0.08058314025402069,
0.0805758461356163,
0.07505061477422714,
0.045409005135297775,
-0.03511224687099457,
-0.019583482295274734,
-0.05330205708742142,
0.1383400410413742,
0.050285737961530685,
-0.005357186309993267,
0.042106110602617264,
-0.0032100931275635958,
-0.049794819205999374,
0.11230474710464478,
-0.034177377820014954,
-0.09233823418617249,
-0.005965408869087696,
0.0908898115158081,
-0.07804379612207413,
0.08833480626344681,
0.03097333386540413,
-0.06289888173341751,
0.04640059545636177,
-0.04294754937291145,
-0.02336791343986988,
-0.07256701588630676,
-0.018863320350646973,
0.012247160077095032,
0.040070969611406326,
-0.011087638325989246,
0.06628169864416122,
-0.034649889916181564,
0.10461024940013885,
-0.06313743442296982,
-0.08143013715744019,
-0.10363561660051346,
-0.17949974536895752,
0.1336165964603424,
0.01328599639236927,
0.11704527586698532,
0.10985992103815079,
0.04592536389827728,
0.10863007605075836,
-0.004111504647880793,
-0.05751508101820946,
-0.1464734673500061,
-0.011287029832601547,
0.0701899379491806,
-0.04820628836750984,
0.02032957412302494,
0.17323699593544006,
-0.1292715072631836,
-0.02469342015683651,
-0.09169158339500427,
-0.18465828895568848,
0.0030261599458754063,
-0.04575267434120178,
0.19068945944309235,
0.11962112784385681,
0.05565553903579712,
-0.026408689096570015,
-0.19832725822925568,
-0.022364361211657524,
0.003435439197346568,
-0.097566157579422,
-0.0014716570731252432,
-0.04622907564043999,
0.000473074585897848,
-0.09269566833972931,
-0.08313561975955963,
-0.10364944487810135,
-0.017902212217450142,
-0.17449787259101868,
0.010313878767192364,
0.046177297830581665,
-0.04500642791390419,
-0.046101827174425125,
0.009051820263266563,
0.012852553278207779,
0.07085836678743362,
-0.05124411731958389,
-0.009496078826487064,
-0.02627492882311344,
0.07716928422451019,
-0.023916609585285187,
-0.047152429819107056,
0.04996126517653465,
-0.1264282763004303,
-0.10706045478582382,
-0.07715572416782379,
0.06571786850690842,
-0.1424868404865265,
0.045342907309532166,
-0.06772059202194214,
0.059151917695999146,
0.16384010016918182,
-0.10330590605735779,
0.11239350587129593,
0.04129084572196007,
-0.11183104664087296,
0.006002586334943771,
-0.008194539695978165,
0.0013648092281073332,
0.05089915543794632,
0.010027812793850899,
0.05285138264298439,
0.024802392348647118,
-0.05285945162177086,
-0.03880555182695389,
0.05443225055932999,
0.016737565398216248,
0.002871275879442692,
-0.01038630586117506,
-0.07081014662981033,
-0.09178203344345093,
-0.16462481021881104,
0.041258085519075394,
0.09663041681051254,
0.11495166271924973,
0.022490017116069794,
0.038022659718990326,
0.023844076320528984,
-0.11270108819007874,
0.06566932052373886,
0.04033307731151581,
0.01926436461508274,
-0.016731200739741325,
-0.01057983748614788,
-0.17444629967212677,
0.06052299588918686,
0.0425574891269207,
0.0655621886253357,
-0.08899105340242386,
-0.029187779873609543,
0.09015685319900513,
-0.00667240796610713,
0.009167704731225967,
-0.11963462829589844,
-0.02674229070544243,
-0.10573120415210724,
-0.038560882210731506,
-0.1256294995546341,
-0.08544394373893738,
-0.047502171248197556,
-0.06870602071285248,
-0.1418514847755432,
-0.0819455161690712,
0.1543579399585724,
-0.024407558143138885,
0.009842310100793839,
0.12190679460763931,
-0.03524830564856529,
0.08070805668830872,
-0.05148260295391083,
0.021841587498784065,
-0.09448768198490143,
-0.04030841588973999,
-0.04782727360725403,
-0.010250402614474297,
0.06910386681556702,
0.03217219561338425,
-0.12438051402568817,
0.00014763977378606796,
0.15579438209533691,
-0.01957911252975464,
-0.04564676061272621,
-0.08453942090272903,
-0.07448200136423111,
-0.01034133043140173,
0.04568440094590187,
0.10013532638549805,
-0.04520801082253456,
0.06743546575307846,
0.05755862221121788,
0.10553149878978729,
-0.14693927764892578,
-0.04286757484078407,
0.10906501859426498,
-0.030897356569767,
-0.03224082291126251,
-0.09556608647108078,
-0.10232514142990112,
0.07998302578926086,
0.06993158161640167,
-0.10477348417043686,
0.09063158184289932,
0.03770100697875023,
-0.06420333683490753,
0.07298173755407333,
-0.13407717645168304,
0.0844135582447052,
-0.1749870479106903,
0.03630274906754494,
0.02845945581793785,
0.06077255681157112,
-0.14473095536231995,
0.08975374698638916,
0.1277260184288025,
-0.11217380315065384,
0.057777632027864456,
0.028178835287690163,
0.06756231933832169,
-0.04211942479014397,
0.08604100346565247,
-0.027106627821922302,
-0.05631673336029053,
0.0007222988060675561,
-0.03091934137046337,
-0.06010079383850098,
-0.08799820393323898,
-0.026921283453702927,
0.12364587187767029,
-0.0028550252318382263,
-0.11359351128339767,
0.08599787205457687,
0.015154412016272545,
-0.02106555365025997,
0.07796285301446915,
-0.09682373702526093,
-0.09742885828018188,
-0.012637675739824772,
-0.14741049706935883,
-0.0027888708282262087,
0.015153350308537483,
-0.07386141270399094,
0.01942494325339794,
-0.008744950406253338,
0.17828154563903809,
0.08242029696702957,
0.008727867156267166,
0.06577645242214203,
-0.07763375341892242,
-0.03503420948982239,
0.055529944598674774,
0.10858801007270813,
0.008342208340764046,
0.10547418892383575,
0.06915918737649918,
-0.03436883166432381,
-0.019472511485219002,
0.003501730039715767,
-0.05557175725698471,
0.16246749460697174,
-0.023211820051074028,
0.060484252870082855,
-0.1518668830394745,
0.0753326267004013,
-0.08226644992828369,
-0.104911208152771,
-0.01695437915623188,
-0.05571512505412102,
-0.08820808678865433,
0.15497557818889618,
-0.04872811585664749,
0.02312466688454151,
-0.01693684048950672,
0.04837159439921379,
-0.07481497526168823,
0.22808441519737244,
0.05853220075368881,
-0.005185023881494999,
-0.04625697061419487,
-0.020704632624983788,
-0.021150443702936172,
-0.0012783046113327146,
0.07422556728124619,
0.0716661736369133,
0.03082115948200226,
0.23702701926231384,
-0.19364033639431,
0.08441925048828125,
0.06325989961624146,
-0.05825057625770569,
-0.06935332715511322,
0.08895640075206757,
0.09040465950965881,
-0.11429054290056229,
0.04735603556036949,
-0.03488902375102043,
-0.004125314764678478,
0.07342123985290527,
0.013938304036855698,
0.005550231784582138,
0.04748949036002159,
0.1529054194688797,
-0.05618167668581009,
-0.04324408620595932,
-0.03694377839565277,
-0.11098261922597885,
0.0072073242627084255,
0.06890904903411865,
0.10852611064910889,
-0.014330226927995682,
-0.023477355018258095,
0.09478016942739487,
0.03131730854511261,
-0.008580616675317287,
-0.13560020923614502,
0.11281692236661911,
0.010945540852844715,
-0.04158174619078636,
-0.12282092124223709,
-0.042438119649887085,
0.11826157569885254,
-0.049538396298885345,
0.0945572704076767,
0.09416252374649048,
-0.08621924370527267,
0.06574951112270355,
-0.005315522197633982,
-0.10873211175203323,
0.0072408332489430904,
0.1208333820104599,
0.03382446989417076,
-0.08222772181034088,
0.08836059272289276,
0.04834013059735298,
0.06641378253698349,
-0.07181701809167862,
-0.03649655729532242,
-0.005115257576107979,
0.12935467064380646,
-0.0012174132280051708,
-0.024752678349614143,
-0.02365996316075325,
0.06447748094797134,
0.008371018804609776,
0.005026292521506548,
0.07773103564977646,
-0.004803192801773548,
-0.00416878005489707,
0.011141462251543999,
0.10672225803136826,
-0.03503159433603287,
0.04838314652442932,
-0.04448866844177246,
-0.05370070040225983,
0.11459190398454666,
0.13902153074741364,
-0.014015445485711098,
-0.09621665626764297,
0.1231585294008255,
0.08985713869333267,
0.03865766525268555,
-0.05257650837302208,
0.10469795018434525,
-0.029880205169320107,
0.0845823734998703,
0.08402346819639206,
-0.013026258908212185,
0.06877367198467255,
-0.05019639804959297,
-0.0883101299405098,
-0.00028305433806963265,
0.035691797733306885,
0.07181240618228912,
-0.11556829512119293,
0.09111367166042328,
0.02947882004082203,
-0.016626650467514992,
-0.06608142703771591,
-0.017808964475989342,
-0.09139785915613174,
0.10349875688552856,
0.05033508688211441,
-0.08045999705791473,
-0.05817100778222084,
0.004181734286248684,
-0.07500145584344864,
0.022369705140590668,
-0.11101832240819931,
-0.14097405970096588,
0.10322302579879761,
-0.018269356340169907,
0.12386536598205566,
-0.08425862342119217,
-0.07401998341083527,
-0.10558696836233139,
0.004877322353422642,
0.0669543445110321,
0.01915895566344261,
0.04349353164434433,
0.0632457509636879,
-0.09120664745569229,
0.07582191377878189,
-0.03890135884284973,
-0.029205286875367165,
-0.015434461645781994,
-0.007783121895045042,
-0.05143319070339203,
0.14251846075057983,
0.06471044570207596,
0.0214519202709198,
-0.051787927746772766,
-0.08276340365409851,
0.06588555127382278,
-0.017732592299580574,
0.014099529944360256,
0.08977709710597992,
0.07163611799478531,
-0.06360723823308945,
-0.09913507848978043,
-0.05752525478601456,
-0.0711517482995987,
-0.0365450344979763,
0.10758490115404129,
-0.06028725579380989,
-0.023038476705551147,
-0.022590145468711853,
-0.06557625532150269,
0.00020522528211586177,
0.05824205279350281,
-0.09843763709068298,
0.09392958879470825,
-0.048763323575258255,
-0.039672840386629105,
0.01576237380504608,
-0.09864599257707596,
-0.11293693631887436,
0.08897271752357483,
-0.127804234623909,
-0.030528344213962555,
-0.06617289036512375,
0.03533431515097618,
-0.02583281323313713,
-0.022997556254267693,
0.1244698017835617,
-0.08324246108531952,
0.009413963183760643,
0.03680882975459099,
0.09038334339857101,
-0.08899325877428055,
-0.056946564465761185,
-0.0796598270535469,
-0.03921758756041527,
-0.034426670521497726,
-0.023144647479057312,
0.03701874613761902,
0.08291663974523544,
-0.06543753296136856,
-0.0761379599571228,
0.04738679528236389,
-0.03662780672311783,
0.0441407673060894,
0.0771661028265953,
-0.16179531812667847,
-0.08486621081829071,
-0.05770774185657501,
-0.030933808535337448,
-0.041763775050640106,
-0.023137088865041733,
-0.07342961430549622,
0.0014412010787054896,
0.08058091253042221,
-0.1377759426832199,
0.09016606211662292,
-0.13223859667778015,
0.04488496109843254,
0.08289213478565216,
-0.004725916311144829,
0.15115965902805328,
0.028020072728395462,
-0.0067123062908649445,
-0.040226589888334274,
-0.15135030448436737,
-0.03459390252828598,
-0.010075561702251434,
0.002784756477922201,
-0.055996596813201904,
0.06150028854608536,
-0.005583031568676233,
-0.050078779458999634,
-0.007412625942379236,
0.0804886445403099,
-0.06159098446369171,
0.06154729798436165,
0.0637826919555664,
0.014163527637720108,
-0.02572125941514969,
0.06774655729532242,
0.06374063342809677,
0.11098332703113556,
-0.09858320653438568,
0.06495930254459381,
0.0659722313284874,
0.025234805420041084,
-0.07704797387123108,
0.10997386276721954,
-0.046192269772291183,
0.016259072348475456,
-0.04016878828406334,
0.013599671423435211,
0.07202396541833878,
0.07219565659761429,
0.0015054813120514154,
0.10626770555973053,
0.04137089475989342,
0.01971983164548874,
-0.07994935661554337,
-0.12839746475219727,
-0.12469740211963654,
0.016467755660414696,
-0.08144710212945938,
0.05697634071111679,
-0.04845759645104408,
0.12734870612621307,
0.00024634040892124176,
-0.032855696976184845,
-0.07855294644832611,
0.010224401019513607,
0.07583604753017426,
-0.012918055057525635,
0.018648536875844002,
0.08337528258562088,
0.0071673342026770115,
-0.020981132984161377,
-0.12108142673969269,
0.045106153935194016,
-0.052203383296728134,
0.02255852147936821,
-0.01557877380400896,
0.0004752953245770186,
0.0602860189974308,
0.019212951883673668,
0.10064291208982468,
0.011069739237427711,
-0.05110488831996918,
-0.1494196057319641,
0.03157948702573776,
-0.03744770586490631,
-0.04529943689703941,
-0.0030945944599807262,
-0.15422917902469635,
-0.06254784762859344,
-0.0911489874124527,
-0.030171798542141914,
-0.14421845972537994,
0.16110815107822418,
0.009243873879313469,
-0.02986839972436428,
0.02813458815217018,
-0.06635081768035889,
0.03983471542596817,
-0.17282308638095856,
-0.19524678587913513,
0.017151612788438797,
0.0564897395670414,
-0.13036221265792847,
0.04333803802728653,
0.09807601571083069,
-0.16429990530014038,
0.0988079383969307,
-0.020755089819431305,
-0.005699502769857645,
0.03090588189661503,
0.01859677955508232,
0.004386204294860363,
0.0412931889295578,
-0.10898637771606445,
-0.07871084660291672,
0.011557437479496002,
0.0871400535106659,
-0.03453057259321213,
0.1463635265827179,
0.07874386757612228,
0.0533747561275959,
-0.002962858648970723,
9.811425115913153e-06,
-0.05009368434548378,
-0.08100694417953491,
0.033190950751304626,
0.10421067476272583,
0.0105658657848835,
0.0667043924331665,
-0.061566535383462906,
0.15843920409679413,
0.02172877825796604,
0.03988513723015785,
0.08065971732139587,
-0.04180961474776268,
-0.028965460136532784,
0.011300683952867985,
0.1026335284113884,
0.09135973453521729,
-0.013003699481487274,
0.052963078022003174,
0.019197361543774605,
-0.007541589438915253,
0.013421394862234592,
-0.07219584286212921,
0.09859790652990341,
0.03637007623910904,
-0.018102170899510384,
-0.09531597048044205,
-0.06733012199401855,
-0.017413444817066193,
-0.04278101399540901,
0.031482331454753876,
0.11687428504228592,
0.03245224803686142,
0.03830263391137123,
-0.11140752583742142,
-0.02866627648472786,
0.005125235766172409,
0.023571697995066643,
0.12290824949741364,
0.0425923615694046,
0.007887179963290691,
0.03295047953724861,
0.020948240533471107,
-0.10583006590604782,
-0.051834575831890106,
0.06500617414712906,
0.0068497550673782825,
-0.02364918775856495,
0.10935983061790466,
-0.07785113155841827,
0.025983616709709167,
-0.01083826832473278,
0.07326529175043106,
-0.11122249811887741,
-0.008821522817015648,
-0.01723374053835869,
-0.12321235984563828,
-0.015042325481772423,
-0.1136644184589386,
-0.1956760138273239,
0.012436104007065296,
0.042422711849212646,
0.06673221290111542,
-0.02568225935101509,
-0.16324733197689056,
-0.03187526762485504,
-0.09365998953580856,
0.028809109702706337,
-0.04196380451321602,
-0.22586974501609802,
0.01848195493221283,
0.11639353632926941,
0.1187962144613266,
0.10409321635961533,
0.025148065760731697,
-0.033280398696660995,
-0.026980482041835785,
-0.10040364414453506,
0.040881555527448654,
0.08404836803674698,
0.07929939031600952,
-0.056667886674404144,
-0.0008874791674315929,
0.19141224026679993,
0.004679642617702484,
-0.023890580981969833,
-0.08418954908847809,
0.07026056200265884,
-0.022835493087768555,
-0.06779728084802628,
0.12614494562149048,
0.12702001631259918,
-0.12685784697532654,
-0.08846762031316757,
0.15123049914836884,
0.03026766888797283,
0.02289603091776371,
0.09112806618213654,
0.1756453663110733,
0.056396905332803726,
-0.0819896012544632,
0.027513252571225166,
-0.027303246781229973,
0.0402936153113842,
0.062061410397291183,
-0.07038404792547226,
-0.04483717307448387,
0.10477986186742783,
0.02879183739423752,
0.0038578505627810955,
-0.0032495716586709023,
0.029028737917542458,
0.1932888776063919,
-0.0137752965092659,
-0.018885735422372818,
-0.09081736207008362,
-0.05682508274912834,
0.11842235922813416,
0.11749978363513947,
0.030085528269410133,
0.09328947216272354,
0.028081662952899933,
-0.10756406933069229,
-0.027658168226480484,
-0.05522093176841736,
0.05348244309425354,
-0.06326637417078018,
0.017738983035087585,
0.0767422765493393,
-0.019027533009648323,
-0.11868415772914886,
-0.027256852015852928,
-0.12727907299995422,
-0.028874138370156288,
-0.09378627687692642,
-0.19037552177906036,
0.1098192036151886,
-0.07051912695169449,
0.10968633741140366,
-0.08457449078559875,
-0.06431007385253906,
-0.08236284554004669,
0.11655332893133163,
0.02307133749127388,
0.08078411221504211,
0.09491945058107376,
-0.12130656838417053,
0.15737779438495636,
0.07855504751205444,
-0.07744119316339493,
-0.0534050352871418,
0.0024837390519678593,
-0.09639790654182434,
0.07579386979341507,
0.13010410964488983,
0.07227282226085663,
-0.04687611386179924,
-0.010241854004561901,
0.08900343626737595,
0.037640638649463654,
0.1712220460176468,
-0.03764734044671059,
0.03264572471380234,
-0.07613251358270645,
-0.05048757418990135,
-0.12707512080669403,
-0.12634529173374176,
0.07754047214984894,
-0.04075784608721733,
0.048160403966903687,
0.013475487008690834,
-0.1535148173570633,
-0.02403200790286064,
-0.10607796907424927,
0.14409448206424713,
-0.0164425540715456,
0.1463184952735901,
0.11881073564291,
0.03274759650230408,
-0.04741062968969345,
0.11672092974185944,
-0.029260708019137383,
0.05935768038034439,
-0.0972256064414978,
-0.08352285623550415,
-0.008350272662937641,
-0.023232612758874893,
-0.05500944331288338,
-0.07382947206497192,
0.04030812531709671,
0.035939767956733704,
0.11437948048114777,
0.02665732242166996,
0.12098930031061172,
0.00817533303052187,
-0.11121296882629395,
0.07961481064558029,
-0.006478828843683004,
0.05591040849685669,
-0.1352905035018921,
-0.04507602006196976,
0.001957414671778679,
-0.1011589914560318,
-0.10423341393470764,
0.03874286636710167,
0.08160591125488281,
-0.010614404454827309,
-0.03868136554956436,
-0.09909509122371674,
-0.02530813030898571,
-0.07828741520643234,
-0.1153886541724205,
-0.11303962767124176,
0.07706165313720703,
-0.05452737957239151,
-0.08114699274301529,
0.07176549732685089,
-0.09163467586040497,
-0.044002633541822433,
-0.04165066406130791,
-0.0885009691119194,
-0.019734613597393036,
0.24004137516021729,
-0.07919300347566605,
0.09215449541807175,
-0.12435390800237656,
0.020793022587895393,
0.039200231432914734,
-0.0005252235569059849,
0.03137362748384476,
-0.05792306736111641,
-0.08139879256486893,
0.07224586606025696,
0.09905236214399338,
0.06063420698046684,
-0.005888128187507391,
0.014686801470816135,
0.01827990636229515,
0.20222941040992737,
0.10328295826911926,
0.04400733485817909,
0.05032439902424812,
0.0723896250128746,
0.0671277716755867,
-0.026393452659249306,
-0.10866084694862366,
0.1106901615858078,
-0.05660814046859741,
-0.010645790956914425,
0.028394924476742744,
-0.04883658140897751,
0.06132775917649269,
-0.020270856097340584,
-0.0102448221296072,
0.08025665581226349,
-0.12964145839214325,
0.03922637924551964,
-0.08218475431203842,
0.05147702619433403,
-0.049051884561777115,
0.12258925288915634,
0.11131986230611801,
-0.051077887415885925,
0.05165030434727669,
-0.01579173654317856,
0.07058658450841904,
0.015545176342129707,
0.02852131612598896,
-0.06056392565369606,
0.0761725977063179,
0.04354863613843918,
-0.03901801258325577,
-0.021190084517002106,
0.08703169226646423,
0.105470210313797,
0.029150793328881264,
-0.08123870193958282,
0.060089197009801865,
-0.07400541752576828,
0.017147766426205635,
-0.060680076479911804,
-0.11306718736886978,
-0.05833817645907402,
-0.07783079892396927,
0.02848474495112896,
-0.013936824165284634,
0.11066650599241257,
-0.08576730638742447,
0.006985786836594343,
-0.03248612582683563,
-0.11317939311265945,
0.01110201608389616,
0.00660273153334856,
-0.10347418487071991,
0.07551731169223785,
-0.06290678679943085,
0.11466456204652786,
-0.009191641584038734,
-0.0306953527033329,
0.025009458884596825,
-0.12611138820648193,
-0.03948933631181717,
0.24838005006313324,
0.06124156340956688,
0.10992103815078735,
-0.05382745340466499,
0.05849238485097885,
0.08308866620063782,
-0.05836533382534981,
-0.08289527148008347,
-0.06078050658106804,
-0.10579405725002289,
-0.0051192184910178185,
0.04746633768081665,
0.04486455023288727,
0.05916963890194893,
-0.11168359220027924,
-0.10406443476676941,
0.09955009818077087,
0.04622366651892662,
0.03961780294775963,
-0.07467639446258545,
-0.0875362679362297,
0.013878028839826584,
-0.08592710644006729,
0.10006886720657349,
-0.02214909717440605,
-0.08198768645524979,
-0.05422588437795639,
-0.0028771350625902414,
-0.007370969280600548,
0.05582313612103462,
-0.019659679383039474,
0.031195783987641335,
-0.1029600128531456,
-0.1073785200715065,
0.032387591898441315,
-0.12156018614768982,
-0.036942120641469955,
-0.008411403745412827,
-0.022591713815927505,
0.08500127494335175,
0.12124859541654587,
0.1288636028766632,
0.05183136463165283,
-0.03668021410703659,
0.08154883980751038,
-0.05294351652264595,
0.047672223299741745,
-0.020114975050091743,
0.05902957543730736,
-0.04654065519571304,
0.10699348151683807,
0.04218031093478203,
0.04192269220948219,
0.054416581988334656,
0.11631783097982407,
0.041258908808231354,
0.04555162414908409,
0.004226204007863998,
0.07512488216161728,
-0.023762626573443413,
-0.022813064977526665,
0.0029159695841372013,
-0.0702955424785614,
-0.001275925082154572,
0.15071667730808258,
-0.025096867233514786,
-0.07025889307260513,
0.0458047054708004,
-0.07368181645870209,
-0.0453997440636158,
0.10321833938360214,
-0.019347669556736946,
0.1013040766119957,
0.05862877890467644,
0.026468945667147636,
0.04486102610826492,
-0.06002560630440712,
-0.09593015909194946,
-0.06455854326486588,
-0.0799667239189148,
0.10948511958122253,
0.05600754916667938,
0.09840002655982971,
0.08171890676021576,
0.06677431613206863,
0.05249914899468422,
-0.02173081785440445,
-0.05744529515504837,
-0.05491359904408455,
0.06114925071597099,
-0.10504429042339325,
0.035253722220659256,
0.07652159780263901,
-0.032938797026872635,
-0.12087967246770859,
-0.033527079969644547,
0.12101416289806366,
0.004961851984262466,
0.03457929939031601,
-0.007274919655174017,
-0.03704454004764557,
-0.0679931566119194,
0.0017068880842998624,
-0.009454444982111454,
-0.08265873789787292,
0.013171586208045483,
0.047021977603435516,
-0.10405523329973221,
-0.033247072249650955,
-0.01738917827606201,
-0.11109995096921921,
-0.023450445383787155,
-0.09421229362487793,
-0.09067992866039276,
-0.07635191828012466,
-0.005270443856716156,
0.10944429785013199,
0.11503586173057556,
0.01714015007019043,
-0.06296315789222717,
0.04962402582168579,
0.055723611265420914,
-0.12081734836101532,
0.12293821573257446,
-0.0013292325893417,
-0.10023722052574158,
-0.14463704824447632,
0.004999146331101656,
-0.05402678996324539,
0.07848082482814789,
-0.03894615173339844,
0.06818082183599472,
-0.039990946650505066,
-0.07769421488046646,
-0.08183389902114868,
0.06480494886636734,
0.04077930003404617,
-0.12017660588026047,
0.018843477591872215,
0.03445209190249443,
-0.02600284293293953,
-0.038738053292036057,
0.0723484605550766,
0.06072027608752251,
-0.03144494816660881,
-0.08864668756723404,
0.07474754005670547,
-0.09345890581607819,
-0.05010148882865906,
0.04317513480782509,
-0.07928600162267685,
-0.1020934209227562,
-0.12891098856925964,
-0.061277829110622406,
-0.07120406627655029,
-0.015576837584376335,
0.06405311822891235,
-0.07351595908403397,
0.12088799476623535,
-0.018920956179499626,
-0.08446252346038818,
-0.023140694946050644,
-0.06704631447792053,
0.033686790615320206,
-0.1267121285200119,
0.08036217838525772,
0.027744855731725693,
0.07800617814064026,
-0.12988746166229248,
-0.004845738410949707,
-0.01975618675351143,
-0.12840363383293152,
0.03101576864719391,
0.053203802555799484,
0.04511014372110367,
0.012935728766024113,
0.034896090626716614,
0.05068182572722435,
-0.027791684493422508,
-0.028438718989491463,
0.058005496859550476,
-0.06882138550281525,
0.03880773112177849,
0.062007371336221695,
-0.0017222088063135743,
0.0201161727309227,
0.11502013355493546,
0.024957044050097466,
0.07116620987653732,
0.0044618225656449795,
0.0006296312203630805,
-0.0011805427493527532,
-0.0963500365614891,
0.11703707277774811,
0.1062077209353447,
-0.08812028169631958,
0.1641685962677002,
-0.028902020305395126,
0.06776092201471329,
0.0399646982550621,
-0.05045586824417114,
-0.012312665581703186,
0.10571166127920151,
0.08835906535387039,
0.10425633192062378,
0.05777668207883835,
-0.022785572335124016,
0.04191066697239876,
0.008201568387448788,
-0.033194005489349365,
0.08430473506450653,
-0.060343172401189804,
0.13588310778141022,
-0.02087312564253807,
-0.005871309898793697,
0.12881764769554138,
-0.08725102990865707,
-0.06824678927659988,
-0.05910204350948334,
-0.030888399109244347,
-0.03103262558579445,
0.12677839398384094,
-0.1288367211818695,
-0.0087284529581666,
0.04386033117771149,
-0.12633688747882843,
0.038088295608758926,
-0.054702531546354294,
0.06450396776199341,
-0.060182783752679825,
0.05397221818566322,
0.09801687300205231,
0.026235783472657204,
-0.13225992023944855,
0.029367506504058838,
-0.15170612931251526,
-0.09985685348510742,
-0.11862187832593918,
-0.023456327617168427,
0.09144847840070724,
-0.040335122495889664,
-0.12974202632904053,
-0.005296120420098305,
-0.07361379265785217,
0.04498886317014694,
0.00878559984266758,
-0.05102159082889557,
0.02337515540421009,
0.05724683403968811,
-0.06805435568094254,
0.03770892322063446,
-0.026585537940263748,
0.10061956942081451,
-0.10236166417598724,
0.037499990314245224,
0.037715405225753784,
0.007060057017952204,
0.09876005351543427,
0.05065947398543358,
0.029134908691048622,
-0.09284304082393646,
-0.11837964504957199,
0.12296885251998901,
0.020784683525562286,
0.0890791192650795,
-0.0033851282205432653,
0.038861751556396484,
0.06938126683235168,
0.11367598921060562,
-0.08909984678030014,
-0.011577346362173557,
0.04025929793715477,
0.06723117083311081,
-0.042594920843839645,
0.13760539889335632,
0.09092217683792114,
-0.02642165496945381,
-0.04797779396176338,
0.06738407164812088,
-0.006155346520245075,
-0.009412857703864574,
-0.08282236754894257,
0.10798181593418121,
-0.0742667093873024,
-0.053679339587688446,
0.0022079956252127886,
-0.04808330163359642,
0.027093350887298584,
0.02833746187388897,
0.11031405627727509,
-0.008526274934411049,
0.024064144119620323,
-0.06027361750602722,
-0.015321128070354462,
-0.04204944893717766,
0.09374099224805832,
-0.09718020260334015,
-0.049674127250909805,
0.08425740897655487,
-0.08303603529930115,
0.013547477312386036,
0.048292793333530426,
0.10457642376422882,
0.09084764868021011,
-0.016942013055086136,
-0.09358793497085571,
-0.025165459141135216,
0.06987487524747849,
-0.04689158871769905,
-0.058660414069890976,
0.03683299943804741,
0.06783537566661835,
-0.04832468181848526,
0.0035199106205254793,
-0.09266745299100876,
0.019886717200279236,
-0.09146422147750854,
0.04593844339251518,
0.046065255999565125,
0.04859068617224693,
-0.048288121819496155,
-0.1021878644824028,
0.09817925840616226,
-0.05486885458230972,
0.09214511513710022,
-0.07146972417831421,
-0.024100102484226227,
-0.08036074042320251,
0.1036660224199295,
0.03509995713829994,
-0.10652521252632141,
-0.014068558812141418,
0.07826479524374008,
0.12977907061576843,
-0.010630552656948566,
0.08734159916639328,
-0.13298103213310242,
-0.0957777127623558,
0.028921253979206085,
-0.08060619980096817,
-0.03643609955906868,
0.010866333730518818,
0.11383610218763351,
0.003987408243119717,
-0.048664677888154984,
0.08166684955358505,
-0.08668852597475052,
-0.04152138531208038,
-0.03223152458667755,
-0.06650900095701218,
-0.003129242919385433,
0.11496354639530182,
0.07368139922618866,
0.03240806236863136,
0.024677393957972527,
-0.007064551115036011,
-0.07038358598947525,
0.05892561748623848,
-0.07489437609910965,
-0.12694405019283295,
-0.06478086113929749,
-0.03891891613602638,
-0.08652129769325256,
0.04394528642296791,
0.0591348297894001,
-0.07733086496591568,
0.04810795560479164,
0.08024545758962631,
0.05228808894753456,
0.0116436081007123,
0.047401003539562225,
0.14494821429252625,
0.05980517342686653,
0.04315616562962532,
0.12999460101127625,
0.03181993588805199,
0.054648540914058685,
0.0015740899834781885,
-0.015505354851484299,
-0.06637325137853622,
-0.023556165397167206,
-0.05069314315915108,
-0.07296617329120636,
-0.06749286502599716,
-0.0036675301380455494,
-0.012514070607721806,
0.028211189433932304,
0.026097044348716736,
0.10671821981668472,
-0.011495412327349186,
-0.056926749646663666,
-0.08384134620428085,
-0.08331697434186935,
-0.047028008848428726,
0.059652186930179596,
0.04059143736958504,
-0.021654317155480385,
-0.01459676306694746,
0.12096275389194489,
-0.08568970113992691,
0.060204315930604935,
0.046490829437971115,
-0.00811419915407896,
0.0720653161406517,
0.07784783840179443,
-0.025499936193227768,
0.00951694417744875,
0.0020942790433764458,
-0.1519792228937149,
0.054732564836740494,
0.04172205552458763,
-0.08373983204364777,
0.008744057267904282,
0.13790994882583618,
0.0343724861741066,
-0.13935977220535278,
-0.09338780492544174,
-0.10498946160078049,
-0.09919459372758865,
-0.06607352197170258,
0.041288185864686966,
-0.03626483306288719,
0.019266361370682716,
0.08419393748044968,
-0.05547431483864784,
-0.006917736493051052,
0.0809580460190773,
0.0895717665553093,
0.09032532572746277,
0.14458124339580536,
-0.13903619349002838,
0.05518500506877899,
-0.15512092411518097,
-0.10903822630643845,
-0.03987838700413704,
0.03568454459309578,
0.12366626411676407,
0.06079438701272011,
0.11656451225280762,
-0.010265108197927475,
0.07882113009691238,
0.011396333575248718,
-0.05996616557240486,
-0.021791746839880943,
0.04329394921660423,
0.025149241089820862,
-0.08288402855396271,
0.1635812371969223,
-0.025530805811285973,
-0.03485996648669243,
0.07122918218374252,
0.1100146695971489,
0.061205171048641205,
-0.15389275550842285,
0.07773900032043457,
-0.060972150415182114,
-0.10854768753051758,
0.06381047517061234,
0.08400111645460129,
-0.10289289057254791,
-0.027054699137806892,
0.08244072645902634,
0.13302169740200043,
0.11574991792440414,
0.00790767464786768,
-0.051249776035547256,
0.05005492642521858,
0.10866844654083252,
-0.020763598382472992,
0.08467978239059448,
-0.05705280974507332,
-0.13608382642269135,
0.07260812819004059,
-0.059057433158159256,
0.001237600576132536,
-0.11284010112285614,
-0.09915076196193695,
0.08580145239830017,
-0.16331015527248383,
-0.00862831249833107,
-0.062387898564338684,
0.05173073336482048,
0.18313635885715485,
-0.03812932223081589,
0.09833548218011856,
-0.037357430905103683,
0.0066856988705694675,
0.0666990727186203,
0.04045891389250755,
-0.03311355039477348,
-0.10106829553842545,
0.0486394539475441,
-0.1158670112490654,
-0.032757505774497986,
0.08128207176923752,
0.02537890337407589,
-0.200417622923851,
-0.02243664488196373,
-0.05518054589629173,
-0.03601304441690445,
-0.08875060826539993,
0.030209533870220184,
-0.13282833993434906,
-0.07250213623046875,
-0.025825530290603638,
-0.01508865412324667,
0.05102384835481644,
-0.08436417579650879,
-0.10856372863054276,
0.09850870072841644,
-0.11756358295679092,
-0.09277398139238358,
-0.14355364441871643,
-0.05152951180934906,
0.04010041058063507,
-0.11012805998325348,
0.09454138576984406,
-0.10268119722604752,
-0.09496504068374634,
-0.12238892912864685,
0.0502268448472023,
0.0943944901227951,
-0.06041854992508888,
-0.061331599950790405,
-0.07075100392103195,
0.08557377010583878,
-0.06720557808876038,
-0.01388208381831646,
0.05410958454012871,
0.0024108500219881535,
0.07149888575077057,
0.025686705484986305,
-0.00589514896273613,
0.021585222333669662,
-0.0899035856127739,
-0.11715652048587799,
-0.02074740082025528,
-0.10020836442708969,
0.060581546276807785,
-0.04219525679945946,
-0.1186438724398613,
-0.013670719228684902,
0.10059021413326263,
0.10760962218046188,
-0.15120504796504974,
-0.03828825801610947,
-0.1176261305809021,
0.023139750584959984,
0.030721286311745644,
-0.07001481205224991,
-0.06038770452141762,
-0.11528030782938004,
-0.09263759851455688,
-0.04326925054192543,
0.010503667406737804,
-0.11160237342119217,
0.06469128280878067,
0.06250906735658646,
-0.02421618066728115,
0.043165456503629684,
0.06345051527023315,
0.07331513613462448,
0.0828276202082634,
-0.13155747950077057,
0.024046702310442924,
-0.08722776919603348,
0.011134113185107708,
0.045313574373722076,
-0.06295806169509888,
0.0649450346827507,
0.04324943572282791,
0.0009640158386901021,
0.06729786843061447,
-0.030399108305573463,
0.04554915800690651,
-0.04582700878381729,
-0.04956286773085594,
-0.06196044757962227,
0.00807854812592268,
0.04462717846035957,
-0.07228674739599228,
-0.0585976243019104,
-0.03993306681513786,
-0.011723725125193596,
0.02673414722084999,
-0.05288199707865715,
0.02216694876551628,
0.03426001965999603,
-0.0319710373878479,
0.057746849954128265,
0.060610830783843994,
-0.04420094192028046,
0.0964173749089241,
0.09437598288059235,
-0.03290189802646637,
-0.02704009972512722,
-0.10197195410728455,
-0.025755347684025764,
0.0034454013220965862,
-0.02011202834546566,
-0.053094297647476196,
0.13165460526943207,
-0.035630542784929276,
0.1280403733253479,
-0.04886036366224289,
-0.10228335112333298,
0.08629763126373291,
-0.13313084840774536,
0.0517478846013546,
-0.02770383097231388,
-0.11725298315286636,
-0.11849147826433182,
0.10462076216936111,
0.16287817060947418,
-0.07027484476566315,
-0.016928257420659065,
-0.045374590903520584,
0.011791922152042389,
-0.06914802640676498,
0.1296226680278778,
0.0931745171546936,
0.025670237839221954,
-0.14082832634449005,
0.058090366423130035,
0.07494137436151505,
-0.11070633679628372,
0.06319306790828705,
0.03416465222835541,
0.16152817010879517,
0.1729641854763031,
0.10145804286003113,
0.07887914776802063,
0.04204412177205086,
0.08057863265275955,
0.009323927573859692,
0.10627660900354385,
0.03032543696463108,
0.005271774251013994,
-0.026289505884051323,
-0.006916894111782312,
0.029691172763705254,
0.0433884933590889,
-0.13563130795955658,
0.0608123317360878,
0.013998642563819885,
0.011336192488670349,
0.06460148096084595,
0.06947275251150131,
0.05521298199892044,
-0.09785088896751404,
0.05072531849145889,
0.036679238080978394,
-0.03215121477842331,
-0.004493319429457188,
0.016578320413827896,
0.06369485706090927,
0.06427891552448273,
-0.12799425423145294,
-0.08073779195547104,
0.011909226886928082,
-0.03695745766162872,
0.09345695376396179,
-0.08888702839612961,
0.03892446309328079,
0.04596753418445587,
0.07874374836683273,
0.01570851169526577,
0.11621970683336258,
0.11863740533590317,
-0.057318754494190216,
-0.0103114303201437,
0.08384968340396881,
0.109310083091259,
-0.001357923960313201,
-0.1591092050075531,
-0.006073317490518093,
0.020969528704881668,
0.08140040189027786,
0.03807362914085388,
0.1099669486284256,
0.06632392853498459,
-0.005222969688475132,
0.13151530921459198,
0.004010228905826807,
0.07044622302055359,
-0.0014707541558891535,
-0.16426923871040344,
0.05110325664281845,
0.029586762189865112,
-0.11583783477544785,
-0.04159510135650635,
-0.15075670182704926,
-0.018207935616374016,
0.06730779260396957,
0.04586436226963997,
0.02896767109632492,
0.13698379695415497,
-0.025053007528185844,
0.03992563113570213,
0.07927782088518143,
0.09847467392683029,
0.06829407811164856,
-0.06676702201366425,
0.002206296194344759,
0.08443161100149155,
-0.14491154253482819,
0.08128474652767181,
-0.15584485232830048,
0.06802524626255035,
-0.01379516813904047,
0.039163123816251755,
-0.06759153306484222,
0.010915189050137997,
0.007211077027022839,
0.04579436779022217,
0.11780287325382233,
-0.11120525002479553,
-0.04446723684668541,
0.061973653733730316,
0.020095981657505035,
-0.0327705517411232,
-0.04014351963996887,
-0.09317438304424286,
0.05511780455708504,
-0.12478358298540115,
0.0869726613163948,
-0.10165980458259583,
0.12344862520694733,
0.10627863556146622,
-0.0401231050491333,
-0.08685219287872314,
-0.03943676874041557,
-0.06957434862852097,
-0.04561077058315277,
-0.05392115190625191,
-0.12604138255119324,
0.04784224554896355,
-0.12202975898981094,
-0.05217287689447403,
0.12641465663909912,
0.09041611850261688,
-0.043768156319856644,
-0.06315747648477554,
-0.0009319435339421034,
-0.07322059571743011,
0.002863167319446802,
-0.05646660923957825,
0.09367308020591736,
-0.11424683034420013,
0.04587704315781593,
-0.0044409832917153835,
-0.04479178413748741,
0.08869150280952454,
-0.048470936715602875,
0.1100565493106842,
-0.03790693357586861,
-0.0993482694029808,
-0.10352445393800735,
-0.0546305850148201,
-0.08038698136806488,
-0.04735315963625908,
-0.03762326017022133,
0.022779908031225204,
0.12597806751728058,
0.06019897386431694,
-0.0324520468711853,
-0.05248348414897919,
-0.04237309470772743,
0.10911866277456284,
0.0695265531539917,
-0.05450623482465744,
0.06266903877258301,
-0.057187944650650024,
0.019107330590486526,
0.0545317605137825,
-0.10236575454473495,
0.030151527374982834,
-0.06887637823820114,
0.02269597537815571,
0.07387114316225052,
0.015945525839924812,
-0.019169511273503304,
-0.08421726524829865,
-0.029238030314445496,
0.008604075759649277,
-0.031999945640563965,
0.07474492490291595,
0.045353613793849945,
-0.035596009343862534,
0.012943346984684467,
-0.08590495586395264,
-0.12135027348995209,
-0.0554376058280468,
0.12774409353733063,
-0.054638564586639404,
0.08317914605140686,
-0.07700679451227188,
-0.14924804866313934,
0.009748030453920364,
-0.06611152738332748,
0.07831784337759018,
0.030766049399971962,
0.01231350377202034,
0.11511418223381042,
-0.020990731194615364,
-0.06496376544237137,
0.09287509322166443,
-0.048532575368881226,
-0.06298994272947311,
0.02154110185801983,
-0.1169775053858757,
-0.05435582250356674,
0.016207555308938026,
-0.16629232466220856,
-0.039332009851932526,
0.05253266915678978,
-0.06418044865131378,
0.016104651615023613,
0.002410047221928835,
-0.0031369118951261044,
0.00871184654533863,
-0.1423521339893341,
-0.08895453810691833,
-0.11493756622076035,
-0.1145288497209549,
0.022487254813313484,
-0.1448168307542801,
0.1072072833776474,
0.0003424996684771031,
0.026599617674946785,
0.1020660549402237,
-0.07449387013912201,
0.022122254595160484,
0.06537143886089325,
-0.0557209737598896,
0.12467597424983978,
0.017288729548454285,
-0.07431983947753906,
-0.09561406075954437,
-0.1242857351899147,
-0.10551074147224426,
0.04315726086497307,
-0.036986153572797775,
-0.0367436520755291,
0.0038852940779179335,
-0.030900757759809494,
-0.09347762167453766,
0.05520797520875931,
0.02008715830743313,
-0.11582034081220627,
0.006320710759609938,
0.001738083898089826,
-0.09381117671728134,
-0.1003241240978241,
-0.07421817630529404,
-0.036954183131456375,
-0.03325796127319336,
-0.08897101134061813,
0.12742359936237335,
0.1642293632030487,
0.07639684528112411,
0.0033433178905397654,
0.07929366827011108,
0.13727505505084991,
0.01740524359047413,
-0.10518774390220642,
0.06425698846578598,
0.01909157820045948,
-0.06839176267385483,
0.04385857656598091,
0.07170412689447403,
-0.12198131531476974,
0.043481312692165375,
-0.0223514586687088,
0.07716473937034607,
0.11269247531890869,
0.1321021020412445,
0.13093964755535126,
-0.14358213543891907,
0.0423055998980999,
-0.006514915265142918,
-0.07973995059728622,
-0.12138034403324127,
-0.07148123532533646,
-0.02114015445113182,
0.03389585018157959,
0.016081789508461952,
0.11283968389034271,
0.06027772277593613,
-0.08008544892072678,
-0.12875238060951233,
-0.0944083109498024,
-0.06998228281736374,
-0.02303864248096943,
0.11571062356233597,
0.12476372718811035,
-0.05515462905168533,
0.05418935790657997,
-0.12977637350559235,
-0.10270968079566956,
-0.11449693888425827,
-0.009336180984973907,
-6.036730337655172e-05,
0.13744887709617615,
-0.111847423017025,
-0.07095917314291,
0.03872012346982956,
0.02808874100446701,
0.042958442121744156,
-0.11934207379817963,
-0.07888557016849518,
0.10450515896081924,
-0.0036997210700064898,
-0.08442091196775436,
0.011262371204793453,
0.014009823091328144,
-0.033822160214185715,
0.050729647278785706,
-0.07500733435153961,
-0.05070545896887779,
-0.03863198310136795,
0.1354457288980484,
-0.04909110441803932,
0.17642316222190857,
-0.009229111485183239,
-0.06604500859975815,
-0.023928476497530937,
-0.13097798824310303,
0.07827787101268768,
0.07394299656152725,
-0.07157303392887115,
0.057430870831012726,
0.019268324598670006,
-0.054035939276218414,
0.07750917971134186,
-0.056893013417720795,
0.012232556939125061,
0.06514415889978409,
0.12017162144184113,
-0.060686059296131134,
-0.04574452340602875,
-0.10671097785234451,
-0.18122754991054535,
-0.07191971689462662,
0.043548084795475006,
-0.027808336541056633,
0.06792505830526352,
-0.12519842386245728,
-0.0786658525466919,
0.14228656888008118,
0.04503526911139488,
0.026248874142766,
0.07274330407381058,
0.1601114422082901,
0.06861221045255661,
0.0734485536813736,
-0.03962835296988487,
-0.038634080439805984,
0.0846986323595047,
0.06524137407541275,
-0.06292891502380371,
-0.09546168893575668,
-0.033052537590265274,
0.051969677209854126,
0.01261579804122448,
-0.0673142820596695,
0.026208356022834778,
-0.07509537041187286,
-0.11274895817041397,
0.08557411283254623,
0.08663536608219147,
-0.10615287721157074,
0.043373849242925644,
0.05190015211701393,
0.04410618171095848,
-0.09031441807746887,
-0.01568662002682686,
-0.07574393600225449,
0.11043883115053177,
-0.1065991148352623,
0.10652820765972137,
-0.021167995408177376,
-0.03268177807331085,
-0.14326409995555878,
-0.004212971311062574,
-0.0421542264521122,
0.04741702228784561,
-0.10187079012393951,
0.028109941631555557,
-0.02214503288269043,
-0.018343498930335045,
0.0320555679500103,
0.08202634751796722,
0.10459598898887634,
0.09162990748882294,
0.021139750257134438,
0.10683272778987885,
0.044265758246183395,
-0.06549575924873352,
-0.019824890419840813,
0.07564835995435715,
0.03325343877077103,
0.022324420511722565,
0.12124515324831009,
-0.010697994381189346,
0.08046075701713562,
0.01959148980677128,
0.019129838794469833,
0.025509418919682503,
-0.03102964721620083,
-0.04027552902698517,
-0.004854012280702591,
0.06969143450260162,
-0.12216551601886749,
0.0014907951699569821,
-0.10721758753061295,
0.15591144561767578,
-0.03980915993452072,
0.02626419998705387,
0.09896612912416458,
-0.09899228811264038,
0.07238288223743439,
0.00443008728325367,
-0.0788159966468811,
0.05068781599402428,
-0.09553318470716476,
0.03005586378276348,
-0.030239582061767578,
-0.09819460660219193,
-0.00022374159016180784,
-0.12750259041786194,
-0.08308922499418259,
0.016429027542471886,
0.038729045540094376,
0.0361209511756897,
-0.17832255363464355,
0.02927970699965954,
-0.03286414593458176,
0.014334063045680523,
-0.054636675864458084,
0.12504136562347412,
-0.07623118162155151,
-0.036645401269197464,
-0.01471254974603653,
-0.09192495048046112,
0.03547229990363121,
-0.04039657860994339,
-0.10880011320114136,
0.027400266379117966,
0.12427499890327454,
-0.10301729291677475,
-0.0997689887881279,
0.1037893295288086,
-0.0205855555832386,
0.029285436496138573,
0.07033821940422058,
-0.10006357729434967,
0.0559777095913887,
-0.043080028146505356,
0.014076383784413338,
-0.01201874203979969,
0.07490389794111252,
0.05070658028125763,
0.009624440222978592,
0.02733556553721428,
0.041300803422927856,
-0.033312052488327026,
-0.013182887807488441,
0.03673601895570755,
-0.15309607982635498,
0.026418277993798256,
-0.056210022419691086,
-0.11106443405151367,
0.031235041096806526,
-0.0034360340796411037,
0.08671718835830688,
0.1309448480606079,
-0.0013565699337050319,
-0.010091419331729412,
-0.11855942010879517,
-0.07232634723186493,
-0.13805215060710907,
0.07000186294317245,
-0.1072557270526886,
-0.05321035161614418,
0.09188243746757507,
-0.05426642298698425,
-0.016578491777181625,
-0.07921198755502701,
-0.08178794384002686,
-0.004792232997715473,
0.06510763615369797,
-0.01870722696185112,
-0.0871448889374733,
0.13182416558265686,
0.0807981789112091,
0.012149951420724392,
0.017519395798444748,
0.1275487244129181,
-0.04069685563445091,
-0.03495156392455101,
-0.08751952648162842,
-0.04517270624637604,
-0.058306559920310974,
0.060906678438186646,
0.009716677479445934,
-0.08909972012042999,
0.03785322234034538,
-0.12046384811401367,
0.01951250620186329,
0.049432385712862015,
-0.058874838054180145,
-0.10710529237985611,
-0.1796615719795227,
-0.051827989518642426,
0.0028874848503619432,
0.020218312740325928,
-0.05457829684019089,
-0.0757676213979721,
-0.0146991778165102,
-0.06248558685183525,
0.028518373146653175,
-0.10298477858304977,
0.043095435947179794,
-0.028591541573405266,
0.11619220674037933,
0.02897171676158905,
-0.01673058792948723,
-0.10103456676006317,
0.06387974321842194,
-0.15891233086585999,
0.09659208357334137,
-0.05148877203464508,
0.03261449560523033,
-0.07130957394838333,
0.14052343368530273,
0.06101325526833534,
-0.08023194968700409,
0.020816756412386894,
0.016943756490945816,
-0.04531852528452873,
0.08558177947998047,
-0.0861128568649292,
0.030154062435030937,
0.002178041497245431,
0.05687037855386734,
-0.09007494151592255,
-0.05082900822162628,
-0.06566528230905533,
0.07803873717784882,
0.06377002596855164,
0.049521248787641525,
-0.124847412109375,
-0.10589197278022766,
0.07429832965135574,
-0.02972952462732792,
-0.01758199743926525,
0.03364361822605133,
0.03592463210225105,
-0.07626193016767502,
0.014124849811196327,
0.020843500271439552,
-0.028093041852116585,
0.04529581218957901,
0.09757842123508453,
0.11724036931991577,
-0.025499902665615082,
0.14367642998695374,
-0.03696036711335182,
-0.09968946129083633,
-0.15202045440673828,
0.01857343316078186,
0.02634836547076702,
-0.1282414346933365,
-0.08354733139276505,
-0.046712540090084076,
0.1775958240032196,
-0.005189924966543913,
0.03850514814257622,
0.035843946039676666,
6.263810792006552e-05,
-0.11776471138000488,
0.04895731061697006,
0.2164432406425476,
-0.07516076415777206,
0.13041022419929504,
0.011653803288936615,
0.07981672137975693,
-0.026323659345507622,
-0.1304236650466919,
0.03712891787290573,
-0.028163710609078407,
0.1624869555234909,
-0.02727506309747696,
0.07076180726289749,
0.13898728787899017,
-0.05769163742661476,
0.09619084000587463,
0.04610366374254227,
0.10413704067468643,
0.06389778107404709,
-0.12091679126024246,
-0.0030755572952330112,
0.08383598923683167,
0.010645098984241486,
-0.13282594084739685,
-0.07567892968654633,
-0.090250164270401,
0.07530972361564636,
0.0367107093334198,
-0.08270088583230972,
0.11167014390230179,
0.09027756005525589,
-0.018518662080168724,
-0.0035689775831997395,
-0.014302998781204224,
-0.12620379030704498,
0.11343087255954742,
0.010593426413834095,
-0.0045358724892139435,
-0.03720861300826073,
-0.09966465830802917,
0.05843768268823624,
0.015162540599703789,
0.09339185804128647,
-0.12988755106925964,
0.032802049070596695,
-0.08557157218456268,
-0.059163983911275864,
0.09544381499290466,
0.01779771037399769,
0.0008531032362952828,
-0.10704805701971054,
0.12717470526695251,
-0.02804751507937908,
0.05186256766319275,
0.008388159796595573,
-0.10383158922195435,
0.022961033508181572,
0.02765689603984356,
0.07813229411840439,
-0.08850686997175217,
-0.014913429506123066,
0.022444715723395348,
-0.10015122592449188,
-0.03932547941803932,
0.07552960515022278,
0.11220064759254456,
-0.12424225360155106,
0.11916425079107285,
-0.01422188337892294,
-0.06977678835391998,
0.03075341135263443,
0.04086156561970711,
-0.10318341106176376,
-0.10112378001213074,
0.022343723103404045,
0.02965085208415985,
-0.04290473088622093,
0.016009747982025146,
0.09940841048955917,
0.05937989056110382,
0.12396655976772308,
0.10785691440105438,
-0.03645021840929985,
0.012096287682652473,
-0.11618656665086746,
0.062438175082206726,
0.08338436484336853,
-0.03357110545039177,
-0.003390625584870577,
-0.07406918704509735,
0.043039146810770035,
0.08336533606052399,
0.010053941048681736,
0.031261689960956573,
0.08920705318450928,
0.12083619832992554,
-0.0746433362364769,
0.18241514265537262,
-0.13004864752292633,
-0.02022305317223072,
-0.15652282536029816,
-0.09183972328901291,
-0.016867056488990784,
-0.11590057611465454,
-0.010808424092829227,
-0.08997798711061478,
0.10529517382383347,
0.0186771210283041,
0.03727622330188751,
-0.04417995363473892,
-0.0030843436252325773,
-0.07857931405305862,
0.021598901599645615,
-0.004266954492777586,
-0.014041470363736153,
0.06079956144094467,
-0.06855098903179169,
-0.02859407849609852,
-0.0016836397117003798,
0.06391578912734985,
-0.10057879984378815,
0.06970486044883728,
0.04954221472144127,
0.011432303115725517,
0.06573205441236496,
0.09823226183652878,
-0.08286245912313461,
-0.03370607644319534,
0.006372231058776379,
0.13439278304576874,
0.021645070984959602,
-0.06050762161612511,
-0.12110494077205658,
-0.09884261339902878,
0.07896563410758972,
0.051543571054935455,
-0.013236946426331997,
0.09151212126016617,
-0.11193270236253738,
-0.09767832607030869,
0.07020401209592819,
0.06189552694559097,
0.014535346999764442,
0.08258338272571564,
-0.14440643787384033,
0.09657634794712067,
0.050019923597574234,
-0.08548149466514587,
-0.062009524554014206,
-0.12144309282302856,
-0.003695146180689335,
0.14485733211040497,
-0.03043198212981224,
0.0039717648178339005,
-0.0166167002171278,
-0.07415668666362762,
-0.08835319429636002,
0.12187045812606812,
0.08152500540018082,
-0.03942079097032547,
-0.08285427838563919,
-0.17927898466587067,
-0.05890992283821106,
-0.14536969363689423,
-0.04053796827793121,
-0.043645452708005905,
0.19460074603557587,
0.07305824756622314,
0.01469105202704668,
-0.004540936090052128,
0.037533145397901535,
0.07451941072940826,
-0.051503751426935196,
-0.06488770991563797,
0.003984774928539991,
-0.10815292596817017,
0.12687665224075317,
-0.06407833844423294,
0.09806416928768158,
0.046349748969078064,
-0.10505401343107224,
0.0015931351808831096,
0.0467403344810009,
0.046341780573129654,
-0.11488713324069977,
-0.05203551799058914,
0.010646036826074123,
-0.02364548109471798,
0.04598739743232727,
-0.07438866049051285,
0.006199580151587725,
-0.11460214108228683,
0.07944708317518234,
0.03201180323958397,
-0.06418567150831223,
0.021972881630063057,
0.040872082114219666,
-0.061306316405534744,
0.02627553790807724,
0.13148222863674164,
-0.027179056778550148,
-0.027433060109615326,
0.0506502203643322,
0.07647573202848434,
-0.09427441656589508,
-0.051539503037929535,
-0.08285756409168243,
-0.1536736786365509,
-0.10523631423711777,
-0.06033056974411011,
-0.10292153060436249,
-0.01614418998360634,
0.037497084587812424,
0.03114720992743969,
0.037774939090013504,
0.1252131462097168,
-0.02211057022213936,
0.10625839233398438,
0.09270462393760681,
0.07745005190372467,
-0.09113357961177826,
0.09345560520887375,
0.025208257138729095,
0.05085422471165657,
-0.05015282332897186,
-0.008527927100658417,
0.15627698600292206,
0.08910932391881943,
0.030128056183457375,
0.1367974728345871,
0.04540477320551872,
0.061375487595796585,
0.10162995755672455,
-0.040558502078056335,
0.012125556357204914,
-0.0368104912340641,
0.06554561108350754,
-0.017585821449756622,
-0.030744438990950584,
-0.06324537098407745,
-0.053870007395744324,
0.10641390085220337,
0.016548311337828636,
0.0006515331915579736,
-0.02479000948369503,
0.06678039580583572,
-0.2061227560043335,
0.0008598602144047618,
-0.031326744705438614,
0.005043690092861652,
0.05880862474441528,
-0.15191109478473663,
-0.07920321077108383,
0.0019185345154255629,
-0.06355387717485428,
0.02708514779806137,
0.040739282965660095,
-0.11376875638961792,
0.04929634928703308,
0.09095063805580139,
0.07565778493881226,
-0.04065583273768425,
0.02948266640305519,
0.008974103257060051,
0.021421050652861595,
-0.08176697045564651,
0.07787426561117172,
-0.08884946256875992,
0.13142597675323486,
0.014072590507566929,
0.08462246507406235,
-0.06333381682634354,
0.10011785477399826,
-0.06320497393608093,
-0.01233602687716484,
-0.06045360118150711,
0.07979275286197662,
-0.13101951777935028,
0.03329295292496681,
0.10278507322072983,
-0.07179516553878784,
0.06559228897094727,
0.0560414157807827,
0.10745775699615479,
0.08602453023195267,
-0.09301576763391495,
-0.04603093862533569,
-0.025485819205641747,
-0.09538950026035309,
0.07968565821647644,
0.03865528106689453,
-0.057747356593608856,
0.10323403030633926,
-0.09502594918012619,
0.006744702346622944,
0.11458326131105423,
0.11869252473115921,
0.10074686259031296,
-0.009761285968124866,
0.05124228820204735,
0.05774574354290962,
-0.13711613416671753,
0.01604078710079193,
0.09354517608880997,
0.06703094393014908,
-0.03034096211194992,
-0.06218700483441353,
0.0969218835234642,
0.01963995397090912,
0.014045861549675465,
-0.05398845300078392,
0.01110166311264038,
-0.050244346261024475,
-0.0870031863451004,
-0.013712648302316666,
-0.06529166549444199,
-0.05585145205259323,
0.03756894916296005,
-0.02101515792310238,
-0.015998242422938347,
0.13267815113067627,
0.0448928140103817,
-0.08554799109697342,
-0.007229343056678772,
0.013112111017107964,
-0.01692918874323368,
-0.14390695095062256,
-0.011217866092920303,
-0.07529508322477341,
-0.03386826440691948,
-0.003283215221017599,
-0.038564927875995636,
0.03598269820213318,
0.07979736477136612,
0.059731706976890564,
0.014590919017791748,
0.04088042303919792,
-0.07134366780519485,
-0.0066184839233756065,
0.050421908497810364,
0.023379717022180557,
0.05817887559533119,
-0.0151637252420187,
0.052686866372823715,
-0.05024539679288864,
-0.10165861994028091,
-0.01876315288245678,
-0.0754886344075203,
-0.003549976507201791,
-0.005738925188779831,
-0.02865542285144329,
-0.09208612889051437,
-0.043068286031484604,
0.04166227951645851,
-0.029321586713194847,
-0.06822419911623001,
0.03974979743361473,
0.06528569012880325,
-0.02578122355043888,
-0.012843554839491844,
-0.053238194435834885,
0.08970994502305984,
0.06845984607934952,
0.08817099034786224,
-0.053734190762043,
-0.10874547809362411,
-0.05765320733189583,
0.03561713546514511,
0.07313913851976395,
-0.09852004051208496,
-0.16594520211219788,
0.04813281074166298,
-0.11032285541296005,
-0.035513006150722504,
0.013199010863900185,
0.07343897223472595,
0.02840118296444416,
0.10026394575834274,
-0.05129365995526314,
0.09705523401498795,
0.0018589302198961377,
0.0009659070055931807,
0.07740193605422974,
-0.0595787838101387,
0.004825749434530735,
-0.07452411949634552,
-0.026336422190070152,
0.030208688229322433,
0.03344706818461418,
-0.03567316755652428,
0.08321409672498703,
-0.0021470077335834503,
-0.07085330039262772,
0.03455733507871628,
0.07050783187150955,
0.09829892963171005,
0.004721027798950672,
-0.08408063650131226,
-0.07562729716300964,
-0.07980968058109283,
0.07467105984687805,
0.07656899094581604,
0.005835279356688261,
0.1023426204919815,
-0.03446779027581215,
0.1366807222366333,
0.017596492543816566,
0.059732239693403244,
0.036442942917346954,
-0.07174941897392273,
0.006436376366764307,
0.0691843330860138,
0.003700258443132043,
-0.07404553145170212,
0.013287649489939213,
-0.009688001126050949,
0.03833051770925522,
0.007661048788577318,
0.12536899745464325,
-0.05690547451376915,
-0.06606756895780563,
-0.0569596067070961,
0.0201015155762434,
0.05289866775274277,
0.11791849881410599,
0.08255588263273239,
-0.013366367667913437,
0.1613413244485855,
0.12993697822093964,
0.011603916063904762,
0.050711385905742645,
0.046756286174058914,
0.0579012930393219,
-0.01369571778923273,
0.0738152489066124,
-0.04854077473282814,
-0.03707586228847504,
-0.07713819295167923,
-0.05249156057834625,
0.039044611155986786,
0.07067259401082993,
0.03869255259633064,
0.01740109547972679,
0.13901199400424957,
-0.05949956178665161,
0.05900135636329651,
-0.005615857895463705,
0.012794221751391888,
0.03999006748199463,
-0.04353257641196251,
0.05538734421133995,
0.12419424206018448,
-0.06558169424533844,
0.007161005865782499,
-0.01741185039281845,
-0.02663082629442215,
0.007834040559828281,
-0.04759716987609863,
0.0852920338511467,
0.135117307305336,
-0.05830276757478714,
-0.0732724517583847,
0.1334351897239685,
0.07701002806425095,
0.07847902178764343,
0.01690315641462803,
-0.02443769946694374,
-0.001171543844975531,
0.046403951942920685,
0.04819295182824135,
0.010476494207978249,
0.06683767586946487,
-0.00978852342814207,
-0.07875178009271622,
-0.02185492403805256,
-0.04326719045639038,
0.06331568211317062,
-0.015098714269697666,
0.03285563737154007,
-0.05724372714757919,
-0.0727301687002182,
0.024029573425650597,
0.09808548539876938,
-0.07984541356563568,
-0.03755268082022667,
-0.013707417994737625,
0.03247940540313721,
0.11979767680168152,
0.02330525778234005,
-0.023616638034582138,
-0.07209828495979309,
-0.05286809802055359,
-0.007274300791323185,
0.09523571282625198,
0.09715619683265686,
0.021996913477778435,
0.010912306606769562,
0.016439789906144142,
0.014654217287898064,
-0.11151161044836044,
-0.15355263650417328,
0.0016078706830739975,
-0.11677515506744385,
0.12494384497404099,
-0.05978994444012642,
0.06341711431741714,
-0.015898384153842926,
0.135153129696846,
0.03177620470523834,
-0.006339042913168669,
-0.05997166782617569,
-0.10956219583749771,
0.022553013637661934,
-0.07573404163122177,
0.025008277967572212,
0.0811886414885521,
0.08196642249822617,
-0.10029477626085281,
-0.13624027371406555,
0.16347302496433258,
0.07417173683643341,
0.08598635345697403,
-0.007941354997456074,
-0.05317303538322449,
-0.11394385993480682,
-0.0325101874768734,
-0.06595628708600998,
-0.10871294885873795,
-0.10401837527751923,
0.0979202389717102,
-0.09084805846214294,
-0.13292743265628815,
-0.10530029237270355,
-0.17533478140830994,
0.004014534410089254,
-0.045766398310661316,
-0.00550544448196888,
0.05540621280670166,
-0.006953247357159853,
0.07879673689603806,
0.06204196438193321,
-0.022257667034864426,
0.09870690852403641,
0.014303162693977356,
-0.1303713172674179,
0.1772913932800293,
-0.05851512402296066,
-0.006835105363279581,
0.04593610018491745,
0.006821786053478718,
-0.11385800689458847,
-0.09570606052875519,
0.077255479991436,
0.09192396700382233,
-0.11965296417474747,
-0.03349217772483826,
-0.09579542279243469,
0.14581787586212158,
0.04561944678425789,
0.09922617673873901,
-0.030700156465172768,
0.12455640733242035,
-0.006414050702005625,
0.1131899282336235,
0.08080917596817017,
-0.004476672038435936,
-0.12908518314361572,
0.06074972823262215,
-0.04783153161406517,
-0.05126034468412399,
0.009630896151065826,
0.06693188101053238,
0.04456287994980812,
0.1515694409608841,
-0.043314747512340546,
0.0366985984146595,
0.018568003550171852,
0.02071356028318405,
-0.04465007781982422,
-0.07722380012273788,
-0.037100326269865036,
-0.06376056373119354,
0.09800434857606888,
-0.11180956661701202,
0.08579648286104202,
0.011070793494582176,
0.019323162734508514,
0.06073461100459099,
-0.019044294953346252,
0.10587728768587112,
0.09312745928764343,
0.0022394927218556404,
0.13711676001548767,
0.014512681402266026,
-0.09764686226844788,
0.0685369074344635,
-0.10072983056306839,
0.047961458563804626,
-0.02660813368856907,
0.011144782416522503,
0.08236892521381378,
0.12925459444522858,
0.07782813906669617,
-0.00204295851290226,
0.017598656937479973,
0.10422880202531815,
0.07033558189868927,
-0.06208917498588562,
0.025952452793717384,
0.12141387164592743,
-0.12520167231559753,
-0.059019092470407486,
0.04243741184473038,
-0.06839589774608612,
0.03806139901280403,
0.003120667766779661,
0.08874604851007462,
0.05930188298225403,
0.004574427846819162,
-0.01609974540770054,
-0.010268738493323326,
-0.13383308053016663,
-0.03160546347498894,
-0.014220242388546467,
0.0851297676563263,
-0.09929049760103226,
0.1355850100517273,
0.05055747553706169,
0.09114348888397217,
-0.03215106576681137,
0.0074677858501672745,
-0.15166375041007996,
0.09539133310317993,
-0.0508473664522171,
-0.05089195445179939,
-0.12137654423713684,
0.07086392492055893,
-0.13135378062725067,
0.03859486058354378,
-0.06750386953353882,
0.13263018429279327,
-0.10679975897073746,
-0.04616159945726395,
-0.057512179017066956,
0.05128728225827217,
0.04983869194984436,
0.018266191706061363,
-0.08691420406103134,
0.010248447768390179,
0.02097146213054657,
-0.17439240217208862,
-0.12039237469434738,
0.0008353049051947892,
-0.023472581058740616,
-0.07928415387868881,
-0.026541560888290405,
0.08834107220172882,
0.05531288683414459,
-0.03571154922246933,
0.07325872778892517,
-0.017057258635759354,
0.029311079531908035,
-0.01367067638784647,
0.003245414700359106,
0.0329228974878788,
0.0038460607174783945,
0.06155763939023018,
-0.07485693693161011,
0.18362154066562653,
-0.0057553802616894245,
0.01634632982313633,
-0.036747660487890244,
-0.029389837756752968,
-0.07754126191139221,
0.08483051508665085,
-0.06256221979856491,
0.03587345778942108,
-0.14492610096931458,
-0.05340416356921196,
0.12452977895736694,
0.08700578659772873,
-0.08597845584154129,
0.15145234763622284,
-0.015272548422217369,
0.13007381558418274,
0.1546960026025772,
-0.08233848959207535,
-0.004533201921731234,
-0.11175210773944855,
0.06417800486087799,
0.05583750084042549,
0.11830803006887436,
0.14040789008140564,
0.005910295527428389,
0.12489484995603561,
0.06643559038639069,
0.05322366952896118,
-0.06012711301445961,
0.0018202862702310085,
0.013001888059079647,
-0.016809621825814247,
0.07478465884923935,
0.12003399431705475,
0.01695135235786438,
0.04216853529214859,
0.08310350030660629,
-0.003983548376709223,
-0.012482407502830029,
0.13056623935699463,
-0.045058004558086395,
0.035901639610528946,
-0.004312516190111637,
0.09413396567106247,
-0.05221548676490784,
-0.018176281824707985,
-0.17635181546211243,
0.0017163945594802499,
-0.13793757557868958,
-0.03758077323436737,
-0.08574140816926956,
-0.017276382073760033,
0.09708873927593231,
0.01871737837791443,
-0.02977539412677288,
-0.10359714925289154,
-0.03989733010530472,
-0.14480997622013092,
0.004908597096800804,
-0.023718198761343956,
-0.028131527826189995,
-0.12058622390031815,
-0.1491159200668335,
0.04090222716331482,
-0.04636238515377045,
0.033938512206077576,
-0.020981138572096825,
0.030782019719481468,
-0.07032515108585358,
-0.09647304564714432,
0.12334876507520676,
0.02312430366873741,
0.036406129598617554,
-0.016353202983736992,
0.10429451614618301,
0.03524722531437874,
0.025920258834958076,
0.027811195701360703,
0.04235055297613144,
0.04583162069320679,
0.045455608516931534,
0.05563350394368172,
0.01791241765022278,
0.1611269861459732,
0.016713237389922142,
0.07295001298189163,
0.12140510976314545,
-0.11231192946434021,
-0.024033017456531525,
0.03501620143651962,
0.057661108672618866,
-0.04490150138735771,
-0.07112153619527817,
0.07422715425491333,
-0.057488929480314255,
-0.036071259528398514,
-0.03139037266373634,
-0.055658333003520966,
-0.11045031249523163,
0.06612415611743927,
-0.0710073783993721,
0.08292591571807861,
0.09766846150159836,
0.00213421368971467,
-0.046487364917993546,
0.02683241106569767,
0.13239234685897827,
0.01064981147646904,
-0.09909885376691818,
-0.1068902388215065,
0.045195385813713074,
0.08857403695583344,
0.017298396676778793,
0.0066926730796694756,
-0.023479951545596123,
0.04038555175065994,
0.03850363940000534,
0.025178268551826477,
0.02533985860645771,
0.04157518222928047,
-0.05978867784142494,
0.12144353985786438,
0.07043731212615967,
-0.0613221749663353,
0.0723535493016243,
-0.05665016174316406,
-0.056286294013261795,
-0.07830395549535751,
0.0027606855146586895,
0.010658925399184227,
-0.034242287278175354,
-0.08081071823835373,
-0.058008790016174316,
-0.0037394266109913588,
0.0021571991965174675,
-0.07852818816900253,
0.10424333810806274,
-0.02127908170223236,
-0.03551816940307617,
-0.06416984647512436,
0.03787875175476074,
0.0075629232451319695,
-0.05386340990662575,
0.06343703716993332,
0.040982022881507874,
-0.07651974260807037,
-0.02094980515539646,
-0.011889411136507988,
-0.01639985665678978,
-0.09153659641742706,
0.09997787326574326,
-0.005835912190377712,
0.0017375422175973654,
-0.040460627526044846,
0.019126489758491516,
-0.05197157710790634,
-0.059973638504743576,
0.0488554947078228,
-0.010114789009094238,
-0.0005857071373611689,
0.006776677910238504,
-0.08931537717580795,
-0.12714025378227234,
0.06517352163791656,
-0.07222890853881836,
-0.1109304130077362,
0.023328406736254692,
-0.01859428733587265,
0.021124405786395073,
0.029822025448083878,
0.16505005955696106,
0.08066867291927338,
-0.08250091224908829,
-0.02707226760685444,
0.007255078759044409,
0.006089008878916502,
-0.10098958015441895,
0.028087778016924858,
-0.002916327677667141,
-0.13252004981040955,
-0.12212077528238297,
-0.005310626234859228,
0.02133820205926895,
0.015934526920318604,
-0.018022648990154266,
0.163237527012825,
-0.0030912121292203665,
0.06364568322896957,
0.0989864245057106,
-0.11625978350639343,
-0.09960993379354477,
0.05049531161785126,
-0.16913719475269318,
0.09987128525972366,
0.09144541621208191,
-0.031276773661375046,
0.037627872079610825,
-0.027354232966899872,
0.06090434640645981,
-0.003395260078832507,
0.006608759984374046,
0.05332515016198158,
0.07255290448665619,
-0.11875785887241364,
0.004603900946676731,
0.06315314024686813,
-0.06926263123750687,
-0.014840411953628063,
-0.027408258989453316,
0.03213301673531532,
0.054463740438222885,
0.17571981251239777,
-0.0638335570693016,
-0.06429698318243027,
-0.03973878547549248,
0.040431056171655655,
0.0032367235980927944,
-0.09414971619844437,
0.013476506806910038,
-0.10785634815692902,
0.08929090201854706,
-0.13652752339839935,
-0.11607924848794937,
-0.06713422387838364,
-0.012153995223343372,
-0.030538566410541534,
-0.03413306176662445,
-0.061954546719789505,
0.069022536277771,
-0.06527155637741089,
-0.06586344540119171,
0.032872676849365234,
-0.024834413081407547,
-0.09884350746870041,
-0.057755134999752045,
0.08183359354734421,
0.08961430937051773,
-0.020138727501034737,
0.044104743748903275,
-0.061236120760440826,
-0.10209529101848602,
-0.06891708821058273,
-0.09797366708517075,
0.018293121829628944,
-0.02282242476940155,
-0.11939601600170135,
0.09082888811826706,
0.05062054097652435,
0.14057792723178864,
-0.04951189085841179,
0.07986485213041306,
-0.01772122271358967,
-0.058827001601457596,
-0.026884539052844048,
0.05690382048487663,
-0.12058801203966141,
-0.07939039170742035,
-0.056070178747177124,
-0.06128348782658577,
-0.06325181573629379,
-0.11861369013786316,
-0.09567997604608536,
-0.033333390951156616,
-0.0279637910425663,
0.09447620064020157,
0.0822053775191307,
-0.01811353862285614,
0.0103825144469738,
-0.03918198496103287,
-0.04747393727302551,
-0.0063263303600251675,
0.10117307305335999,
-0.26706841588020325,
0.05784325674176216,
0.005052952561527491,
-0.052992794662714005,
0.00553905637934804,
-0.04970526322722435,
0.10733426362276077,
-0.030490264296531677,
-0.05492628365755081,
0.04606955498456955,
-0.08449330180883408,
-0.07887151092290878,
-0.0875997543334961,
0.12213055044412613,
-0.10083570331335068,
0.07690058648586273,
0.017469028010964394,
0.04801396653056145,
0.12996850907802582,
0.016221772879362106,
-0.1365814357995987,
-0.011301063932478428,
0.09557030349969864,
0.08147359639406204,
-0.021369460970163345,
-0.01801305264234543,
-0.0011996173998340964,
-0.02952725440263748,
0.020054198801517487,
-0.13314053416252136,
-0.13357512652873993,
0.09617918729782104,
-0.013144886121153831,
0.10666441917419434,
0.0695202499628067,
-0.18688689172267914,
0.08665219694375992,
0.004919151309877634,
-0.057635195553302765,
-0.01243320107460022,
-0.08511646836996078,
0.12909077107906342,
-0.015000616200268269,
0.021137066185474396,
-0.044450923800468445,
0.09989626705646515,
-0.06616222113370895,
-0.06282531470060349,
0.02992701530456543,
0.037994857877492905,
-0.051053646951913834,
-0.11524929106235504,
0.10473548620939255,
-0.09985189884901047,
-0.024709008634090424,
0.07861462980508804,
-0.04459439963102341,
-0.039876263588666916,
-0.11531321704387665,
0.09789714962244034,
0.08989577740430832,
-0.02347811497747898,
-0.11690274626016617,
-0.124077707529068,
-0.032550711184740067,
0.05601705610752106,
0.0027372303884476423,
0.12119133770465851,
-0.07728305459022522,
-0.09190842509269714,
-0.08515697717666626,
-0.05967184156179428,
0.01582300290465355,
-0.08813829720020294,
-0.11894100159406662,
-0.030175231397151947,
-0.03528868034482002,
0.00851832702755928,
-0.10623481869697571,
-0.0039146761409938335,
0.07093586772680283,
0.016034850850701332,
0.15899518132209778,
0.13304056227207184,
0.09755715727806091,
0.03588777780532837,
-0.053587011992931366,
-0.10436490178108215,
0.007170731667429209,
-0.03503473475575447,
0.03654837980866432,
-0.05916033685207367,
0.02678167261183262,
0.17978402972221375,
0.08667069673538208,
-0.04506360739469528,
0.07060764729976654,
-0.04924340173602104,
0.07293479144573212,
0.062258534133434296,
0.09172343462705612,
0.1428193897008896,
0.0006500945892184973,
-0.006601426750421524,
0.09596744179725647,
0.05272981524467468,
0.04135899990797043,
0.10925927758216858,
-0.04256390035152435,
0.18880724906921387,
0.19576121866703033,
-0.03550705313682556,
-0.02326088957488537,
-0.08120588213205338,
0.10095590353012085,
0.0340820774435997,
0.05439191684126854,
-0.03192301467061043,
-0.009075694717466831,
0.04447765648365021,
-0.11546487361192703,
-0.2127765715122223,
-0.12256894260644913,
0.05244685709476471,
-0.013259084895253181,
-0.03864133730530739,
-0.07391265034675598,
0.007890356704592705,
-0.08113797754049301,
-0.0014922964619472623,
-0.08182235062122345,
0.09464333206415176,
0.05847363546490669,
-0.05046138912439346,
0.07486364990472794,
0.04736248776316643,
-0.060962069779634476,
-0.08597451448440552,
0.04428079351782799,
0.10289931297302246,
-0.10275077074766159,
0.12113584578037262,
-0.08085829764604568,
-0.06531883776187897,
-0.11250032484531403,
-0.02888284996151924,
0.01628788560628891,
0.13259002566337585,
0.03196913003921509,
0.07316708564758301,
0.11702464520931244,
-0.09026118367910385,
-0.04453226923942566,
-0.026626594364643097,
-0.05258150398731232,
-0.044478487223386765,
-0.05390233173966408,
-0.026683691889047623,
-0.041059814393520355,
-0.0202647615224123,
-0.029707586392760277,
-0.061900362372398376,
-0.03844326362013817,
-0.007440357934683561,
0.03866957128047943,
0.0594257116317749,
0.016158370301127434,
0.02955622412264347,
0.04171203821897507,
-0.001530117355287075,
0.17394767701625824,
-0.011193313635885715,
-0.08140841126441956,
0.07528302073478699,
0.15387696027755737,
0.12647601962089539,
-0.0603766143321991,
0.06984682381153107,
0.00817231647670269,
-0.010565302334725857,
-0.1013031154870987,
0.11550629138946533,
0.01519117783755064,
-0.020627766847610474,
0.0006706791464239359,
-0.003847639774903655,
0.03775247558951378,
0.02897409349679947,
-0.04414782673120499,
0.09849042445421219,
0.061962924897670746,
0.04763849824666977,
0.09636884927749634,
-0.018917644396424294,
0.028423821553587914,
0.0548156313598156,
-0.02962365746498108,
-0.04734639450907707,
0.032298628240823746,
-0.17596887052059174,
-0.03694760426878929,
-0.1537611037492752,
0.07728903740644455,
0.06949418783187866,
-0.16580651700496674,
0.0970463976264,
0.06649170815944672,
0.004012696910649538,
0.07278106361627579,
-0.10126906633377075,
-0.08685965836048126,
0.028659574687480927,
0.03951044753193855,
0.035600293427705765,
0.029195057228207588,
-0.040687914937734604,
-0.13558419048786163,
0.057635046541690826,
0.07793402671813965,
0.10307861864566803,
0.04517387971282005,
-0.07289975881576538,
0.007463930174708366,
-0.11463658511638641,
-0.11310034990310669,
-0.10101824253797531,
-0.0026433072052896023,
0.0898514837026596,
-0.01491487305611372,
-0.11290572583675385,
0.023014118894934654,
-0.06342378258705139,
0.04747043922543526,
0.16483646631240845,
0.11300835758447647,
0.041773390024900436,
0.04167436808347702,
-0.009472757577896118,
-0.002441363874822855,
-0.08841241896152496,
-0.050835587084293365,
0.062360528856515884,
0.04655476659536362,
-0.02620665915310383,
-0.060153886675834656,
0.03233564272522926,
0.0043396069668233395,
-0.13637417554855347,
0.06986796855926514,
0.022198732942342758,
0.027479564771056175,
0.016026237979531288,
0.035808250308036804,
-0.0921747013926506,
0.005386464763432741,
-0.07872326672077179,
0.033796925097703934,
0.0618010051548481,
-0.04607212543487549,
-0.02319565787911415,
-0.04077359288930893,
0.039682626724243164,
0.1053694635629654,
-0.04133908450603485,
0.08144742995500565,
-0.10380039364099503,
0.11717555671930313,
-0.08312959223985672,
-0.06984270364046097,
0.006527826189994812,
0.0743795856833458,
0.015745921060442924,
0.08462999761104584,
0.10879247635602951,
-0.028078725561499596,
-0.02233552746474743,
-0.011538056656718254,
0.12930874526500702,
-0.10443168133497238,
-0.12639382481575012,
-0.07121829688549042,
0.04602966830134392,
-0.04301967844367027,
0.003005695529282093,
-0.05903559923171997,
-0.06926344335079193,
0.038644976913928986,
-0.04914603754878044,
-0.059242550283670425,
0.04894399642944336,
0.0045884535647928715,
0.09800992161035538,
-0.044507790356874466,
0.049524202942848206,
0.06899882853031158,
-0.014670116826891899,
-0.07696724683046341,
0.14298483729362488,
0.07184650003910065,
-0.08641555160284042,
-0.08145001530647278,
-0.1438610851764679,
0.11865809559822083,
-0.06422888487577438,
0.011501855216920376,
0.06396380811929703,
-0.04737700894474983,
0.1326921433210373,
-0.020035112276673317,
-0.0694473460316658,
-0.07058258354663849,
0.029098423197865486,
0.055230673402547836,
-0.11576981842517853,
0.07514601200819016,
-0.08501283079385757,
0.08078327775001526,
-0.003125058487057686,
-0.08490210026502609,
0.03660018369555473,
0.0011057868832722306,
-0.08645593374967575,
-0.057583924382925034,
0.04772445932030678,
-0.039795469492673874,
0.04653074964880943,
-0.07177252322435379,
0.08043406903743744,
-0.06701278686523438,
0.10509474575519562,
-0.0006583750364370644,
-0.10071375221014023,
-0.03171952813863754,
0.016218220815062523,
0.06785966455936432,
0.05612765625119209,
-0.03714143857359886,
0.02437693625688553,
-0.05218621343374252,
-0.01898476853966713,
-0.08420011401176453,
-0.0754934623837471,
-0.053344354033470154,
0.09310508519411087,
-0.11038441210985184,
-0.017798861488699913,
0.09806171804666519,
0.015871698036789894,
0.13897229731082916,
0.08574939519166946,
0.0035707189235836267,
-0.06525720655918121,
-0.015459071844816208,
0.1254952996969223,
-0.042436517775058746,
-0.04783613979816437,
-0.06346077471971512,
0.188431516289711,
0.03423594310879707,
0.006539009511470795,
0.019049890339374542,
0.10198338329792023,
0.14808697998523712,
-0.007660157047212124,
-0.1013123020529747,
0.019007034599781036,
0.059108417481184006,
5.379111826187e-05,
-0.012099862098693848,
-0.006070087663829327,
-0.11149781942367554,
-0.03130365163087845,
-0.0699579194188118,
0.0815238431096077,
-0.002996719442307949,
-0.07280847430229187,
-0.025961486622691154,
0.08808110654354095,
0.10450248420238495,
0.0021151441615074873,
-0.08744154125452042,
-0.027456646785140038,
0.027922341600060463,
-0.014408168382942677,
-0.01602434366941452,
0.08310351520776749,
0.040628381073474884,
-0.012706523761153221,
0.07038899511098862,
0.04984244331717491,
-0.09820489585399628,
-0.174072265625,
-0.12421119213104248,
-0.0448756106197834,
-0.06062173843383789,
0.012374116107821465,
0.09948234260082245,
-0.10460054874420166,
-0.015240696258842945,
0.005964643321931362,
0.09605852514505386,
0.06758350878953934,
0.025911971926689148,
-0.12419409304857254,
0.08870424330234528,
-0.17385675013065338,
0.02220597304403782,
0.019190585240721703,
0.06169990822672844,
0.09285034984350204,
-0.11212792247533798,
-0.041767846792936325,
-0.0007226699963212013,
0.017631815746426582,
-0.018073365092277527,
-0.12481823563575745,
0.002202066592872143,
0.08067715167999268,
-0.002981628058478236,
0.13404424488544464,
0.17790810763835907,
0.07003605365753174,
0.023375708609819412,
-0.028478937223553658,
-0.06111634522676468,
0.06692507117986679,
0.05482009798288345,
0.01714443601667881,
-0.02490030601620674,
-0.05424915999174118,
-0.1496761441230774,
-0.13876906037330627,
-0.023010417819023132,
0.006463034078478813,
-0.13403451442718506,
0.05739391967654228,
0.08038371801376343,
0.10487769544124603,
-0.06844553351402283,
-0.0279859472066164,
0.05468880012631416,
-0.020542917773127556,
-0.06448710709810257,
0.07638926804065704,
-0.07521626353263855,
-0.03795081377029419,
0.05428296700119972,
-0.08972117304801941,
0.05655550956726074,
-0.09953062981367111,
-0.16128599643707275,
-0.09300979226827621,
0.11064163595438004,
0.030700750648975372,
0.059009719640016556,
-0.1315644532442093,
-0.011326775886118412,
-0.013751865364611149,
0.06429661065340042,
0.05852866545319557,
-0.08096662908792496,
0.04246706888079643,
-0.04710681736469269,
0.009460778906941414,
0.016055315732955933,
-0.14571094512939453,
-0.16382446885108948,
0.0015425413148477674,
0.0897093191742897,
0.12985745072364807,
0.008432229980826378,
-0.06197084113955498,
0.1345326006412506,
0.02094210498034954,
-0.08395838737487793,
0.10387707501649857,
0.006177277769893408,
-0.012366654351353645,
-0.1305234134197235,
-0.04945608973503113,
0.07034733146429062,
-0.1524428129196167,
-0.04925907775759697,
-0.015282467007637024,
-0.03971569985151291,
-0.16298682987689972,
0.06925871223211288,
-0.1977001130580902,
0.04591837897896767,
0.0030480886343866587,
-0.0246041938662529,
0.02451186068356037,
-0.08694914728403091,
0.039732009172439575,
0.029446866363286972,
-0.04131234437227249,
-0.03537444397807121,
-0.008600500412285328,
-0.20168663561344147,
-0.03352003172039986,
0.05315246060490608,
-0.07407335937023163,
-0.03678225725889206,
0.0014351034769788384,
-0.01593320071697235,
-0.08840551227331161,
0.12403896450996399,
-0.006497032009065151,
0.034966547042131424,
0.058678220957517624,
0.021424582228064537,
-0.07098974287509918,
-0.0580652579665184,
-0.03201479837298393,
-0.07709457725286484,
-0.18422530591487885,
0.11909811198711395,
-0.15012291073799133,
-0.057807426899671555,
0.036585599184036255,
0.026232456788420677,
0.17369501292705536,
-0.11502762138843536,
-0.05268560349941254,
0.01337449625134468,
0.006577102467417717,
0.01577637903392315,
0.07502513378858566,
0.036199312657117844,
0.08870816975831985,
0.007855047471821308,
-0.017777208238840103,
0.13677985966205597,
-0.03591601178050041,
0.015449907630681992,
-0.06322097033262253,
0.14611098170280457,
-0.008495929650962353,
0.03994254022836685,
0.001144459005445242,
0.0007475390448234975,
0.056495774537324905,
-0.09039322286844254,
0.09189166128635406,
-0.03769008070230484,
0.06550271809101105,
0.05903541296720505,
-0.01875299960374832,
-0.12622690200805664,
-0.04359119385480881,
-0.06683695316314697,
-0.10959327965974808,
0.09849078208208084,
0.04336054250597954,
-0.0051464964635670185,
0.02799057587981224,
0.045122429728507996,
0.02446504682302475,
0.03031591698527336,
-0.01827321946620941,
-0.04631388932466507,
0.07588084787130356,
0.07804033160209656,
-0.0554107166826725,
-0.10306303948163986,
0.02865997701883316,
0.07934638857841492,
0.05756009742617607,
0.019594766199588776,
-0.041922423988580704,
0.08048201352357864,
0.05941803753376007,
0.024721046909689903,
0.007701312657445669,
0.0014699994353577495,
-0.009167013689875603,
0.05193747952580452,
-0.0608554370701313,
0.02928066812455654,
0.06358859688043594,
-0.00940049346536398,
0.007484007626771927,
0.03072313219308853,
0.007608691696077585,
-0.04130600392818451,
0.033464815467596054,
-0.06315422803163528,
0.060378968715667725,
-0.031014790758490562,
-0.025429617613554,
-0.06302184611558914,
0.01628555729985237,
-0.05384397506713867,
0.10162392258644104,
0.005740806460380554,
0.0925658568739891,
-0.06943913549184799,
-0.16528519988059998,
0.030108846724033356,
-0.03739912435412407,
-0.0430171862244606,
0.11365941911935806,
-0.01898888498544693,
-0.02861849218606949,
-0.10616310685873032,
0.08466187864542007,
0.016080424189567566,
0.06890862435102463,
0.03303614631295204,
-0.03463495150208473,
-0.05177542194724083,
0.09188248962163925,
0.05708584934473038,
0.08943939954042435,
-0.04275787994265556,
0.007805302273482084,
-0.11000028252601624,
0.03054499439895153,
0.11947495490312576,
0.043239038437604904,
-0.0382668599486351,
0.16185228526592255,
0.003830517875030637,
0.06828339397907257,
0.13409088551998138,
-0.07645349204540253,
-0.04882180690765381,
0.10175439715385437,
-0.007814094424247742,
0.04390907660126686,
0.0975087508559227,
-0.1641373634338379,
-0.003644701559096575,
0.03892289102077484,
0.10371977090835571,
-0.012773023918271065,
0.0695275068283081,
-0.11822479218244553,
0.02523285150527954,
0.0631382018327713,
-0.029571956023573875,
0.054217007011175156,
-0.09301654994487762,
0.07529336959123611,
-0.003598166862502694,
0.11616091430187225,
-0.01640992984175682,
0.04442692548036575,
0.05733231455087662,
-0.10373055189847946,
0.08098215609788895,
0.030956286936998367,
0.10298167169094086,
-0.07583171129226685,
0.059639886021614075,
-0.132786363363266,
-0.08482708036899567,
-0.010137720964848995,
-0.0837894007563591,
0.07239316403865814,
0.13815094530582428,
0.05995742604136467,
0.04882229492068291,
0.05340276286005974,
-0.019187040627002716,
-0.10938619822263718,
0.008122009225189686,
0.09403609484434128,
0.012353848665952682,
0.0970231294631958,
-0.0422268882393837,
0.032243762165308,
0.10668448358774185,
0.04161662608385086,
0.02905111387372017,
0.052199602127075195,
-0.09607212245464325,
-0.004573483485728502,
-0.07986380159854889,
-0.05870629847049713,
0.05687442794442177,
-0.019486580044031143,
-0.05798415094614029,
-0.14330840110778809,
0.00934562087059021,
0.026006188243627548,
0.03918708115816116,
-0.08307324349880219,
-0.1754494607448578,
0.04114987701177597,
-0.07344535738229752,
0.07858705520629883,
-0.08911541104316711,
0.0012842027936130762,
-0.08476870507001877,
0.06654778122901917,
-0.038500361144542694,
0.06359130144119263,
-0.05675220116972923,
-0.0738673061132431,
0.0595172718167305,
-0.061947718262672424,
0.016192326322197914,
0.05964957922697067,
0.09818003326654434,
0.08848868310451508,
0.12860316038131714,
0.0676933005452156,
0.08185021579265594,
0.03344304487109184,
0.09061998873949051,
-0.05592930689454079,
0.06540238857269287,
-0.07109004259109497,
0.12637925148010254,
-0.1330210566520691,
0.06945890188217163,
-0.04451786354184151,
0.12002509832382202,
0.1708282083272934,
-0.08575331419706345,
0.07569394260644913,
-0.053375180810689926,
-0.03225954249501228,
-0.04921652376651764,
0.012770188972353935,
-0.0991469994187355,
-0.033392246812582016,
0.013521191664040089,
0.041488166898489,
-0.06774646043777466,
-0.07438410073518753,
-0.0598999448120594,
-0.03830535337328911,
0.07965417206287384,
-0.07395587116479874,
0.022150272503495216,
0.0007685389718972147,
0.03858546167612076,
0.1280462145805359,
0.06393202394247055,
-0.05809140205383301,
-0.054545268416404724,
0.029121989384293556,
0.058893200010061264,
-0.06573320925235748,
0.12942244112491608,
-0.07209910452365875,
-0.17890149354934692,
-0.05308803170919418,
0.16491052508354187,
-0.1233970895409584,
0.11548206955194473,
0.04202180355787277,
0.1092420145869255,
-0.15797296166419983,
0.07569333165884018,
-0.06518170982599258,
-0.08644109219312668,
-0.0030036121606826782,
-0.039812713861465454,
-0.00892955157905817,
-0.09186217188835144,
0.07018055021762848,
0.03694603219628334,
-0.11915522068738937,
-0.003937002271413803,
0.02255147136747837,
0.0033561699092388153,
0.017948299646377563,
0.13679884374141693,
0.05096038058400154,
0.15185342729091644,
-0.12768052518367767,
0.00937454029917717,
0.007583710830658674,
-0.003972568549215794,
-0.06421365588903427,
-0.05944023281335831,
-0.10457143187522888,
-0.07064022123813629,
-0.04531187191605568,
-0.030484793707728386,
-0.03844347596168518,
-0.048703521490097046,
0.010062153451144695,
0.033357445150613785,
0.03208484500646591,
0.04995587095618248,
-0.08868920803070068,
0.0009884100873023272,
-0.13489024341106415,
-0.018064923584461212,
0.08747567981481552,
0.09892101585865021,
-0.04830600693821907,
0.02962479554116726,
-0.012249048799276352,
-0.012995412573218346,
0.05259968712925911,
0.13822296261787415,
-0.04805256426334381,
-0.021888546645641327,
0.007639038376510143,
-0.032516926527023315,
0.026409361511468887,
-0.010785588063299656,
-0.18985262513160706,
-0.042966462671756744,
-0.030368391424417496,
0.021433234214782715,
0.03657472878694534,
-0.0005542338476516306,
0.027879655361175537,
-0.023927610367536545,
-0.0015291410963982344,
0.07574313133955002,
-0.05790523812174797,
0.16154922544956207,
-0.03168496489524841,
-0.12786975502967834,
0.06218058988451958,
0.05232078582048416,
-0.100008025765419,
-0.15878942608833313,
0.004067569505423307,
0.026741208508610725,
-0.1156233623623848,
-0.09482131153345108,
-0.022488178685307503,
0.060612913221120834,
0.08163624256849289,
0.11342448741197586,
-0.07013211399316788,
-0.10887829959392548,
0.056273333728313446,
0.14298668503761292,
0.12902246415615082,
0.0886225551366806,
-0.1326562911272049,
-0.028945276513695717,
-0.06553811579942703,
0.1190820187330246,
-0.04272259771823883,
0.03672417253255844,
0.10859212279319763,
0.12873822450637817,
0.10678371787071228,
0.08098739385604858,
0.090784452855587,
-0.18602634966373444,
-0.1197231188416481,
-0.040500707924366,
-0.05052367225289345,
0.05228863283991814,
-0.004667806904762983,
-0.07946620881557465,
-0.10687223076820374,
-0.041278477758169174,
-0.06839611381292343,
0.050819747149944305,
-0.12076206505298615,
0.08706214278936386,
-0.04430725798010826,
0.013103870674967766,
-0.002126592444255948,
-0.11395365744829178,
0.04250316694378853,
-0.0011402968084439635,
0.026070749387145042,
-0.06493787467479706,
-0.1430872529745102,
0.0792817696928978,
0.020708512514829636,
-0.025285687297582626,
0.02999960444867611,
0.036267008632421494,
-0.021053506061434746,
0.0361575186252594,
-0.0929630920290947,
-0.037208959460258484,
0.057197488844394684,
0.07309688627719879,
0.033610813319683075,
-0.02867126278579235,
-0.06273455172777176,
-0.06686244904994965,
0.01692146807909012,
0.07960177958011627,
-0.007618335075676441,
0.12099146842956543,
-0.07197971642017365,
0.06311850994825363,
0.07646044343709946,
0.10500240325927734,
0.1422620415687561,
0.26186850666999817,
-0.03021513856947422,
-0.07983037829399109,
-0.05334414169192314,
0.07659969478845596,
0.054297301918268204,
0.15517152845859528,
0.08600062876939774,
0.0001318703289143741,
-0.1347431093454361,
-0.04177088662981987,
-0.044225819408893585,
-0.050748080015182495,
-0.1265566051006317,
-0.18043190240859985,
0.02668767236173153,
0.010528100654482841,
-0.0508403405547142,
0.005244154948741198,
0.06994377821683884,
-0.010019596666097641,
0.04806768149137497,
0.013903211802244186,
0.15233594179153442,
-0.10171467065811157,
0.19514745473861694,
0.03943338245153427,
0.06758897751569748,
0.0950854942202568,
0.012662975117564201,
-0.012588923797011375,
0.093604177236557,
-0.05377019941806793,
0.09633418917655945,
0.14847445487976074,
-0.12128403782844543,
-0.057686470448970795,
0.020740441977977753,
-0.10402730852365494,
0.09942127019166946,
-0.019865714013576508,
-0.0338343046605587,
-0.06546708941459656,
0.019875051453709602,
0.09473025798797607,
-0.054755620658397675,
-0.04577270895242691,
0.06285425275564194,
0.03265262767672539,
0.00928413774818182,
-0.051027458161115646,
-0.036640144884586334,
0.10138533264398575,
0.005854130256921053,
-0.07033451646566391,
0.0996076837182045,
-0.12473753094673157,
-0.06018094718456268,
-0.0600527748465538,
-0.035005223006010056,
-0.09431594610214233,
0.09010926634073257,
-0.02155756764113903,
0.12293222546577454,
0.06641054153442383,
-0.01929299347102642,
-0.026550818234682083,
0.020124152302742004,
-0.0805550366640091,
0.04288393259048462,
-0.09300636500120163,
-0.08089233189821243,
-0.026441654190421104,
0.015807313844561577,
-0.04946814849972725,
0.04443253576755524,
0.08372824639081955,
0.14737387001514435,
-0.08081631362438202,
-0.03035677596926689,
-0.010872878134250641,
-0.022472424432635307,
-0.011223223991692066,
0.09498579800128937,
0.07331103086471558,
0.016286632046103477,
0.006038357969373465,
-0.031680621206760406,
-0.010819739662110806,
0.11455575376749039,
-0.14297130703926086,
-0.06946985423564911,
0.004610556643456221,
-0.024482866749167442,
0.05014066398143768,
-0.044764548540115356,
0.09129645675420761,
0.05411398410797119,
-0.10320256650447845,
0.06548527628183365,
-0.14667080342769623,
0.057164423167705536,
0.013030344620347023,
0.0634060874581337,
0.16520735621452332,
0.01258788350969553,
0.02405291236937046,
0.005805123131722212,
-0.03643226623535156,
-0.10074140876531601,
-0.09416168183088303,
0.11439872533082962,
-0.05122373253107071,
-0.1314932405948639,
-0.08163323253393173,
-0.10217001289129257,
-0.13067330420017242,
0.056301020085811615,
-0.057175666093826294,
0.04493637755513191,
0.058879878371953964,
-0.07987390458583832,
-0.05372561514377594,
0.1047915518283844,
-0.059737566858530045,
0.08395553380250931,
0.09240460395812988,
0.07899146527051926,
-0.03045213408768177,
0.039639249444007874,
0.020110096782445908,
-0.012839403003454208,
-0.0658915787935257,
0.12175147980451584,
0.08646472543478012,
0.007138949353247881,
-0.01871265098452568,
-0.012089765630662441,
-0.12048220634460449,
-0.01601347327232361,
0.022909142076969147,
-0.012196873314678669,
-0.06212512403726578,
0.004049837589263916,
0.01778709702193737,
0.02941783517599106,
0.04442156106233597,
-0.02791311964392662,
-0.1262068748474121,
-0.0831340029835701,
0.021783560514450073,
0.0008006437565200031,
-0.012857839465141296,
0.06928133219480515,
-0.06605931371450424,
0.02112768031656742,
0.07982806116342545,
-0.03071153163909912,
0.04837185889482498,
-0.18565267324447632,
-0.04773728549480438,
0.009521911852061749,
0.0464068241417408,
0.035998933017253876,
0.030807115137577057,
-0.11986495554447174,
0.02677031233906746,
-0.05303049832582474,
0.10027286410331726,
0.09327898174524307,
0.020136352628469467,
-0.008758995682001114,
-0.11825678497552872,
0.13165098428726196,
0.014639217406511307,
0.06983993947505951,
0.17099565267562866,
-0.04194307327270508,
-0.021066684275865555,
0.0548882894217968,
0.06428363174200058,
0.062533900141716,
0.06687267124652863,
0.024603072553873062,
0.16115564107894897,
-0.06291979551315308,
0.13453282415866852,
0.008477330207824707,
-0.012213598936796188,
0.05159028619527817,
-0.002323388122022152,
0.006945480592548847,
0.03622659295797348,
-0.08716779947280884,
-0.11566486954689026,
0.0035052141174674034,
0.06948822736740112,
0.23775269091129303,
-0.0441305935382843,
0.07293589413166046,
-0.0028864662162959576,
0.025436125695705414,
0.08408096432685852,
0.06490256637334824,
-0.007619356270879507,
-0.04883937910199165,
0.08819161355495453,
0.08643916249275208,
-0.10682062804698944,
0.029735146090388298,
-0.11893892288208008,
0.09858958423137665,
0.0879654586315155,
-0.0990670919418335,
0.043864235281944275,
-0.0013578676152974367,
-0.04117077961564064,
-0.10999950766563416,
-0.08117164671421051,
0.009203584864735603,
-0.0724332183599472,
0.039509210735559464,
0.07854052633047104,
0.00451492378488183,
0.036773908883333206,
-0.08798273652791977,
-0.06318448483943939,
-0.016885599121451378,
0.12985846400260925,
0.004739842843264341,
0.12038715928792953,
-0.10826848447322845,
0.030214492231607437,
-0.00156377290841192,
0.023731382563710213,
0.07756686955690384,
-0.12063334882259369,
0.030942324548959732,
0.019462600350379944,
0.015189409255981445,
0.05410200357437134,
-0.10014046728610992,
-0.005912337452173233,
-0.015786662697792053,
0.12107011675834656,
-0.034333910793066025,
0.028089355677366257,
-0.0005832852330058813,
-0.021100148558616638,
-0.009720312431454659,
-0.002809085650369525,
-0.009001295082271099,
-0.03816714137792587,
0.1531440168619156,
-0.0308496356010437,
-0.0020511308684945107,
0.00440290616825223,
-0.05825717747211456,
-0.02950899675488472,
-0.014438848942518234,
-0.022994324564933777,
0.04740240052342415,
-0.001743388595059514,
-0.001934747095219791,
0.13086402416229248,
-0.13218271732330322,
0.1513061225414276,
-0.02659940905869007,
0.028089124709367752,
-0.06404125690460205,
0.13716983795166016,
0.1238626092672348,
-0.053479213267564774,
0.06613948941230774,
-0.018017692491412163,
-0.06947941333055496,
-0.1586063802242279,
0.01843775063753128,
0.12652209401130676,
0.1288732886314392,
0.06623852252960205,
0.04661738499999046,
0.14458666741847992,
0.07203999161720276,
0.03470228239893913,
0.0008107158937491477,
-0.01894967444241047,
-0.027831437066197395,
-0.20544682443141937,
-0.03304373100399971,
-0.0846848115324974,
0.0550294853746891,
-0.1042686328291893,
-0.03644012659788132,
0.08701479434967041,
0.04038020595908165,
-0.011345497332513332,
-0.0032780629117041826,
0.04615665227174759,
-0.0004362149047665298,
-0.004481727257370949,
0.007949627004563808,
0.06354900449514389,
0.030578872188925743,
-0.15308600664138794,
0.04685983806848526,
0.1511116623878479,
0.01822395995259285,
-0.050135500729084015,
-0.11397106200456619,
-0.013121754862368107,
0.06066455692052841,
0.017290109768509865,
-0.021861130371689796,
0.06867046654224396,
-0.0791110172867775,
0.09941913187503815,
-0.06268545985221863,
0.11553289741277695,
0.04782605543732643,
-0.10553865879774094,
-0.03754814341664314,
-0.018434233963489532,
0.04341869056224823,
-0.013351581059396267,
0.06313110142946243,
0.1291080117225647,
-0.11350271850824356,
0.09187331050634384,
0.07361186295747757,
0.04536886513233185,
-0.08486797660589218,
-0.0431642085313797,
0.15246154367923737,
0.1146843433380127,
-0.05850837379693985,
-0.044313546270132065,
-0.15942871570587158,
0.021276963874697685,
0.14512138068675995,
-0.013983176089823246,
-0.059854745864868164,
0.03260653465986252,
0.028567085042595863,
0.007260768208652735,
0.03598722815513611,
-0.08437297493219376,
-0.036513566970825195,
-0.08043389022350311,
-0.0902944877743721,
0.07172658294439316,
0.12756052613258362,
0.030405964702367783,
-0.028642605990171432,
0.026075182482600212,
0.08206626772880554,
-0.035661086440086365,
-0.058118924498558044,
0.04463017359375954,
-0.1291436403989792,
-0.1345876008272171,
-0.014437543228268623,
0.1782519817352295,
0.04115639254450798,
-0.11839256435632706,
-0.06276088207960129,
0.02760281041264534,
0.10137513279914856,
0.020391341298818588,
0.12546765804290771,
0.17738878726959229,
-0.0970839411020279,
0.011002587154507637,
-0.12438056617975235,
-0.06153244897723198,
0.0961940661072731,
-0.1018073707818985,
0.11970488727092743,
0.1410650908946991,
-0.05416802689433098,
0.003222831292077899,
-0.01923506334424019,
0.1177443414926529,
0.16396237909793854,
0.00329021317884326,
0.14288680255413055,
0.1467173993587494,
0.09888236224651337,
0.02252073585987091,
0.10974154621362686,
0.05865558236837387,
0.16382867097854614,
0.15107357501983643,
0.012112494558095932,
-0.022743243724107742,
0.031094200909137726,
0.12586240470409393,
0.09133913367986679,
0.056903764605522156,
0.07700058072805405,
0.07095062732696533,
-0.038684193044900894,
0.10003650188446045,
-0.038490645587444305,
-0.003184290835633874,
-0.1005363017320633,
0.029375262558460236,
-0.03658755496144295,
-0.09632834792137146,
0.09991732239723206,
-0.04598980024456978,
-0.055003780871629715,
-0.07169794291257858,
-0.03635407239198685,
-0.04478360339999199,
0.02158917486667633,
-0.00456798542290926,
-0.011232705786824226,
-0.05202681943774223,
-0.07744770497083664,
-0.007627048529684544,
-0.17136475443840027,
-0.06590563803911209,
-0.02112526446580887,
0.05925198271870613,
-0.15151754021644592,
0.05024191364645958,
0.07915977388620377,
-0.11472532153129578,
-0.043773386627435684,
-0.11456874012947083,
-0.002907262882217765,
-0.08242969959974289,
0.05812305584549904,
0.028966492041945457,
0.09233638644218445,
0.02420424483716488,
0.027377987280488014,
-0.008449050597846508,
0.06870545446872711,
0.02071627974510193,
-0.09247753024101257,
-0.03611557558178902,
-0.00030878675170242786,
-0.011909463442862034,
0.11099179089069366,
0.011304161511361599,
-0.07480825483798981,
0.13086764514446259,
-0.06843845546245575,
-0.017138315364718437,
0.11194247752428055,
0.12170133739709854,
0.01833120547235012,
0.030613679438829422,
0.036694157868623734,
0.10443183779716492,
0.1026776060461998,
0.058120403438806534,
0.08189166337251663,
0.10229549556970596,
0.07147714495658875,
0.015410157851874828,
0.13074162602424622,
0.02394387684762478,
0.07628092169761658,
-0.010385648347437382,
0.10145995765924454,
0.01457385066896677,
0.00479537807404995,
-0.033213794231414795,
0.08424989879131317,
-0.052838899195194244,
0.05860298499464989,
0.077647365629673,
0.07657482475042343,
-0.004792987834662199,
-0.06992647796869278,
0.07672259211540222,
0.06951270252466202,
-0.06321560591459274,
0.06212244927883148,
0.03583559766411781,
0.05153350904583931,
-0.04730511084198952,
0.05906904861330986,
0.08594538271427155,
0.04275687411427498,
-0.05960704758763313,
0.015479031950235367,
0.0892675444483757,
0.06427051872015,
0.07126260548830032,
-0.14968422055244446,
-0.12266484647989273,
0.0496833436191082,
-0.1496763825416565,
-0.10094964504241943,
0.033014360815286636,
0.0687846913933754,
-0.006752004846930504,
-0.10184501111507416,
0.048011742532253265,
-0.08789535611867905,
-0.12231707572937012,
0.09604454785585403,
-0.09668828547000885,
-0.05674736574292183,
-0.0781043991446495,
0.026581423357129097,
-0.012869521044194698,
-0.15755252540111542,
0.012621261179447174,
-0.08620433509349823,
-0.03953295573592186,
-0.0860738530755043,
-0.02365962602198124,
-0.17959988117218018,
0.007505764253437519,
-0.09435202181339264,
0.061174191534519196,
0.0699697807431221,
-0.05609047785401344,
-0.08394243568181992,
-0.07920996844768524,
0.08806032687425613,
-0.019627489149570465,
0.07993023097515106,
0.10461194068193436,
-0.0803789496421814,
0.0006993600982241333,
0.0609310120344162,
0.002012004377320409,
-0.030245672911405563,
-0.06511510908603668,
0.13873980939388275,
-0.010043526999652386,
0.027683384716510773,
-0.023343121632933617,
-0.0613219290971756,
0.05060425028204918,
-0.0517117865383625,
0.0027361696120351553,
-0.04965651407837868,
-0.036200132220983505,
-0.012034923769533634,
-0.02863435447216034,
-0.010534966364502907,
-0.0785137191414833,
0.06219795346260071,
-0.0502125583589077,
0.07658994197845459,
0.04529724270105362,
0.01776176504790783,
-0.06976006180047989,
0.11394483596086502,
-0.14694184064865112,
0.07652037590742111,
-0.02061191387474537,
-0.009235688485205173,
0.10619094967842102,
0.0010192287154495716,
-0.005732134450227022,
-0.035933613777160645,
0.010722542181611061,
-0.023465728387236595,
0.0955917090177536,
0.11956383287906647,
-0.07424899935722351,
-0.02167879045009613,
-0.04569926857948303,
0.10660658031702042,
0.025118591263890266,
0.10144253075122833,
-0.13499458134174347,
0.12766973674297333,
0.017833689227700233,
-0.10040560364723206,
-0.03761838376522064,
-0.0883011519908905,
-0.05921525880694389,
-0.07695809006690979,
-0.10165213793516159,
-0.09708626568317413,
0.0051430510357022285,
-0.0032933151815086603,
-0.18308612704277039,
-0.058213233947753906,
0.05332985147833824,
-0.153025284409523,
-0.05612892284989357,
-0.09951629489660263,
-0.11077266186475754,
0.07009123265743256,
0.03638646379113197,
-0.0052751824259757996,
0.11437145620584488,
-0.07425127178430557,
0.13072411715984344,
-0.03240961581468582,
0.017940852791070938,
-0.17105403542518616,
-0.07058727741241455,
-0.12163428962230682,
-0.19914330542087555,
0.008730853907763958,
0.03486679866909981,
-0.007055948488414288,
-0.04454874247312546,
0.06780590116977692,
0.06870304048061371,
0.021210525184869766,
0.03859953582286835,
-0.1537477821111679,
0.13507552444934845,
0.08684846758842468,
0.09021788835525513,
0.024300985038280487,
-0.046248629689216614,
0.06766001880168915,
-0.05823419615626335,
0.04745309427380562,
0.010363181121647358,
0.01135416142642498,
-0.08592276275157928,
0.08522284030914307,
-0.10249682515859604,
0.011323225684463978,
0.0829690471291542,
0.11529257893562317,
0.033493079245090485,
0.03502752631902695,
-0.05454632267355919,
-0.118154376745224,
-0.06808291375637054,
0.038945287466049194,
-0.07169549912214279,
0.09828577190637589,
-0.07358656078577042,
0.08708604425191879,
0.10060258209705353,
-0.07567186653614044,
-0.03480113297700882,
0.11741037666797638,
0.03702985495328903,
0.08036172389984131,
-0.03348788619041443,
-0.06059575080871582,
0.09144314378499985,
-0.0015908096684142947,
-0.06191696971654892,
0.01509892288595438,
-0.10738139599561691,
-0.04115200415253639,
-0.05401984229683876,
0.13645562529563904,
-0.051518507301807404,
0.06227428466081619,
-0.027890151366591454,
0.028272131457924843,
0.06497891247272491,
-0.07158176600933075,
0.05667804926633835,
-0.12911124527454376,
0.08813346177339554,
-0.08342010527849197,
0.017589306458830833,
0.04293494299054146,
-0.016926025971770287,
0.08277597278356552,
-0.06470593810081482,
0.02936890348792076,
0.037318166345357895,
0.03636655956506729,
-0.07780861854553223,
0.05707641318440437,
-0.07840146124362946,
-0.1325632631778717,
0.11844130605459213,
-0.11650927364826202,
-0.08832304924726486,
-0.16531506180763245,
0.016485687345266342,
0.08134660124778748,
-0.006002235691994429,
-0.022970255464315414,
-0.12521201372146606,
-0.008531507104635239,
0.1584727168083191,
0.0699404701590538,
-0.06589485704898834,
0.04777628183364868,
0.16832581162452698,
-0.14860862493515015,
-0.04056769236922264,
-0.02477976493537426,
0.00615723617374897,
0.1144062802195549,
-0.07889354228973389,
0.09676043689250946,
-0.000771648483350873,
0.018345212563872337,
0.04712926968932152,
0.14412836730480194,
-0.016635054722428322,
-0.07028736919164658,
0.05327870324254036,
0.12429498136043549,
0.06688238680362701,
0.09689841419458389,
0.09008572995662689,
0.042796697467565536,
-0.002777918940410018,
0.10545126348733902,
-0.0019876842852681875,
-0.06882048398256302,
-0.0706782266497612,
-0.028190718963742256,
0.05509483441710472,
0.002563170623034239,
0.09291523694992065,
0.04970983415842056,
-0.016989566385746002,
0.011764776892960072,
0.008117974735796452,
0.04134253039956093,
0.038148779422044754,
0.052714258432388306,
-0.06470274180173874,
0.14695385098457336,
-0.016844123601913452,
-0.04831051453948021,
0.09444068372249603,
0.04483972489833832,
-0.07454696297645569,
0.0372280515730381,
-0.08449312299489975,
0.059211499989032745,
-0.0684472844004631,
-0.09206147491931915,
0.09980073571205139,
0.14561031758785248,
-0.05942271649837494,
-0.014403956942260265,
0.13729387521743774,
0.019843365997076035,
0.0763922780752182,
-0.03433232381939888,
-0.023099521175026894,
0.05830058082938194,
0.04325844720005989,
-0.06766670942306519,
0.05984272435307503,
-0.032191913574934006,
0.022098358720541,
-0.009874125011265278,
0.03828967735171318,
0.16922801733016968,
0.1201380267739296,
0.1556020975112915,
0.1163647323846817,
-0.0376322865486145,
-0.08111242949962616,
0.08358307927846909,
-0.08374405652284622,
-0.04680848494172096,
0.018746044486761093,
-0.07001578062772751,
-0.020701738074421883,
-0.07286866009235382,
0.17909254133701324,
0.07368359714746475,
-0.03837859630584717,
0.019514402374625206,
-0.09701691567897797,
0.08750707656145096,
0.06802266091108322,
0.003392977872863412,
-0.0341264046728611,
-0.0012225445825606585,
0.06868363916873932,
-0.11513227969408035,
-0.08957915008068085,
-0.00946048367768526,
-0.05729488283395767,
-0.014440800063312054,
0.0016312910011038184,
0.06082217022776604,
-0.05014146491885185,
-0.008586724288761616,
0.16613489389419556,
0.06734678894281387,
-0.07494162768125534,
-0.09114234894514084,
0.08904405683279037,
-0.0051764268428087234,
-0.1364966332912445,
0.0007537297788076103,
0.11945561319589615,
0.008188682608306408,
-0.0789509266614914,
-0.025649823248386383,
-0.05576404184103012,
0.07309830188751221,
-0.012988674454391003,
-0.08245502412319183,
-0.022313201799988747,
-0.08343406766653061,
0.11209390312433243,
0.08044220507144928,
-0.005780727136880159,
0.08125849068164825,
0.0016068984987214208,
0.1623138040304184,
-0.004578734282404184,
0.008534766733646393,
-0.10236553102731705,
-0.08268152922391891,
0.051214274019002914,
0.0030247895047068596,
-0.01921982504427433,
0.18760916590690613,
0.002028085757046938,
0.06918081641197205,
0.11830708384513855,
-0.17984500527381897,
0.12943832576274872,
0.06455481797456741,
-0.02720973826944828,
0.11560440808534622,
0.04064755141735077,
0.1313595473766327,
0.12413129955530167,
-0.04922004044055939,
0.03317555785179138,
-0.0743141919374466,
0.04729650169610977,
0.20526635646820068,
0.029996909201145172,
0.0019348053028807044,
0.1422543078660965,
-0.06901820749044418,
-0.046763401478528976,
0.05126836150884628,
-0.008325686678290367,
-0.10666695982217789,
-0.06183101236820221,
-0.006673383992165327,
-0.018828807398676872,
-0.10510209947824478,
0.0029990181792527437,
0.08384691923856735,
0.09121520072221756,
0.08779559284448624,
-0.007909278385341167,
0.05819890275597572,
-0.0015024812892079353,
-0.09110603481531143,
-0.0910918191075325,
-0.10097655653953552,
0.02729308232665062,
-0.09719473868608475,
-0.041717201471328735,
-0.009637612849473953,
0.14145375788211823,
-0.02397327311336994,
0.055081915110349655,
0.16426528990268707,
-0.0564257837831974,
-0.1580078899860382,
0.03122783452272415,
-0.10341767966747284,
-0.047876227647066116,
-0.043292336165905,
-0.06253033876419067,
-0.02018296718597412,
-0.13106602430343628,
-0.006578440777957439,
-0.04786551743745804,
0.10707885026931763,
-0.052784513682127,
0.1356070190668106,
0.025987869128584862,
0.07924708724021912,
0.0011759755434468389,
0.10595978051424026,
-0.02980710379779339,
0.02701416425406933,
0.00958686787635088,
-0.09132193773984909,
0.03378916531801224,
-0.023339945822954178,
0.006630739197134972,
0.04808637499809265,
-0.00024020482669584453,
-0.0366351455450058,
0.07974063605070114,
-0.05381172522902489,
0.0749652087688446,
-0.1117096021771431,
-0.048395853489637375,
0.10342171788215637,
0.031430717557668686,
-0.00518212653696537,
-0.15547077357769012,
-0.0025128587149083614,
0.09214410930871964,
0.10113997757434845,
0.09222766011953354,
-0.047714587301015854,
0.0562666580080986,
0.01745886355638504,
-0.00792419258505106,
0.017027590423822403,
-0.10899677872657776,
-0.02854757383465767,
0.09722605347633362,
0.09444987773895264,
-0.028319712728261948,
-0.08704119920730591,
0.1280837208032608,
-0.008704252541065216,
-0.10113222151994705,
0.049939148128032684,
0.05564769729971886,
-0.1580774188041687,
-0.10095948725938797,
-0.027039073407649994,
0.055297285318374634,
-0.05466083064675331,
-0.05882038176059723,
0.016133125871419907,
0.015204575844109058,
-0.07395589351654053,
-0.10538075864315033,
-0.06459031254053116,
-0.12722349166870117,
0.03659989684820175,
-0.10297936201095581,
0.05338794365525246,
0.10355758666992188,
-0.020899906754493713,
-0.04970362037420273,
0.02693273313343525,
-0.039527855813503265,
0.03413182869553566,
-0.08361824601888657,
-0.14398060739040375,
-0.052699219435453415,
0.03163379430770874,
-0.02306806854903698,
-0.010075807571411133,
-0.08744668960571289,
0.008087409660220146,
0.1579655408859253,
-0.09021316468715668,
0.10753938555717468,
0.030933381989598274,
-0.0573546402156353,
-0.1262013167142868,
-0.04439203813672066,
0.12946347892284393,
-0.1198987066745758,
-0.21998165547847748,
-0.026210494339466095,
-0.03341624513268471,
-0.07014025747776031,
0.01485899742692709,
-0.08162807673215866,
0.06141854077577591,
0.05525869131088257,
0.00891947839409113,
-0.06235966458916664,
0.03891884908080101,
0.12460877746343613,
-0.10892454534769058,
0.05806403607130051,
0.027107784524559975,
0.013613970950245857,
-0.007953991182148457,
0.08073939383029938,
0.1138899028301239,
-0.04164150357246399,
-0.027868499979376793,
-0.08714275062084198,
-0.06571885198354721,
0.0857650637626648,
0.009503449313342571,
0.11881309002637863,
-0.05499468743801117,
-0.031201394274830818,
0.004458206705749035,
0.021100297570228577,
0.08464474231004715,
0.041270408779382706,
-0.05801264941692352,
0.09243647009134293,
0.028820453211665154,
-0.09537602961063385,
0.12684640288352966,
0.025110749527812004,
-0.07942428439855576,
0.036442987620830536,
-0.07211653888225555,
-0.1073511466383934,
0.05573450028896332,
-0.03714273124933243,
-0.038157522678375244,
0.0526648610830307,
-0.07191793620586395,
0.07789400964975357,
-0.022117381915450096,
0.039490967988967896,
0.05800049006938934,
-0.05176994949579239,
-0.05740928277373314,
-0.0447658896446228,
-0.055074144154787064,
0.04372779652476311,
-0.1008797436952591,
0.026008769869804382,
-0.015304396860301495,
-0.012614000588655472,
-0.061815615743398666,
0.02243620529770851,
-0.11369706690311432,
0.050069961696863174,
0.07126668840646744,
-0.0498657263815403,
0.08567536622285843,
0.09173345565795898,
0.12399335950613022,
0.023366762325167656,
-0.05587025731801987,
0.07283734530210495,
-0.12824681401252747,
-0.11911722272634506,
0.06290982663631439,
0.02686033770442009,
0.039417922496795654,
-0.005749103147536516,
-0.0702897161245346,
-0.024348197504878044,
-0.22383220493793488,
-0.07019006460905075,
0.08483491837978363,
-0.05615966022014618,
-0.05928128585219383,
-0.1500759869813919,
0.10368649661540985,
0.08792531490325928,
0.023788049817085266,
0.033542681485414505,
0.053256597369909286,
-0.04540780931711197,
-0.032097071409225464,
0.03442784398794174,
0.04043501988053322,
-0.0753907635807991,
0.04702748358249664,
0.010742140002548695,
0.05728583037853241,
-0.15351071953773499,
0.033494316041469574,
-0.011695614084601402,
-0.0937407910823822,
-0.08969664573669434,
-0.032701220363378525,
0.049226608127355576,
-0.00048145820619538426,
-0.10272392630577087,
-0.006537106819450855,
-0.08134075999259949,
0.07647836953401566,
-0.03367040306329727,
0.024419642984867096,
0.13690902292728424,
-0.053106293082237244,
0.013181396760046482,
-0.06518855690956116,
-0.13210228085517883,
0.07796027511358261,
0.07559075951576233,
-0.058240778744220734,
0.002219676971435547,
0.11596706509590149,
0.08180131018161774,
0.11823855340480804,
0.029274452477693558,
-0.09524998813867569,
-0.07697993516921997,
0.05041396990418434,
0.04416697099804878,
-0.03447503224015236,
0.15718257427215576,
-0.09508682787418365,
0.019911982119083405,
0.032926809042692184,
0.11985396593809128,
0.08862949907779694,
-0.12345185875892639,
0.012150973081588745,
0.09305856376886368,
-0.07219287753105164,
0.07241228967905045,
-0.10632734000682831,
-0.05125323310494423,
-0.10963626950979233,
0.07679709047079086,
0.15869496762752533,
-0.08295588940382004,
-0.09824422746896744,
-0.038365647196769714,
0.01317107118666172,
-0.011556116864085197,
-0.09345488995313644,
-0.036153584718704224,
-0.03341078758239746,
0.03504052013158798,
-0.07639116048812866,
-0.06640008091926575,
0.03804278373718262,
0.0049842046573758125,
0.056603264063596725,
-0.09676509350538254,
0.08941786736249924,
-0.0783451572060585,
-0.04280261695384979,
-0.05833776295185089,
-0.0967605710029602,
0.05890852212905884,
-0.0152733838185668,
0.09915725886821747,
-0.047228023409843445,
-0.018282974138855934,
-0.1385178565979004,
-0.0471264123916626,
-0.07692524045705795,
0.03454766795039177,
0.11294680088758469,
0.044636502861976624,
-0.057321395725011826,
0.11255905032157898,
-0.03157138079404831,
-0.05239474028348923,
0.022221406921744347,
0.061137255281209946,
-0.03833279013633728,
0.06409779191017151,
0.07146219164133072,
-0.04541916772723198,
-0.09217952936887741,
-0.07170689105987549,
0.004407159984111786,
0.042891208082437515,
-0.04628434032201767,
-0.06903309375047684,
-0.01215641014277935,
-0.061543144285678864,
-0.05051140487194061,
-0.011293456889688969,
-0.081204853951931,
-0.025121210142970085,
0.03400503844022751,
0.10833866149187088,
-0.06418822705745697,
0.057894233614206314,
0.05321592465043068,
0.061675187200307846,
-0.05742114782333374,
-0.06286018341779709,
-0.020453259348869324,
0.04536869376897812,
0.051714956760406494,
-0.06976960599422455,
0.027229711413383484,
0.009486344642937183,
-0.09082861244678497,
0.011346782557666302,
0.10071554034948349,
-0.007764726411551237,
-0.07122189551591873,
0.04974118992686272,
-0.0021148566156625748,
0.06425052881240845,
-0.04684801399707794,
0.013011949136853218,
-0.045098427683115005,
-0.08928633481264114,
0.04114897549152374,
0.07947337627410889,
-0.010736621916294098,
0.0851273462176323,
0.018353693187236786,
-0.007540049962699413,
0.06357359141111374,
-0.01922943815588951,
0.031073760241270065,
-0.12273595482110977,
0.06457868963479996,
0.08727492392063141,
-0.06501574069261551,
0.010133425705134869,
0.11563262343406677,
-0.05612935870885849,
0.023130157962441444,
0.18039505183696747,
0.07857811450958252,
-0.0807715356349945,
-0.07976692169904709,
0.06222616136074066,
-0.06697112321853638,
-0.11447467654943466,
0.07858461141586304,
-0.004071529023349285,
0.0025081548374146223,
0.1142851933836937,
0.030035559087991714,
0.020795760676264763,
0.05060507729649544,
-0.015690911561250687,
-0.11614113301038742,
-0.08893787860870361,
0.00803474709391594,
-0.08947861939668655,
0.1365169733762741,
-0.05397723987698555,
0.07704059034585953,
0.1207815408706665,
-0.04964828863739967,
-0.1146756187081337,
0.07711161673069,
0.07966658473014832,
-0.014445839449763298,
0.05441082641482353,
-0.02395583502948284,
0.0777614638209343,
0.0012535538990050554,
0.022252453491091728,
0.04445881396532059,
-0.03713195025920868,
-0.02792777307331562,
-0.05448343604803085,
-0.02431607060134411,
0.010141802951693535,
-0.026070808991789818,
0.0021682691294699907,
-0.03405851870775223,
0.07820723950862885,
0.0844636783003807,
0.04118676483631134,
0.054950810968875885,
0.0037043702322989702,
0.15105591714382172,
0.09054896980524063,
-0.0255499966442585,
0.06701850146055222,
0.1419982612133026,
-0.11609701067209244,
0.016116343438625336,
0.08944252878427505,
-0.02679690159857273,
0.10283954441547394,
0.03969358652830124,
-0.018400680273771286,
0.003761440049856901,
0.11432354897260666,
0.022808291018009186,
-0.08082959055900574,
0.11588416248559952,
0.0969327911734581,
0.07808917760848999,
0.060512006282806396,
0.05191635340452194,
-0.07428860664367676,
-0.022105788812041283,
0.0944567620754242,
0.11401505768299103,
-0.02863936498761177,
-0.07065124064683914,
-0.013737030327320099,
0.013590622693300247,
0.036596883088350296,
0.073343425989151,
0.13833360373973846,
0.09188500046730042,
0.06475929170846939,
-0.023760100826621056,
-0.029921000823378563,
-0.10382413119077682,
0.11438290029764175,
0.06965234875679016,
0.029561927542090416,
0.09873288124799728,
0.06186803802847862,
0.06819969415664673,
0.041098933666944504,
0.10023920238018036,
-0.015698807314038277,
-0.004552783444523811,
0.0581023134291172,
0.021893825381994247,
-0.05321776121854782,
0.11184968054294586,
0.058097731322050095,
0.03433834761381149,
-0.02162022329866886,
0.12274642288684845,
0.1232420802116394,
-0.06262210011482239,
-0.03525567427277565,
0.025410888716578484,
-0.012909956276416779,
0.022801009938120842,
0.07758752256631851,
-0.0763479620218277,
0.07806780189275742,
-0.05547080934047699,
-0.08028558641672134,
0.13622376322746277,
0.0402691476047039,
0.047883618623018265,
-0.005213495809584856,
-0.06938396394252777,
0.025557061657309532,
0.09967959672212601,
-0.09384524822235107,
0.02747873216867447,
0.07878076285123825,
0.00485673313960433,
-0.05136774852871895,
0.08753779530525208,
-0.05788205936551094,
0.09476031363010406,
-0.08607980608940125,
-0.05666787177324295,
0.0276273712515831,
0.04745456576347351,
0.1056065484881401,
-0.09966111183166504,
0.07692043483257294,
-0.07000058144330978,
-0.049841638654470444,
-0.0382036529481411,
-0.0688864067196846,
0.04797498881816864,
0.12152630090713501,
0.01291267853230238,
-0.14349862933158875,
0.03342009335756302,
-0.13348086178302765,
-0.11768849939107895,
-0.0409412644803524,
0.018807873129844666,
0.002062470419332385,
0.0309861171990633,
0.03884468972682953,
-0.00552013935521245,
0.0879453644156456,
-0.10594800114631653,
0.10992659628391266,
0.08170690387487411,
0.059703756123781204,
-0.13858509063720703,
-0.04493294283747673,
-0.10594616830348969,
-0.04839537665247917,
0.010358587838709354,
-0.11133294552564621,
-0.04034222289919853,
-0.013828329741954803,
0.036687079817056656,
0.1680629551410675,
0.05240138620138168,
0.11284186691045761,
-0.15249739587306976,
0.109080471098423,
-0.025089487433433533,
0.08279600739479065,
-0.10171245038509369,
-0.07812772691249847,
0.11342695355415344,
-0.14568957686424255,
-0.10178447514772415,
-0.05479075387120247,
0.06470771133899689,
0.0962236225605011,
-0.0013436152366921306,
-0.07297327369451523,
-0.056880466639995575,
-0.029017673805356026,
0.030842771753668785,
-0.0028493222780525684,
0.09370321780443192,
0.11092972755432129,
0.02666552923619747,
0.07254640758037567,
-0.11319253593683243,
0.010731933638453484,
0.028292106464505196,
0.0324840247631073,
-0.03864118829369545,
0.08440563082695007,
0.011182421818375587,
-0.04100939631462097,
0.04777836054563522,
0.022580938413739204,
0.0814453512430191,
0.11625164747238159,
0.03440798446536064,
-0.047504570335149765,
-0.07895317673683167,
0.061522386968135834,
-0.05755743011832237,
-0.039719417691230774,
0.051556073129177094,
-0.0101914769038558,
0.11031679064035416,
0.05306310951709747,
0.023576971143484116,
-0.0971052348613739,
-0.04582824930548668,
-0.020130695775151253,
0.060361623764038086,
-0.15111227333545685,
0.014273632317781448,
0.07364849746227264,
0.09260226786136627,
-0.1232304498553276,
0.025114716961979866,
-0.036664437502622604,
0.035552822053432465,
-0.019666006788611412,
0.044749125838279724,
-0.12341352552175522,
-0.007679556962102652,
0.020623989403247833,
-0.07830893993377686,
0.07732956856489182,
0.02188851870596409,
0.03508942946791649,
-0.06153545528650284,
-0.049257732927799225,
0.020301245152950287,
-0.12931232154369354,
0.026635196059942245,
-0.08546441048383713,
-0.05521627888083458,
0.014132394455373287,
-0.09069326519966125,
0.039401985704898834,
-0.010338278487324715,
-0.13111428916454315,
-0.07502923905849457,
-0.0141204334795475,
-0.052650295197963715,
-0.0004425164661370218,
-0.10557986050844193,
-0.12531577050685883,
-0.08069340139627457,
-0.16171467304229736,
-0.016183873638510704,
-0.15686742961406708,
-0.09280548989772797,
-0.11129233986139297,
-0.03236645087599754,
-0.10217287391424179,
0.006968948990106583,
0.11117646098136902,
0.035370491445064545,
-0.03593951836228371,
-0.045359056442976,
-0.11511312425136566,
0.03402562439441681,
0.0009139892063103616,
-0.10006362199783325,
-0.03144122660160065,
-0.08970160782337189,
-0.04346068575978279,
-0.04646838456392288,
-0.01683143712580204,
-0.10391903668642044,
-0.12920407950878143,
-0.08411119133234024,
0.051216840744018555,
0.09610296785831451,
0.09769563376903534,
-0.004427400883287191,
-0.02210064046084881,
0.1089162826538086,
0.05155958980321884,
-0.012428153306245804,
-0.06778475642204285,
-0.01255767047405243,
-0.06333182007074356,
0.001747974194586277,
-0.0844162106513977,
-0.06616281718015671,
0.10860801488161087,
0.06584475189447403,
-0.1423315554857254,
-0.054552722722291946,
0.09414170682430267,
-0.0481102354824543,
-0.03756767138838768,
0.0918530747294426,
0.019805841147899628,
-0.1795717477798462,
-0.00772090395912528,
0.19961561262607574,
-0.08045255392789841,
-0.12896043062210083,
-0.17413818836212158,
-0.011692284606397152,
0.06467403471469879,
-0.07945757359266281,
-0.06622067093849182,
0.023003721609711647,
-0.03610963001847267,
-0.05580844357609749,
0.0032553384080529213,
-0.07065336406230927,
0.1074322909116745,
-0.09738805145025253,
-0.04524601623415947,
0.08827738463878632,
-0.017138859257102013,
0.021797021850943565,
-0.06414372473955154,
0.12483937293291092,
-0.1354416012763977,
-0.14435049891471863,
0.019802672788500786,
-0.043426964432001114,
-0.15757456421852112,
-0.023969784379005432,
-0.03187556564807892,
-0.022833487018942833,
0.0840454176068306,
-0.1323651373386383,
-0.0189643744379282,
-0.021523989737033844,
0.014448660425841808,
0.08366099745035172,
0.08250820636749268,
0.13588258624076843,
-0.11960329115390778,
-0.08467987924814224,
0.11315888166427612,
0.002124439924955368,
0.029924333095550537,
0.07882881909608841,
-0.1045404002070427,
-0.09226755052804947,
0.04767284542322159,
0.001541045494377613,
-0.11460553109645844,
0.13874614238739014,
0.05780051276087761,
0.18257257342338562,
-0.035211700946092606,
-0.1141197457909584,
-0.00021025395835749805,
-0.08281344175338745,
0.08751682192087173,
-0.07603233307600021,
0.04789850860834122,
0.06779135763645172,
0.05755920335650444,
-0.0917043536901474,
-0.04945441707968712,
0.00441167876124382,
-0.13219748437404633,
0.01213952898979187,
-0.12508524954319,
-0.04360594227910042,
0.00298899132758379,
0.06644755601882935,
0.032731492072343826,
0.040320295840501785,
-0.06587351858615875,
-0.0765540823340416,
0.12388169765472412,
-0.027781477198004723,
0.1625956892967224,
0.028504451736807823,
0.02083745039999485,
-0.023554448038339615,
0.04678990691900253,
0.09017287939786911,
-0.0977652445435524,
-0.011652947403490543,
0.11017908155918121,
-0.10909251123666763,
-0.045583248138427734,
-0.055215463042259216,
-0.04849435016512871,
0.08441534638404846,
-0.059310875833034515,
-0.06456594914197922,
0.03661016747355461,
0.0773862972855568,
-0.0002945960150100291,
0.13294082880020142,
0.1179298460483551,
0.03417425602674484,
0.08847761154174805,
0.029464686289429665,
0.10047008097171783,
0.14365354180335999,
0.016861340031027794,
-0.0318959504365921,
-0.07828433811664581,
0.010890091769397259,
0.005839762277901173,
-0.10106885433197021,
0.20541897416114807,
0.056128066033124924,
0.04854255169630051,
0.1302669644355774,
0.03663434833288193,
-0.05974923074245453,
0.11668553948402405,
-0.11346924304962158,
-0.09622882306575775,
-0.13712984323501587,
-0.11574079841375351,
-0.07838232815265656,
-0.09469474852085114,
0.06611737608909607,
-0.08213888853788376,
0.012501207180321217,
-0.05466500297188759,
0.051253944635391235,
-0.018657054752111435,
0.03300413861870766,
-0.037964653223752975,
-0.06188088282942772,
0.03872707486152649,
0.10320281237363815,
-0.10787222534418106,
-0.1388370543718338,
-0.038493506610393524,
0.02161513827741146,
0.041348088532686234,
0.03563318029046059,
-0.10641016811132431,
-0.09026739001274109,
-0.05764608457684517,
-0.05039302259683609,
0.04688596352934837,
0.0545976385474205,
0.05816445127129555,
0.08624320477247238,
0.062464553862810135,
0.07966818660497665,
-0.06584513932466507,
-0.1438879817724228,
0.06354118883609772,
0.06718418002128601,
0.027913589030504227,
0.023371070623397827,
0.04512124881148338,
-0.1240905299782753,
0.03715573623776436,
-0.08837102353572845,
-0.1253294050693512,
0.014327489770948887,
-0.012432144023478031,
0.07727234810590744,
-0.09689103811979294,
-0.12536956369876862,
-0.070909783244133,
0.06059562787413597,
0.07600922137498856,
-0.014255632646381855,
0.03771253675222397,
0.009394250810146332,
-0.05559312924742699,
-0.03346771001815796,
-0.01496253814548254,
0.05995374172925949,
-0.005685029551386833,
0.05067445710301399,
0.03907547891139984,
-0.04448195546865463,
-0.035244882106781006,
0.09294918179512024,
0.0138468686491251,
-0.08753655850887299,
0.1096268743276596,
0.10226443409919739,
0.07451191544532776,
-0.07308842241764069,
-0.029297776520252228,
-0.10340988636016846,
-0.013909529894590378,
-0.052547961473464966,
-0.05937640368938446,
-0.11435569822788239,
-0.01940363459289074,
0.09045172482728958,
0.06447473168373108,
-0.06070619449019432,
-0.07277847081422806,
-0.17595264315605164,
0.10100804269313812,
0.03622623160481453,
-0.12322618067264557,
0.01717076450586319,
-0.07403290271759033,
0.08369699865579605,
0.01585865207016468,
-0.06208756938576698,
-0.09574417024850845,
-0.09004422277212143,
0.010800658725202084,
-0.016348766162991524,
-0.08888617157936096,
0.08454188704490662,
0.03729715943336487,
0.02641204744577408,
-0.08420491218566895,
0.0028949917759746313,
0.024114491418004036,
-0.10932934284210205,
0.03815370798110962,
0.0430169403553009,
0.0562400184571743,
0.051338907331228256,
0.05133073404431343,
-0.05319714546203613,
-0.04153979942202568,
0.0017235776176676154,
-0.04816869646310806,
0.12555982172489166,
0.0553024522960186,
-0.14251264929771423,
-0.03495270013809204,
0.08850137889385223,
-0.0969579741358757,
-0.06636692583560944,
0.022208690643310547,
-0.0350404754281044,
-0.09414882212877274,
0.03552243858575821,
-0.04959487542510033,
-0.06858216971158981,
-0.07083380222320557,
0.04708070680499077,
-0.04159541428089142,
-0.046471863985061646,
-0.11607042700052261,
0.036645010113716125,
-0.0992329940199852,
-0.08039780706167221,
0.04487849399447441,
-0.07524281740188599,
-0.007643063552677631,
0.034804269671440125,
-0.0025687094312161207,
0.061557672917842865,
-0.0544808991253376,
0.02236969955265522,
-0.08153750002384186,
-0.06482160836458206,
-0.0012253622990101576,
0.0022676039952784777,
0.05424541234970093,
0.04103163257241249,
0.008974374271929264,
0.013256663456559181,
-0.1332760900259018,
0.06402996927499771,
0.030940765514969826,
-0.07511384040117264,
0.004491184838116169,
0.0008053241181187332,
0.004866499919444323,
0.0013973532477393746,
0.08923269063234329,
0.1360124796628952,
-0.10476794838905334,
-0.03577254340052605,
0.022091282531619072,
-0.15178950130939484,
0.021196333691477776,
-0.11487743258476257,
-0.0022144869435578585,
-0.07565175741910934,
0.09113406389951706,
-0.0439678356051445,
0.021662339568138123,
-0.024749349802732468,
0.0531596876680851,
0.012622264213860035,
-0.014894536696374416,
-0.023334907367825508,
0.058980487287044525,
-0.08328749239444733,
-0.029493218287825584,
0.004014677833765745,
0.003746672533452511,
0.01572321727871895,
0.07532289624214172,
-0.0711841732263565,
-0.016566390171647072,
-0.11527601629495621,
0.11573749780654907,
-0.025744087994098663,
-0.13733886182308197,
-0.08284639567136765,
-0.016043690964579582,
-0.02998306415975094,
-0.028465760871767998,
0.038125425577163696,
0.10099316388368607,
-0.0412134975194931,
-0.10102316737174988,
0.08128244429826736,
0.046729542315006256,
-0.03836647793650627,
-0.08135884255170822,
-0.05233459174633026,
0.035981472581624985,
-0.09365451335906982,
-0.1052059456706047,
0.07189203053712845,
0.03231837600469589,
-0.016379939392209053,
-0.04798443242907524,
0.00972778256982565,
0.12572292983531952,
-0.13426464796066284,
-0.09139518439769745,
0.12499570101499557,
0.004273770377039909,
-0.0758533701300621,
0.09389355033636093,
-0.038106389343738556,
0.20785069465637207,
-0.068501777946949,
-0.13281631469726562,
-0.004025565460324287,
0.19688642024993896,
0.07105093449354172,
0.01211551669985056,
0.002483486197888851,
0.03961270675063133,
-0.05666399002075195,
0.04577970877289772,
0.1246478483080864,
-0.03619196265935898,
-0.014334161765873432,
-0.029757313430309296,
-0.10982562601566315,
0.2041415572166443,
0.08151252567768097,
-0.028064191341400146,
-0.017197154462337494,
-0.09426633268594742,
0.017185315489768982,
-0.0356065072119236,
0.11675544083118439,
0.0059758760035037994,
-0.25268757343292236,
0.0949573740363121,
-0.06955430656671524,
-0.019344931468367577,
0.10670597851276398,
0.07163657993078232,
-0.04254285991191864,
-0.02464885078370571,
0.10724199563264847,
-0.04368190839886665,
0.07926791906356812,
-0.12572349607944489,
0.16982410848140717,
-0.0057883490808308125,
0.11418803036212921,
-0.08532272279262543,
0.03905556723475456,
-0.06049922853708267,
0.03956683352589607,
0.00915756169706583,
0.06363572180271149,
-0.022667519748210907,
-0.055163707584142685,
0.006664536893367767,
0.029653294011950493,
0.12454693019390106,
0.034275833517313004,
-0.05852186679840088,
0.05155221372842789,
-0.05297859013080597,
0.05335116386413574,
-0.03085073083639145,
0.13892032206058502,
0.12577708065509796,
0.027474654838442802,
0.0864030048251152,
-0.02016630582511425,
0.11864636838436127,
-0.05417589098215103,
0.05756823346018791,
0.12973451614379883,
-0.01369869988411665,
-0.08180029690265656,
0.07720446586608887,
0.03895048424601555,
-0.10458347946405411,
0.006957389414310455,
-0.1393558830022812,
0.06800907105207443,
-0.011769908480346203,
-0.023771626874804497,
-0.05356205627322197,
0.12779848277568817,
0.12084554135799408,
0.03569280356168747,
0.04729621112346649,
0.16563917696475983,
-0.012750559486448765,
-0.13414183259010315,
0.2055680751800537,
0.04964093118906021,
0.023479871451854706,
-0.025003138929605484,
-0.08310895413160324,
0.005249002017080784,
0.06979735195636749,
0.015491867437958717,
0.10602660477161407,
0.10069703310728073,
-0.005951414350420237,
0.02976246178150177,
0.12276418507099152,
0.0754159465432167,
-0.005314384587109089,
-0.09713245183229446,
-0.0005395103362388909,
-0.029104119166731834,
-0.07523120194673538,
0.0347408726811409,
-0.0651857927441597,
-0.07154574990272522,
0.10901293903589249,
-0.024044210091233253,
-0.13831648230552673,
-0.04934187978506088,
-0.040396034717559814,
-0.08676260709762573,
-0.11529817432165146,
-0.0946071669459343,
0.02239602617919445,
0.04550253599882126,
-0.07110722362995148,
-0.07278955727815628,
-0.07123181223869324,
-0.030947674065828323,
0.07957657426595688,
0.049845848232507706,
-0.09765878319740295,
-0.05086314305663109,
-0.12626516819000244,
-0.15626300871372223,
-0.07668659090995789,
-0.08934440463781357,
-0.05856865271925926,
0.07665205746889114,
0.046765100210905075,
0.014618558809161186,
0.052640579640865326,
-0.1343131810426712,
0.041264425963163376,
-0.07644710689783096,
0.07099597156047821,
-0.03110700659453869,
-0.025798898190259933,
-0.11151129007339478,
0.014034612104296684,
-0.03392624855041504,
-0.09212672710418701,
-0.054760586470365524,
0.02474689483642578,
0.06732647866010666,
0.05566716194152832,
-0.03511066362261772,
0.07355274260044098,
0.0029951767064630985,
-0.05108018219470978,
-0.08656573295593262,
0.03168496489524841,
-0.0030853264033794403,
0.17869944870471954,
-0.09978282451629639,
-0.08346537500619888,
0.09858419001102448,
0.19681787490844727,
-0.031697120517492294,
-0.01447913609445095,
0.14666923880577087,
-0.16693058609962463,
-0.13134756684303284,
0.01783846504986286,
0.06246282160282135,
-0.018543602898716927,
0.0141590666025877,
0.07705023139715195,
-0.012588165700435638,
0.13469766080379486,
-0.055037081241607666,
-0.044919781386852264,
0.19445127248764038,
0.0341169647872448,
0.07573219388723373,
0.11119150370359421,
0.06295882165431976,
0.11779654026031494,
-0.10741257667541504,
0.13598230481147766,
0.05928463116288185,
-0.08283938467502594,
0.0027188218664377928,
-0.0018510608933866024,
0.1522146761417389,
-0.02341456711292267,
0.035678375512361526,
0.12036959826946259,
0.09920981526374817,
0.05112791061401367,
0.021436050534248352,
0.07912951707839966,
0.08047334849834442,
-0.007999822497367859,
-0.030451569706201553,
-0.040688686072826385,
0.02786557376384735,
0.033382292836904526,
0.06696253269910812,
-0.06459328532218933,
0.00040818852721713483,
-0.08712785691022873,
-0.028959088027477264,
0.06228595972061157,
-0.04039325565099716,
-0.0020824009552598,
0.08130855858325958,
0.13488106429576874,
-0.0018768373411148787,
-0.04016536474227905,
-0.040283702313899994,
-0.03792094066739082,
-0.14282481372356415,
-0.08309325575828552,
0.0018496530828997493,
0.01041093934327364,
-0.05728694051504135,
-0.03973361849784851,
0.05187227204442024,
0.04964333400130272,
-0.0083474637940526,
-0.05739959701895714,
-0.02156907320022583,
-0.041108377277851105,
-0.09377916157245636,
-0.13511769473552704,
0.01544819213449955,
-0.07422317564487457,
-0.11293509602546692,
-0.08675740659236908,
0.08201784640550613,
-0.08929580450057983,
0.0014187460765242577,
0.045733414590358734,
0.0927470326423645,
0.03451802209019661,
0.0008699185564182699,
0.01895138807594776,
-0.16639722883701324,
-0.202556774020195,
0.1424555778503418,
0.1475667655467987,
0.07080784440040588,
-0.00034579687053337693,
-0.1388881653547287,
0.05683010071516037,
-0.035239897668361664,
-0.1135181337594986,
0.14655405282974243,
0.030413882806897163,
0.05686407536268234,
-0.015334131196141243,
0.003552292240783572,
0.10962682217359543,
-0.02835082821547985,
-0.1736634522676468,
-0.07658381760120392,
0.061546146869659424,
0.04295382648706436,
0.008726783096790314,
-0.048781078308820724,
0.032075051218271255,
0.0001627985475352034,
0.118940070271492,
-0.04130922630429268,
-0.03701968491077423,
0.018259216099977493,
-0.15193186700344086,
-0.03310373052954674,
-0.10364236682653427,
0.15391400456428528,
-0.005000706762075424,
0.0027095582336187363,
-0.02671397477388382,
0.1285758912563324,
0.0982947051525116,
-0.024486098438501358,
0.07553965598344803,
-0.048045624047517776,
0.05439935252070427,
-0.10855008661746979,
0.05359165370464325,
-0.04424440860748291,
0.013964802026748657,
0.14844951033592224,
0.03959869593381882,
0.14855632185935974,
0.07172662764787674,
0.1274223029613495,
0.06009442359209061,
-0.09707912802696228,
0.14380504190921783,
-0.013764116913080215,
-0.0410795584321022,
-0.14085040986537933,
0.0022586851846426725,
0.005672065541148186,
0.13012227416038513,
0.02631690911948681,
0.07617046684026718,
0.07924169301986694,
0.07051017135381699,
-0.10133413970470428,
-0.027161404490470886,
-0.04746425524353981,
0.03758277744054794,
0.012962793000042439,
0.046637315303087234,
-0.12873537838459015,
0.029888827353715897,
-0.08980368077754974,
-0.057724326848983765,
0.07539509981870651,
-0.01055995561182499,
-0.015263445675373077,
0.010357641614973545,
-0.0766969844698906,
-0.13013622164726257,
-0.02959507703781128,
-0.11017832905054092,
0.06978373229503632,
0.12455357611179352,
0.06249716505408287,
0.02043849043548107,
-0.03318687900900841,
0.05659858137369156,
0.08229799568653107,
-0.04724224656820297,
0.02174408920109272,
0.07605138421058655,
0.03324699029326439,
0.034515589475631714,
0.015442651696503162,
-0.1807207465171814,
-0.0017118323594331741,
-0.02432813122868538,
-0.14461302757263184,
-0.17189688980579376,
-0.03026566095650196,
0.08765524625778198,
-0.0759601891040802,
0.12208434194326401,
0.036151494830846786,
0.08540775626897812,
-0.00775631470605731,
0.03412000834941864,
0.052051275968551636,
0.03938407450914383,
0.08770883828401566,
0.10644878447055817,
-0.003184902248904109,
-0.09505829215049744,
-0.045313235372304916,
-0.10185067355632782,
0.0019220138201490045,
-0.04855676367878914,
0.08132351189851761,
0.10686443746089935,
-0.08030068874359131,
0.0462251640856266,
-0.0471356101334095,
0.06863535940647125,
-0.09254267811775208,
0.001002827426418662,
0.046530503779649734,
0.062319379299879074,
0.0603482611477375,
-0.12379630655050278,
-0.03380962088704109,
-0.012040240690112114,
-0.019031047821044922,
-0.05669527128338814,
-0.0750725269317627,
-0.011303075589239597,
-0.011393836699426174,
-0.1474858969449997,
0.14177241921424866,
-0.07862251251935959,
0.044961828738451004,
0.008472224697470665,
-0.016845600679516792,
0.029972044751048088,
0.015318780206143856,
-0.052105050534009933,
-0.02686230279505253,
0.069618359208107,
-0.13540226221084595,
0.026643764227628708,
-0.08094556629657745,
-0.01716785319149494,
0.057043690234422684,
0.0348876528441906,
-0.02615955099463463,
0.050020959228277206,
-0.058984991163015366,
0.04384380951523781,
0.02815917879343033,
0.018761439248919487,
0.014590447768568993,
-0.09931773692369461,
0.0633431226015091,
0.018337365239858627,
0.02864142507314682,
-0.09992045164108276,
0.03945937007665634,
-0.07378100603818893,
0.09345677495002747,
0.07212653756141663,
-0.1002415120601654,
0.054483652114868164,
0.028978845104575157,
-0.028470473363995552,
-0.049058057367801666,
-0.08799149841070175,
-0.020219137892127037,
0.11453506350517273,
0.10086710005998611,
-0.046242039650678635,
-0.03293011710047722,
-0.039299651980400085,
-0.03252459317445755,
0.09531602263450623,
0.057107288390398026,
0.1116439625620842,
0.11557690054178238,
0.14053988456726074,
0.03274602070450783,
0.17284834384918213,
0.07516613602638245,
-0.06015004962682724,
0.008891729637980461,
-0.007710298988968134,
0.015609173104166985,
-0.02265048213303089,
-0.07997410744428635,
0.07874162495136261,
0.061318591237068176,
-0.018160898238420486,
-0.03979884833097458,
0.05987926572561264,
-0.017089588567614555,
0.026407746598124504,
-0.03478015214204788,
0.08001868426799774,
-0.18399620056152344,
-0.07918655127286911,
-0.1599583476781845,
-0.11331307142972946,
0.06381119042634964,
-0.08832580596208572,
0.053627822548151016,
-0.0599515326321125,
-0.027534110471606255,
-0.01049286313354969,
0.02323097363114357,
-0.0327235646545887,
0.01809939742088318,
-0.02954876236617565,
-0.09774821996688843,
0.1480693221092224,
0.023428771644830704,
-0.0958741083741188,
0.08137733489274979,
-0.060433048754930496,
0.021728815510869026,
0.015425884164869785,
0.07096901535987854,
-0.006100955884903669,
-0.24516300857067108,
-0.10249010473489761,
-0.03023700788617134,
-0.02700630947947502,
0.015110443346202374,
-0.032484881579875946,
-0.13535521924495697,
-0.09596040844917297,
0.008015232160687447,
0.006951019633561373,
0.1410009115934372,
0.06214284896850586,
0.00671593751758337,
-0.09372291713953018,
-0.02367982268333435,
-0.02982967346906662,
-0.06570620089769363,
0.050247672945261,
0.04204289987683296,
-0.07564163953065872,
-0.09893039613962173,
-0.057605642825365067,
-0.026032304391264915,
0.028685100376605988,
-0.08358948677778244,
0.10033324360847473,
0.009019555523991585,
0.0464322529733181,
-0.10667359083890915,
0.025507569313049316,
-0.07926920801401138,
-0.11942018568515778,
0.0016761041479185224,
0.014540995471179485,
-0.03456632047891617,
0.15916529297828674,
-0.04023271054029465,
0.003100151661783457,
0.02143988385796547,
-0.11766374111175537,
-0.07798031717538834,
-0.08675166219472885,
0.0648411363363266,
-0.07209161669015884,
-0.023988578468561172,
-0.05565198138356209,
-0.0748041495680809,
-0.0847683921456337,
-0.017077036201953888,
-0.0572180338203907,
0.023081980645656586,
-0.05689284950494766,
-0.028409816324710846,
-0.052608683705329895,
0.08889180421829224,
-0.016654644161462784,
-0.047376226633787155,
0.038051873445510864,
-0.07671068608760834,
-0.11685477197170258,
-0.1541546732187271,
-0.05202164128422737,
0.022248385474085808,
-0.09307663142681122,
0.05907436087727547,
0.05573665350675583,
0.03519846126437187,
-0.12825818359851837,
0.01661704294383526,
0.056335072964429855,
-0.021199725568294525,
-0.07478837668895721,
0.019209837540984154,
-0.012880557216703892,
-0.13010846078395844,
-0.034702643752098083,
-0.12511758506298065,
-0.09257786720991135,
-0.03899764642119408,
-0.13783250749111176,
-0.18141673505306244,
-0.04957409203052521,
0.10702772438526154,
-0.0036125839687883854,
-0.09327678382396698,
0.02455916441977024,
-0.06826114654541016,
0.03718336671590805,
0.09742948412895203,
0.03387779742479324,
-0.08134569227695465,
-0.08372650295495987,
0.036944832652807236,
-0.06750518083572388,
-0.10811671614646912,
-0.09522724896669388,
-0.09410202503204346,
-0.030104292556643486,
0.026926374062895775,
0.01808200404047966,
0.015397785231471062,
0.11214371770620346,
-0.030514633283019066,
0.01843271404504776,
-0.014616215601563454,
0.021998682990670204,
-0.1448565125465393,
0.02380243130028248,
0.02648034505546093,
-0.07619254291057587,
0.033881381154060364,
0.06081872433423996,
0.04178584739565849,
-0.045094799250364304,
-0.035063739866018295,
0.1018277257680893,
0.0026860381476581097,
0.05185437574982643,
0.05527392029762268,
0.026296131312847137,
-0.03947320207953453,
0.026165179908275604,
0.03506099060177803,
-0.05068368464708328,
-0.0591142512857914,
-0.17118367552757263,
-0.01412931364029646,
0.0861312597990036,
0.1001136377453804,
0.15443705022335052,
0.089663065969944,
0.06580555438995361,
-0.03648901358246803,
-0.12628911435604095,
0.14518815279006958,
-0.11063950508832932,
-0.02886163257062435,
0.03702717274427414,
-0.03534962236881256,
-0.010899395681917667,
-0.15203116834163666,
0.05920816957950592,
0.12308640033006668,
0.06170789152383804,
-0.03494790568947792,
0.12695512175559998,
0.0019433245761319995,
0.0745854377746582,
-0.08939782530069351,
0.08573702722787857,
0.019270269200205803,
-0.0036323056556284428,
0.03242405131459236,
0.05765324458479881,
-0.02189433015882969,
0.05518699809908867,
0.034756049513816833,
-0.07535846531391144,
0.14284004271030426,
-0.037649232894182205,
-0.0431053452193737,
0.041117824614048004,
0.07489323616027832,
-0.0006206802208907902,
0.08004053682088852,
-0.021860284730792046,
-0.07510554790496826,
-0.014770793728530407,
0.13148905336856842,
0.03210703283548355,
-0.03371107205748558,
-0.157448410987854,
-0.06423131376504898,
-0.10499219596385956,
0.011948438361287117,
0.054808422923088074,
-0.09663257747888565,
0.11709266901016235,
0.03375990688800812,
-0.07984071224927902,
-0.016545187681913376,
-0.03454185649752617,
0.05106377229094505,
-0.056145668029785156,
-0.09640145301818848,
0.15316924452781677,
-0.07593084871768951,
0.015058904886245728,
0.054132577031850815,
0.02548208087682724,
-0.14051292836666107,
0.11996077746152878,
0.049859870225191116,
0.07527817785739899,
-0.10438917577266693,
-0.0307261161506176,
0.056357353925704956,
0.11617758870124817,
0.00024810817558318377,
0.03226620331406593,
0.0314507782459259,
0.022260544821619987,
-0.032749224454164505,
0.0032913105096668005,
0.12088970839977264,
-0.08611312508583069,
-0.03350544720888138,
-0.035032548010349274,
0.049644868820905685,
0.12127488106489182,
-0.06895345449447632,
0.036296624690294266,
-0.09350021183490753,
-0.11604326218366623,
-0.07139132171869278,
-0.005767401773482561,
-0.10847698897123337,
-0.0785161480307579,
0.0044393111020326614,
0.07386765629053116,
-0.006074430886656046,
0.029911454766988754,
-0.02002953737974167,
0.021373238414525986,
0.15246601402759552,
-0.027671830728650093,
-0.03552795201539993,
0.12702855467796326,
-0.10814634710550308,
-0.037765149027109146,
0.01922580413520336,
-0.07988905161619186,
-0.004582130815833807,
0.06277470290660858,
0.04913231357932091,
-0.01529138907790184,
-0.04277432709932327,
0.0033775807823985815,
0.08343873918056488,
-0.029569309204816818,
-0.052161429077386856,
-0.024273470044136047,
-0.05255214497447014,
0.012689155526459217,
0.0579548105597496,
0.1852978765964508,
0.045937586575746536,
0.005617103539407253,
-0.07580243051052094,
-0.10343891382217407,
-0.05729508027434349,
-0.058111824095249176,
0.0957002341747284,
0.009528993628919125,
-0.07673709094524384,
-0.05941048637032509,
0.088506318628788,
0.02531692571938038,
-0.06768733263015747,
0.020581208169460297,
0.18348197638988495,
0.07986360043287277,
-0.11308737844228745,
0.17836660146713257,
-0.049580637365579605,
-0.04091702774167061,
-0.0750611275434494,
-0.05133133381605148,
0.09228003025054932,
0.05835413932800293,
-0.12443822622299194,
-0.06909576803445816,
0.03175694867968559,
-0.07106778025627136,
0.06070302054286003,
0.031751539558172226,
-0.016194546595215797,
0.07149104028940201,
0.02835705690085888,
-0.11054850369691849,
0.09316030144691467,
0.11776375770568848,
0.07003125548362732,
-0.005652500316500664,
0.058678410947322845,
-0.057698171585798264,
-0.1075063943862915,
-0.08492590487003326,
-0.04616860672831535,
0.03916051983833313,
-0.08143182098865509,
0.01968061923980713,
0.013963883742690086,
0.08152899891138077,
0.04753722622990608,
-0.01994091086089611,
-0.07006779313087463,
0.013209247030317783,
0.053918950259685516,
0.023087531328201294,
0.03427715227007866,
0.1903328150510788,
0.05293777957558632,
-0.09196685254573822,
0.08286496251821518,
0.05815853551030159,
-0.012297875247895718,
-0.0905466303229332,
0.13379278779029846,
0.14062194526195526,
-0.0319887176156044,
-0.02514547109603882,
0.045783959329128265,
0.012336364947259426,
-0.018074849620461464,
-0.03402164950966835,
0.07823045551776886,
-0.014379698783159256,
0.05934888869524002,
-0.028187721967697144,
0.041557375341653824,
-0.0937231183052063,
0.013506021350622177,
-0.042621321976184845,
0.06448641419410706,
-0.02029324322938919,
-0.07045246660709381,
0.027223501354455948,
0.042631421238183975,
-0.09046626091003418,
0.036243610084056854,
-0.11266119033098221,
-0.030989380553364754,
0.16749612987041473,
0.10688386857509613,
-0.13143838942050934,
0.06134740263223648,
-0.03686421737074852,
0.09204572439193726,
-0.03129557520151138,
-0.042516402900218964,
-0.030953222885727882,
0.024994798004627228,
0.036375947296619415,
0.0031948047690093517,
-0.06660891324281693,
-0.02543509379029274,
-0.02933388017117977,
0.08813242614269257,
0.0006907397764734924,
0.046865832060575485,
0.05940202996134758,
0.03450480103492737,
-0.10497281700372696,
-0.13688792288303375,
0.008166883140802383,
-0.05519454553723335,
0.09716084599494934,
0.009600331075489521,
-0.03421706706285477,
0.03358227014541626,
-0.021456466987729073,
0.027107806876301765,
0.10217909514904022,
-0.10127190500497818,
0.010907384566962719,
-0.05104109272360802,
-0.11009785532951355,
-0.08258701115846634,
-0.022126730531454086,
0.012363985180854797,
-0.09568685293197632,
-0.10973559319972992,
0.07995357364416122,
0.09761712700128555,
-0.01440912950783968,
0.007887838408350945,
0.06964285671710968,
-0.017553312703967094,
-0.07858901470899582,
-0.09609173983335495,
0.10199939459562302,
0.03915456682443619,
-0.08082453161478043,
0.06656356900930405,
0.05975238233804703,
0.06488864868879318,
0.05281705781817436,
0.09670248627662659,
-0.004962812177836895,
-0.04436223953962326,
-0.05751049891114235,
0.07129309326410294,
0.03866339474916458,
-0.15720327198505402,
-0.017199743539094925,
0.0180034339427948,
0.07782571017742157,
0.012876125052571297,
0.036163412034511566,
-0.07741305977106094,
0.08123800158500671,
0.014505293220281601,
-0.009312321431934834,
0.11704358458518982,
-0.05949411541223526,
0.030821051448583603,
0.0660119578242302,
-0.07873468846082687,
-0.13079802691936493,
0.05841289460659027,
-0.05258634313941002,
0.026307301595807076,
0.05115726217627525,
0.03575073555111885,
0.1399000883102417,
0.04329623281955719,
-0.07392849773168564,
0.04309700056910515,
0.028200814500451088,
-0.010308358818292618,
-0.11732088774442673,
-0.12146177142858505,
0.0542985275387764,
0.020860455930233,
-0.037357088178396225,
-0.044592585414648056,
-0.057756297290325165,
-0.007908214814960957,
-0.05178695172071457,
-0.008596795611083508,
-0.10162456333637238,
-0.11042451113462448,
-0.05751539394259453,
-0.05596190690994263,
0.03799988701939583,
0.10404852032661438,
-0.08379200100898743,
-0.12269732356071472,
0.09145847707986832,
-0.12579074501991272,
-0.019812259823083878,
0.07178650796413422,
-0.000466169643914327,
-0.12564116716384888,
0.113270603120327,
0.09618493169546127,
0.011325151659548283,
-0.09117987751960754,
-0.07940620929002762,
-0.12621356546878815,
0.04854915291070938,
0.06548366695642471,
0.13452847301959991,
-0.0676996111869812,
-0.05938290059566498,
0.09563644975423813,
-0.05048200488090515,
0.03126608207821846,
0.11218422651290894,
-0.06868332624435425,
0.06078571453690529,
-0.06811210513114929,
-0.03111940622329712,
0.06150698661804199,
-0.09990383684635162,
0.020169124007225037,
0.021215980872511864,
0.002613939344882965,
0.10658822953701019,
0.08565656840801239,
0.09843891859054565,
-0.08083945512771606,
0.11656291782855988,
-0.09512411057949066,
0.050599515438079834,
0.08330079168081284,
-0.05833945423364639,
-0.051034025847911835,
-0.09203103929758072,
0.0808262899518013,
-0.02162756770849228,
0.021143976598978043,
-0.00043815834214910865,
0.05986032634973526,
0.00575051037594676,
0.006713163573294878,
0.1382930874824524,
-0.13705816864967346,
-0.06336621195077896,
-0.13443295657634735,
-0.00539903249591589,
-0.1066771000623703,
0.03521342575550079,
0.06788977235555649,
-0.09978020191192627,
-0.18019123375415802,
-0.15049414336681366,
0.05096645653247833,
-0.04409729316830635,
0.09600742161273956,
-0.09892634302377701,
-0.09749532490968704,
-0.036213941872119904,
-0.04912007972598076,
-0.12113849073648453,
0.0719028115272522,
-0.04859955608844757,
-0.15274615585803986,
-0.007456701714545488,
-0.004484205506742001,
0.04761512577533722,
-0.01258182618767023,
0.01115359179675579,
-0.16535887122154236,
-0.06953976303339005,
-0.1938997507095337,
0.04927942901849747,
0.027774794027209282,
-0.11839862167835236,
-0.1217297613620758,
-0.0032264620531350374,
-0.05171513184905052,
0.0010553039610385895,
-0.03204704448580742,
-0.06516022980213165,
0.08511997014284134,
-0.14416179060935974,
-0.04077897593379021,
0.010898573324084282,
-0.03455574810504913,
-0.021828416734933853,
0.024400124326348305,
0.13647982478141785,
-0.04012732952833176,
0.006962297018617392,
0.04830760881304741,
0.11173270642757416,
0.006821213755756617,
0.06325779855251312,
-0.08072485029697418,
-0.019637510180473328,
0.0037953213322907686,
-0.08736103028059006,
-0.06752296537160873,
0.0001323085743933916,
0.020326409488916397,
-0.07416824996471405,
-0.013790695928037167,
-0.10624974220991135,
-0.010341612622141838,
-0.0678105503320694,
0.08878114074468613,
0.0007073090528137982,
-0.0822441503405571,
0.09403593093156815,
-0.06516239792108536,
-0.07274790853261948,
0.027531469240784645,
-0.044166140258312225,
-0.08072664588689804,
-0.009477452374994755,
-0.06612031161785126,
0.004697129130363464,
-0.12088372558355331,
-0.11832664161920547,
0.08695552498102188,
0.09758859872817993,
0.00568527402356267,
-0.06011239066720009,
0.0464618057012558,
0.14161837100982666,
-0.12122423946857452,
-0.13944420218467712,
-0.072372205555439,
-0.02795371040701866,
0.09134283661842346,
-0.051981545984745026,
0.06946898251771927,
-0.02642299421131611,
0.0025054009165614843,
-0.09526022523641586,
-0.07501453161239624,
-0.06649737805128098,
-0.13189290463924408,
-0.1881788671016693,
-0.0564914233982563,
-0.06796547770500183,
0.05612910911440849,
0.010300938971340656,
-0.037395089864730835,
-0.11376906931400299,
0.10287655889987946,
-0.06370396912097931,
0.04821210354566574,
0.054144665598869324,
0.07349937409162521,
-0.014752083458006382,
0.000599997874815017,
-0.0928533747792244,
-0.04656292125582695,
0.053552787750959396,
-0.005037932191044092,
0.010727562010288239,
0.05674390494823456,
-0.035289570689201355,
0.044741395860910416,
-0.11372825503349304,
0.10287995636463165,
-0.04379742592573166,
-0.05327079817652702,
0.021106867119669914,
0.00485613290220499,
0.11063405126333237,
0.08187267184257507,
-0.030190151184797287,
-0.09857724606990814,
0.11085062474012375,
-0.09747346490621567,
0.03775842860341072,
0.02828342840075493,
-0.04103366285562515,
-0.08333675563335419,
-0.08659093827009201,
-0.047034624963998795,
-0.06376784294843674,
0.015093128196895123,
-0.023300698027014732,
-0.04066205769777298,
-0.07253922522068024,
-0.011081622913479805,
0.03316584974527359,
0.05910952389240265,
0.009074176661670208,
0.05170126259326935,
0.030690569430589676,
-0.09234409034252167,
-0.006140036974102259,
-0.0055859507992863655,
-0.007376257795840502,
0.045450061559677124,
0.03402252495288849,
0.064518041908741,
-0.11560901999473572,
-0.03482674062252045,
0.0919354259967804,
0.027866706252098083,
-0.07001786679029465,
0.03442259505391121,
-0.020237775519490242,
0.1635681688785553,
0.06148945912718773,
0.06028677150607109,
0.017655353993177414,
0.13496516644954681,
-0.059735529124736786,
-0.0433725006878376,
-0.030321521684527397,
-0.05345117673277855,
-0.09857107698917389,
-0.04168707877397537,
0.037068262696266174,
-0.03321676701307297,
-0.046449340879917145,
0.0708981454372406,
0.08525017648935318,
0.028305601328611374,
0.03164254128932953,
0.05595642328262329,
-0.10386324673891068,
0.07175907492637634,
-0.02900688350200653,
-0.03430211544036865,
-0.04866544529795647,
0.10616736114025116,
-0.028223436325788498,
-0.021343408152461052,
0.061085913330316544,
0.12098067253828049,
0.07466235011816025,
0.06350895017385483,
-0.034062985330820084,
0.031142165884375572,
-0.06099310889840126,
-0.025352390483021736,
-0.03861603885889053,
-0.04482896253466606,
0.09160564094781876,
0.10844165831804276,
0.030855147168040276,
-0.034359272569417953,
0.15143011510372162,
0.07032617181539536,
0.08402382582426071,
-0.031168444082140923,
0.04630356654524803,
0.002642652252689004,
0.025532713159918785,
-0.03928838670253754,
0.10732290893793106,
0.0325850211083889,
-0.005039357580244541,
0.12345175445079803,
-0.08809656649827957,
-0.013697187416255474,
-0.03694852814078331,
0.005329796578735113,
0.03620772063732147,
0.04474959895014763,
0.032540544867515564,
0.0940563753247261,
-0.042399242520332336,
0.04088258743286133,
0.012300735339522362,
-0.11330835521221161,
0.04544546827673912,
-0.07899793237447739,
-0.11569959670305252,
-0.07466818392276764,
-0.1080842986702919,
-0.06085251644253731,
-0.09838879853487015,
-0.060928162187337875,
-0.07424582540988922,
-0.0024142395704984665,
0.04428979009389877,
-0.0753270611166954,
-0.1329706758260727,
-0.12244197726249695,
0.09528229385614395,
0.0773182287812233,
0.011275607161223888,
-0.09976281970739365,
-0.12513649463653564,
0.022080592811107635,
-0.045787960290908813,
0.08967370539903641,
-0.006275239400565624,
0.08948664367198944,
-0.051714301109313965,
0.042648233473300934,
0.008154081180691719,
0.04575081169605255,
0.05219797417521477,
0.017184631898999214,
-0.04851276054978371,
0.09003391861915588,
-0.09743816405534744,
0.08243055641651154,
-0.01724686659872532,
-0.044093403965234756,
0.09581863135099411,
-0.010322429239749908,
0.1344447135925293,
0.051219549030065536,
0.0745159313082695,
-0.027515457943081856,
0.07528845220804214,
0.09166667610406876,
0.017206478863954544,
0.01605927385389805,
0.055747874081134796,
-0.027377910912036896,
0.10358627885580063,
0.04599980637431145,
-0.025523725897073746,
-0.025089168921113014,
0.12119249254465103,
0.04364669695496559,
0.10408563166856766,
-0.07139436155557632,
0.14361517131328583,
-0.014764438383281231,
0.046412356197834015,
0.11259613186120987,
0.11736511439085007,
-0.03607909753918648,
-0.07841219007968903,
-0.04495692253112793,
-0.0723850280046463,
0.051635462790727615,
-0.07872859388589859,
0.006223536096513271,
0.09462610632181168,
-0.12924423813819885,
-0.025528423488140106,
-0.02695431560277939,
0.13841047883033752,
0.1252136081457138,
-0.016039887443184853,
0.14159701764583588,
0.014753582887351513,
0.11945972591638565,
-0.0019435358699411154,
-0.03715858235955238,
0.11454986035823822,
-0.08646869659423828,
0.0161465872079134,
0.16559946537017822,
0.024478072300553322,
-0.08011692762374878,
0.0026706629432737827,
0.08064296096563339,
0.1062920019030571,
0.11403795331716537,
-0.006271314807236195,
0.10422932356595993,
0.08221391588449478,
0.03972069174051285,
0.060496531426906586,
0.0684046521782875,
0.028574345633387566,
-0.14080163836479187,
-0.15391117334365845,
0.1566164791584015,
-0.07820557802915573,
-0.09295900166034698,
0.18624262511730194,
0.02611621841788292,
0.04762071371078491,
-0.04207204282283783,
0.05773385614156723,
0.03339109197258949,
-0.061425529420375824,
-0.06718921661376953,
-0.038348227739334106,
0.022047720849514008,
-0.1907012015581131,
-0.015845229849219322,
-0.016709011048078537,
-0.12759894132614136,
-0.039639368653297424,
-0.16334567964076996,
-0.04906591773033142,
-0.13082972168922424,
0.019103271886706352,
-0.029525617137551308,
-0.10981915146112442,
0.05333265662193298,
-0.08889620006084442,
0.04512406140565872,
0.0027016543317586184,
0.02510249614715576,
-0.060354504734277725,
0.055970076471567154,
0.13617809116840363,
-0.08178580552339554,
0.10897388309240341,
-0.03777846693992615,
-0.044912148267030716,
-0.08535660058259964,
0.06726881116628647,
0.07210099697113037,
-0.03463948890566826,
0.03207064047455788,
0.06118787080049515,
-0.033428918570280075,
-0.0706733986735344,
-0.027955755591392517,
0.0069887032732367516,
-0.034859225153923035,
-0.05685994401574135,
0.07792261242866516,
0.07245205342769623,
0.11075963824987411,
0.011514296755194664,
0.00042860760004259646,
0.1633301079273224,
-0.04054804891347885,
0.02503398060798645,
-0.06682544946670532,
0.10488253086805344,
0.02425006963312626,
-0.11797776818275452,
0.14965949952602386,
0.10836698114871979,
-0.06678983569145203,
-0.08686014264822006,
0.014573217369616032,
0.04429636150598526,
-0.077414870262146,
-0.021858613938093185,
-0.029806869104504585,
-0.05582555755972862,
0.0647340714931488,
0.02606205642223358,
-0.0784066841006279,
-0.04460093751549721,
-0.023173920810222626,
0.10811769217252731,
-0.12177470326423645,
-0.02456635981798172,
0.07700400799512863,
0.08079086989164352,
0.05123896151781082,
0.02941385842859745,
-0.011462340131402016,
0.07648593932390213,
0.14210276305675507,
0.06136924400925636,
0.1356760412454605,
-0.06434333324432373,
-0.10997205972671509,
0.037308238446712494,
0.057851023972034454,
-0.12165116518735886,
0.045493848621845245,
-0.055563751608133316,
0.06572621315717697,
-0.0355619341135025,
-0.09603265672922134,
0.02756035514175892,
-0.15755850076675415,
-0.08328951150178909,
-0.013180090114474297,
-0.1467699110507965,
-0.16302241384983063,
0.029563575983047485,
-0.1302330195903778,
0.1414099782705307,
-0.0790882483124733,
-0.08533401787281036,
0.00267311604693532,
-0.0323546826839447,
-0.10415345430374146,
-0.025607001036405563,
0.07787004113197327,
0.11139805614948273,
-0.09746544063091278,
-0.04957609251141548,
-0.04187086224555969,
0.044533733278512955,
-0.07250002026557922,
-0.12300604581832886,
0.03408285230398178,
0.03972851485013962,
0.016013257205486298,
-0.015155316330492496,
-0.03611842915415764,
0.03443719074130058,
0.09190485626459122,
0.06168266013264656,
0.0027264354284852743,
0.0774100124835968,
0.07975336909294128,
0.12257098406553268,
-0.03341487795114517,
-0.02171393856406212,
0.03365463763475418,
0.06909884512424469,
0.07948155701160431,
-0.07395536452531815,
0.07654314488172531,
0.05381591245532036,
-0.06914123147726059,
-0.025914914906024933,
-0.0694950520992279,
0.06737779080867767,
-0.09966231137514114,
0.01010498870164156,
0.07523350417613983,
-0.06772951036691666,
0.12073823809623718,
0.00939314253628254,
-0.04450468719005585,
-0.020619122311472893,
0.03252922743558884,
0.030799606814980507,
0.055684562772512436,
0.025219930335879326,
0.056952957063913345,
-0.0003640472423285246,
0.09983592480421066,
0.10327798873186111,
0.09021496772766113,
0.003927123267203569,
-0.05975659191608429,
-0.007978025823831558,
-0.08371485024690628,
0.05045856162905693,
-0.14315296709537506,
-0.0059793912805616856,
0.07659858465194702,
0.02619479037821293,
-0.012866060249507427,
-0.10913488268852234,
0.1195252314209938,
0.007296701427549124,
-0.01517097745090723,
0.044856660068035126,
0.06168150156736374,
-0.15858064591884613,
-0.10506267100572586,
0.020596278831362724,
-0.12556836009025574,
-0.07486699521541595,
0.0540965236723423,
0.0636565163731575,
0.0024569202214479446,
-0.15632925927639008,
-0.09310256689786911,
0.02067355439066887,
-0.00571768032386899,
-0.011978178285062313,
-0.07347097247838974,
0.11728458106517792,
-0.02778550796210766,
-0.10353488475084305,
-0.046863727271556854,
0.10749543458223343,
-0.05415482819080353,
-0.04124709963798523,
-0.07592564076185226,
-0.0030725188553333282,
-0.05802267789840698,
0.011456873267889023,
0.1507214456796646,
-0.04636066406965256,
0.045061711221933365,
-0.06420451402664185,
-0.0148549173027277,
-0.06062447279691696,
0.05016953498125076,
0.06671684980392456,
0.020782742649316788,
-0.029193369671702385,
-0.1560591608285904,
-0.09603488445281982,
0.13838322460651398,
0.020562078803777695,
0.10012249648571014,
0.09309478104114532,
-0.029368119314312935,
0.10040388256311417,
-0.07181306928396225,
0.009254379197955132,
0.10394037514925003,
-0.05154731869697571,
-0.1206265240907669,
0.12672150135040283,
0.08476116508245468,
-0.10152566432952881,
-0.03816049546003342,
0.0478590652346611,
0.1002962663769722,
0.03606223687529564,
-0.03960360214114189,
0.11957655847072601,
0.06938082724809647,
0.03813718259334564,
-0.01414016354829073,
0.006100426893681288,
0.0698319673538208,
-0.025863848626613617,
0.05241487920284271,
-0.023825272917747498,
0.025958426296710968,
-0.1399638056755066,
-0.049178432673215866,
0.012786387465894222,
-0.06506453454494476,
-0.05439388006925583,
-0.08735963702201843,
0.008258291520178318,
0.06743413954973221,
-0.06238485500216484,
0.1171729788184166,
-0.05628947913646698,
-0.09357354044914246,
-0.1678272932767868,
0.01746485009789467,
-0.039337992668151855,
0.058620043098926544,
0.08176706731319427,
0.09279146790504456,
0.012558598071336746,
-0.05691034346818924,
-0.02281177043914795,
0.056798744946718216,
-0.053534816950559616,
-0.07472633570432663,
0.06791890412569046,
-0.0007511163130402565,
-0.1559189409017563,
-0.08427764475345612,
0.03968307748436928,
-0.051622424274683,
0.04150039330124855,
-0.008120983839035034,
-0.07367066293954849,
-0.06157108023762703,
0.0007799523882567883,
-0.02980676293373108,
0.04959224909543991,
-0.02686864510178566,
0.1084921583533287,
-0.03518259525299072,
0.01187253836542368,
-0.12555086612701416,
-0.07734055817127228,
0.02657145820558071,
-0.009538685902953148,
0.1030583530664444,
-0.08569015562534332,
0.016026457771658897,
0.018640216439962387,
0.13242033123970032,
0.0636700987815857,
-0.02302757278084755,
0.03133773431181908,
-0.10663067549467087,
0.020219167694449425,
0.0698389783501625,
-0.11247825622558594,
0.13532812893390656,
0.1607639640569687,
-0.03854670748114586,
-0.019374089315533638,
0.03320464491844177,
-0.07891913503408432,
-0.02975214459002018,
0.017033152282238007,
0.07090654224157333,
0.014451057650148869,
-0.08739522844552994,
0.025679342448711395,
-0.06489364057779312,
0.10992173105478287,
-7.970597653184086e-05,
0.08580949902534485,
-0.007204737048596144,
0.03917485103011131,
0.10591009259223938,
0.10457266122102737,
0.06642059981822968,
0.02507483772933483,
0.10503321886062622,
0.09764881432056427,
-0.09322133660316467,
0.018395325168967247,
-0.020236589014530182,
0.015591598115861416,
0.014209834858775139,
0.053310249000787735,
0.06313786655664444,
-0.09557325392961502,
-0.039340097457170486,
-0.00795850157737732,
0.016725430265069008,
-0.12661398947238922,
-0.045924801379442215,
0.10029285401105881,
-0.05894186347723007,
-0.02228144183754921,
-0.059125594794750214,
0.08878976851701736,
-0.016600048169493675,
-0.1323818415403366,
0.08547141402959824,
0.040025774389505386,
0.0695042759180069,
0.051261235028505325,
0.028652919456362724,
0.042745061218738556,
-0.11174894869327545,
0.0911976769566536,
-0.012187769636511803,
-0.07376591116189957,
0.09875775873661041,
-0.046625953167676926,
-0.04032089188694954,
0.06031094491481781,
0.09060601890087128,
-0.06509928405284882,
-0.08108609169721603,
-0.0032151397317647934,
0.029517287388443947,
-0.022627266123890877,
0.027195211499929428,
-0.10827388614416122,
-0.006278320215642452,
-0.07549332082271576,
0.07797360420227051,
0.04756811261177063,
0.10677340626716614,
-0.05528333783149719,
-0.15623292326927185,
-0.12188778817653656,
0.07789962738752365,
0.036045972257852554,
0.004947070963680744,
-0.030333492904901505,
0.06625483930110931,
0.036519624292850494,
0.05973111093044281,
0.1163460984826088,
-0.0018379894318059087,
-0.025171643123030663,
-0.10282082855701447,
0.1957046091556549,
-0.14548540115356445,
-0.153384268283844,
-0.1540244072675705,
0.061996784061193466,
-0.11082114279270172,
0.003662917297333479,
0.03661320358514786,
0.033094409853219986,
-0.015745868906378746,
0.053583018481731415,
0.04924263805150986,
0.07031644880771637,
-0.009518878534436226,
0.15540188550949097,
0.026774533092975616,
0.14321254193782806,
-0.03445996716618538,
0.08407001197338104,
0.0057296669110655785,
-0.023662665858864784,
-0.12483877688646317,
-0.17561204731464386,
-0.10249819606542587,
-0.07138564437627792,
-0.0016372695099562407,
0.013959567993879318,
0.16226314008235931,
0.1701265275478363,
-0.1291375309228897,
-0.175042986869812,
0.08454030007123947,
-0.14537188410758972,
0.08570897579193115,
0.030295126140117645,
-0.045998845249414444,
-0.03716500848531723,
-0.07802021503448486,
-0.06562841683626175,
0.09064646810293198,
-0.10774703323841095,
0.062319375574588776,
-0.09498034417629242,
-0.0031342809088528156,
-0.06538240611553192,
0.03397518768906593,
0.05647563561797142,
0.04902884364128113,
-0.097563236951828,
0.022060124203562737,
-0.007298198528587818,
0.04517950490117073,
-0.07289156317710876,
-0.06817962229251862,
-0.02211344614624977,
0.02591651864349842,
-0.15120133757591248,
0.056629981845617294,
0.006102339830249548,
-0.17219364643096924,
0.043786559253931046,
0.07034484297037125,
0.09403212368488312,
0.04560010880231857,
0.010465468280017376,
-0.1691380739212036,
0.07752042263746262,
-0.04453715309500694,
-0.04595838114619255,
0.04042883217334747,
0.043859172612428665,
-0.06665356457233429,
0.0514218732714653,
-0.0709446370601654,
-0.001839650678448379,
-0.0409773550927639,
-0.18953467905521393,
0.024654971435666084,
0.0429597832262516,
0.05956369265913963,
0.026090506464242935,
-0.06427110731601715,
-0.0009767429437488317,
0.09582958370447159,
0.12220285832881927,
0.030538450926542282,
-0.1662837266921997,
-0.021524613723158836,
-0.01345058437436819,
-0.13105085492134094,
-0.10464878380298615,
-0.1211213544011116,
-0.15608097612857819,
-0.06096501275897026,
-0.020012209191918373,
0.0678667202591896,
0.006759535986930132,
0.03880868852138519,
0.08184513449668884,
-0.035070985555648804,
0.027841048315167427,
-0.07532685995101929,
0.08773384988307953,
-0.09213712811470032,
0.055573418736457825,
-0.13971544802188873,
-0.06793605536222458,
-0.08546474575996399,
-0.046611327677965164,
0.018286902457475662,
-0.1493091583251953,
0.07231976836919785,
-0.11759648472070694,
0.20513306558132172,
-0.0041008903644979,
0.08330865204334259,
-0.005424635484814644,
-0.02953939512372017,
0.0666748657822609,
-0.09468923509120941,
-0.059528738260269165,
-0.060780104249715805,
-0.008938562124967575,
-0.00864116195589304,
-0.03942491114139557,
-0.05601596087217331,
0.062687449157238,
-0.06092626601457596,
-0.011584443971514702,
0.09838331490755081,
-0.011044456623494625,
-0.02432558313012123,
0.054709192365407944,
-0.07360763847827911,
-0.03174075484275818,
-0.07981449365615845,
0.05921605974435806,
0.005791114177554846,
0.079045370221138,
0.06769783049821854,
-0.10744650661945343,
0.015408155508339405,
-0.025890152901411057,
0.10204541683197021,
-0.09085872769355774,
-0.09058783203363419,
0.07392493635416031,
0.025514476001262665,
-0.09680228680372238,
0.08235841989517212,
0.09539885073900223,
0.041579440236091614,
-0.03559153154492378,
-0.0911421999335289,
-0.009161830879747868,
-0.008525590412318707,
0.03694918751716614,
0.0827539935708046,
0.05699770525097847,
-0.01189377810806036,
0.10481525957584381,
-0.0014427357818931341,
0.13922227919101715,
0.1485975831747055,
0.06402049958705902,
0.01624637097120285,
-0.08911890536546707,
-0.059393443167209625,
-0.004168963059782982,
-0.0787525326013565,
-0.025891482830047607,
-0.07255592197179794,
-0.19732175767421722,
0.051250070333480835,
0.06963886320590973,
-0.13794459402561188,
0.04147908464074135,
-0.0517595112323761,
-0.06936664879322052,
0.061940595507621765,
0.05028877779841423,
-0.04315507039427757,
0.0011148793855682015,
-0.053193531930446625,
0.04156290367245674,
-0.031695056706666946,
-0.11692438274621964,
-0.04660296440124512,
-0.053214769810438156,
0.11005677282810211,
-0.028819026425480843,
0.14341551065444946,
-0.08718400448560715,
0.03330187872052193,
0.11190029233694077,
0.049592118710279465,
0.11837945133447647,
-0.03823203593492508,
0.1500609666109085,
0.048904065042734146,
-0.06259974092245102,
0.053513623774051666,
0.003861580975353718,
0.05581412836909294,
-0.03756658360362053,
-0.0004634397919289768,
-0.12196274101734161,
-0.07035067677497864,
-0.09457842260599136,
0.12589989602565765,
0.1035069152712822,
0.14541931450366974,
-0.032512687146663666,
0.06356841325759888,
0.11698257923126221,
0.04474929720163345,
-0.04433009773492813,
0.039298199117183685,
0.0949799120426178,
0.15408307313919067,
0.03683243319392204,
-0.051236193627119064,
-0.06814397126436234,
-0.07755257189273834,
0.09275645762681961,
0.11819092929363251,
0.024412162601947784,
0.019562790170311928,
-0.10185959190130234,
-0.029849322512745857,
-0.01252084132283926,
0.047366317361593246,
0.04663696512579918,
0.08269638568162918,
0.10889416933059692,
0.08471111208200455,
-0.030249228700995445,
0.04729529842734337,
0.013740806840360165,
-0.03741968795657158,
-0.06979876011610031,
0.09756938368082047,
-0.0509800910949707,
0.053762417286634445,
0.07929099351167679,
0.0653795525431633,
0.02139723114669323,
-0.024652108550071716,
0.033866725862026215,
0.04120826721191406,
-0.060967594385147095,
-0.04442484304308891,
-0.01177254132926464,
-0.05205877125263214,
-0.06359639763832092,
-0.17699140310287476,
0.11691873520612717,
0.07259447127580643,
-0.001504326704889536,
0.01531205978244543,
0.12245278060436249,
-0.004471702501177788,
0.04340845346450806,
0.07097525894641876,
0.020771177485585213,
-0.10643727332353592,
-0.12689164280891418,
0.04017164930701256,
0.04421481862664223,
-0.006861377973109484,
0.04339803010225296,
-0.018885213881731033,
0.021395858377218246,
0.18688447773456573,
0.05557626113295555,
0.05964527651667595,
-0.1033472940325737,
-0.058321595191955566,
0.15561096370220184,
0.14629767835140228,
-0.02901153452694416,
0.05927436426281929,
-0.03197809308767319,
0.005085347220301628,
0.12217380106449127,
0.0337679497897625,
-0.005898859351873398,
-0.08272167295217514,
0.06711933016777039,
-0.07988638430833817,
-0.0780569314956665,
0.09773792326450348,
-0.007657105568796396,
0.12907174229621887,
0.00035532773472368717,
-0.025932325050234795,
0.031268324702978134,
0.03203184902667999,
0.0858629047870636,
0.12126915901899338,
0.004873848054558039,
0.008974128402769566,
0.0704316794872284,
-0.08580765128135681,
-0.03214802220463753,
-0.06308916211128235,
-0.04580600559711456,
0.11682642251253128,
0.002426826860755682,
0.08225157856941223,
-0.09340279549360275,
-0.02584419772028923,
0.168271005153656,
-0.016630932688713074,
-0.09000810235738754,
-0.08323057740926743,
-0.14398521184921265,
-0.029135199263691902,
0.004220111295580864,
-0.05967194214463234,
0.019620615988969803,
-0.07127133011817932,
0.061342474073171616,
0.018794553354382515,
-0.005955351050943136,
-0.019743921235203743,
0.010958855040371418,
-0.08416249603033066,
0.048392001539468765,
-0.0725201964378357,
0.031981758773326874,
-0.07972127944231033,
-0.06877238303422928,
0.05842696502804756,
-0.018581030890345573,
0.009001116268336773,
-0.019484834745526314,
0.07335244119167328,
0.12130122631788254,
-0.013794219121336937,
0.017753418534994125,
-0.03509501740336418,
0.04838273674249649,
0.017969833686947823,
0.016723204404115677,
0.09114324301481247,
-0.043440476059913635,
0.07402156293392181,
0.0650092363357544,
0.12514396011829376,
0.024313846603035927,
-0.06992839276790619,
0.013334481045603752,
0.16877251863479614,
-0.07535871118307114,
0.05389547720551491,
-0.017636068165302277,
0.003436978440731764,
0.12253140658140182,
-0.0944158062338829,
0.14969995617866516,
0.051336321979761124,
0.10304006934165955,
0.004609354306012392,
0.013507596217095852,
-0.0013546330155804753,
-0.052612897008657455,
-0.06587031483650208,
-0.06922400742769241,
0.07031776756048203,
-0.1282990723848343,
0.01926415227353573,
0.06099776178598404,
0.10268284380435944,
0.074568971991539,
0.0239243321120739,
0.004395272117108107,
-0.057203296571969986,
0.0677909329533577,
-0.02922101877629757,
0.07219020277261734,
-0.06697210669517517,
-0.004349168855696917,
0.0233549065887928,
0.029178131371736526,
-0.0407392643392086,
-0.04553673416376114,
0.08038906753063202,
-0.09819425642490387,
-0.03252795711159706,
-0.04181024432182312,
0.041800763458013535,
0.13365741074085236,
-0.029990173876285553,
-0.0216329637914896,
-0.009571980684995651,
-0.018524328246712685,
-0.08236163854598999,
-0.025376060977578163,
-0.1465008556842804,
-0.06709246337413788,
0.10981698334217072,
0.004318568855524063,
-0.1363258957862854,
0.0324823223054409,
0.007604700513184071,
0.1018790453672409,
-0.11150139570236206,
-0.020734122022986412,
-0.04316044598817825,
-0.06893748790025711,
-0.13554270565509796,
0.06318928301334381,
0.11063793301582336,
0.11867333948612213,
-0.014126483350992203,
0.06305171549320221,
-0.005958400201052427,
0.08590742945671082,
-0.057454340159893036,
-0.11176103353500366,
0.016370723024010658,
0.06540732085704803,
-0.036468226462602615,
-0.018523311242461205,
0.08220744132995605,
0.10720250755548477,
0.010258901864290237,
0.010416765697300434,
0.07367898523807526,
-0.13503189384937286,
0.08638354390859604,
-0.06686805933713913,
0.01659846492111683,
0.06338158994913101,
-0.00689241848886013,
-0.023600373417139053,
-0.09240352362394333,
0.018806738778948784,
0.04262794181704521,
-0.08270081877708435,
-0.07392042875289917,
0.03749408945441246,
-0.10000650584697723,
0.10430066287517548,
-0.08441609889268875,
-0.10580278933048248,
0.009807766415178776,
-0.12372628599405289,
-0.1440122425556183,
0.08417273312807083,
0.05614449828863144,
0.026699209585785866,
0.12470278888940811,
-0.012301582843065262,
-0.01835390366613865,
0.0589011013507843,
0.008882744237780571,
-0.08974338322877884,
-0.010519245639443398,
-0.015265374444425106,
0.048158783465623856,
-0.06765541434288025,
0.08514917641878128,
-0.04393182322382927,
-0.08682966977357864,
0.1244431734085083,
0.11071565002202988,
0.0855676606297493,
0.130472332239151,
0.06337099522352219,
-0.11374247074127197,
0.0467444509267807,
-0.030459441244602203,
0.009485890157520771,
0.07557690143585205,
0.04123010113835335,
-0.10940659046173096,
0.13495168089866638,
0.043747708201408386,
-0.06363707035779953,
-0.1237008199095726,
0.03882595896720886,
-0.037549130618572235,
-0.041939716786146164,
0.002053244272246957,
-0.02571874111890793,
0.0936284065246582,
0.09524962306022644,
0.07318660616874695,
0.1173538789153099,
0.028771139681339264,
-0.05909100919961929,
0.00989706814289093,
-0.0821540355682373,
-0.048755526542663574,
0.02918976917862892,
0.046216290444135666,
-0.01830735243856907,
0.015739034861326218,
0.038609255105257034,
-0.11199678480625153,
-0.05651038512587547,
0.04629918187856674,
-0.10874970257282257,
-0.12970024347305298,
-0.11506569385528564,
-0.023277614265680313,
-0.03724449872970581,
0.05248217284679413,
-0.04040006548166275,
-0.14181338250637054,
-0.07496104389429092,
0.14831747114658356,
-0.09664018452167511,
0.016034439206123352,
-0.04739135503768921,
0.1979438066482544,
-0.020491212606430054,
-0.0057375370524823666,
0.002415636321529746,
-0.015016616322100163,
-0.0225738026201725,
0.05517369881272316,
-0.030413849279284477,
0.06774984300136566,
-0.07603336870670319,
-0.016110893338918686,
0.004045902751386166,
0.026410091668367386,
-0.04571481794118881,
0.07117722928524017,
-0.10793033242225647,
0.034662116318941116,
0.05354660004377365,
-0.0012487164931371808,
0.13862982392311096,
-0.07587959617376328,
-0.059974052011966705,
0.10494888573884964,
-0.07997658103704453,
0.07151972502470016,
0.0945647805929184,
-0.023606790229678154,
-0.0384494885802269,
0.03930528834462166,
0.04677607864141464,
-0.03681666776537895,
-0.012887421995401382,
0.0709972009062767,
0.06267359107732773,
0.0390426367521286,
0.002727692713961005,
-0.06716486066579819,
-0.06424735486507416,
-0.019133014604449272,
0.04630265384912491,
0.0027648471295833588,
0.03748326376080513,
0.05328160151839256,
0.07221374660730362,
-0.02770153246819973,
0.043287020176649094,
-0.0391211062669754,
0.05434305593371391,
0.03524784371256828,
-0.026529112830758095,
0.0020991633646190166,
-0.08568231761455536,
0.07602730393409729,
0.07298269867897034,
0.027363792061805725,
0.013339049182832241,
0.04672297462821007,
0.01678168587386608,
-0.183442622423172,
-0.022832563146948814,
-0.016441764310002327,
-0.060394711792469025,
-0.017957160249352455,
-0.10364317148923874,
-0.0009891355875879526,
-0.04156835004687309,
-0.1210012137889862,
-0.09763389825820923,
-0.01167267095297575,
-0.024347105994820595,
0.11537297815084457,
0.013177276588976383,
0.06173226982355118,
-0.09543640911579132,
-0.09406598657369614,
-0.12462574988603592,
-0.07381490617990494,
-0.015021083876490593,
0.07559026777744293,
-0.02395291067659855,
-0.053937263786792755,
-0.10938325524330139,
-0.0025718591641634703,
-0.05656501650810242,
-0.07458912581205368,
0.020613037049770355,
-0.021686363965272903,
-0.030975643545389175,
0.06145242974162102,
-0.10255108028650284,
-0.08205008506774902,
0.0056710983626544476,
0.04777296259999275,
0.0031034257262945175,
0.04003399237990379,
0.03397412225604057,
-0.06783609092235565,
-0.11474747210741043,
-0.07017569243907928,
-0.09254917502403259,
-0.019747987389564514,
-0.08942855894565582,
0.010605060495436192,
-0.01580364815890789,
0.04592692852020264,
-0.005847604013979435,
0.04431112855672836,
0.02906021475791931,
0.13127005100250244,
0.02553747594356537,
0.12402943521738052,
0.016608381643891335,
0.13567321002483368,
0.023620394989848137,
0.015426183119416237,
0.001644497155211866,
0.052530959248542786,
0.00937445554882288,
0.0692085400223732,
0.07380005717277527,
-0.08142467588186264,
-0.05709536373615265,
0.03712905943393707,
-0.03272954002022743,
0.1290901154279709,
0.09608526527881622,
0.03505168855190277,
0.016751281917095184,
0.09071509540081024,
0.027224842458963394,
0.020180631428956985,
0.07281038165092468,
-0.0275206808000803,
-0.1103292927145958,
-0.020305275917053223,
0.11929972469806671,
-0.10937486588954926,
-0.0361114926636219,
0.010447846725583076,
0.020740840584039688,
0.017988145351409912,
0.10495539754629135,
-0.05113622918725014,
0.11995553225278854,
-0.06156241148710251,
-0.023535463958978653,
-0.11941462010145187,
-0.10396181046962738,
-0.039948854595422745,
0.021371768787503242,
-0.05773451551795006,
0.22872871160507202,
0.06949150562286377,
0.026904311031103134,
-0.062224436551332474,
-0.02295197919011116,
-0.03655509278178215,
0.04491875693202019,
0.08430814743041992,
-0.08844922482967377,
-0.04159403592348099,
-0.07148182392120361,
0.02406223863363266,
0.012896752916276455,
0.11299680173397064,
-0.08333125710487366,
0.028629479929804802,
0.05411116033792496,
-0.03372965753078461,
0.01203247718513012,
0.0636223629117012,
-0.04965835437178612,
0.067816823720932,
0.00048694154247641563,
-0.002618426689878106,
0.005539359990507364,
0.004782331176102161,
0.08240611851215363,
-0.007148046977818012,
0.08831345289945602,
-0.08802852034568787,
-0.02291388250887394,
-0.06562881916761398,
0.1696321964263916,
0.06622368842363358,
-0.08894471824169159,
-0.0731101781129837,
0.06979327648878098,
0.11009128391742706,
0.08157572895288467,
0.10172326117753983,
0.019528284668922424,
0.013518339954316616,
0.01215894240885973,
-0.07511478662490845,
-0.04167548567056656,
0.07865240424871445,
0.00612094858661294,
0.01888682320713997,
0.01011637132614851,
-0.10813909769058228,
0.10303410142660141,
0.018071243539452553,
-0.07242058962583542,
-0.02639986015856266,
0.0886157900094986,
0.04640008136630058,
0.03793083131313324,
0.07376942783594131,
-0.11792659014463425,
-0.09294042736291885,
0.061029598116874695,
0.08255179226398468,
-0.07893723249435425,
0.005535187665373087,
-0.0038426616229116917,
0.036641187965869904,
-0.021745963022112846,
-0.11964151263237,
-0.11823771893978119,
0.038615692406892776,
-0.06532636284828186,
0.053713906556367874,
0.01930902525782585,
-0.07217356562614441,
-0.06004747003316879,
-0.046087540686130524,
0.10205324739217758,
-0.010634591802954674,
-0.006677320692688227,
0.1454264521598816,
-0.07367850095033646,
-0.07990212738513947,
-0.023513250052928925,
-0.10703255981206894,
0.09364883601665497,
-0.08174058049917221,
-0.11558791249990463,
0.1391838788986206,
0.019022900611162186,
-0.02912256307899952,
0.03619905561208725,
0.05384591221809387,
0.13808636367321014,
0.008476764895021915,
-0.11242931336164474,
0.06097772717475891,
-0.08778657019138336,
-0.08166446536779404,
0.004143057856708765,
0.06252694875001907,
0.19207260012626648,
-0.07586146891117096,
-0.05056634917855263,
0.1705516278743744,
0.13589248061180115,
0.08002132922410965,
0.03012731485068798,
0.05137365311384201,
0.1377347856760025,
0.05860220268368721,
0.04399258270859718,
0.16148756444454193,
0.11937356740236282,
-0.06585844606161118,
0.03409117832779884,
0.11162508279085159,
-0.042281121015548706,
-0.13874265551567078,
-0.04534606635570526,
0.0801064744591713,
0.12045782804489136,
0.02675245888531208,
-0.054910946637392044,
0.1100986897945404,
0.0916108787059784,
-0.05669882148504257,
0.05111796036362648,
0.09456495195627213,
-0.006468853447586298,
-0.02589416317641735,
-0.04167686402797699,
0.09097832441329956,
-0.10910266637802124,
-0.07272173464298248,
-0.012849000282585621,
0.10649865865707397,
-0.015275361947715282,
-0.020499490201473236,
0.026088209822773933,
-0.0898483544588089,
-0.012281933799386024,
0.05161592736840248,
-0.062444452196359634,
-0.09143797308206558,
-0.008080183528363705,
-0.021942995488643646,
0.042238783091306686,
-0.1958012878894806,
-0.22439998388290405,
0.1632055640220642,
-0.0914263054728508,
0.012012211605906487,
-0.011857926845550537,
-0.007692309562116861,
-0.0828319564461708,
-0.1308233141899109,
0.06303156167268753,
-0.05523380637168884,
-0.09229210764169693,
-0.033561043441295624,
-0.0849912166595459,
0.13999103009700775,
0.15867626667022705,
-0.11019990593194962,
-0.034092891961336136,
0.05937846750020981,
0.09925279021263123,
0.1959923803806305,
0.02645142935216427,
0.10617181658744812,
0.09980852901935577,
0.04059400409460068,
0.20052072405815125,
-0.011604873463511467,
0.11903350055217743,
0.05172520875930786,
0.11445672065019608,
0.10505945980548859,
0.04382358118891716,
-0.012115517631173134,
-0.08504634350538254,
0.005896914284676313,
-0.0004422379133757204,
0.22858063876628876,
0.10506048053503036,
0.0409066267311573,
-0.0957014411687851,
-0.03113892860710621,
0.1640629768371582,
-0.14890146255493164,
-0.13694381713867188,
0.03537794575095177,
-0.12214231491088867,
0.06592859327793121,
0.03811165317893028,
0.054013803601264954,
0.033665865659713745,
-0.06567427515983582,
-0.08170468360185623,
0.05637192353606224,
-0.02102586440742016,
0.024859312921762466,
-0.05139295011758804,
-0.029566194862127304,
-0.10463383793830872,
-0.06677969545125961,
-0.13550566136837006,
-0.014442182146012783,
-0.13286128640174866,
-0.07336459308862686,
0.08047926425933838,
0.004537469241768122,
0.018556511029601097,
-0.18542085587978363,
-0.04108244925737381,
-0.03364181891083717,
-0.10333934426307678,
0.02724393457174301,
0.05808262526988983,
0.018938830122351646,
-0.08828800171613693,
0.1145198866724968,
0.11429382115602493,
0.07586070150136948,
0.1420227736234665,
-0.0033289059065282345,
-0.005668480880558491,
0.2001398354768753,
0.01312588807195425,
0.03436407446861267,
0.14484727382659912,
0.07239463925361633,
0.10436078161001205,
0.13445188105106354,
0.037650398910045624,
0.08909745514392853,
0.0871238261461258,
0.19100742042064667,
0.07348480075597763,
0.16425149142742157,
0.07733245939016342,
0.1452486664056778,
0.1591118425130844,
0.01602892577648163,
0.061086781322956085,
0.06690236926078796,
-0.07425376027822495,
-0.044575586915016174,
0.1006137877702713,
-0.0040285224094986916,
-0.04567573219537735,
-0.05973019450902939,
0.10233043134212494,
0.027575403451919556,
0.0883852168917656,
-0.135909304022789,
-0.0494341142475605,
0.0770830288529396,
0.01657053641974926,
-0.07228728383779526,
-0.016792193055152893,
-0.11111755669116974,
0.06436505168676376,
-0.07488726079463959,
0.08269228786230087,
-0.022528277710080147,
-0.07096020132303238,
-0.01747758500277996,
0.12131059914827347,
0.009014223702251911,
-0.12171900272369385,
-0.012355659157037735,
0.03894336521625519,
-0.07922591269016266,
-0.1220686137676239,
0.11959619075059891,
-0.06692476570606232,
-0.06286412477493286,
0.03718772903084755,
-0.003304154146462679,
-0.043866802006959915,
-0.18869972229003906,
-0.013685755431652069,
-0.04146379977464676,
0.042001333087682724,
-0.06865894794464111,
0.04197527468204498,
-0.07138585299253464,
0.017350221052765846,
0.023984014987945557,
-0.10356917232275009,
-0.01903412491083145,
-0.11618422716856003,
0.05213359743356705,
0.08141830563545227,
-0.06614404171705246,
-0.08678185939788818,
0.10828050225973129,
0.04834122210741043,
-0.08143492788076401,
-0.13341037929058075,
-0.014189380221068859,
-0.0008395052864216268,
-0.041056495159864426,
0.051328446716070175,
-0.009591889567673206,
0.054748352617025375,
-0.08943266421556473,
-0.11242885887622833,
-0.077547088265419,
-0.0568719208240509,
-0.04364890232682228,
0.10508808493614197,
0.07075081020593643,
0.04057839512825012,
0.10318172723054886,
-0.05218556523323059,
-0.03308488801121712,
0.09991282224655151,
0.03475918993353844,
-0.05750302970409393,
-0.06825965642929077,
0.18442557752132416,
0.07270288467407227,
0.03654510900378227,
-0.06970750540494919,
0.07858719676733017,
0.12861253321170807,
-0.0018340743845328689,
-0.010742073878645897,
0.01808406412601471,
-0.11112352460622787,
0.11189457774162292,
0.019424540922045708,
0.04822101071476936,
-0.001830518594942987,
-0.03677722439169884,
-0.0858074426651001,
-0.06359842419624329,
-0.041231900453567505,
-0.11431893706321716,
0.004503122065216303,
-0.027225464582443237,
-0.05533682554960251,
0.06817076355218887,
-0.17183326184749603,
0.008897156454622746,
-0.016215257346630096,
-0.11090436577796936,
-0.0135337607935071,
0.07791344821453094,
0.13037510216236115,
-0.008500433526933193,
-0.015158743597567081,
-0.06182263791561127,
-0.058764781802892685,
0.07612798362970352,
0.032627034932374954,
0.03954682871699333,
-0.0003479639708530158,
-0.03474210575222969,
0.04132089391350746,
-0.07214435935020447,
0.06607681512832642,
-0.019999869167804718,
-0.02829691208899021,
-0.004344151355326176,
0.0034503242932260036,
-0.04929502308368683,
-0.06949545443058014,
-0.04319174215197563,
-0.07348202913999557,
0.0041815354488790035,
0.048413679003715515,
0.06017295643687248,
-0.02958800084888935,
0.07019229233264923,
0.017232002690434456,
-0.037144213914871216,
0.05015024170279503,
-0.013874317519366741,
-0.1073697954416275,
0.06337352097034454,
-0.052704352885484695,
-0.02299385890364647,
-0.07327598333358765,
-0.006461252458393574,
-0.17733898758888245,
0.06746929883956909,
-0.04830507934093475,
-0.10226640105247498,
-0.02415507286787033,
0.09917930513620377,
0.1028231605887413,
0.13208508491516113,
-0.0702848806977272,
-0.04414885491132736,
0.08296922594308853,
-0.03277799114584923,
-0.051908381283283234,
-0.05378268286585808,
0.03458543121814728,
0.06896562874317169,
0.06349373608827591,
-0.0047394949942827225,
0.028817851096391678,
-0.011629917658865452,
-0.10084239393472672,
0.01407506875693798,
-0.03365758806467056,
0.07599174976348877,
0.022106958553195,
-0.05994359403848648,
-0.10517585277557373,
-0.06493117660284042,
-0.01512856688350439,
-0.04913771525025368,
-0.05575646832585335,
-0.08296021074056625,
0.07058364152908325,
-0.009107772260904312,
-0.09455793350934982,
-0.010348706506192684,
-0.12255136668682098,
0.028233934193849564,
0.027816442772746086,
0.0834113359451294,
-0.1040341928601265,
0.07562953978776932,
-0.0425330251455307,
-0.04057099297642708,
-0.13860026001930237,
0.09463441371917725,
-0.07575943320989609,
0.008690259419381618,
-0.059019509702920914,
-0.059793621301651,
-0.06191674992442131,
0.08729440718889236,
-0.09428799897432327,
-0.06917113065719604,
-0.09154827147722244,
-0.08104941993951797,
0.011224182322621346,
0.10579027980566025,
0.03655308857560158,
-0.054084111005067825,
-0.12268534302711487,
0.01622072421014309,
-0.0501660481095314,
0.003940911032259464,
-0.14004528522491455,
-0.05290908366441727,
-0.14460350573062897,
-0.06945575028657913,
0.11263575404882431,
-0.04484744742512703,
-0.047368332743644714,
0.09353596717119217,
-0.08872806280851364,
-0.008976622484624386,
-0.00026531945331953466,
0.08720766007900238,
0.029397958889603615,
-0.07620389014482498,
0.02112143486738205,
0.041413769125938416,
-0.005009765736758709,
-0.0689767375588417,
-0.05383993312716484,
-0.09677960723638535,
0.03985051065683365,
-0.048719197511672974,
0.11847880482673645,
0.06053893640637398,
0.02950933203101158,
-0.00886880699545145,
0.036371681839227676,
-0.08950873464345932,
0.027560226619243622,
0.06415189802646637,
-0.09415483474731445,
0.0684327557682991,
0.001574669498950243,
0.06829656660556793,
0.013563403859734535,
-0.05737152323126793,
-0.060608215630054474,
-0.0868125855922699,
0.058452218770980835,
0.03259104862809181,
-0.09501147270202637,
0.06389831751585007,
0.07257352769374847,
0.07508596777915955,
-0.05549780651926994,
-0.04586854949593544,
-0.02615034393966198,
0.04685717448592186,
0.07220695912837982,
0.04379692301154137,
-0.131150484085083,
-0.011681349948048592,
0.020269306376576424,
-0.0454818457365036,
-0.09774547815322876,
-0.10998565703630447,
-0.022381208837032318,
0.00263580190949142,
-0.01551438681781292,
-0.11059711128473282,
-0.049681827425956726,
0.10650815814733505,
0.03953239321708679,
0.1042061522603035,
-0.08351584523916245,
-0.004417603835463524,
0.019373949617147446,
0.10602312535047531,
-0.02388094551861286,
-0.0742504745721817,
-0.008409639820456505,
-0.04268868640065193,
-0.03512595593929291,
0.11943303048610687,
0.03300691023468971,
0.01349854376167059,
-0.02163688838481903,
-0.11153852939605713,
0.019923649728298187,
0.055650778114795685,
0.029605774208903313,
0.04457315430045128,
-0.007639225106686354,
0.09810438752174377,
0.11528945714235306,
0.08056115359067917,
0.12667705118656158,
0.0763055756688118,
0.10033581405878067,
0.07461695373058319,
0.09279640018939972,
0.04729245603084564,
0.06712338328361511,
-0.10362879931926727,
-0.06651551276445389,
-0.07456310093402863,
-0.04574226960539818,
-0.017812471836805344,
0.09367145597934723,
0.07839661836624146,
-0.03544411435723305,
-0.11986052989959717,
0.004910977557301521,
0.01252130325883627,
-0.07427109777927399,
0.0697249248623848,
-0.10257893800735474,
-0.07272373139858246,
-0.08577470481395721,
-0.10640114545822144,
-0.07205253839492798,
-0.13721570372581482,
-0.0574936643242836,
-0.03206608444452286,
0.182922825217247,
0.025582659989595413,
-0.09389413148164749,
-0.013273891992866993,
0.024007288739085197,
0.07146347314119339,
0.057670000940561295,
-0.056681811809539795,
0.012603466399013996,
-0.05276153236627579,
-0.02730754017829895,
0.06880773603916168,
0.05960840731859207,
-0.17490306496620178,
0.11947445571422577,
0.14509142935276031,
0.0647292360663414,
0.023441866040229797,
0.03342531621456146,
0.05314755067229271,
-0.12477679550647736,
0.09124503284692764,
-0.09337955713272095,
-0.24014051258563995,
-0.06717950105667114,
0.02955043874680996,
-0.015506760217249393,
-0.1478957235813141,
0.03427985683083534,
0.022363560274243355,
0.10272028297185898,
0.022656630724668503,
0.03825262933969498,
-0.05408916622400284,
-0.06380100548267365,
-0.06294015794992447,
0.038694337010383606,
0.04919803515076637,
0.11185987293720245,
-0.004370210226625204,
-0.03075949288904667,
-0.0034799689892679453,
0.09828932583332062,
0.020807387307286263,
0.10168919712305069,
-0.09850507974624634,
-0.00857553817331791,
0.039133645594120026,
0.027659278362989426,
0.06257982552051544,
-0.02097095362842083,
0.004397038370370865,
-0.024260587990283966,
0.2011067271232605,
0.09075122326612473,
-0.09370775520801544,
-0.004125331994146109,
0.09192945063114166,
-0.00502225523814559,
0.0094282366335392,
-0.06346733123064041,
-0.08608586341142654,
-0.047258730977773666,
-0.043667882680892944,
0.11561696976423264,
-0.0015557220904156566,
0.08913373947143555,
0.13584266602993011,
-0.1122293546795845,
0.09523902833461761,
0.10722827166318893,
0.03325190767645836,
0.13109613955020905,
0.06187186762690544,
-0.004761944990605116,
-0.07244637608528137,
0.07708463817834854,
0.11262211948633194,
-0.16120822727680206,
0.10553503781557083,
0.02611907757818699,
0.0676511749625206,
0.0902552381157875,
0.0053107417188584805,
0.0770774856209755,
-0.050867050886154175,
0.06693489849567413,
-0.10219894349575043,
0.009392110630869865,
-0.13661426305770874,
-0.08248236030340195,
-0.10554325580596924,
-0.08197695016860962,
0.11409547924995422,
0.1035110130906105,
-0.02100258134305477,
0.018906056880950928,
0.013769769109785557,
0.0645332857966423,
-0.05947500094771385,
-0.041820455342531204,
-0.07421895861625671,
-0.02348078228533268,
-0.0658806711435318,
0.01166564505547285,
0.052450329065322876,
0.0769994705915451,
-0.0939832478761673,
0.0705530196428299,
0.09471830725669861,
-0.02942473627626896,
0.11958516389131546,
-0.1077505350112915,
0.028294110670685768,
-0.11208128184080124,
-0.08070609718561172,
0.051718614995479584,
0.09880410879850388,
0.037152163684368134,
-0.028989028185606003,
-0.0655631348490715,
-0.0128627959638834,
0.039986878633499146,
-0.00919981487095356,
-0.09298961609601974,
-0.08774689584970474,
0.028743509203195572,
-0.03528185933828354,
0.06938301771879196,
-0.08868079632520676,
0.020079728215932846,
0.005995534360408783,
-0.03297124058008194,
-0.052647605538368225,
-0.10765159875154495,
-0.11415094882249832,
-0.06817678362131119,
-0.06643013656139374,
-0.0629834309220314,
-0.03494010493159294,
-0.041008997708559036,
-0.08907352387905121,
-0.06237385794520378,
0.12914812564849854,
0.005040992517024279,
0.10339296609163284,
-0.10824770480394363,
0.06417668610811234,
0.0903875082731247,
-0.06628592312335968,
0.06717246025800705,
-0.024897636845707893,
0.06241082772612572,
0.10006842762231827,
-0.03996112197637558,
0.01616719737648964,
0.08643253892660141,
0.004257419146597385,
-0.024582291021943092,
0.058675773441791534,
0.007539274636656046,
0.029324108734726906,
-0.10043025761842728,
0.007203120272606611,
0.08032715320587158,
0.07400883734226227,
-0.11867585778236389,
-0.05220930650830269,
-0.013511057943105698,
-0.10238086432218552,
0.06158772483468056,
0.002489144215360284,
-0.11044813692569733,
0.06698054075241089,
-0.016134880483150482,
0.017320064827799797,
-0.06696188449859619,
-0.01679605431854725,
-0.14329245686531067,
-0.00945255532860756,
0.1041569635272026,
0.1302611529827118,
0.0029555640649050474,
-0.07539921253919601,
-0.06968378275632858,
0.05196347087621689,
0.08609583973884583,
0.056175049394369125,
0.05368928983807564,
-0.03242602199316025,
-0.06518534570932388,
-0.10875913500785828,
-0.07614514976739883,
-0.03612712025642395,
-0.0005594245158135891,
-0.0897243469953537,
-0.023147083818912506,
0.07915966957807541,
-0.0314444974064827,
-0.16449463367462158,
-0.042557623237371445,
0.08663518726825714,
-0.04819617420434952,
0.11503730714321136,
-0.06632142513990402,
-0.05431260168552399,
-0.11504174023866653,
0.004183799959719181,
-0.12857560813426971,
-0.020691078156232834,
-0.05138849839568138,
-0.040872957557439804,
0.017522728070616722,
0.11473362147808075,
-0.10943829268217087,
0.0013752246741205454,
0.0976252406835556,
0.03807585686445236,
0.14509284496307373,
-0.029727395623922348,
0.031125791370868683,
0.015106888487935066,
-0.061618685722351074,
0.00960701797157526,
-0.07953014969825745,
0.08869630098342896,
0.07558580487966537,
0.0223185196518898,
-0.012442410923540592,
-0.003149390686303377,
0.037445615977048874,
-0.03367104381322861,
0.09115619212388992,
-0.04322812333703041,
-0.011658759787678719,
0.009967283345758915,
0.059238411486148834,
-0.02495359629392624,
-0.07184942811727524,
-0.024550747126340866,
0.05048394203186035,
0.02838609740138054,
0.05224957317113876,
0.0757908821105957,
0.12802532315254211,
-0.09125057607889175,
0.04722651466727257,
0.05787364020943642,
0.047278910875320435,
0.046218983829021454,
0.08302284777164459,
-0.1298394352197647,
0.07796425372362137,
0.09794595837593079,
-0.06280217319726944,
0.04630908742547035,
-0.015002361498773098,
0.0571504570543766,
-0.02231385000050068,
-0.08056659996509552,
0.008840585127472878,
0.02496308460831642,
0.06048675999045372,
-0.06724865734577179,
0.07878420501947403,
0.061558131128549576,
0.014765424653887749,
-0.06470087915658951,
0.001704287831671536,
0.05082586407661438,
-0.06378628313541412,
0.125905841588974,
0.06530522555112839,
-0.1499737799167633,
0.005838517099618912,
0.04685323312878609,
0.03878933936357498,
0.1048937663435936,
-0.04438384622335434,
0.037205345928668976,
0.09551529586315155,
-0.003218999831005931,
0.030926665291190147,
0.11742933094501495,
0.045177947729825974,
-0.004772625397890806,
-0.0713646411895752,
0.0947226956486702,
0.030545594170689583,
-0.04779459163546562,
0.024960778653621674,
-0.029496757313609123,
0.07067560404539108,
0.08602279424667358,
-0.07849713414907455,
0.06347744166851044,
-0.022970177233219147,
0.10429949313402176,
-0.001363344956189394,
0.1360495537519455,
-0.0070255473256111145,
-0.02790263295173645,
-0.10921028256416321,
0.06426427513360977,
-0.052938312292099,
-0.0007962968666106462,
0.0021733571775257587,
0.05166313797235489,
-0.004950798116624355,
0.02953820675611496,
0.06234096363186836,
-0.09096814692020416,
0.09801949560642242,
0.09558801352977753,
0.12873129546642303,
-0.04496375098824501,
-0.011281599290668964,
0.031802792102098465,
-0.0574604868888855,
-0.06071406975388527,
-0.06410787254571915,
0.05586102232336998,
-0.05002671480178833,
0.006119394209235907,
0.15463566780090332,
0.0662606731057167,
0.00012366985902190208,
0.0005132383666932583,
-0.05112382024526596,
0.034858185797929764,
-0.07122629880905151,
-0.09909932315349579,
0.055144522339105606,
0.1354048252105713,
0.04863673821091652,
0.042639415711164474,
0.03031652793288231,
8.991053618956357e-05,
0.09814971685409546,
0.035620566457509995,
0.14202308654785156,
0.08292865008115768,
-0.1023796796798706,
0.13216526806354523,
-0.02730676718056202,
-0.1329469233751297,
-0.008412937633693218,
-0.06764455884695053,
-0.034182317554950714,
0.021240757778286934,
0.09970003366470337,
-0.058557379990816116,
0.07733391225337982,
-0.10343959182500839,
-0.06145384535193443,
-0.0036877195816487074,
0.11653130501508713,
-0.13553541898727417,
-0.08544104546308517,
0.0016524761449545622,
-0.05749255046248436,
-0.043927356600761414,
0.0010333666577935219,
0.03137343004345894,
-0.1394561529159546,
0.02986702136695385,
-0.048942819237709045,
0.08689963817596436,
-0.18501293659210205,
-0.06511124223470688,
0.06067643687129021,
0.02414209209382534,
0.06019678711891174,
0.011176619678735733,
-0.09245508164167404,
-0.11851616203784943,
0.13686272501945496,
0.007786002475768328,
0.19895470142364502,
0.05407844856381416,
0.09001857042312622,
0.1261763721704483,
-0.014298361726105213,
-0.014714743010699749,
0.027035459876060486,
-0.01832401379942894,
-0.06725606322288513,
0.06923705339431763,
0.06714732944965363,
0.10748502612113953,
-0.0652698203921318,
0.005652587860822678,
0.10711301118135452,
0.09838973730802536,
-0.0031886061187833548,
-0.008995958603918552,
-0.07827997207641602,
0.016272448003292084,
0.05491349846124649,
0.0002489756734576076,
0.0582069531083107,
-0.047567218542099,
-0.02049851417541504,
0.1148064061999321,
-0.10180727392435074,
-0.06203718110918999,
0.087326779961586,
0.018735045567154884,
0.045798737555742264,
-0.02850945107638836,
0.03941585496068001,
0.0657009556889534,
0.10393586754798889,
-0.01724296249449253,
0.08933290839195251,
0.03240629658102989,
-0.016903581097722054,
-0.018159041181206703,
0.020981859415769577,
-0.03694187104701996,
-0.17207558453083038,
0.037004079669713974,
-0.08099804073572159,
-0.14310160279273987,
-0.03312047943472862,
-0.07368278503417969,
0.013862941414117813,
0.13231779634952545,
-0.029619285836815834,
-0.05709584429860115,
-0.03106898069381714,
-0.11028509587049484,
0.038967445492744446,
-0.0064280335791409016,
-0.14999167621135712,
-0.05531909689307213,
-0.1577233374118805,
0.08998767286539078,
-0.043032288551330566,
-0.12421730160713196,
0.1097586527466774,
-0.04390091821551323,
-0.16022765636444092,
-0.01696716621518135,
-0.03627325966954231,
0.00495228823274374,
0.0457364059984684,
-0.020522430539131165,
-0.03612206503748894,
0.03912489116191864,
-0.05356848984956741,
0.028221555054187775,
-0.14592139422893524,
-0.05496776103973389,
-0.01521965954452753,
0.03675132617354393,
-0.02770482748746872,
0.04763241484761238,
-0.07532389461994171,
0.026986734941601753,
-0.08734012395143509,
-0.014403555542230606,
-0.02856769971549511,
-0.015537083148956299,
-0.07517573982477188,
-0.05806044116616249,
-0.06860043108463287,
-0.04298832640051842,
-0.009929005056619644,
0.023198343813419342,
-0.051373519003391266,
-0.18319496512413025,
0.016887998208403587,
-0.07866206020116806,
-0.06831671297550201,
-0.11262547969818115,
-0.039800405502319336,
-0.06939040124416351,
0.04071882367134094,
0.06888227164745331,
0.005232913885265589,
-0.04309551417827606,
-0.014944425784051418,
0.01831764541566372,
-0.06096211075782776,
-0.03089441917836666,
-0.006584612652659416,
-0.12177014350891113,
0.06164964288473129,
0.13062871992588043,
-0.028859717771410942,
0.08684148639440536,
0.07861601561307907,
0.1125827357172966,
0.10347235947847366,
0.09614507853984833,
0.05943788215517998,
-0.06400889903306961,
0.019974926486611366,
-0.010654302313923836,
-0.05278483033180237,
0.09906203299760818,
0.10377725958824158,
-0.048594214022159576,
0.13849592208862305,
0.1313907504081726,
0.04242397099733353,
0.06784462928771973,
-0.027823541313409805,
-0.07101234793663025,
0.00829552672803402,
-0.04540519788861275,
0.06332320719957352,
0.09428748488426208,
0.049318838864564896,
-0.037333231419324875,
0.08587321639060974,
-0.06054093688726425,
0.11509443074464798,
-0.06825809180736542,
0.04093458503484726,
0.029760513454675674,
0.027172090485692024,
-0.03417885676026344,
0.1176711916923523,
-0.10292631387710571,
0.10210089385509491,
-0.08686916530132294,
0.011260069906711578,
0.06588470190763474,
0.06552527844905853,
0.006466832011938095,
-0.11766602098941803,
0.05995608866214752,
0.07672427594661713,
-0.0013400847092270851,
-0.026371942833065987,
0.01736576110124588,
-0.0686292052268982,
-0.04911353811621666,
-0.009820044040679932,
-0.16362540423870087,
-0.1467438042163849,
-0.003861288772895932,
0.13096420466899872,
0.006251856684684753,
-0.008454572409391403,
-0.04660526663064957,
0.07362007349729538,
0.17583997547626495,
0.09580692648887634,
0.13048946857452393,
0.05351608246564865,
0.03633725270628929,
-0.11254831403493881,
0.012443560175597668,
-0.011777524836361408,
-0.051653265953063965,
-0.013122761622071266,
0.06268352270126343,
0.07756901532411575,
0.11411590129137039,
2.2214595446712337e-05,
0.09177366644144058,
-0.07804960757493973,
-0.06877268105745316,
-0.006292612291872501,
-0.12904508411884308,
-0.0650174543261528,
0.04872649535536766,
-0.025462869554758072,
-0.09840983897447586,
0.028429575264453888,
-0.047788091003894806,
0.0680956020951271,
0.008659572340548038,
0.12868638336658478,
0.10606612265110016,
-0.009593565948307514,
-0.07559116929769516,
0.020103294402360916,
0.10049231350421906,
0.068476602435112,
0.08397703617811203,
-0.029603267088532448,
0.02100364863872528,
-0.14187267422676086,
-0.030367553234100342,
0.030039822682738304,
-0.058225229382514954,
-0.060016632080078125,
0.0877702534198761,
-0.05145247280597687,
0.13488294184207916,
0.05020688474178314,
0.12301387637853622,
0.04231243208050728,
-0.059145621955394745,
0.0737806037068367,
0.14657551050186157,
0.036529507488012314,
-0.040148306638002396,
-0.10048402845859528,
0.05065467953681946,
0.1272595226764679,
-0.03849468007683754,
-0.010891564190387726,
0.06780856102705002,
0.14024731516838074,
0.07012426853179932,
0.1103934645652771,
-0.06433224678039551,
-0.07087412476539612,
-0.054826200008392334,
0.0833963006734848,
0.06712996959686279,
-0.008929595351219177,
0.0806092843413353,
-0.11552070826292038,
0.0574464350938797,
-0.09894081205129623,
-0.08674142509698868,
-0.15227524936199188,
0.05435786023736,
0.017695527523756027,
-0.0396236926317215,
0.08083552122116089,
-0.07334435731172562,
0.06797125935554504,
-0.07198754698038101,
-0.055734697729349136,
0.06768085062503815,
-0.08238155394792557,
0.043778564780950546,
-0.18461745977401733,
0.02241903357207775,
0.15639832615852356,
0.03551233187317848,
-0.049849458038806915,
0.019422700628638268,
-0.01902094855904579,
0.05819997563958168,
0.010036779567599297,
0.07877167314291,
-0.004726396407932043,
0.05434933304786682,
0.16499024629592896,
0.0031625661067664623,
0.08057384938001633,
0.10084082186222076,
-0.06540564447641373,
0.08848835527896881,
0.08320381492376328,
0.03837639093399048,
0.06872281432151794,
-0.03996872156858444,
0.13991636037826538,
-0.012799029238522053,
0.14547356963157654,
0.09774814546108246,
-0.11260753124952316,
-0.014611569233238697,
-0.06054163724184036,
-0.0013463451759889722,
-0.15904085338115692,
-0.0535392165184021,
-0.2182883471250534,
-0.024173105135560036,
0.13956637680530548,
-0.09749683737754822,
0.05440422520041466,
-0.034337591379880905,
-0.12859825789928436,
0.09890211373567581,
0.016400592401623726,
0.09946446120738983,
0.05338158458471298,
-0.05251581594347954,
0.020239733159542084,
0.016914887353777885,
-0.09139356017112732,
-0.014482204802334309,
-0.11810494214296341,
-0.15947891771793365,
0.03003833442926407,
-0.0739387571811676,
0.03213503211736679,
0.07423120737075806,
0.02071261964738369,
0.006156474351882935,
0.10437795519828796,
-0.00996460486203432,
0.01940510794520378,
-0.08595383167266846,
0.044091545045375824,
0.04379859194159508,
-0.024091027677059174,
0.058016981929540634,
-0.11245225369930267,
0.002390551147982478,
0.09482291340827942,
-0.042653098702430725,
-0.10092973709106445,
0.09006272256374359,
0.045110076665878296,
0.031636402010917664,
0.10921237617731094,
-0.04589269310235977,
-0.01575898751616478,
0.05464446172118187,
0.013527696020901203,
-0.03695743530988693,
-0.14855794608592987,
-0.00409506494179368,
-0.04570861905813217,
0.05112291872501373,
0.03426496684551239,
0.042706768959760666,
-0.03707188367843628,
-0.10746107995510101,
0.0650157481431961,
0.02982618473470211,
0.04273457080125809,
0.1135936826467514,
-0.03701675310730934,
0.1123770922422409,
0.10567731410264969,
-0.13106639683246613,
0.06034412235021591,
-0.003908571321517229,
0.042715925723314285,
-0.07902801781892776,
0.12547257542610168,
-0.10044004768133163,
-0.14009477198123932,
-0.06679990887641907,
0.1373058557510376,
-0.0037447232753038406,
0.08438543975353241,
-0.04793481528759003,
-0.06017550826072693,
0.13610287010669708,
0.005061489529907703,
0.10614759474992752,
-0.0521380715072155,
-0.0802755281329155,
-0.0481826514005661,
-0.057096585631370544,
0.13001853227615356,
0.010620638728141785,
0.0008791835280135274,
-0.07377482950687408,
0.00978823285549879,
0.02861039713025093,
0.01752077043056488,
-0.05931001901626587,
0.0469045490026474,
-0.041487161070108414,
-0.09376532584428787,
0.1063324436545372,
-0.023379897698760033,
-0.05666637420654297,
-0.15429209172725677,
0.06325902789831161,
0.003561834804713726,
-0.0555405430495739,
0.04936285316944122,
0.13174304366111755,
-0.029237467795610428,
0.08057065308094025,
-0.032712019979953766,
0.0077867042273283005,
-0.009632977657020092,
-0.090546153485775,
0.09675505012273788,
0.1310826539993286,
-0.08245141059160233,
-0.10964822769165039,
-0.04427662864327431,
-0.02429962530732155,
-0.03862011805176735,
-0.054703161120414734,
0.04049602150917053,
0.08693452179431915,
0.03631970286369324,
-0.046788450330495834,
0.05241052061319351,
-0.017302092164754868,
-0.1716414988040924,
-0.10590030252933502,
0.12111980468034744,
-0.02184649370610714,
-0.09240809828042984,
0.007146867923438549,
-0.05383753404021263,
0.031538791954517365,
0.11251737922430038,
0.0875808447599411,
-0.16191348433494568,
-0.03563091903924942,
0.0886625200510025,
-0.13706931471824646,
-0.0016734459204599261,
0.03595227748155594,
-0.06490487605333328,
-0.08722059428691864,
0.011282604187726974,
0.1856161653995514,
0.1505567878484726,
0.052770454436540604,
0.1350228488445282,
0.15496352314949036,
-0.057451799511909485,
0.031748704612255096,
-0.10222884267568588,
-0.021436337381601334,
0.12506434321403503,
0.04446908459067345,
0.0711093321442604,
-0.007359111215919256,
0.016022128984332085,
-0.07310492545366287,
0.08314201980829239,
-0.016264652833342552,
0.028652984648942947,
-0.05850713327527046,
-0.07921318709850311,
0.003048657439649105,
-0.1209285706281662,
-0.12506656348705292,
0.08290359377861023,
0.0764726996421814,
-0.07745382189750671,
-0.08912123739719391,
0.012730955146253109,
0.09335695207118988,
-0.11320104449987411,
0.004427165724337101,
-0.07377652078866959,
-0.018570756539702415,
0.09175635129213333,
0.008780507370829582,
-0.04657134413719177,
-0.07355295121669769,
-0.056664321571588516,
0.022465389221906662,
-0.03414525091648102,
0.033173173666000366,
0.04259826987981796,
0.04482196643948555,
0.011034036055207253,
-0.025946125388145447,
0.020144928246736526,
0.019906338304281235,
0.13419219851493835,
-0.13784198462963104,
-0.006338689476251602,
-0.08880393952131271,
-0.11301098763942719,
-0.044330745935440063,
0.012582166120409966,
-0.07060770690441132,
0.011951420456171036,
0.02255929261445999,
0.012264263816177845,
0.029727116227149963,
0.10662677884101868,
0.13532739877700806,
-0.03741266578435898,
0.10810305923223495,
0.05696719139814377,
-0.03339485079050064,
-0.018340222537517548,
0.10934031754732132,
-0.04619711637496948,
0.008114447817206383,
-0.029199276119470596,
-0.05292123183608055,
0.06961911916732788,
-0.06627025455236435,
0.04801308736205101,
-0.02626665122807026,
0.10053601115942001,
0.029559215530753136,
-0.027570104226469994,
-0.0027425852604210377,
-0.0020407913252711296,
-0.05616438016295433,
-0.010645557194948196,
0.08122675120830536,
-0.042571816593408585,
0.04277614876627922,
-0.09327027201652527,
-0.07356005907058716,
0.029339971020817757,
-0.030289171263575554,
-0.004449651576578617,
-0.1003032922744751,
-0.0953296422958374,
-0.0902729257941246,
-0.02586294338107109,
-0.09793710708618164,
0.10208228975534439,
0.04118617996573448,
-0.10818658024072647,
-0.11835848540067673,
0.0023960766848176718,
-0.06664907187223434,
-0.027718836441636086,
0.1251223385334015,
0.10921448469161987,
0.03543129935860634,
-0.023057177662849426,
-0.056543704122304916,
0.0355677604675293,
-0.021381549537181854,
0.08891516178846359,
-0.01551576517522335,
0.03210750222206116,
-0.015424687415361404,
-0.03341235592961311,
0.05040450021624565,
-0.022502228617668152,
-0.058716099709272385,
-0.06436728686094284,
0.020785434171557426,
0.12265564501285553,
0.03829774633049965,
0.020036868751049042,
0.023230813443660736,
-0.0774279311299324,
-0.02635636180639267,
-0.019016487523913383,
-0.022605836391448975,
-0.019026676192879677,
0.09869220852851868,
0.056426484137773514,
-0.009899075143039227,
0.0010285997996106744,
0.03971988707780838,
0.0047066183760762215,
-0.020728833973407745,
-0.026568841189146042,
-0.0676298588514328,
-0.09350329637527466,
-0.0350184291601181,
0.023462988436222076,
-0.11065515130758286,
-0.0552506148815155,
0.06928208470344543,
0.08487177640199661,
0.12926122546195984,
0.08881402015686035,
0.005171160213649273,
0.050206370651721954,
0.031065557152032852,
-0.09005627781152725,
-0.043851278722286224,
-0.1477995216846466,
0.0034693414345383644,
-0.042656123638153076,
-0.0128300366923213,
0.11662925779819489,
-0.05421626567840576,
-0.047803573310375214,
-0.07207754999399185,
0.09044501930475235,
0.11478663235902786,
0.08094827085733414,
-0.10735659301280975,
-0.11944366246461868,
0.03632194548845291,
-0.005921908654272556,
-0.029357604682445526,
-0.03828630596399307,
-0.019273241981863976,
0.035455700010061264,
0.030572088435292244,
0.018125494942069054,
-0.09322871267795563,
-0.09390098601579666,
-0.11530311405658722,
-0.05042029172182083,
0.09568414092063904,
-0.06945023685693741,
-0.10548371076583862,
-0.13658474385738373,
-0.0920051783323288,
0.05324861407279968,
0.008823995478451252,
0.0011052023619413376,
0.010950542986392975,
-0.054377082735300064,
0.023085694760084152,
0.09586240351200104,
-0.14301347732543945,
0.036048680543899536,
0.08154499530792236,
-0.05816343426704407,
0.010351312346756458,
0.09923660010099411,
0.0819278135895729,
-0.01810901053249836,
-0.06522476673126221,
0.09700159728527069,
0.010638576000928879,
-0.01267188973724842,
0.08832345902919769,
-0.12958693504333496,
-0.004245514050126076,
0.0881105586886406,
-0.04398396611213684,
-0.08761537820100784,
0.034648578613996506,
-0.0018025747267529368,
0.10386543720960617,
0.01350931916385889,
-0.032583087682724,
-0.11093103885650635,
-0.08031342923641205,
0.1252165585756302,
0.13340897858142853,
-0.061353374272584915,
0.11151918768882751,
-0.006888632196933031,
0.053604088723659515,
0.016628073528409004,
-0.12616389989852905,
-0.009746987372636795,
0.12637284398078918,
0.04954450950026512,
-0.03327880799770355,
0.08164183795452118,
0.10802540928125381,
-0.07921893149614334,
0.19185680150985718,
-0.06577080488204956,
0.03255400061607361,
-0.1576966792345047,
-0.12079978734254837,
0.043513841927051544,
-0.04761536046862602,
-0.14129826426506042,
-0.010454000905156136,
-0.00024479543208144605,
0.0013333966489881277,
-0.1352822482585907,
0.012582511641085148,
0.10416551679372787,
0.023867320269346237,
0.055118635296821594,
0.14199653267860413,
0.048770539462566376,
0.021463332697749138,
-0.10753566026687622,
-0.013791508972644806,
0.004222474992275238,
-0.08953260630369186,
0.061186809092760086,
0.037619687616825104,
-0.08042594790458679,
-0.043234772980213165,
-0.11001540720462799,
0.013991606421768665,
0.10481420159339905,
-0.07505373656749725,
-0.040302738547325134,
0.016163628548383713,
-0.07997167110443115,
0.061498720198869705,
0.0713670402765274,
-0.11425089091062546,
0.02823740988969803,
0.09684446454048157,
0.06995031237602234,
0.04016551375389099,
-0.0714198499917984,
-0.009692005813121796,
-0.06822851300239563,
-0.07879982143640518,
-0.1098766103386879,
0.09852880984544754,
0.033899929374456406,
0.08949495106935501,
0.011531038209795952,
-0.050833024084568024,
0.08880352228879929,
-0.051951728761196136,
0.08184795081615448,
-0.01625598967075348,
-0.10199116170406342,
0.01338049117475748,
0.01356593519449234,
0.029747042804956436,
0.04673188924789429,
-0.07467874884605408,
-0.026445932686328888,
-0.014064809307456017,
-0.013699159026145935,
0.08028854429721832,
0.1049148291349411,
0.06673842668533325,
-0.0005792815936729312,
0.13478516042232513,
0.08499101549386978,
-0.02235211431980133,
0.07558657228946686,
-0.005087932571768761,
-0.05561179295182228,
0.09765244275331497,
-0.06860628724098206,
0.10647290199995041,
0.04555453732609749,
-0.06889727711677551,
-0.05591382086277008,
0.136359304189682,
-0.06712263822555542,
0.022190574556589127,
0.10488376766443253,
-0.23195010423660278,
0.10533227026462555,
0.16328388452529907,
-0.06620796024799347,
0.0007799232844263315,
-0.08941357582807541,
-0.03893483802676201,
-0.12923108041286469,
-0.06355928629636765,
0.03043310157954693,
0.06641322374343872,
0.11063651740550995,
-0.13640743494033813,
-0.00010215246584266424,
0.036371394991874695,
-0.10886275768280029,
-0.08592785149812698,
0.04236505553126335,
0.0833999365568161,
0.0682593435049057,
0.05245349928736687,
0.04974127560853958,
0.14955663681030273,
0.09798410534858704,
-0.12220408767461777,
0.00043508195085451007,
0.059300653636455536,
0.09622811526060104,
-0.03843522444367409,
0.020833279937505722,
0.04468584433197975,
0.08255836367607117,
-0.06331401318311691,
0.10350634157657623,
0.009252909570932388,
0.018422327935695648,
-0.05201233550906181,
-0.04109635576605797,
-0.020339850336313248,
-0.044821348041296005,
-0.012767704203724861,
-0.08724772185087204,
0.09024795889854431,
-0.06348774582147598,
-0.004245264921337366,
0.08277025073766708,
0.045883722603321075,
0.003211724106222391,
-0.16076971590518951,
0.14807526767253876,
-0.01687171682715416,
0.07308723777532578,
-0.07065846771001816,
0.020869644358754158,
0.10700936615467072,
0.05209535360336304,
0.02805083431303501,
0.01583433337509632,
-0.08210063725709915,
-0.05682655796408653,
-0.14602163434028625,
-0.0788784846663475,
0.0793423131108284,
-0.00809271540492773,
-0.025509197264909744,
0.005935126915574074,
-0.062274158000946045,
0.0085712019354105,
-0.008868747390806675,
0.02935929223895073,
0.04899642989039421,
-0.06154695898294449,
0.19169573485851288,
-0.05025973916053772,
0.0799829438328743,
-0.09056233614683151,
-0.001945145195350051,
0.002575746737420559,
0.050375357270240784,
-0.07693943381309509,
-0.029559267684817314,
0.03205007687211037,
0.0653458908200264,
0.06404536217451096,
-0.016106028109788895,
-0.04958672821521759,
0.08922514319419861,
0.0980459675192833,
0.061223652213811874,
0.09071777760982513,
-0.017166618257761,
-0.06876742839813232,
-0.08450821787118912,
0.08730818331241608,
0.022824354469776154,
0.0938662588596344,
0.15654121339321136,
0.027892807498574257,
0.10120868682861328,
0.030909022316336632,
0.05095348507165909,
0.0428672656416893,
-0.09271988272666931,
0.033611126244068146,
0.05643188953399658,
-0.043677885085344315,
-0.11048255115747452,
-0.057153455913066864,
-0.12862636148929596,
-0.07937981188297272,
0.03687154874205589,
-0.05965803936123848,
0.08863522112369537,
0.0640217587351799,
0.0930606946349144,
0.07126442342996597,
0.1211279034614563,
-0.08794400095939636,
0.054293468594551086,
0.1298602968454361,
-0.0529056079685688,
0.025469888001680374,
-0.017908817157149315,
-0.18974970281124115,
-0.03811259567737579,
0.13343240320682526,
-0.05982985720038414,
0.026904800906777382,
0.03176691755652428,
0.10068167746067047,
0.034613754600286484,
-0.04868945851922035,
-0.011102316901087761,
-0.0010199238313362002,
0.09545492380857468,
-0.078189916908741,
0.08078911900520325,
-0.14959688484668732,
-0.12347625195980072,
-0.13168294727802277,
-0.14810298383235931,
-0.005501274019479752,
0.018089136108756065,
0.03842496871948242,
-0.08493716269731522,
-0.09883198142051697,
0.04219549521803856,
0.024202153086662292,
-0.05654061213135719,
0.14780282974243164,
-0.01636771857738495,
0.07013113796710968,
0.0044415779411792755,
0.00463598407804966,
9.637227049097419e-05,
-0.05305774509906769,
-0.11927857249975204,
-0.08326767385005951,
0.04986882209777832,
0.07316766679286957,
0.05286507308483124,
-0.17148907482624054,
0.07236115634441376,
0.0630764439702034,
0.002554022939875722,
0.07461269199848175,
0.07372835278511047,
-0.07101744413375854,
0.07341131567955017,
-0.016699643805623055,
-0.06360447406768799,
-0.027948183938860893,
0.0873902440071106,
0.13316182792186737,
0.058764707297086716,
0.08862079679965973,
-0.09023197740316391,
-0.092461496591568,
-0.057186707854270935,
0.026680007576942444,
-0.010039678774774075,
-0.1168922707438469,
0.012872775085270405,
-0.040227919816970825,
0.15157242119312286,
0.05847610905766487,
-0.07132588326931,
0.08434253931045532,
-0.015341759659349918,
0.02366274781525135,
-0.039758700877428055,
-0.11026547104120255,
-0.008601091802120209,
-0.09517878293991089,
-0.05698705464601517,
-0.03121080994606018,
0.05345773324370384,
0.02335709147155285,
0.03729909658432007,
0.10183481127023697,
0.05344190075993538,
-0.10188385844230652,
-0.05670449137687683,
-0.1363063007593155,
-0.1851210743188858,
-0.019432123750448227,
-0.0006865112227387726,
-0.07463520020246506,
0.08089535683393478,
-0.004867250565439463,
-0.01637241616845131,
-0.03301333636045456,
0.06840737909078598,
0.06683717668056488,
-0.13155597448349,
-0.02307680994272232,
0.18825526535511017,
-0.09121082723140717,
0.026074962690472603,
-0.06872303038835526,
-0.08844378590583801,
0.06328641623258591,
0.24091662466526031,
0.03640004247426987,
0.06851307302713394,
0.040791165083646774,
0.02042352221906185,
0.09601075202226639,
0.07602594047784805,
0.09508343040943146,
-0.05540047958493233,
-0.08648395538330078,
0.22764326632022858,
-0.13005363941192627,
-0.003910575062036514,
0.05410052090883255,
-0.01650751382112503,
0.051126495003700256,
0.02541588991880417,
0.016260670498013496,
-0.02395900897681713,
-0.17950965464115143,
0.13896556198596954,
-0.0656353160738945,
-0.05417414754629135,
0.07829304784536362,
0.021792106330394745,
-0.002546105533838272,
0.1196369156241417,
0.08121386170387268,
-0.08662889152765274,
-0.01919255219399929,
0.021259645000100136,
-0.042776674032211304,
0.12416286021471024,
0.024120403453707695,
0.0008701952756382525,
0.02928394451737404,
0.1114509180188179,
0.052861593663692474,
-0.017431339249014854,
-0.049064915627241135,
-0.03837316110730171,
-0.08051428943872452,
-0.023885197937488556,
0.04494590312242508,
0.05036840960383415,
-0.03139437362551689,
-0.017903495579957962,
0.04218987748026848,
0.031978558748960495,
-0.06509130448102951,
-0.029959868639707565,
-0.032787807285785675,
0.11846942454576492,
0.1686546504497528,
-0.01906476356089115,
0.04608648642897606,
-0.12018059194087982,
0.13332237303256989,
0.04346195608377457,
-0.09582718461751938,
-0.07499916851520538,
-0.054082147777080536,
-0.08453033864498138,
-0.0941847637295723,
0.05470386892557144,
-0.01733221299946308,
-0.008609517477452755,
-0.054893746972084045,
-0.04516315832734108,
0.10938481986522675,
0.1285301148891449,
-0.06453397870063782,
-0.08915774524211884,
-0.040829285979270935,
-0.08604586869478226,
-0.062211599200963974,
-0.15419736504554749,
0.10374902188777924,
0.01622469164431095,
-0.04286602884531021,
0.021522460505366325,
0.08553974330425262,
0.07407619804143906,
0.07194478064775467,
0.048622023314237595,
-0.0003844606108032167,
0.13071772456169128,
0.05225304141640663,
-0.09153968095779419,
0.08123047649860382,
-0.07650920748710632,
-0.17589488625526428,
-0.0911821573972702,
-0.03948412463068962,
-0.10182159394025803,
0.04812445491552353,
-0.021634450182318687,
-0.04166663438081741,
0.0043143657967448235,
-0.04332968220114708,
0.017509695142507553,
-0.006902024149894714,
-0.07268931716680527,
0.15003357827663422,
-0.004182707518339157,
-0.03096434473991394,
0.012504762038588524,
-0.09052988141775131,
-0.08467914909124374,
-0.062004465609788895,
-0.026693833991885185,
-0.00781647302210331,
-0.03003983572125435,
-0.02341497130692005,
0.06606629490852356,
-0.0014723313506692648,
0.04438048601150513,
-0.01962205581367016,
0.05092978477478027,
-0.039634186774492264,
0.011794768273830414,
0.041307177394628525,
0.027047693729400635,
-0.00562382023781538,
-0.10196103900671005,
-0.09704053401947021,
-0.031143002212047577,
-0.013414079323410988,
0.009479216299951077,
-0.0666237398982048,
-0.011429384350776672,
-0.11128722131252289,
0.023248940706253052,
-0.015001539140939713,
-0.058987028896808624,
0.0759860947728157,
-0.040279801934957504,
0.08462615311145782,
-0.00647674361243844,
-0.10064331442117691,
-0.09075736254453659,
0.05826201289892197,
-0.04355408623814583,
-0.09373845160007477,
0.06048133969306946,
-0.032576221972703934,
-0.01737770065665245,
-0.085059754550457,
0.09263242781162262,
0.08115191012620926,
-0.023311341181397438,
0.04348452761769295,
-0.11259064823389053,
0.06087864935398102,
-0.05071936547756195,
-0.08698630332946777,
-0.09993577748537064,
0.0393243134021759,
-0.07746847718954086,
0.10086340457201004,
0.049764398485422134,
0.019343700259923935,
0.16069884598255157,
0.014257105067372322,
0.14706185460090637,
0.11402622610330582,
0.04515456780791283,
-0.05206245929002762,
0.002797905122861266,
0.09733298420906067,
0.06002211570739746,
0.046023257076740265,
-0.039310991764068604,
0.08303458988666534,
-0.15419459342956543,
0.024711767211556435,
0.0036114114336669445,
-0.11055146157741547,
0.04253644496202469,
-0.0694052204489708,
-0.06478451937437057,
0.03345135599374771,
0.023569151759147644,
0.10755681991577148,
-0.0883350819349289,
-0.03765649348497391,
0.034222669899463654,
0.044030699878931046,
0.04697958379983902,
0.0652075856924057,
-0.08915212005376816,
0.05629773437976837,
0.0031586650293320417,
-0.12043609470129013,
-0.009079261682927608,
-0.07742808014154434,
0.021902436390519142,
-0.08306768536567688,
-0.10780250281095505,
-0.08524277806282043,
-0.0971217155456543,
-0.08100786805152893,
0.060211457312107086,
-0.029327500611543655,
0.0645124688744545,
0.0004409645334817469,
0.03418906405568123,
-0.04432223364710808,
0.10342719405889511,
0.03933259844779968,
-0.10637412220239639,
0.04000973701477051,
-0.027459610253572464,
-0.061546970158815384,
-0.09900075942277908,
-0.07482683658599854,
-0.06214924901723862,
0.011958897113800049,
0.14425219595432281,
-0.040272295475006104,
-0.015795856714248657,
0.0375153087079525,
0.07952892035245895,
-0.09013748914003372,
0.0980738028883934,
-0.1571064293384552,
0.11356665939092636,
0.040982022881507874,
0.08179688453674316,
-0.005167143885046244,
-0.15655450522899628,
-0.07627931237220764,
-0.035259414464235306,
-0.020706800743937492,
-0.07549820095300674,
0.1193007156252861,
0.007562583778053522,
-0.013293663039803505,
-0.028045115992426872,
0.07287266850471497,
0.08462467044591904,
-0.13675446808338165,
0.07575926929712296,
0.02897791936993599,
-0.14683660864830017,
-0.03373665362596512,
-0.13730454444885254,
-0.01932632364332676,
0.019434744492173195,
0.043849535286426544,
-0.03688640147447586,
0.07963147759437561,
0.08586128801107407,
-0.01424941886216402,
0.03022758848965168,
-0.017203891649842262,
-0.016753487288951874,
0.051147621124982834,
-0.056161943823099136,
-0.0016236291266977787,
0.07788820564746857,
0.05212772265076637,
0.017639420926570892,
0.1282864660024643,
0.06603242456912994,
-0.019775433465838432,
0.037502020597457886,
-0.005190039984881878,
0.0115254120901227,
-0.007533059921115637,
0.006694264709949493,
-0.021022681146860123,
0.013304688036441803,
0.1271122843027115,
0.12202684581279755,
0.04162469506263733,
-0.10872472077608109,
-0.0916760265827179,
0.06379137188196182,
-0.1097397431731224,
0.03242434561252594,
-0.022407609969377518,
0.05141931027173996,
0.04838525876402855,
-0.00738490978255868,
0.03692444786429405,
0.065277099609375,
0.03846457228064537,
-0.126235693693161,
0.08582597225904465,
-0.029656555503606796,
-0.08719754219055176,
-0.0377507358789444,
-0.08148880302906036,
-0.017369749024510384,
0.00631804158911109,
0.07317191362380981,
0.12367699295282364,
-0.10666193813085556,
-0.13224369287490845,
0.02240283600986004,
-0.07602626085281372,
-0.06881088018417358,
0.03717996925115585,
0.057557400315999985,
0.12069252133369446,
0.0016163374530151486,
0.12596650421619415,
-0.0522635392844677,
0.05104883015155792,
0.03700292855501175,
-0.02631877176463604,
0.0208669975399971,
0.09163690358400345,
-0.08113756775856018,
-0.12780959904193878,
-0.07770297676324844,
-0.06358133256435394,
-0.014765026979148388,
0.11343833804130554,
-0.10112658888101578,
-0.02264697663486004,
-0.07080881297588348,
0.105492003262043,
0.03014478273689747,
-0.0780055895447731,
-0.08558780699968338,
0.011108320206403732,
0.09387335181236267,
-0.02364422008395195,
-0.06922861188650131,
0.08178301900625229,
0.0638221949338913,
-0.07460429519414902,
0.06659341603517532,
0.01127393264323473,
-0.10201454162597656,
-0.06759382039308548,
-0.13408975303173065,
-0.06421203911304474,
-0.16638506948947906,
-0.06835222989320755,
-0.038438647985458374,
0.11437517404556274,
0.06631696224212646,
0.03856346383690834,
0.14366456866264343,
0.010891679674386978,
-0.09344874322414398,
-0.11026889830827713,
-0.1260729283094406,
-0.04497610405087471,
0.10584813356399536,
-0.08532989770174026,
-0.04353569820523262,
-0.05667668953537941,
0.040716059505939484,
0.036930572241544724,
-0.15998969972133636,
-0.05946524441242218,
0.014142070896923542,
0.0038410297129303217,
0.01680108532309532,
-0.03754449263215065,
0.021804796531796455,
0.036203235387802124,
0.019669482484459877,
0.008113376796245575,
0.07836715877056122,
-0.08001969009637833,
-0.012800553813576698,
-0.01949261873960495,
0.09708106517791748,
-0.07439658790826797,
-0.0071718646213412285,
0.06290293484926224,
0.1152850091457367,
0.02831496112048626,
-0.04825549200177193,
-0.0010374631965532899,
0.033200476318597794,
0.10826355963945389,
-0.038754552602767944,
0.042487237602472305,
-0.06795327365398407,
-0.030465681105852127,
-0.1634705513715744,
0.08623987436294556,
-0.07221371680498123,
-0.03528941050171852,
0.05147627741098404,
-0.007072231266647577,
-0.021598035469651222,
0.10523100942373276,
0.1244707927107811,
-0.08038854598999023,
0.03257349133491516,
-0.1280829906463623,
0.02912553772330284,
0.0655352920293808,
-0.03272823989391327,
0.09451505541801453,
-0.002557366853579879,
0.018378406763076782,
-0.06074202060699463,
-0.07206709682941437,
0.04363321140408516,
-0.13349932432174683,
0.08308396488428116,
-0.027209751307964325,
-0.040494825690984726,
-0.09619701653718948,
-0.0048623885959386826,
-0.16247811913490295,
-0.12129604071378708,
0.038706690073013306,
-0.09361515939235687,
-0.06310270726680756,
-0.042450692504644394,
0.07780299335718155,
-0.04558125510811806,
-0.02991904318332672,
0.11765964329242706,
-0.06693511456251144,
-0.10617896914482117,
0.09657122194766998,
-0.054512474685907364,
-0.001740868086926639,
0.034499816596508026,
-0.0483141727745533,
0.04754754900932312,
-0.07201892137527466,
0.05198820307850838,
-0.056763701140880585,
-0.12191125005483627,
0.0432656928896904,
0.07819516211748123,
0.06421484053134918,
-0.10497496277093887,
0.007209145929664373,
0.019587505608797073,
-0.041142288595438004,
0.05943913385272026,
-0.028218135237693787,
0.10315781086683273,
0.01307731308043003,
-0.09128069877624512,
0.03200864791870117,
-0.024226943030953407,
0.05720527097582817,
-0.0335177518427372,
-0.11761290580034256,
-0.04617605358362198,
-0.10761017352342606,
-0.07067735493183136,
0.06183422729372978,
0.13215045630931854,
-0.10303517431020737,
-0.07864416390657425,
-0.06000028923153877,
0.15136173367500305,
0.023025935515761375,
0.06281378120183945,
-0.08748158812522888,
-0.09092021733522415,
0.11624835431575775,
-0.08595971018075943,
0.03443514183163643,
0.10739267617464066,
-0.004462982527911663,
0.0019788288045674562,
0.02322874590754509,
-0.020324978977441788,
0.050144556909799576,
0.03483014926314354,
0.07451345771551132,
0.0207373034209013,
0.08853382617235184,
-0.12183311581611633,
0.020254207774996758,
-0.06446265429258347,
0.03397321328520775,
-0.11866617947816849,
-0.00788671150803566,
0.10632595419883728,
0.0756637305021286,
-0.10389439016580582,
-0.0311097651720047,
-0.06099209189414978,
0.038454797118902206,
-0.1394016146659851,
-0.09280499815940857,
0.0862964391708374,
0.05782487243413925,
-0.13234470784664154,
-0.11442627757787704,
-0.08017199486494064,
0.0051828669384121895,
0.08523673564195633,
0.06220296770334244,
0.056104663759469986,
0.021600421518087387,
0.11539143323898315,
-0.10138995945453644,
0.07743969559669495,
0.028653742745518684,
-0.07823461294174194,
-0.032017581164836884,
0.0889836922287941,
-0.05450300872325897,
-0.0007739629363641143,
-0.11043909937143326,
-0.19185543060302734,
0.04838818684220314,
-0.028549080714583397,
0.14306053519248962,
0.02485743910074234,
0.11238287389278412,
0.042462658137083054,
-0.12883569300174713,
0.09907974302768707,
-0.016526682302355766,
-0.1030629351735115,
0.02250600792467594,
0.04864140599966049,
-0.030608495697379112,
-0.03366943076252937,
0.008892116136848927,
-0.07573266327381134,
0.013502932153642178,
-0.061305925250053406,
0.2017553597688675,
-0.07027028501033783,
-0.10743412375450134,
0.024638919159770012,
-0.016645260155200958,
0.0800880491733551,
0.10543506592512131,
-0.11562661081552505,
-0.07991548627614975,
0.10259901732206345,
-0.024827979505062103,
0.00553025072440505,
0.0948791578412056,
0.08377403765916824,
0.00945945456624031,
0.07724066078662872,
0.035997893661260605,
-0.011775675229728222,
-0.02637777291238308,
0.020843569189310074,
0.13240599632263184,
-0.02701696567237377,
0.07230469584465027,
0.02252642624080181,
-0.071541428565979,
-0.10848430544137955,
-0.11808443814516068,
0.05368930101394653,
-0.06287696212530136,
0.049353085458278656,
-0.039561498910188675,
-0.10801287740468979,
0.06338535249233246,
-0.15894970297813416,
0.02547825686633587,
-0.02987757883965969,
0.0481475330889225,
0.0987735465168953,
-0.11524662375450134,
-0.03243551775813103,
-0.11758536100387573,
0.013990002684295177,
0.041754841804504395,
0.033747121691703796,
0.05637213960289955,
-0.016093140468001366,
0.009763599373400211,
0.08944738656282425,
0.08045683801174164,
-0.046087972819805145,
-0.062211841344833374,
-0.06826699525117874,
0.19510594010353088,
0.1903262585401535,
0.031466469168663025,
0.051002081483602524,
-0.02981838397681713,
0.0794835314154625,
-0.06681004166603088,
-0.060872144997119904,
-0.04598796367645264,
0.018473787233233452,
-0.01601487025618553,
-0.058098383247852325,
0.035348329693078995,
-0.06353644281625748,
-0.041245270520448685,
-0.15542030334472656,
0.12408281117677689,
-0.03641168400645256,
0.030764387920498848,
-0.011449833400547504,
-0.0880434513092041,
-0.038696207106113434,
-0.10383696109056473,
-0.026589421555399895,
-0.042497023940086365,
0.1022881418466568,
-0.025560898706316948,
0.055877942591905594,
0.09656886756420135,
-0.062419891357421875,
0.017846154049038887,
0.048721179366111755,
0.023148655891418457,
0.13308869302272797,
0.029537569731473923,
0.0924459844827652,
0.0764012485742569,
0.13731969892978668,
-0.08036230504512787,
0.19590941071510315,
0.10894287377595901,
-0.00365877291187644,
-0.03191261738538742,
0.027577891945838928,
-0.060989316552877426,
-0.05693954601883888,
0.10049105435609818,
0.037905991077423096,
-0.053965725004673004,
-0.10987136512994766,
0.1347469836473465,
0.03198373690247536,
0.0439886637032032,
0.05250217020511627,
-0.010007417760789394,
0.06114302948117256,
-0.10221683233976364,
-0.07136070728302002,
0.11609826982021332,
-0.0025603147223591805,
0.021927611902356148,
0.04533076286315918,
0.021635495126247406,
0.05489480122923851,
-0.09891508519649506,
-0.032855693250894547,
0.07285775244235992,
0.017809811979532242,
-0.016122989356517792,
-0.043194323778152466,
-0.07926099747419357,
0.011986726894974709,
-0.06640051305294037,
0.002128314459696412,
0.05153999105095863,
-0.15372267365455627,
-0.09581881016492844,
0.06611195206642151,
-0.10451841354370117,
-0.07801695168018341,
0.05711285024881363,
0.01818711683154106,
-0.10646412521600723,
0.10256941616535187,
-0.008352143689990044,
-0.0862465351819992,
0.1091180369257927,
-0.02000422030687332,
-0.020921548828482628,
0.08687160164117813,
0.01843327283859253,
-0.03046143241226673,
-0.0008847339195199311,
-0.08884993940591812,
0.10317284613847733,
-0.07014641165733337,
0.012478930875658989,
0.07975246012210846,
0.07876628637313843,
0.009212307631969452,
0.08032522350549698,
0.08354558050632477,
0.12950238585472107,
0.008207026869058609,
0.013158292509615421,
-0.020291650667786598,
0.09331413358449936,
-0.07109116017818451,
-0.039029236882925034,
0.004861610941588879,
0.06170890852808952,
-0.020913809537887573,
-0.050057195127010345,
0.04137192666530609,
-0.10066387057304382,
0.02175288088619709,
-0.008058570325374603,
0.11856003850698471,
0.004179323557764292,
-0.023062989115715027,
0.06787435710430145,
0.11707566678524017,
0.07496117800474167,
0.07664503157138824,
-0.03628286346793175,
-0.07769066095352173,
0.014000657014548779,
-0.056703776121139526,
0.11574770510196686,
0.09504474699497223,
0.0637134462594986,
0.01128371898084879,
-0.08039437979459763,
-0.04600362852215767,
0.07065870612859726,
-0.07054635882377625,
0.01942756399512291,
0.0913633331656456,
-0.08419453352689743,
-0.0001672843936830759,
-0.11965817213058472,
-0.045826952904462814,
-0.07338689267635345,
0.0007422358612529933,
-0.021764513105154037,
0.08845353126525879,
-0.07240999490022659,
-0.020884457975625992,
-0.015905406326055527,
-0.0502726249396801,
0.014853022061288357,
0.02241526171565056,
-0.10936222225427628,
-0.03956392779946327,
0.12218184024095535,
0.0014045286225154996,
-0.0675257071852684,
-0.05187910795211792,
0.042362380772829056,
-0.03437185660004616,
-0.23618373274803162,
0.120045505464077,
0.07999013364315033,
-0.27103862166404724,
0.07028143107891083,
-0.07188080251216888,
0.006255623418837786,
-0.13899298012256622,
-0.12749828398227692,
-0.1591213196516037,
0.003226611064746976,
-0.11251754313707352,
-0.02879529632627964,
-0.03504711017012596,
0.12175764888525009,
0.09314537793397903,
0.09218323230743408,
-0.07070650905370712,
-0.009879523888230324,
0.006741395220160484,
-0.10428614914417267,
-0.04968411475419998,
-0.10335566103458405,
-0.06636291742324829,
0.06312517076730728,
0.042912717908620834,
0.13637590408325195,
-0.12808459997177124,
-0.06367716938257217,
0.10273484140634537,
0.045608170330524445,
-0.013245885260403156,
0.11293890327215195,
0.048297490924596786,
-0.039567142724990845,
0.02655665948987007,
0.011777299456298351,
0.042678963392972946,
0.04509123042225838,
-0.09049037843942642,
-0.03838129714131355,
0.1183994710445404,
0.02476862259209156,
-0.03532915189862251,
-0.10205133259296417,
0.057154759764671326,
-0.022816844284534454,
-0.10700732469558716,
0.0750398188829422,
-0.05554187297821045,
0.0686473399400711,
0.01910867914557457,
-0.0037359693087637424,
0.0688253790140152,
0.04582611098885536,
0.008070963434875011,
0.004070074763149023,
-0.09473425894975662,
-0.04340388998389244,
0.04535093531012535,
0.07240596413612366,
-0.03947265073657036,
-0.007253617513924837,
0.025915324687957764,
-0.10664520412683487,
0.007520202547311783,
-0.006965846288949251,
0.027502333745360374,
0.08326950669288635,
0.08455480635166168,
0.0244358591735363,
0.057486627250909805,
0.0758557841181755,
-0.22301733493804932,
0.06763440370559692,
-0.052381955087184906,
0.03539085388183594,
0.11967696994543076,
-0.09691733866930008,
-0.05817179009318352,
-0.026537083089351654,
0.03367520496249199,
0.06633983552455902,
0.027571193873882294,
0.06182928755879402,
-0.038179125636816025,
-0.00803263857960701,
-0.08581408113241196,
0.010124066844582558,
-0.11800029873847961,
-0.09864470362663269,
0.03198406100273132,
0.045916542410850525,
0.08455952256917953,
0.025045454502105713,
0.07984811812639236,
0.08240295946598053,
-0.04397910460829735,
0.05974381044507027,
0.052113067358732224,
-0.13882923126220703,
0.02598358504474163,
-0.021839294582605362,
0.06107474863529205,
0.08329534530639648,
-0.051085084676742554,
-0.11655033379793167,
0.02809942327439785,
0.014303477481007576,
0.04075729846954346,
0.03780499845743179,
0.016466250643134117,
0.12430062890052795,
0.0324077308177948,
-0.02957933396100998,
0.05707373470067978,
0.05363955348730087,
-0.01818731427192688,
0.10471329092979431,
-0.014833306893706322,
0.05135498195886612,
0.1028994545340538,
-0.041432350873947144,
0.08409050852060318,
-0.10621759295463562,
0.09587941318750381,
0.030131278559565544,
-0.055462948977947235,
0.08350709825754166,
0.05016797408461571,
-0.12269221246242523,
0.05765058100223541,
-0.01055222563445568,
0.12433484941720963,
-0.0047024511732161045,
0.0881396010518074,
0.08562350273132324,
-0.020114971324801445,
-0.15329505503177643,
0.007590614724904299,
-0.04184866324067116,
-0.05670188367366791,
0.048287950456142426,
-0.0955159142613411,
0.04677162691950798,
0.013243664987385273,
0.1187032163143158,
0.09187503904104233,
-0.01144186221063137,
-0.011593610979616642,
0.005590091925114393,
0.15023504197597504,
0.011243728920817375,
0.03159540519118309,
0.023111756891012192,
0.0072695417329669,
0.15235471725463867,
-0.015168337151408195,
-0.00903312023729086,
0.017964232712984085,
-0.0838494673371315,
-0.06989078223705292,
0.04144852235913277,
-0.026942897588014603,
0.02796761877834797,
0.09308408945798874,
-0.043135568499565125,
-0.09656387567520142,
-0.03792225196957588,
0.04457343742251396,
-0.07772653549909592,
-0.12004684656858444,
-0.001240316079929471,
-0.14768533408641815,
0.0571783073246479,
-0.1145983338356018,
0.057859089225530624,
0.04757831618189812,
0.029376164078712463,
0.012029354460537434,
0.06003352999687195,
-0.03633486106991768,
-0.025478804484009743,
0.003758667968213558,
0.06528566777706146,
0.007717942353338003,
0.12334098666906357,
0.015478705987334251,
0.07613621652126312,
0.09081482142210007,
0.1115061342716217,
0.00027453433722257614,
0.08752613514661789,
0.03002159856259823,
0.053087268024683,
-0.057530876249074936,
0.008767582476139069,
-0.042526617646217346,
0.17427588999271393,
0.17187796533107758,
-0.07114212960004807,
0.09856750816106796,
-0.09270437061786652,
0.024299226701259613,
0.09192707389593124,
-0.07860466092824936,
0.09650539606809616,
0.0512612909078598,
-0.027502670884132385,
-0.01485054288059473,
-0.01813076250255108,
0.09935624897480011,
0.1550271064043045,
0.08281035721302032,
0.07627817243337631,
0.14164820313453674,
-0.04245278611779213,
0.08711742609739304,
-0.19126643240451813,
0.07851946353912354,
0.046053580939769745,
0.026191312819719315,
0.09774757921695709,
0.010488913394510746,
0.09886708855628967,
-0.03693779557943344,
-0.03366011381149292,
0.07139547914266586,
-0.09909237176179886,
0.05748792365193367,
-0.13669303059577942,
0.03211495652794838,
-0.06651288270950317,
0.028929896652698517,
-0.10636942088603973,
0.018887566402554512,
0.1492459923028946,
-0.16561488807201385,
-0.12713536620140076,
-0.003382546827197075,
-0.03493708372116089,
-0.11865291744470596,
-0.15550410747528076,
-0.05664585903286934,
0.071910060942173,
-0.019364822655916214,
0.06830508261919022,
0.006674041505903006,
0.08658570796251297,
-0.08146180957555771,
-0.09051165729761124,
-0.037936870008707047,
0.01745430752635002,
-0.0023739140015095472,
0.02335185930132866,
0.04655067250132561,
0.06674304604530334,
-0.042194679379463196,
0.01627860590815544,
-0.07052446156740189,
0.03076879493892193,
-0.0699533075094223,
-0.09583603590726852,
0.05712614953517914,
-0.11073783040046692,
0.06505771726369858,
-0.047892775386571884,
-0.045987293124198914,
0.059130728244781494,
-0.05753311142325401,
-0.06386802345514297,
-0.06674516946077347,
0.015729889273643494,
0.009525471366941929,
0.07371983677148819,
0.12411187589168549,
-0.022068100050091743,
-0.06513454020023346,
-0.08725762367248535,
0.1467563509941101,
-0.10250215232372284,
-0.07271113991737366,
-0.08380881696939468,
0.06312067061662674,
0.10309698432683945,
0.0780402272939682,
-0.006268270779401064,
-0.09088818728923798,
0.004422318655997515,
-0.07598304003477097,
-0.11419174820184708,
0.012354952283203602,
0.07338973879814148,
-0.07810642570257187,
-0.10257427394390106,
0.03199660778045654,
-0.07167616486549377,
0.10968421399593353,
-0.11956875026226044,
-0.044321443885564804,
-0.08365727961063385,
0.03851649910211563,
-0.023850025609135628,
-0.012195529416203499,
0.1522209197282791,
-0.07266219705343246,
-0.07895975559949875,
-0.005036626476794481,
-0.04953896254301071,
-0.06076831743121147,
-0.015214729122817516,
-0.03682532534003258,
0.006277890410274267,
-0.04434717819094658,
0.034974355250597,
0.05781148746609688,
0.028532736003398895,
0.09902692586183548,
-0.02278761938214302,
-0.06485065072774887,
-0.10569257289171219,
0.08400855958461761,
0.005438761319965124,
0.05398296192288399,
-0.04318288713693619,
0.10875757038593292,
0.03536789119243622,
-0.03630021959543228,
-0.04454680159687996,
-0.058471061289310455,
0.09811921417713165,
-0.035430070012807846,
0.18176965415477753,
0.07323089241981506,
-0.08728375285863876,
0.051422033458948135,
-0.05240193009376526,
-0.08320361375808716,
0.01609446108341217,
0.0233322586864233,
-0.019631659612059593,
-0.06452852487564087,
-0.017338933423161507,
-0.026202578097581863,
0.09388741850852966,
-0.008052807301282883,
0.010314572602510452,
-0.014998800121247768,
-0.021624689921736717,
0.11888015270233154,
-0.15492095053195953,
0.08764205127954483,
-0.08308695256710052,
0.09287930279970169,
0.07282856851816177,
0.07184486091136932,
0.012443230487406254,
-0.07642042636871338,
-0.1596260666847229,
-0.09275529533624649,
-0.07361948490142822,
-0.1264531910419464,
0.013607213273644447,
0.04589860141277313,
-0.009706743061542511,
0.01570775732398033,
-0.09211460500955582,
0.08562072366476059,
0.11094434559345245,
-0.03322606906294823,
0.045385122299194336,
-0.0020658480934798717,
0.014710560441017151,
-0.07883057743310928,
-0.04869803786277771,
0.0669255182147026,
-0.03718247637152672,
-0.06731072068214417,
-0.07915432006120682,
-0.06399375945329666,
0.042490120977163315,
-0.14140160381793976,
-0.06784036755561829,
-0.15938568115234375,
0.12953071296215057,
0.009236284531652927,
0.07391124218702316,
0.03581921383738518,
-0.0021656679455190897,
-0.06781329214572906,
-0.03410320729017258,
-0.02958732284605503,
-0.004737572744488716,
0.051730234175920486,
0.06153635308146477,
0.052928779274225235,
0.09342442452907562,
0.06022827699780464,
-0.04322027042508125,
0.02837270312011242,
-0.03576311469078064,
0.09410034120082855,
-0.017985092476010323,
-0.047521982342004776,
0.07991914451122284,
0.04100910574197769,
-0.1413823813199997,
0.003259489079937339,
0.0963171049952507,
0.055046048015356064,
0.044869985431432724,
-0.04659517481923103,
-0.11175084114074707,
0.078168123960495,
-0.009170456789433956,
0.13793765008449554,
0.045898664742708206,
0.006505076307803392,
0.010066932067275047,
-0.021657943725585938,
-0.034714166074991226,
-0.08272237330675125,
-0.05354921147227287,
0.03701506927609444,
0.02637188322842121,
0.06384159624576569,
-0.014057313092052937,
-0.0804922953248024,
-0.15194323658943176,
0.05930487439036369,
-0.068048395216465,
-0.050120119005441666,
0.07265470176935196,
-0.0519920289516449,
-0.10017454624176025,
0.04462975636124611,
-0.0977335274219513,
0.05367055535316467,
0.06178291141986847,
-0.007613116409629583,
0.026833966374397278,
-0.013741345144808292,
-0.060015443712472916,
-0.09653986990451813,
0.04509337618947029,
-0.06658593565225601,
-0.009445354342460632,
0.09144808351993561,
0.12242088466882706,
0.027394134551286697,
-0.11776210367679596,
-0.06836199015378952,
-0.1729918122291565,
0.0540587455034256,
-0.07706847786903381,
-0.047261565923690796,
-0.09756407141685486,
0.057168979197740555,
0.13213595747947693,
-0.07775978744029999,
-0.10543586313724518,
0.030804255977272987,
0.061378542333841324,
-0.11824812740087509,
-0.018426526337862015,
0.06146671995520592,
-0.03609609603881836,
0.12321824580430984,
-0.06493129581212997,
-0.024654239416122437,
-0.06268734484910965,
-0.21613334119319916,
-0.012186276726424694,
0.060470037162303925,
-0.0581531785428524,
-0.05299921706318855,
0.016964418813586235,
-0.09994935244321823,
-0.05373246222734451,
-0.04438440129160881,
0.10466877371072769,
-0.12081733345985413,
0.09511269629001617,
-0.07399821281433105,
0.07850921154022217,
-0.04907458648085594,
-0.007798522710800171,
0.05474703758955002,
-0.045448411256074905,
0.02600873075425625,
0.008778108283877373,
0.10997309535741806,
0.12784823775291443,
-0.06788123399019241,
0.02510213293135166,
0.182464137673378,
-0.04872164502739906,
-0.08010388910770416,
0.09915411472320557,
-0.03369482234120369,
0.02524225413799286,
0.040364306420087814,
-0.03443567082285881,
0.05988780036568642,
0.06276864558458328,
-0.0134646687656641,
0.12914632260799408,
-0.07090412825345993,
0.03447878360748291,
-0.03469827398657799,
-0.12733633816242218,
0.07849492132663727,
-0.005620931275188923,
-0.06570634990930557,
0.020940465852618217,
0.03384094685316086,
-0.11692710965871811,
-0.07748345285654068,
-0.031782254576683044,
0.03398911654949188,
0.05111107602715492,
-0.134842649102211,
0.09306954592466354,
-0.0954623818397522,
0.009689286351203918,
0.04386297985911369,
0.06732131540775299,
0.09981483966112137,
0.03162826597690582,
-0.056792717427015305,
-0.02964266762137413,
0.12901608645915985,
-0.11117629706859589,
-0.09579160809516907,
-0.021102072671055794,
-0.01216987706720829,
-0.050938382744789124,
-0.012520946562290192,
0.03998343273997307,
0.12173227220773697,
-0.03850080072879791,
-0.015013307332992554,
0.00819341279566288,
0.06908051669597626,
0.06394173204898834,
-0.0944388210773468,
-0.10363206267356873,
0.1162903755903244,
-0.11033277958631516,
-0.07270148396492004,
-0.06244286522269249,
-0.04558182507753372,
-0.0870594009757042,
0.1136840209364891,
0.08728260546922684,
-0.03736618533730507,
0.017236394807696342,
0.006487633101642132,
0.0286389347165823,
-0.054220907390117645,
-0.040998321026563644,
0.07785987854003906,
-0.025643564760684967,
0.03585285693407059,
-0.07848886400461197,
0.10953635722398758,
0.12168078869581223,
0.03695240616798401,
0.013822020962834358,
0.021629497408866882,
-0.004515059292316437,
-0.04808169603347778,
-0.04485142603516579,
-0.06679169833660126,
0.05414179340004921,
0.03976297378540039,
-0.03573904186487198,
0.08387603610754013,
0.10082807391881943,
0.03886732459068298,
0.04247671365737915,
0.06388896703720093,
0.09866319596767426,
-0.02304924838244915,
-0.0188471470028162,
-0.08735465258359909,
0.017064791172742844,
-0.026463251560926437,
-0.009849305264651775,
-0.09333407878875732,
0.1409386545419693,
-0.09741009771823883,
0.15632861852645874,
0.09970484673976898,
-0.017115622758865356,
-0.06011302024126053,
0.05059884116053581,
0.045031797140836716,
0.05247509852051735,
-0.07204504311084747,
0.0031674280762672424,
-0.09711867570877075,
0.10004185885190964,
-0.07420123368501663,
0.07067212462425232,
0.010879009030759335,
0.09550905972719193,
0.10506001114845276,
0.0415269136428833,
-0.09971228986978531,
-0.07330624759197235,
0.09863711893558502,
0.034007396548986435,
-0.12062203884124756,
-0.07258328050374985,
-0.004427079576998949,
-0.1286301463842392,
-0.037846773862838745,
0.13271015882492065,
0.0019082066137343645,
0.09502016752958298,
0.12357120215892792,
0.10563977062702179,
-0.060639671981334686,
-0.018456939607858658,
-0.055400483310222626,
-0.04586402326822281,
0.08954703062772751,
-0.13709796965122223,
0.001478318008594215,
0.05539317801594734,
-0.09405688941478729,
0.03395557776093483,
-0.1074473038315773,
0.15244364738464355,
-0.05711332708597183,
0.14140266180038452,
0.14611601829528809,
0.06481718271970749,
-0.08456740528345108,
-0.13032612204551697,
0.012327130883932114,
-0.0018981313332915306,
-0.09856152534484863,
0.0018442539731040597,
0.11949653178453445,
0.07340317219495773,
-0.12688004970550537,
-0.0012832710053771734,
-0.014807314611971378,
0.048279304057359695,
-0.12114346027374268,
0.0036871256306767464,
0.022663859650492668,
0.0044285329058766365,
0.042960505932569504,
-0.0527719184756279,
0.1647796928882599,
-0.014013653621077538,
-0.14791497588157654,
-0.09575261175632477,
-0.053670670837163925,
-0.14818879961967468,
-0.011111593805253506,
-0.01292949914932251,
0.020417874678969383,
-0.16230200231075287,
-0.06737334281206131,
0.12355080991983414,
0.04362484812736511,
0.0998586043715477,
-0.031652599573135376,
0.06362548470497131,
0.056152116507291794,
0.008198545314371586,
-0.049130745232105255,
-0.04732498899102211,
0.03129534423351288,
-0.03660857677459717,
-0.06383693963289261,
0.07993056625127792,
-0.005671453196555376,
0.09824305027723312,
0.1556706726551056,
-0.11831367015838623,
0.05134662613272667,
0.10021398961544037,
-0.0621756985783577,
-0.0690239816904068,
0.016216453164815903,
-0.0533338263630867,
0.1321154087781906,
-0.07187701761722565,
-0.10330073535442352,
-0.048383262008428574,
0.09906485676765442,
0.045710060745477676,
0.11440740525722504,
0.03237267583608627,
0.2580922842025757,
0.08605372905731201,
-0.010819971561431885,
-0.030363278463482857,
0.04390031844377518,
0.0053953793831169605,
-0.12997645139694214,
-0.06133608892560005,
-0.08214913308620453,
-0.09994765371084213,
0.07556159794330597,
0.14127801358699799,
0.035739507526159286,
0.04591256380081177,
0.09173077344894409,
-0.12630575895309448,
-0.027519097551703453,
0.002467587124556303,
-0.090275339782238,
-0.02751467563211918,
0.01185705978423357,
-0.06415708363056183,
-0.17256593704223633,
0.07482820749282837,
-0.02220367081463337,
0.07628943026065826,
-0.08131925761699677,
-0.04385243356227875,
-0.09903226047754288,
0.041741300374269485,
-0.02453506551682949,
-0.004562078975141048,
0.029554463922977448,
0.10430416464805603,
-0.11578524857759476,
-0.0974373072385788,
0.0695752277970314,
-0.10713258385658264,
-0.03504727780818939,
-0.12372226268053055,
-0.09986108541488647,
0.06225968524813652,
0.04170949384570122,
0.12929357588291168,
-0.001555840135551989,
-0.09832518547773361,
-0.024497898295521736,
-0.014008885249495506,
0.11249031126499176,
-0.048751771450042725,
-0.05263743922114372,
-0.09360892325639725,
0.07583450525999069,
-0.032123979181051254,
-0.055406346917152405,
0.006838839966803789,
-0.007690311409533024,
0.12049660086631775,
0.02081598900258541,
0.020647341385483742,
0.011186307296156883,
-0.02285291813313961,
-0.06956908106803894,
-0.09688924998044968,
0.1017037108540535,
0.1308271884918213,
-0.10848098248243332,
0.09348827600479126,
-0.04413287714123726,
-0.058168452233076096,
-0.050196241587400436,
-0.04352005943655968,
-0.10848647356033325,
-0.0885111391544342,
-0.011542125605046749,
-0.07374453544616699,
0.02799053117632866,
0.05315866693854332,
-0.044907741248607635,
0.08757301419973373,
0.04778100177645683,
-0.02458753064274788,
-0.01862386055290699,
0.03377271071076393,
0.08877614140510559,
-0.015283406712114811,
-0.1280653476715088,
-0.12031994014978409,
-0.021437054499983788,
0.11802046746015549,
0.07239806652069092,
-0.03735949844121933,
-0.05312151834368706,
0.03883776068687439,
-0.2073448896408081,
0.09784554690122604,
0.07695365697145462,
0.04304611310362816,
0.014674855396151543,
-0.13814854621887207,
0.023842860013246536,
-0.003690417855978012,
-0.0012043975293636322,
-0.10338686406612396,
-0.09760553389787674,
0.08785605430603027,
-0.05082685872912407,
-0.08078315854072571,
-0.01875838078558445,
-0.020456325262784958,
-0.05699113383889198,
0.03371566906571388,
0.057305388152599335,
-0.00742741022258997,
-0.0996519923210144,
-0.10587470978498459,
-0.040638916194438934,
-0.06790417432785034,
0.13509425520896912,
0.020966798067092896,
0.04652692750096321,
-0.0509738065302372,
0.13454669713974,
-0.09862366318702698,
0.03642827644944191,
-0.011210944503545761,
0.023511841893196106,
0.04820706322789192,
0.034641046077013016,
-0.02540641650557518,
0.08477061986923218,
0.05883698910474777,
0.060825806111097336,
0.08097120374441147,
0.071589894592762,
0.06501498818397522,
-0.0955859050154686,
0.05168244242668152,
-0.04444720968604088,
-0.11232242733240128,
0.13091276586055756,
0.05574105679988861,
0.05440864339470863,
0.020709004253149033,
0.08173926919698715,
0.10108084976673126,
-0.018844177946448326,
0.052401475608348846,
0.04254908114671707,
-0.039991918951272964,
-0.07429088652133942,
0.030013684183359146,
0.07528398185968399,
0.01387703139334917,
-0.13811282813549042,
0.04877449944615364,
-0.00037082654307596385,
0.012946595437824726,
-0.06497959792613983,
0.10893566161394119,
0.10534494370222092,
-0.023930100724101067,
0.053569525480270386,
0.01934242993593216,
-0.10338561236858368,
-0.08889122307300568,
0.03761438652873039,
0.04479267820715904,
-0.11682276427745819,
0.04384229704737663,
0.07253913581371307,
0.09984851628541946,
0.10980958491563797,
0.04973344877362251,
-0.08363009244203568,
0.03213459625840187,
0.11745376139879227,
-0.039374105632305145,
-0.026563020423054695,
-0.08706797659397125,
0.008502851240336895,
0.018770726397633553,
0.06893531233072281,
-0.12679798901081085,
0.04212561249732971,
0.05668126046657562,
-0.005642130970954895,
-0.03143022954463959,
0.09008333832025528,
-0.08815962076187134,
0.13673706352710724,
-0.10638979822397232,
0.008566245436668396,
0.11689548939466476,
0.01825058087706566,
-0.08529713749885559,
0.006781452801078558,
0.09417916089296341,
-0.04025864228606224,
-0.07047723233699799,
-0.08190274238586426,
-0.0962737649679184,
0.008711610920727253,
-0.030013885349035263,
0.1213584691286087,
0.07191018760204315,
0.08770164102315903,
-0.053033631294965744,
-0.01772022247314453,
-0.09945720434188843,
0.03560740128159523,
0.03419068083167076,
0.10795607417821884,
0.1255147010087967,
-0.04996779188513756,
0.01505361683666706,
0.05689702183008194,
-0.019642218947410583,
0.0328269861638546,
0.19074590504169464,
0.09061048924922943,
-0.06677468866109848,
-0.03631455823779106,
-0.024802926927804947,
0.03375625237822533,
-0.07121221721172333,
-0.10630305111408234,
-0.059992190450429916,
0.052869267761707306,
-0.057706914842128754,
0.06579388678073883,
0.07625509798526764,
-0.016527334228157997,
0.09353931993246078,
-0.03362998738884926,
0.12873312830924988,
0.04580816626548767,
0.052682675421237946,
0.1094333678483963,
0.04798654466867447,
0.05731622502207756,
0.048230499029159546,
0.06580960750579834,
-0.10856074094772339,
-0.017218107357621193,
-0.11395037174224854,
-0.0018429000629112124,
0.10257868468761444,
0.05223255977034569,
0.12114870548248291,
0.04299836978316307,
0.0895528644323349,
0.04664234071969986,
-0.07195593416690826,
0.10324396938085556,
0.04328957200050354,
-0.09191960841417313,
0.03484310209751129,
-0.0895005390048027,
-0.0307991374284029,
-0.058972783386707306,
0.011605102568864822,
-0.10310526937246323,
-0.1028057187795639,
-0.05697303265333176,
0.08739969879388809,
0.020321058109402657,
0.04285353794693947,
-0.00861321110278368,
-0.12952826917171478,
-0.06805549561977386,
0.03050658479332924,
0.02110976353287697,
0.06696629524230957,
-0.06035453453660011,
-0.008870020508766174,
0.05563767999410629,
-0.14745929837226868,
-0.09479202330112457,
-0.04206772893667221,
-0.07242116332054138,
-0.03256717324256897,
-0.03627318888902664,
0.06920026987791061,
-0.04448035731911659,
-0.03097434528172016,
-0.0861889198422432,
0.0917113646864891,
0.11330652981996536,
0.04530343785881996,
0.07102667540311813,
0.1100563034415245,
-0.02900591678917408,
0.09122185409069061,
-0.02004239335656166,
-0.01722278818488121,
-0.035934850573539734,
0.12141156941652298,
-0.04976947233080864,
0.15517883002758026,
0.1490880846977234,
0.05976220220327377,
0.0895586833357811,
-0.012914502993226051,
0.0411149263381958,
-0.03289078548550606,
0.007169468328356743,
-0.06264461576938629,
-0.030973777174949646,
-0.05013661831617355,
0.07554145157337189,
0.07651165127754211,
-0.039474502205848694,
0.016127444803714752,
0.13430553674697876,
0.14415904879570007,
0.1063997894525528,
-0.07250632345676422,
0.10334168374538422,
0.003895200090482831,
0.143326535820961,
0.06991533935070038,
-0.04463222995400429,
0.0027889320626854897,
0.0574009083211422,
0.01000497117638588,
-0.006430016364902258,
0.10843595862388611,
-0.0001517197088105604,
0.005315790884196758,
0.12490949034690857,
0.08220486342906952,
0.14823079109191895,
0.057330742478370667,
-0.17710357904434204,
0.07868986576795578,
-0.19090218842029572,
-0.005339596886187792,
-0.0825086161494255,
-0.10514333844184875,
-0.013506639748811722,
-0.026427488774061203,
0.029251381754875183,
0.0013053512666374445,
-0.2361503541469574,
-0.09852035343647003,
0.0697861984372139,
-0.05447124317288399,
-0.0509626604616642,
-0.10652729868888855,
0.09143826365470886,
0.0004819838795810938,
-0.17452029883861542,
0.13002653419971466,
0.049402810633182526,
-0.08542776852846146,
0.003908646292984486,
0.04021050035953522,
-0.0753798857331276,
-0.0012196426978334785,
-0.0023627826012670994,
0.043226879090070724,
-0.05084426701068878,
-0.0016540654469281435,
-0.10493797808885574,
0.018609466031193733,
-0.10646117478609085,
0.11689301580190659,
0.13568741083145142,
0.04419899731874466,
0.059829674661159515,
0.03174278140068054,
-0.053503237664699554,
-0.0457761287689209,
0.07984060794115067,
0.06262782961130142,
-0.1538485288619995,
0.012518087401986122,
-0.04025004431605339,
0.0018564254278317094,
-0.0562988743185997,
0.0786055475473404,
-0.11296597868204117,
-0.004962252918630838,
0.01574571430683136,
0.059553444385528564,
0.07036533951759338,
-0.021028609946370125,
0.008427933789789677,
-0.0337001234292984,
-0.06279073655605316,
0.1095162108540535,
-0.06313812732696533,
0.04453181102871895,
-0.05026868358254433,
0.055839214473962784,
-0.05999033898115158,
0.026501456275582314,
0.02030564844608307,
-0.03700810670852661,
0.08053826540708542,
-0.04868265613913536,
-0.007179783191531897,
-0.13604053854942322,
0.03318126127123833,
0.09725163131952286,
0.03231409564614296,
-0.014304451644420624,
-0.015261337161064148,
0.09681641310453415,
-0.04744349420070648,
0.05818283557891846,
-0.029802976176142693,
-0.020718982443213463,
0.037301745265722275,
0.01487073302268982,
-0.07420864701271057,
0.09518907964229584,
-0.04911172389984131,
-0.06925459951162338,
0.06338956952095032,
0.15732041001319885,
-0.008689275942742825,
0.12574289739131927,
-0.03072858229279518,
-0.021306170150637627,
0.06590641289949417,
0.09315794706344604,
0.0024218352045863867,
0.019684262573719025,
-0.0065743341110646725,
0.10828953236341476,
0.08007323741912842,
0.09456276148557663,
-0.016261089593172073,
0.043817467987537384,
-0.020425979048013687,
-0.05483659356832504,
-0.05864247307181358,
0.002085033105686307,
0.013995409943163395,
0.04413965716958046,
0.059773027896881104,
0.0764930471777916,
0.09859473258256912,
-0.0473032109439373,
0.008966309018433094,
0.00540314381942153,
0.04618358612060547,
0.0250316821038723,
-0.0054931906051933765,
-0.14781826734542847,
-0.03612591326236725,
-0.18523836135864258,
0.08025772869586945,
0.07764960825443268,
-0.0950014740228653,
0.07107218354940414,
-0.06184181198477745,
-0.06182681396603584,
0.023118987679481506,
-0.058728400617837906,
-0.07557404786348343,
0.004835028201341629,
-0.08278342336416245,
0.09914843738079071,
-0.002769692102447152,
-0.07422501593828201,
-0.0976560041308403,
-0.05261295288801193,
0.1035483330488205,
0.0882829874753952,
-0.08393297344446182,
-0.0070554595440626144,
-0.05411067605018616,
-0.12300478667020798,
0.061453983187675476,
0.03621093928813934,
-0.007838037796318531,
0.028072601184248924,
-0.060607556253671646,
-0.07825224101543427,
-0.1014750599861145,
0.024374932050704956,
-0.03170881047844887,
-0.1315038800239563,
0.13942983746528625,
-0.0884997546672821,
0.06971883028745651,
0.12082194536924362,
0.051076870411634445,
-0.03192804381251335,
0.05793886259198189,
0.0036325566470623016,
0.07026579231023788,
-0.042718298733234406,
-0.013006744906306267,
0.032774459570646286,
0.04020306468009949,
-0.03694476932287216,
-0.015373973175883293,
0.16164618730545044,
-0.050926532596349716,
0.029653456062078476,
-0.006491932552307844,
0.023334473371505737,
-0.08150248974561691,
-0.07621884346008301,
-0.022383756935596466,
0.07167962193489075,
-0.05735814943909645,
-0.06279422342777252,
-0.07898559421300888,
0.07904552668333054,
0.018409868702292442,
-0.05877530202269554,
-0.060516852885484695,
0.06990120559930801,
-0.0702514573931694,
-0.007907677441835403,
0.024352317675948143,
0.08494765311479568,
0.03371267393231392,
-0.03051445633172989,
-0.014579862356185913,
0.081905797123909,
0.08786315470933914,
-0.025585602968931198,
0.05708109587430954,
-0.06488042324781418,
0.06618130207061768,
0.020497873425483704,
-0.08910038322210312,
0.06786370277404785,
0.15274104475975037,
-0.05901782214641571,
0.10269731283187866,
-0.061450354754924774,
0.11904661357402802,
0.06323928385972977,
-0.15977947413921356,
0.08787880837917328,
-0.11853038519620895,
-0.07755348831415176,
-0.1210227981209755,
-0.006834177300333977,
-0.03747238963842392,
0.11652882397174835,
-0.0721818134188652,
0.034863151609897614,
0.020418258383870125,
-0.11202380806207657,
0.12421055138111115,
0.07112853974103928,
0.0816340297460556,
0.12309318780899048,
-0.10142628848552704,
-0.025149542838335037,
0.07461478561162949,
-0.01804645173251629,
-0.0017136482056230307,
-0.09808331727981567,
-0.01587887480854988,
-0.07426318526268005,
0.06802976131439209,
-0.0618136003613472,
0.12179113924503326,
0.08307535201311111,
-0.0852181687951088,
0.05362744629383087,
0.03544172644615173,
-0.07955770939588547,
0.019931888207793236,
-0.09979186952114105,
-0.026163948699831963,
0.03711804375052452,
-0.021114692091941833,
-0.12069796025753021,
-0.08495768904685974,
0.04751204699277878,
-0.05255969986319542,
0.05011966824531555,
-0.004903177730739117,
0.10714107751846313,
0.06947951763868332,
0.06395614147186279,
-0.03886470943689346,
0.04248984158039093,
0.12376474589109421,
0.054279785603284836,
0.13573972880840302,
0.14137841761112213,
0.05587691068649292,
-0.12454184144735336,
-0.027617663145065308,
-0.1362418234348297,
-0.00717542739585042,
0.08862902969121933,
0.027915744110941887,
0.11115311086177826,
0.055605240166187286,
0.10937479138374329,
-0.12175906449556351,
0.039087869226932526,
0.10220874100923538,
0.07723652571439743,
0.07060204446315765,
0.13147267699241638,
0.04652100056409836,
0.021019598469138145,
-0.054790329188108444,
-0.003259534016251564,
-0.026358453556895256,
0.005625362042337656,
0.09868359565734863,
-0.005626273807138205,
0.08435657620429993,
-0.08032405376434326,
0.028377516195178032,
-0.018512776121497154,
-0.03105759434401989,
-0.03812116011977196,
-0.036668770015239716,
0.039759039878845215,
-0.11243821680545807,
0.045143935829401016,
0.14149083197116852,
0.04309331625699997,
-0.08462762832641602,
0.0315311960875988,
0.07121579349040985,
0.04061942547559738,
-0.08811015635728836,
0.0068964785896241665,
0.04202049970626831,
0.010964257642626762,
-0.1473322957754135,
0.041598785668611526,
-0.13226400315761566,
-0.03385825455188751,
0.08148075640201569,
0.035595476627349854,
0.051969971507787704,
-0.054362453520298004,
-0.0733671560883522,
0.035096362233161926,
0.06112208589911461,
-0.026632580906152725,
0.026047687977552414,
-0.03860791027545929,
0.12117646634578705,
0.018349265679717064,
-0.18994760513305664,
-0.042063917964696884,
-0.06962015479803085,
-0.02760562300682068,
-0.09330281615257263,
-0.08638633787631989,
0.018763763830065727,
-0.1061285138130188,
0.06338685005903244,
-0.013182398863136768,
0.01605154201388359,
-0.037462636828422546,
0.05863914638757706,
0.010612688958644867,
-0.10001762956380844,
0.052357666194438934,
0.062351178377866745,
-0.019062954932451248,
0.1599086970090866,
-0.011776392348110676,
0.03274428844451904,
-0.012825416401028633,
0.11043109744787216,
-0.09978378564119339,
-0.04809291288256645,
0.022727366536855698,
-0.01642366498708725,
-0.10572633892297745,
0.0377599261701107,
0.05476905778050423,
-0.05595644935965538,
0.19158664345741272,
0.07300551235675812,
0.03190889582037926,
0.08293969929218292,
-0.05445633828639984,
-0.09617824107408524,
-0.062187664210796356,
0.13969559967517853,
0.051454685628414154,
-0.07612480223178864,
-0.06347595155239105,
-0.018811581656336784,
-0.022158533334732056,
0.03224074840545654,
0.10724641382694244,
0.07861831039190292,
0.028007352724671364,
-0.03733842074871063,
-0.08718609809875488,
0.052301954478025436,
-0.0962153971195221,
-0.13057832419872284,
0.07982760667800903,
-0.06541173160076141,
0.07119186222553253,
-0.04832419380545616,
0.008000035770237446,
0.11458256840705872,
0.04155043140053749,
0.0025282197166234255,
-0.017792586237192154,
-0.08772149682044983,
-0.10189996659755707,
-0.0066111041232943535,
-0.07913423329591751,
0.1789352297782898,
-0.0784979835152626,
-0.15106187760829926,
-0.12232787907123566,
-0.11525439471006393,
0.0031509632244706154,
0.07375635206699371,
0.06378398835659027,
-0.09763098508119583,
-0.03880608081817627,
-0.01973586715757847,
0.02820040099322796,
-0.09252110868692398,
0.06859622150659561,
-0.18324357271194458,
0.02028612047433853,
-0.034125346690416336,
-0.03839164599776268,
-0.04132518544793129,
0.06206834688782692,
-0.013146834447979927,
-0.09671323001384735,
-0.0964587926864624,
-0.016585128381848335,
0.008893735706806183,
0.08342435956001282,
0.017850784584879875,
0.025526640936732292,
-0.05791941657662392,
-0.014424547553062439,
0.008110899478197098,
0.10127332806587219,
-0.0480429083108902,
0.1123552992939949,
0.03931163251399994,
0.049676209688186646,
-0.018130630254745483,
-0.06796801090240479,
-0.02471143566071987,
0.009360800497233868,
-0.03188701719045639,
-0.04472433030605316,
-0.06950297206640244,
0.013952608220279217,
-0.04895404726266861,
0.09390934556722641,
0.013211729936301708,
0.09061742573976517,
0.018516823649406433,
0.03867413103580475,
-0.018472030758857727,
0.10971337556838989,
-0.0683378353714943,
0.03326309844851494,
-0.12884384393692017,
0.03738190606236458,
-0.04064716398715973,
-0.06936652213335037,
-0.06899305433034897,
-0.09290158748626709,
0.07794665545225143,
-0.05310142785310745,
0.08272897452116013,
-0.09456580877304077,
-0.023148812353610992,
0.12081572413444519,
0.0068320948630571365,
0.024630926549434662,
0.0033581394236534834,
-0.004614460747689009,
0.14388878643512726,
0.01736578159034252,
-0.14699770510196686,
0.049881547689437866,
0.17629092931747437,
-0.08323999494314194,
0.01441975962370634,
-0.04872780293226242,
0.10553620010614395,
-0.10958407819271088,
0.053897056728601456,
0.18221352994441986,
0.2280135303735733,
0.059429656714200974,
-0.03993798419833183,
-0.05577605962753296,
0.13529257476329803,
-0.12428440153598785,
-0.01944565773010254,
0.10448428243398666,
-0.01273204293102026,
-0.11088214814662933,
-0.043153852224349976,
0.13075873255729675,
0.17596426606178284,
0.0434882752597332,
-0.05815146863460541,
-0.09011401981115341,
0.013537413440644741,
0.02661045454442501,
-0.06453833729028702,
-0.009775638580322266,
0.10833973437547684,
0.07863003760576248,
-0.061599090695381165,
-0.05440850928425789,
0.15137118101119995,
-0.03500544652342796,
-0.10986098647117615,
-0.035698600113391876,
-0.032133620232343674,
-0.11055921018123627,
-0.033955272287130356,
0.10636453330516815,
0.026209045201539993,
-0.02152380533516407,
-0.06254920363426208,
0.03301863372325897,
0.06699942797422409,
0.06596344709396362,
-0.02847026102244854,
-0.007413030602037907,
-0.10745769739151001,
0.01975814625620842,
-0.039436016231775284,
0.12944436073303223,
0.03475360944867134,
0.06880579888820648,
0.03943149372935295,
-0.12321517616510391,
0.10115022212266922,
-0.08428430557250977,
-0.07093855738639832,
-0.08162324130535126,
-0.07039418071508408,
-0.04002440348267555,
0.09884282946586609,
0.07492655515670776,
-0.029217666015028954,
-0.009236948564648628,
0.11431999504566193,
-0.07206007838249207,
0.009135725907981396,
0.046608589589595795,
-0.04685477539896965,
0.0044979192316532135,
-0.1806761622428894,
0.07023071497678757,
0.05537392944097519,
-0.07782567292451859,
-0.07879164814949036,
0.04835685342550278,
0.0764537826180458,
0.003960613626986742,
0.010262418538331985,
-0.03321840241551399,
-0.1536628156900406,
-0.17483533918857574,
-0.21033528447151184,
0.06941574066877365,
0.16871024668216705,
0.016819005832076073,
-0.1541537493467331,
-0.04854441434144974,
-0.16993634402751923,
-0.005393636412918568,
-0.19875763356685638,
0.06693512201309204,
0.09464854747056961,
-0.005342576652765274,
0.2164565771818161,
-0.18148526549339294,
0.06838542968034744,
-0.059112273156642914,
-0.19111526012420654,
0.04448152706027031,
-0.053330205380916595,
0.06906572729349136,
0.051020700484514236,
-0.03755969554185867,
0.013062638230621815,
-0.0059882826171815395,
-0.005213494878262281,
-0.009657464921474457,
-0.04867876321077347,
-0.07199561595916748,
-0.10443753004074097,
-0.09164348244667053,
0.09738373011350632,
-0.023457663133740425,
-0.05796929821372032,
0.07776850461959839,
-0.15516415238380432,
-0.006474859546869993,
0.12896937131881714,
-0.12770822644233704,
0.07016222923994064,
-0.16049127280712128,
-0.08332706987857819,
-0.07976499199867249,
-0.06893818080425262,
0.0065027098171412945,
0.07440271973609924,
-0.03321779891848564,
0.0015539531596004963,
0.03637704625725746,
0.1068500429391861,
-0.05440184101462364,
0.030335890129208565,
-0.04631694406270981,
-0.09765755385160446,
-0.011275389231741428,
0.014421623200178146,
-0.017842520028352737,
0.08166225254535675,
0.12722891569137573,
-0.06204046681523323,
0.09310406446456909,
-0.031152591109275818,
0.05218349024653435,
0.0174412801861763,
0.04663492739200592,
-0.0865684524178505,
-0.09123920649290085,
-0.08547230064868927,
0.054872289299964905,
0.03465447202324867,
0.05254484713077545,
0.065494604408741,
0.16352124512195587,
0.06033099442720413,
-0.01150934025645256,
-0.0032983911223709583,
-0.1139473021030426,
0.027954962104558945,
-0.1754014492034912,
-0.0014883963158354163,
0.028518764302134514,
0.00597440404817462,
-0.0732954815030098,
0.14675086736679077,
0.049910638481378555,
-0.017587929964065552,
-0.04382948577404022,
-0.08523540943861008,
0.07723762094974518,
-0.09365290403366089,
0.011323732323944569,
-0.01890014111995697,
0.03378472104668617,
-0.056088946759700775,
-0.15495720505714417,
-0.13347285985946655,
-0.027878081426024437,
-0.21108371019363403,
-0.011343039572238922,
-0.022464321926236153,
-0.06866800785064697,
0.1271439492702484,
-0.18363544344902039,
-0.050366323441267014,
-0.09110471606254578,
-0.14336813986301422,
0.11303818970918655,
0.042259953916072845,
0.037358976900577545,
0.1837373673915863,
-0.09566532075405121,
0.06969375163316727,
-0.09383954107761383,
0.0602262057363987,
-0.022772831842303276,
0.1726827621459961,
0.07691597193479538,
0.09702767431735992,
-0.09724922478199005,
-0.07427369803190231,
-0.061689507216215134,
0.01827434077858925,
0.0869939997792244,
0.03445874899625778,
-0.03220832347869873,
0.08959192037582397,
0.09070389717817307,
-0.09677693992853165,
-0.10689860582351685,
0.03819132223725319,
0.05780690908432007,
0.01973460428416729,
0.09924475848674774,
0.05181879550218582,
-0.052374280989170074,
0.015558123588562012,
-0.04154044762253761,
-0.015149544924497604,
-0.005296662915498018,
0.03313906863331795,
0.07383759319782257,
0.01904565654695034,
0.10109008103609085,
-0.05027938261628151,
0.12398409098386765,
0.003817576915025711,
0.05389201268553734,
-0.07087943702936172,
-0.035118430852890015,
0.11121944338083267,
0.11380329728126526,
-0.06770604103803635,
-0.06860955059528351,
0.016962161287665367,
-0.04764295369386673,
-0.09926146268844604,
0.1225152313709259,
-0.037254828959703445,
-0.11544886231422424,
0.04965978488326073,
-0.029451172798871994,
-0.019748203456401825,
0.008116314187645912,
0.0729687511920929,
0.05989568307995796,
-0.03161412850022316,
-0.0663282498717308,
0.02247391641139984,
-0.06278865039348602,
0.07896438241004944,
-0.09829307347536087,
-0.022459737956523895,
-0.08057671040296555,
-0.1717100888490677,
-0.07208237797021866,
-0.02983296848833561,
0.07757280766963959,
-0.07988280802965164,
-0.0778668150305748,
0.0025420074816793203,
0.033361002802848816,
-0.002681454410776496,
-0.25612249970436096,
-0.07472536712884903,
-0.049844853579998016,
-0.09669657796621323,
0.14315199851989746,
-0.042339395731687546,
-0.18247197568416595,
-0.06034955009818077,
0.0537550151348114,
-0.06893231719732285,
-0.13504615426063538,
0.003560135141015053,
-0.10031440109014511,
0.17926399409770966,
0.08301068097352982,
0.04308352246880531,
-0.1065950095653534,
0.04196937754750252,
0.010407369583845139,
-0.10182342678308487,
0.04119157791137695,
0.009821695275604725,
0.03318236023187637,
-0.06163778528571129,
0.08642074465751648,
0.056831613183021545,
0.0933084487915039,
0.08267028629779816,
-0.06940583884716034,
0.04807368293404579,
0.039179958403110504,
0.15778855979442596,
-0.08890920877456665,
0.0077333697117865086,
-0.08242859691381454,
-0.12564516067504883,
0.09768234938383102,
0.10453087836503983,
-0.04975491762161255,
-0.005022705998271704,
-0.0014247881481423974,
-0.05383971333503723,
0.12035080790519714,
-0.00908342469483614,
0.10173136740922928,
0.05417301505804062,
-0.06007545813918114,
0.006834899075329304,
0.09721078723669052,
-0.01578124612569809,
0.08342648297548294,
0.08271951973438263,
0.026558447629213333,
-0.10080654174089432,
-0.08770180493593216,
0.07564488053321838,
-0.09195395559072495,
0.039632007479667664,
-0.026889244094491005,
0.041212134063243866,
-0.08378075808286667,
0.04563550651073456,
-0.027544166892766953,
0.061326511204242706,
0.0013685952872037888,
-0.058346569538116455,
0.0007854625582695007,
0.034146178513765335,
-0.031639616936445236,
0.022262394428253174,
0.04247117042541504,
-0.10338494181632996,
0.061300475150346756,
-0.08088266104459763,
-0.06761546432971954,
-0.16097575426101685,
-0.09445840865373611,
-0.0215783528983593,
-0.032128456979990005,
-0.11257058382034302,
-0.22531671822071075,
-0.09040837734937668,
0.04317532479763031,
-0.01641213893890381,
0.0470525324344635,
-0.1649746298789978,
0.08174221962690353,
0.07572418451309204,
0.03335636481642723,
0.006936584133654833,
0.04503406211733818,
0.024755781516432762,
0.05356797203421593,
-0.01709609664976597,
0.17837941646575928,
-0.09888344258069992,
-0.2598074674606323,
-0.09071677923202515,
-0.08172272145748138,
-0.07854937762022018,
0.07342182099819183,
-0.07324761152267456,
-0.1218138188123703,
0.029664205387234688,
-0.06772211194038391,
0.05582303926348686,
0.14270929992198944,
-0.02522197738289833,
-0.10473501682281494,
-0.05275045707821846,
0.06903524696826935,
-0.12472262978553772,
-0.013700801879167557,
0.019707467406988144,
0.001548617728985846,
-0.1305767297744751,
-0.057137906551361084,
-0.01865127682685852,
-0.05166510492563248,
0.03678111359477043,
0.013279731385409832,
0.017939863726496696,
0.037003014236688614,
-0.11090590804815292,
-0.09558344632387161,
-0.018027465790510178,
0.07753273844718933,
-0.07524555921554565,
0.06387457996606827,
0.0872201919555664,
0.02680988609790802,
0.04579012468457222,
-0.07528046518564224,
-0.037176281213760376,
0.07256091386079788,
0.010392238385975361,
0.024414241313934326,
-0.039362043142318726,
0.04995780438184738,
-0.09802104532718658,
-0.07906799763441086,
-0.009673782624304295,
0.08969775587320328,
0.11152343451976776,
-0.14291124045848846,
0.14711594581604004,
0.0696779265999794,
0.12626191973686218,
0.002563039306551218,
-0.06962557882070541,
0.07611159235239029,
-0.011278169229626656,
-0.10382667183876038,
0.08576536178588867,
-0.027337459847331047,
-0.005554955452680588,
0.15404745936393738,
0.10571994632482529,
-0.05103105306625366,
-0.0004266646574251354,
-0.008626190945506096,
0.09387224167585373,
0.023063749074935913,
0.042601797729730606,
0.013081035576760769,
0.03586757555603981,
0.0428590402007103,
-0.11224757134914398,
-0.03710801526904106,
-0.05977015942335129,
0.07985474914312363,
0.13037343323230743,
0.1424233466386795,
0.040990788489580154,
-0.011850735172629356,
0.09654811769723892,
0.027174776419997215,
0.11941444128751755,
-0.10839258879423141,
0.03209890052676201,
0.07020505517721176,
-0.06578056514263153,
-0.037725385278463364,
-0.048902496695518494,
-0.09344857186079025,
-0.05136317014694214,
-0.038129739463329315,
-0.005629172548651695,
-0.008133672177791595,
0.010749763809144497,
0.12484120577573776,
0.07138129323720932,
-0.0017264354974031448,
0.014044081792235374,
0.07099302858114243,
-0.00958119798451662,
0.0380796454846859,
-0.020670879632234573,
0.052410610020160675,
-0.0036071601789444685,
0.08697023242712021,
-0.09593521058559418,
-0.09437315165996552,
-0.008139020763337612,
0.13792727887630463,
0.08462288975715637,
0.009245507419109344,
0.10572272539138794,
0.0836581438779831,
-0.03302175551652908,
-0.076275534927845,
0.04008105397224426,
-0.003082109149545431,
0.11581671983003616,
-0.09810317307710648,
-0.007392036262899637,
0.036102406680583954,
0.11102883517742157,
0.08912009000778198,
-0.08334201574325562,
0.14844219386577606,
0.036528363823890686,
0.011446020565927029,
-0.03500574082136154,
-0.042163752019405365,
-0.0385061576962471,
0.004554299637675285,
-0.051218874752521515,
0.08672580122947693,
0.13861162960529327,
0.11871561408042908,
0.21219976246356964,
0.01637357659637928,
-0.026825327426195145,
0.024302354082465172,
0.03499938175082207,
0.09247112274169922,
0.08961556851863861,
-0.06986229866743088,
-0.12050606310367584,
0.15343435108661652,
-0.018695306032896042,
0.12476271390914917,
-0.015720456838607788,
0.11825507879257202,
0.08651967346668243,
-0.012461643666028976,
-0.006036629434674978,
-0.05260206386446953,
-0.012139345519244671,
0.034096915274858475,
-0.04256702587008476,
0.10118094086647034,
0.039773520082235336,
-0.10541404783725739,
-0.05393623188138008,
-0.0026472299359738827,
-0.09982461482286453,
0.08080333471298218,
0.07271578907966614,
0.03255072981119156,
0.04629151150584221,
-0.08439160138368607,
0.07396653294563293,
-0.07168038189411163,
0.0225239135324955,
-0.005620624870061874,
-0.0400066114962101,
0.03452581912279129,
0.0239961389452219,
0.07457834482192993,
-0.12596578896045685,
0.10759658366441727,
-0.005324283614754677,
0.09111173450946808,
0.07630852609872818,
-0.0833578109741211,
-0.037672579288482666,
-0.13859640061855316,
-0.005466932896524668,
-0.04323194921016693,
0.014942679554224014,
-0.14805635809898376,
0.026747247204184532,
-0.006759489420801401,
0.008349343203008175,
-0.08847111463546753,
-0.05295461043715477,
0.07545721530914307,
-0.09029447287321091,
0.07712976634502411,
0.07364343851804733,
-0.018603913486003876,
0.029328880831599236,
0.07530444860458374,
-0.06659571826457977,
0.018744345754384995,
0.020240161567926407,
0.06392394751310349,
-0.019884083420038223,
-0.11001202464103699,
0.08932476490736008,
-0.13055117428302765,
-0.032680951058864594,
0.01788787543773651,
-0.004495653323829174,
0.10673744976520538,
-0.10436570644378662,
0.11107104271650314,
0.010944303125143051,
-0.050370682030916214,
-0.035739243030548096,
0.05249810591340065,
0.020585305988788605,
0.024088766425848007,
-0.01741657219827175,
0.04884877800941467,
0.07453842461109161,
-0.19265128672122955,
-0.06144602596759796,
0.15203344821929932,
-0.11549605429172516,
-0.07816512137651443,
0.09077950567007065,
0.0026947874575853348,
0.07052356749773026,
-0.00017569353803992271,
0.06601426005363464,
0.02789037860929966,
-0.1145273894071579,
-0.15136538445949554,
-0.04595693200826645,
0.05614903196692467,
0.10432859510183334,
-0.1007830947637558,
-0.09278558194637299,
0.16702544689178467,
-0.043642934411764145,
0.1439165323972702,
0.07729671895503998,
0.05902475491166115,
-0.0680701807141304,
-0.09409880638122559,
0.055953480303287506,
-0.018055832013487816,
-0.14221587777137756,
-0.0036080668214708567,
-0.05770605430006981,
0.07099030166864395,
-0.026558781042695045,
-0.11367084830999374,
-0.06435684114694595,
0.10803606361150742,
0.09740196168422699,
0.08682634681463242,
-0.06239330396056175,
-0.07473883032798767,
0.08424469828605652,
-0.02093154564499855,
-0.0798395425081253,
0.11431775242090225,
-0.05344213545322418,
0.11004718393087387,
0.052043069154024124,
0.007249300833791494,
-0.14051590859889984,
-0.09682879596948624,
0.0343538373708725,
0.14352835714817047,
-0.04947037994861603,
0.047432273626327515,
0.04008438065648079,
0.06443861871957779,
0.004743803292512894,
-1.8097693100571632e-05,
-0.06563982367515564,
0.023011082783341408,
0.06697922945022583,
0.07393516600131989,
-0.03744952380657196,
-0.03534037247300148,
-0.08146975189447403,
-0.138872891664505,
0.04240443930029869,
0.08295638859272003,
0.04324756935238838,
0.03049677610397339,
-0.01828612945973873,
-0.012371640652418137,
-0.10794202238321304,
-0.06011712923645973,
-0.03673185780644417,
0.03912351652979851,
0.07292792201042175,
-0.01388437207788229,
0.015805212780833244,
0.020833952352404594,
0.09267327189445496,
-0.10549195110797882,
-0.08672582358121872,
0.08756234496831894,
-0.08826658129692078,
-0.016552364453673363,
-0.0073413606733083725,
-0.12416666746139526,
0.059384070336818695,
0.08840097486972809,
0.020637894049286842,
0.032995905727148056,
0.008432534523308277,
0.07233275473117828,
-0.04244030639529228,
-0.05296909064054489,
-0.019812971353530884,
0.07891865074634552,
0.0223696231842041,
0.01347113773226738,
-0.0252956822514534,
0.056575872004032135,
0.06069352850317955,
-0.0577494315803051,
-0.005720500368624926,
0.05705292895436287,
-0.06835588812828064,
0.02163565531373024,
-0.05960741266608238,
-0.06815958768129349,
0.06981074810028076,
0.06511898338794708,
-0.02527538686990738,
-0.14475902915000916,
-0.17114561796188354,
0.11797647178173065,
-0.058458808809518814,
-0.012747975066304207,
0.10560677200555801,
-0.08728489279747009,
-0.026657884940505028,
-0.01074064988642931,
0.0233604796230793,
0.014388692565262318,
0.09159974008798599,
0.036222249269485474,
-0.07774215936660767,
-0.012535758316516876,
0.09715742617845535,
-0.016553647816181183,
0.010631699115037918,
0.075201116502285,
-0.06652664393186569,
0.06381584703922272,
-0.03549840301275253,
0.12828627228736877,
-0.0964203029870987,
0.049376677721738815,
0.08642825484275818,
-0.07824006676673889,
-0.031550195068120956,
0.06298719346523285,
-0.022185878828167915,
-0.02552019990980625,
0.10289423912763596,
0.009087699465453625,
0.05926820635795593,
0.089913010597229,
-0.0657925233244896,
-0.055608250200748444,
0.009333650581538677,
0.02665257826447487,
-0.016779886558651924,
0.06394786387681961,
0.08083714544773102,
-0.020171934738755226,
-0.037408966571092606,
-0.04137212410569191,
0.1304592788219452,
-0.06254097074270248,
-0.04447944834828377,
-0.05452721565961838,
-0.18189038336277008,
0.07891247421503067,
0.14689259231090546,
-0.1391202211380005,
-0.07591471821069717,
-0.025609906762838364,
0.15905137360095978,
-0.06656841188669205,
-0.005114389583468437,
0.007055446971207857,
0.13787509500980377,
0.039831582456827164,
-0.033057816326618195,
0.035133976489305496,
-0.030959105119109154,
-0.12510935962200165,
-0.11434362828731537,
-0.02874441258609295,
-0.03458622843027115,
0.015585743822157383,
-0.05085811764001846,
-0.005540409591048956,
0.0033512990921735764,
-0.10144492983818054,
-0.08547718077898026,
-0.07377735525369644,
0.01261093933135271,
-0.12080381065607071,
0.05234922096133232,
-0.041819531470537186,
0.023139964789152145,
0.04209412261843681,
0.014577319845557213,
0.11574462801218033,
-0.0743698999285698,
0.10027233511209488,
0.10941047966480255,
-0.046484023332595825,
-0.0351455919444561,
-0.03907649964094162,
-0.03906632959842682,
-0.11476819962263107,
-0.13516822457313538,
0.003375008702278137,
0.025878872722387314,
-0.10072256624698639,
0.05572434514760971,
-0.0039253802970051765,
0.031001027673482895,
-0.009222912602126598,
-0.10205499827861786,
0.11514262109994888,
-0.07363703101873398,
0.018646877259016037,
0.01234723161906004,
-0.13100816309452057,
-0.04903590679168701,
-0.021181181073188782,
-0.07140648365020752,
0.03174873813986778,
-0.08779042214155197,
-0.12405349314212799,
-0.0722445696592331,
-0.12112119048833847,
-0.08165290951728821,
-0.1240403950214386,
-0.07568646222352982,
0.0032308651134371758,
0.041815273463726044,
0.05085727199912071,
-0.0005863255355507135,
-0.03198939561843872,
0.01384415291249752,
-0.059129249304533005,
-0.12040635943412781,
-0.02927432209253311,
0.12507407367229462,
-0.04250481724739075,
0.16522572934627533,
-0.1576334834098816,
0.09138990938663483,
0.13986879587173462,
-0.022300811484456062,
-0.03178813308477402,
0.12181393057107925,
0.12633466720581055,
0.07455752044916153,
0.12052429467439651,
0.012980436906218529,
-0.036775313317775726,
-0.037702322006225586,
-1.680347486399114e-05,
0.053575556725263596,
0.008869159035384655,
0.04221104085445404,
-0.027085445821285248,
-0.10978847742080688,
0.053423136472702026,
-0.02699994668364525,
-0.0031297970563173294,
0.13863405585289001,
0.04110605642199516,
0.028131434693932533,
0.09975691884756088,
-0.0352104976773262,
-0.04096071794629097,
-0.097990982234478,
-0.05002729594707489,
0.03985419124364853,
-0.03537784889340401,
0.06039055436849594,
0.13078564405441284,
0.03758725896477699,
0.06705719977617264,
-0.02725129947066307,
0.01578250341117382,
0.1247849315404892,
-0.029403137043118477,
0.0721176415681839,
0.09087903797626495,
-0.0010943437227979302,
0.04197783023118973,
-0.04934782534837723,
0.07870818674564362,
-0.11100345104932785,
0.06919374316930771,
-0.04086805880069733,
0.17791734635829926,
-0.09077993035316467,
-0.022914668545126915,
-0.05438314378261566,
0.11975781619548798,
-0.05124835669994354,
0.13661231100559235,
-0.05900181084871292,
-0.013807971961796284,
-0.12041198462247849,
0.1205618754029274,
-0.03251490369439125,
0.021530233323574066,
0.06948824971914291,
-0.10312989354133606,
0.08536466211080551,
0.11301266402006149,
-0.1335492730140686,
0.06501645594835281,
0.05604422464966774,
-0.016775598749518394,
-0.05871807411313057,
-0.03417765349149704,
0.04123128205537796,
0.07880843430757523,
-0.09583991020917892,
-0.009771470911800861,
0.10504598170518875,
0.08800727128982544,
0.09051427990198135,
0.00682554068043828,
-0.07062961906194687,
-0.13232360780239105,
-0.025465229526162148,
0.0777052491903305,
0.018981095403432846,
-0.11334112286567688,
0.034001391381025314,
-0.026749450713396072,
0.02294871397316456,
-0.06165720149874687,
-0.03920455649495125,
-0.05249093472957611,
-0.03449422866106033,
-0.0856761485338211,
0.006460919510573149,
0.10195285826921463,
-0.036247871816158295,
-0.0760137289762497,
0.06873595714569092,
0.15237697958946228,
0.04911095276474953,
-0.03227609023451805,
0.055349983274936676,
-0.05646219104528427,
0.013122547417879105,
0.028398968279361725,
0.1290648877620697,
-0.11411646753549576,
-0.005613353569060564,
-0.0012353662168607116,
-0.04104383662343025,
0.06640100479125977,
0.03702926263213158,
0.004338195081800222,
-0.05911354348063469,
-0.07492239773273468,
-0.061637379229068756,
-0.03638436645269394,
0.07862589508295059,
0.07635468989610672,
-0.07095571607351303,
-0.017125679180026054,
-0.08474405854940414,
0.06130713224411011,
-0.02889019250869751,
-0.05098617821931839,
0.1094980239868164,
0.057957712560892105,
-0.03848535567522049,
-0.008865215815603733,
-0.023616861552000046,
-0.04195834696292877,
0.11918588727712631,
-0.05888766795396805,
0.07885710895061493,
0.07837985455989838,
0.07187669724225998,
0.09176629781723022,
0.00838024914264679,
0.04005667194724083,
0.07014968246221542,
0.04170147329568863,
-0.03703896701335907,
0.08690493553876877,
0.0854240283370018,
0.11227315664291382,
0.03434736281633377,
0.11672163009643555,
-0.01143826823681593,
0.08148819953203201,
-0.03797077760100365,
-0.160180926322937,
0.09946103394031525,
0.08441580086946487,
-0.09349475800991058,
0.057493291795253754,
0.07854073494672775,
0.14950114488601685,
0.10836101323366165,
-0.06394992768764496,
0.035035207867622375,
-0.09156708419322968,
0.1151583343744278,
-0.06285610795021057,
-0.07001498341560364,
0.02436038665473461,
-0.04625600948929787,
-0.0027100590523332357,
-0.08165789395570755,
0.010712727904319763,
-0.10682086646556854,
-0.05074528977274895,
-0.037490714341402054,
0.06837205588817596,
-0.016557754948735237,
-0.08213172852993011,
-0.043210383504629135,
-0.056869082152843475,
-0.055217958986759186,
0.020874690264463425,
0.11447380483150482,
0.08407319337129593,
-0.11030878871679306,
-0.12786562740802765,
-0.01030230987817049,
0.07827875018119812,
-0.038234591484069824,
-0.0007972880848683417,
-0.08584289252758026,
-0.019517309963703156,
-0.07739290595054626,
-0.07980529218912125,
0.07254857569932938,
0.16150960326194763,
0.11471684277057648,
0.02105197124183178,
-0.06740947812795639,
-0.05354246869683266,
0.04018869251012802,
-0.039200205355882645,
-0.041986994445323944,
-0.061633042991161346,
-0.05855761468410492,
-0.00686287134885788,
0.06564119458198547,
0.03466577082872391,
-0.04201343283057213,
0.10128415375947952,
0.06526900082826614,
-0.07044526189565659,
-0.03296659514307976,
0.0933709368109703,
-0.0910152792930603,
0.0412738174200058,
0.00574362650513649,
-0.05575880780816078,
-0.02110898680984974,
0.04191556200385094,
0.025759434327483177,
0.08506153523921967,
0.005207786336541176,
0.03699430450797081,
0.00990296434611082,
0.03792764991521835,
0.025039399042725563,
-0.15409429371356964,
-0.09976708889007568,
-0.08687669783830643,
0.017101388424634933,
-0.08809133619070053,
-0.12586219608783722,
0.12478316575288773,
0.018308667466044426,
0.09599147737026215,
-0.005522977095097303,
0.09569291025400162,
0.1717531830072403,
0.019295217469334602,
-0.0019709081389009953,
0.0439484640955925,
-0.10270719230175018,
-0.02731654979288578,
-0.13733120262622833,
-0.04989027604460716,
-0.0502607561647892,
-0.1364923119544983,
0.03704528883099556,
-0.08404683321714401,
0.09739501029253006,
-0.11389373242855072,
0.011062254197895527,
-0.04514405503869057,
0.0859752744436264,
-0.0562296062707901,
0.08701086044311523,
0.004498030059039593,
0.006212199572473764,
0.041120950132608414,
-0.08459925651550293,
0.06197526305913925,
0.07759391516447067,
-0.04311170428991318,
-0.04581398144364357,
0.11241539567708969,
0.1439933478832245,
0.011404229328036308,
0.029248502105474472,
-0.0021396582014858723,
-0.05043565109372139,
0.06548765301704407,
0.04609790816903114,
-0.06864667683839798,
-0.062443461269140244,
-0.05342789366841316,
-0.017744358628988266,
0.04563768208026886,
-0.009638636372983456,
0.059520184993743896,
0.0004028534167446196,
0.013240620493888855,
0.10598332434892654,
0.10182179510593414,
-0.07176300883293152,
0.0069913254119455814,
0.11390988528728485,
0.12581373751163483,
-0.023589877411723137,
-0.004517243709415197,
0.004452244378626347,
0.015316612087190151,
-0.0836881697177887,
0.05002715811133385,
-0.06644557416439056,
0.04643760994076729,
0.11100897192955017,
-0.03669999539852142,
0.03818376734852791,
-0.03455287590622902,
-0.11438221484422684,
0.02042788825929165,
0.02690291590988636,
0.02223871648311615,
-0.08771495521068573,
0.08511039614677429,
-0.0021596418228000402,
-0.024458928033709526,
-0.06925282627344131,
-0.031717028468847275,
-0.10811877250671387,
0.0015479947905987501,
0.0429687425494194,
0.05493725463747978,
0.08706989139318466,
-0.04456030949950218,
-0.05100906267762184,
-0.025995999574661255,
-0.09788542985916138,
0.0156001728028059,
0.11144877225160599,
-0.13643035292625427,
-0.013701135292649269,
0.013081928715109825,
-0.19329069554805756,
-0.01776827685534954,
-0.009778591804206371,
-0.06319444626569748,
-0.0036025873851031065,
-0.18558403849601746,
-0.06525702774524689,
-0.09227704256772995,
-0.11030881851911545,
-0.008225277066230774,
-0.057191260159015656,
-0.01789778284728527,
-0.05612438544631004,
0.04220489412546158,
-0.18639476597309113,
0.025500662624835968,
-0.2020351141691208,
0.053973376750946045,
-0.04610099643468857,
0.02522234432399273,
0.013619820587337017,
0.09622514992952347,
0.0012742382241412997,
-0.002811834216117859,
-0.03962242230772972,
0.006022697314620018,
0.08354200422763824,
-0.17672571539878845,
-0.15141931176185608,
-0.025930659845471382,
-0.05173194780945778,
-0.16723109781742096,
-0.09804543852806091,
0.19373707473278046,
-0.02667468972504139,
0.09536522626876831,
-0.055627286434173584,
0.08138996362686157,
-0.011751742102205753,
-0.10649493336677551,
0.03745850920677185,
0.002466607838869095,
-0.037906546145677567,
-0.06861889362335205,
0.0302182137966156,
-0.0899079367518425,
-0.027831364423036575,
0.028668871149420738,
0.03552374243736267,
0.09443248808383942,
0.03118823654949665,
0.08171597123146057,
-0.09987852722406387,
-0.046517517417669296,
-0.09400545060634613,
-0.08698958903551102,
0.08919844776391983,
-0.01286625862121582,
-0.041499845683574677,
0.12133105844259262,
0.15851591527462006,
0.07851916551589966,
-0.05045926943421364,
0.07598532736301422,
0.21706551313400269,
0.04519616812467575,
0.024407288059592247,
0.07115302979946136,
-0.03495033085346222,
-0.004763778764754534,
-0.09821018576622009,
0.05197779834270477,
0.07903017103672028,
-0.09297537803649902,
-0.04421752691268921,
-0.1045013889670372,
-0.004700434394180775,
0.12826043367385864,
0.21143504977226257,
-0.03679625317454338,
-0.055170461535453796,
-0.004947292152792215,
-0.07476194202899933,
0.022031789645552635,
0.05123044550418854,
0.16331565380096436,
0.07918842136859894,
-0.0016890239203348756,
0.23291224241256714,
0.12902630865573883,
0.006937313359230757,
0.0333968810737133,
0.10532917082309723,
0.1317043900489807,
0.046284351497888565,
-0.04003753885626793,
0.07389989495277405,
0.1144472137093544,
-0.014659987762570381,
0.027325496077537537,
0.014122274704277515,
-0.027712471783161163,
0.06040440499782562,
0.0038027006667107344,
0.053725551813840866,
-0.005108058452606201,
0.024040700867772102,
0.07487066090106964,
0.21681317687034607,
0.07023723423480988,
-0.08649392426013947,
-0.09483510255813599,
-0.012958531267940998,
0.1234191283583641,
0.0338907428085804,
-0.07285337150096893,
0.12986762821674347,
-0.035063087940216064,
-0.026627149432897568,
0.0070424466393888,
-0.08063489943742752,
-0.05636966601014137,
-0.04284733533859253,
0.013564943335950375,
0.11308246105909348,
0.017891142517328262,
0.08405125886201859,
-0.0797838643193245,
0.03652499243617058,
0.13689877092838287,
-0.018123047426342964,
0.011251406744122505,
-0.08409274369478226,
-0.03917654976248741,
-0.10206174850463867,
-0.06818673759698868,
-0.01610831916332245,
-0.09815694391727448,
0.07123681157827377,
0.02043430507183075,
0.16216762363910675,
0.10165522247552872,
0.005044198594987392,
-0.10851094126701355,
0.015813633799552917,
-0.08406050503253937,
0.09117987006902695,
0.019527440890669823,
0.007584481034427881,
0.008745885454118252,
0.11843656003475189,
0.11988808214664459,
0.10876119136810303,
0.14844092726707458,
0.021714238449931145,
-0.019022898748517036,
0.06646928936243057,
-0.05482776463031769,
0.06968705356121063,
0.07362755388021469,
0.06174527853727341,
-0.10428937524557114,
0.035799819976091385,
-0.00810425728559494,
-0.0618133619427681,
-0.01637178100645542,
-0.041634660214185715,
-0.019601723179221153,
0.07257749140262604,
0.058952949941158295,
-0.09606532752513885,
-0.029645754024386406,
-0.057603031396865845,
0.028634190559387207,
0.06138542294502258,
0.035928837954998016,
-0.02594527043402195,
0.006540765054523945,
-0.13860304653644562,
-0.016637418419122696,
-0.06348524242639542,
0.11343038827180862,
-0.021481366828083992,
-0.013681708835065365,
0.08274058997631073,
-0.0002376099582761526,
-0.009561856277287006,
0.03418346121907234,
0.1035386472940445,
0.004672618117183447,
0.011557080782949924,
-0.19490593671798706,
0.012478770688176155,
0.06979355216026306,
-0.11124320328235626,
-0.012539790943264961,
-0.13124769926071167,
0.10963258892297745,
0.10519476234912872,
0.07808013260364532,
0.1096501275897026,
0.09857138246297836,
0.04561642184853554,
-0.12686431407928467,
-0.04666643589735031,
0.11562854051589966,
-0.053810883313417435,
-0.10692640393972397,
-0.14180995523929596,
-0.02698156237602234,
-0.12470730394124985,
-0.07976631075143814,
0.03478439897298813,
-0.052785202860832214,
-0.11903706938028336,
0.027866030111908913,
-0.04622388631105423,
0.10781851410865784,
0.09027692675590515,
0.06213599815964699,
0.09940097481012344,
-0.048767440021038055,
0.14640988409519196,
-0.044867247343063354,
-0.012628955766558647,
-0.03680196776986122,
-0.09760982543230057,
0.014553934335708618,
0.04087536036968231,
-0.09046638011932373,
0.08981820195913315,
0.08717711269855499,
0.09481453150510788,
0.05906624346971512,
0.033861178904771805,
-0.010614048689603806,
0.02660480886697769,
-0.08183223009109497,
-0.0010340388398617506,
-0.036878302693367004,
-0.0010604012059047818,
-0.03697308525443077,
-0.12814374268054962,
0.12209543585777283,
-0.00011070191976614296,
-0.0900760069489479,
-0.11799558997154236,
0.0044366116635501385,
0.03979143127799034,
-0.031836625188589096,
-0.10298769176006317,
0.03531741723418236,
-0.025723226368427277,
-0.0379566065967083,
0.14985822141170502,
0.027207868173718452,
0.03543604165315628,
0.05273110419511795,
-0.023434024304151535,
0.006877033039927483,
0.053331706672906876,
0.07023761421442032,
0.007424486801028252,
0.07744915038347244,
-0.0767449289560318,
0.09579743444919586,
-0.021968454122543335,
-0.010125433094799519,
0.18188709020614624,
0.08258721977472305,
0.048944614827632904,
-0.1323266327381134,
-0.03462151065468788,
-0.02153746411204338,
-0.11837459355592728,
0.0821789801120758,
0.022709114477038383,
-0.031106971204280853,
0.03839237615466118,
-0.040648557245731354,
-0.007361161522567272,
0.11648468673229218,
-0.007587162312120199,
0.0947168841958046,
0.05912600830197334,
-0.06222149357199669,
-0.09694286435842514,
-0.007969235070049763,
-0.06915692985057831,
-0.08254863321781158,
-0.014911940321326256,
0.04743142053484917,
-0.10966503620147705,
-0.04128045216202736,
0.019691942259669304,
0.032738350331783295,
-0.034652214497327805,
-0.05877832695841789,
-0.028857821598649025,
0.06095466390252113,
0.0485624261200428,
0.0032894040923565626,
0.09004313498735428,
0.13672904670238495,
-0.11598360538482666,
-0.07086322456598282,
0.016089659184217453,
0.0893145203590393,
-0.1304309368133545,
0.11912590265274048,
0.115616574883461,
-0.01979871094226837,
0.004308279138058424,
0.019100956618785858,
0.16749432682991028,
0.013512060046195984,
-0.04707643389701843,
0.05318855866789818,
-0.030693933367729187,
0.019405286759138107,
-0.07547637820243835,
-0.013344387523829937,
-0.06992954760789871,
-0.03329500928521156,
0.03543911501765251,
0.010929979383945465,
0.09415857493877411,
-0.022541426122188568,
0.09132181853055954,
-0.10917945951223373,
0.09857259690761566,
-0.08132375776767731,
0.07068400830030441,
0.07237166166305542,
-0.10488153249025345,
-0.06671380996704102,
0.09396785497665405,
0.07489866018295288,
0.017007648944854736,
-0.10458298772573471,
0.043355897068977356,
0.01693732477724552,
0.007682861294597387,
0.03916779160499573,
0.05468461662530899,
0.042128246277570724,
0.07170800119638443,
-0.08498650044202805,
-0.09010151028633118,
-0.07909109443426132,
-0.008428520523011684,
0.11231979727745056,
0.08414827287197113,
0.021979717537760735,
-0.012823902070522308,
-0.02703121490776539,
0.11002551764249802,
0.07381507754325867,
0.09446386247873306,
-0.06307165324687958,
-0.024404538795351982,
-0.032154154032468796,
0.09039650857448578,
0.038483861833810806,
0.08032173663377762,
0.012218420393764973,
-0.12077820301055908,
-0.018889447674155235,
0.01773695833981037,
0.14471854269504547,
-0.12519878149032593,
-0.01880473457276821,
-0.11840887367725372,
-0.03907763212919235,
0.1057446151971817,
-0.11510246247053146,
-0.04539324343204498,
-0.14215485751628876,
0.04256559535861015,
-0.05114032328128815,
-0.03581249713897705,
-0.040885087102651596,
0.011376100592315197,
-0.010214685462415218,
-0.051513612270355225,
0.045803047716617584,
-0.11819222569465637,
0.06304135918617249,
0.043543729931116104,
0.10826938599348068,
-0.09456780552864075,
0.02263803593814373,
0.051455624401569366,
-0.011274999007582664,
-0.0650588721036911,
0.029642285779118538,
-0.06272601336240768,
-0.07012226432561874,
-0.0937783420085907,
0.056863367557525635,
-0.059631455689668655,
0.11407466232776642,
0.15413299202919006,
-0.03967108577489853,
0.09506209194660187,
0.03746717795729637,
0.07788936048746109,
-0.012671285308897495,
-0.04039828106760979,
0.04492690786719322,
0.012487445957958698,
-0.022962965071201324,
-0.11001841723918915,
-0.07050763815641403,
-0.08566170930862427,
-0.07806645333766937,
-0.15963223576545715,
0.1206994280219078,
0.0994374006986618,
-0.08579494059085846,
-0.021760035306215286,
-0.0772460326552391,
0.010849361307919025,
0.09305453300476074,
0.06583251804113388,
0.03341987729072571,
-0.05882817879319191,
0.07621994614601135,
0.05743908882141113,
0.12178623676300049,
-0.07519804686307907,
0.0014135688543319702,
-0.005596923176199198,
-0.06009775027632713,
-0.1253271847963333,
0.09366915374994278,
-0.049939487129449844,
0.035914044827222824,
0.03815598413348198,
0.04416131228208542,
-0.010111432522535324,
0.0820315033197403,
0.06828255951404572,
-0.08105392754077911,
-0.029588358476758003,
-0.03871295601129532,
0.025688299909234047,
-0.12430351227521896,
0.015633046627044678,
-0.023908115923404694,
-0.07239415496587753,
0.11964449286460876,
-0.05940002202987671,
0.053756725043058395,
0.0032085091806948185,
-0.11360501497983932,
-0.0018511300440877676,
0.02701612003147602,
-0.01027106586843729,
-0.11902693659067154,
0.07496806979179382,
0.010473975911736488,
0.1218365952372551,
0.0188121497631073,
-0.02084018476307392,
-0.09700119495391846,
-0.0960320234298706,
0.05409214645624161,
0.06196524202823639,
-0.06400894373655319,
-0.09779808670282364,
-0.013354051858186722,
-0.04400692507624626,
-0.13885153830051422,
-0.04816776141524315,
0.012312455102801323,
0.07507969439029694,
0.018325597047805786,
0.03789594769477844,
-0.04353629797697067,
0.1511862576007843,
-0.11311636120080948,
-0.11057864874601364,
0.06084088608622551,
0.1542763113975525,
0.0831390917301178,
-0.018158629536628723,
-0.004749832209199667,
-0.0411481074988842,
-0.0568716824054718,
-0.050663966685533524,
0.05466190353035927,
-0.022785315290093422,
0.04640704765915871,
-0.10718688368797302,
-0.060933616012334824,
-0.009624634869396687,
-0.008441627956926823,
-0.046524353325366974,
-0.0859195739030838,
0.005539421457797289,
-0.0014513107016682625,
-0.09084612876176834,
0.045096270740032196,
-0.09006482362747192,
-0.06611315160989761,
-0.035880446434020996,
0.023863939568400383,
-0.12496739625930786,
0.017169814556837082,
-0.11690977215766907,
0.13688012957572937,
-0.061910130083560944,
-0.050838883966207504,
0.003824988380074501,
-0.1432230919599533,
-0.00457413075491786,
0.046991560608148575,
0.0963614284992218,
-0.12021802365779877,
-0.11499353498220444,
0.00018760058446787298,
-0.01600423827767372,
0.11792062222957611,
0.06617450714111328,
-0.05206753686070442,
-0.04692762345075607,
0.050584182143211365,
-0.015390453860163689,
0.03202341869473457,
-0.0059325722977519035,
-0.034684207290410995,
-0.0935659185051918,
0.019235936924815178,
0.16102717816829681,
-0.060090675950050354,
0.06843515485525131,
0.09839163720607758,
0.12413803488016129,
-0.0014642777387052774,
0.06971290707588196,
-0.05444781109690666,
-0.013689198531210423,
-0.00370559049770236,
-0.12350919097661972,
0.057396795600652695,
-0.14863863587379456,
-0.06846050173044205,
0.008464734070003033,
0.12383825331926346,
0.07344541698694229,
0.029935678467154503,
0.04313427209854126,
0.08799830079078674,
0.09475472569465637,
0.03343778848648071,
0.11268223822116852,
0.09539450705051422,
-0.004613899160176516,
-0.16324223577976227,
0.004029484000056982,
-0.21279382705688477,
0.0017320355400443077,
-0.08655022829771042,
-0.00953335128724575,
0.04246079921722412,
-0.1629178375005722,
0.023968927562236786,
0.08676940202713013,
-0.03540084511041641,
-0.07579202950000763,
-0.10295961797237396,
0.04159095883369446,
-0.07466238737106323,
0.15527589619159698,
0.01210852898657322,
-0.018359674140810966,
-0.10218315571546555,
-0.10127301514148712,
-0.1257074475288391,
0.06795401126146317,
-0.1386871337890625,
-0.0400349386036396,
-0.043460775166749954,
-0.06890321522951126,
-0.039366431534290314,
0.06885229051113129,
0.10313984006643295,
0.06974920630455017,
-0.12467925250530243,
-0.05379656329751015,
-0.03767392411828041,
-0.027125773951411247,
-0.1640842854976654,
0.11033901572227478,
0.0020784735679626465,
0.08697527647018433,
-0.06199958547949791,
0.08952955156564713,
0.07087995111942291,
-0.10100792348384857,
0.07975727319717407,
0.054594602435827255,
0.017729250714182854,
-0.08166778832674026,
-0.05656319856643677,
-0.09153293073177338,
0.07175841927528381,
-0.0007045652018859982,
-0.020979415625333786,
-0.08703504502773285,
-0.07657479494810104,
-0.0918644443154335,
-0.07587626576423645,
0.1589365452528,
0.02811436727643013,
-0.11091458052396774,
-0.1213386058807373,
-0.05709076300263405,
-0.024606894701719284,
-0.03014669567346573,
-0.08037899434566498,
0.07185500860214233,
0.10178559273481369,
-0.1266120821237564,
-0.05784660950303078,
0.07412838935852051,
0.028507426381111145,
-0.08003843575716019,
0.07298530638217926,
0.019138917326927185,
0.07779379934072495,
0.098735511302948,
0.09935610741376877,
-0.058115050196647644,
0.03075004741549492,
0.014647732488811016,
-0.13036246597766876,
0.0077454098500311375,
0.11460641026496887,
-0.12915535271167755,
-0.12647876143455505,
-0.009221329353749752,
-0.10956057906150818,
-0.10064103454351425,
-0.07688119262456894,
0.06434106081724167,
-0.042971171438694,
-0.08772217482328415,
-0.020256925374269485,
0.04688378795981407,
0.02095615305006504,
-0.06669413298368454,
0.011518139392137527,
0.004278665408492088,
0.030747640877962112,
-0.06455926597118378,
-0.17032870650291443,
0.030607549473643303,
-0.13478046655654907,
-0.0521724633872509,
-0.046980224549770355,
-0.060557570308446884,
0.08944929391145706,
0.031737688928842545,
-0.03255084529519081,
0.021396424621343613,
0.03124283067882061,
0.03976888209581375,
0.0862370952963829,
0.0042740399949252605,
0.08519051223993301,
0.0020627735648304224,
-0.0750870332121849,
0.13238467276096344,
-0.12902456521987915,
0.03905295953154564,
-0.06299570202827454,
-0.010448567569255829,
0.06566818803548813,
-0.08014625310897827,
-0.02347249910235405,
-0.06315143406391144,
0.03989837318658829,
-0.03889838978648186,
-0.03299033269286156,
-0.12438534945249557,
0.10976269096136093,
-0.006496291607618332,
-0.05363672971725464,
0.10410747677087784,
-0.13126486539840698,
0.04711558669805527,
0.03142330422997475,
-0.10750337690114975,
-0.048950809985399246,
-0.03707747533917427,
-0.07702948153018951,
-0.06250413507223129,
0.02837604470551014,
0.04271801933646202,
-0.023930469527840614,
0.004537479020655155,
0.009439890272915363,
0.04636664688587189,
-0.08877427130937576,
-0.056358352303504944,
0.04857355356216431,
0.07120224088430405,
0.05225086957216263,
-0.007525994908064604,
0.0826156735420227,
0.018383288756012917,
-0.13166508078575134,
-0.11377961188554764,
0.0010363936889916658,
0.0928179994225502,
-0.002707561943680048,
-0.031961724162101746,
0.020900141447782516,
-0.058637864887714386,
-0.031829845160245895,
0.10487377643585205,
0.025790899991989136,
0.011928140185773373,
-0.11505653709173203,
-0.010649744421243668,
0.08630124479532242,
-0.09243526309728622,
0.043884217739105225,
0.004641091916710138,
-0.036656077951192856,
0.03726031631231308,
-0.11348177492618561,
0.03024894930422306,
0.03031357191503048,
-0.12088712304830551,
-0.021774329245090485,
0.009171505458652973,
-0.020952194929122925,
0.06384766101837158,
0.0571470633149147,
-0.03668249025940895,
-0.04648806154727936,
0.07364095747470856,
-0.09276299178600311,
0.08548253774642944,
0.0006494149565696716,
-0.014374170452356339,
-0.04168066009879112,
0.09929115325212479,
0.025687450543045998,
0.09842585027217865,
0.0651206448674202,
-0.026381181553006172,
0.00524951471015811,
-0.10862322896718979,
0.06958947330713272,
0.09013687074184418,
-0.04779267683625221,
-0.05137772858142853,
0.09198980778455734,
0.07876111567020416,
-0.004593813791871071,
0.07514145970344543,
0.10354503989219666,
-0.06000740826129913,
-0.023414246737957,
0.11724778264760971,
0.020906951278448105,
0.07121481001377106,
-0.08206763863563538,
0.004591666627675295,
0.01673072762787342,
-0.06016315147280693,
0.10957776010036469,
-0.0560370609164238,
0.10353153944015503,
0.0906934067606926,
-0.011515634134411812,
-0.03757336735725403,
-0.08417666703462601,
-0.04496006667613983,
0.09490641206502914,
0.14315779507160187,
0.02842428907752037,
0.05894920974969864,
-0.11495410650968552,
0.13454397022724152,
-0.10106098651885986,
0.022796161472797394,
-0.06081235781311989,
-0.07008910179138184,
0.03594294190406799,
0.09931068122386932,
0.09438519179821014,
0.0957101434469223,
0.020622549578547478,
0.11193516105413437,
0.04336686059832573,
0.1862150877714157,
-0.005856637377291918,
0.0710182934999466,
-0.04069620370864868,
-0.047009725123643875,
0.0859157145023346,
-0.09023679792881012,
0.10169795155525208,
0.10083116590976715,
0.0064652953296899796,
0.008255572989583015,
-0.1330794394016266,
0.06761631369590759,
-0.02011469379067421,
-0.013409932143986225,
0.05593901127576828,
0.10671130567789078,
0.03437477722764015,
-0.07843966037034988,
0.029791366308927536,
0.04561011493206024,
0.03178774192929268,
-0.03854862228035927,
-0.044691164046525955,
0.13683311641216278,
0.045329395681619644,
-0.04953299090266228,
-0.04977978393435478,
0.07523734122514725,
-0.0364229753613472,
-0.07884886860847473,
-0.13049523532390594,
-0.01882663555443287,
-0.03578571975231171,
-0.1747894287109375,
-0.08289013057947159,
-0.10272430628538132,
0.008047202602028847,
-0.003577976254746318,
-0.12196194380521774,
0.007943853735923767,
-0.06496145576238632,
-0.09109583497047424,
-0.012064305134117603,
0.04355780407786369,
-0.04746471717953682,
0.015259312465786934,
0.06832476705312729,
-0.07391959428787231,
0.014078485779464245,
-0.12374522536993027,
0.08051691204309464,
0.01387347374111414,
-0.047992825508117676,
0.10117204487323761,
-0.008478832431137562,
-0.16974814236164093,
0.013466807082295418,
0.1171749010682106,
0.017520245164632797,
0.045751094818115234,
0.019927892833948135,
-0.01875561662018299,
0.0706668570637703,
-0.1310850977897644,
0.024779345840215683,
0.07945887744426727,
-0.013457253575325012,
0.06702391803264618,
-0.10439971089363098,
0.03458172455430031,
0.1437772959470749,
-0.06685411930084229,
-0.047986991703510284,
0.04922793060541153,
0.1405305713415146,
0.03796513006091118
# 34 "src/lenet.cpp" 2
};
const dtype bias1[84]={

# 1 "src/../weights/hls_bias3.txt" 1
0.007385933771729469,
0.00550546171143651,
0.02487826906144619,
0.007181050721555948,
-0.014436887577176094,
-0.009617816656827927,
0.006156335584819317,
0.010965825989842415,
0.011019864119589329,
0.020827675238251686,
0.013256216421723366,
0.003933445084840059,
0.013883550651371479,
-0.026762157678604126,
0.018437478691339493,
-0.013691125437617302,
0.008971316739916801,
0.009649026207625866,
0.036864690482616425,
-0.006095249205827713,
0.03481445088982582,
0.02125588059425354,
0.011168183758854866,
0.013397776521742344,
-0.023532357066869736,
0.007605738937854767,
0.010490107350051403,
-0.0197072122246027,
0.005435728468000889,
0.0009830801282078028,
-0.0013148272410035133,
-0.0038368436507880688,
0.0016930270940065384,
0.006744014099240303,
0.006049922201782465,
-0.0030441819690167904,
0.0198063962161541,
-0.012861338444054127,
0.016410838812589645,
-0.0047587137669324875,
-0.018718235194683075,
-0.018771667033433914,
0.012727699242532253,
-0.007346596568822861,
0.013145158998668194,
0.0049598379991948605,
0.0013474596198648214,
0.0161418654024601,
-0.0007755194674246013,
0.01785711571574211,
-0.0013888151152059436,
-0.0019190773600712419,
-0.004349914845079184,
-0.008128080517053604,
0.0017514838837087154,
0.00038294249679893255,
-0.006110947113484144,
-0.005369056481868029,
0.021261153742671013,
0.0031890920363366604,
0.0021373999770730734,
0.01802113652229309,
-0.004165054764598608,
-0.02399209327995777,
-0.008595529943704605,
0.0033877850510179996,
-0.0025022472254931927,
-0.013178638182580471,
0.0238375011831522,
0.006392333190888166,
0.012554844841361046,
-0.008518200367689133,
0.0109513895586133,
-0.015091284178197384,
0.019070332869887352,
0.007134314626455307,
-0.015482628718018532,
-0.010986733250319958,
0.011357360519468784,
-0.014253581874072552,
-0.023775914683938026,
0.002328521804884076,
0.011916018091142178,
-0.029908543452620506
# 37 "src/lenet.cpp" 2
};
const dtype weight2[65][84]={

# 1 "src/../weights/hls_weights2.txt" 1
-0.016418667510151863,
-0.13941837847232819,
-0.03603273630142212,
0.20195020735263824,
0.03276055306196213,
0.20168492197990417,
0.06301800906658173,
0.14458778500556946,
0.2841099202632904,
0.02146431803703308,
0.2219066619873047,
0.03807520866394043,
0.18173566460609436,
0.2838287949562073,
-0.19611038267612457,
-0.06803610175848007,
0.13034728169441223,
-0.25016871094703674,
0.2316655069589615,
-0.212657630443573,
0.26194170117378235,
-0.12311955541372299,
0.127351313829422,
-0.20282074809074402,
-0.17051318287849426,
0.03426629677414894,
0.2484690099954605,
-0.2853056788444519,
-0.11033833026885986,
-0.18229404091835022,
0.058602843433618546,
0.19436481595039368,
0.32483795285224915,
0.21514330804347992,
0.18889188766479492,
0.27492964267730713,
0.31242141127586365,
-0.034484267234802246,
-0.041782815009355545,
0.21427442133426666,
-0.1561431884765625,
-0.07588324695825577,
-0.1883491426706314,
0.2547733783721924,
0.3137601315975189,
0.13781195878982544,
-0.07232743501663208,
0.13458023965358734,
-0.12545810639858246,
0.202389195561409,
0.18338555097579956,
-0.1032184287905693,
0.18443262577056885,
0.031232185661792755,
-0.09533684700727463,
-0.0007085846154950559,
-0.1690322458744049,
-0.19241110980510712,
0.11231818050146103,
0.05452046915888786,
-0.003127667121589184,
0.10192300379276276,
-0.025952007621526718,
-0.16496306657791138,
-0.2332797795534134,
0.3431875705718994,
-0.20906049013137817,
-0.23378334939479828,
0.1535864770412445,
0.07789208739995956,
0.15682512521743774,
-0.2296135276556015,
-0.3527225852012634,
-0.08504919707775116,
-0.2837523818016052,
0.2539355456829071,
-0.2152865082025528,
-0.13035839796066284,
-0.1293260008096695,
-0.1405235379934311,
0.2081650197505951,
-0.1104697436094284,
0.1386716365814209,
-0.09171922504901886,
-0.12190116196870804,
0.19523164629936218,
-0.04874841868877411,
-0.20811952650547028,
-0.07149269431829453,
-0.16600416600704193,
-0.30825892090797424,
0.11098815500736237,
0.12175527215003967,
0.3638152480125427,
0.3524446487426758,
0.10493936389684677,
0.16574043035507202,
0.0653245598077774,
0.04082149267196655,
0.15065109729766846,
-0.042013783007860184,
0.07794179022312164,
0.35387030243873596,
-0.21341323852539062,
0.03801388293504715,
0.33915793895721436,
-0.16032028198242188,
0.1475089192390442,
-0.3704909682273865,
0.03155670315027237,
0.11087280511856079,
-0.28946036100387573,
-0.256401926279068,
-0.17320357263088226,
0.12237641215324402,
-0.06353449821472168,
-0.2887546718120575,
-0.26431629061698914,
-0.22477146983146667,
-0.1807737648487091,
0.203196182847023,
-0.23034878075122833,
-0.02397766150534153,
-0.02076784521341324,
-0.28687459230422974,
-0.09077510237693787,
-0.05767133831977844,
-0.204091414809227,
0.22602669894695282,
0.22146309912204742,
0.14089952409267426,
0.03976353630423546,
0.25542762875556946,
0.25638842582702637,
0.14631031453609467,
0.2863265872001648,
0.2725934386253357,
-0.21121260523796082,
0.24374578893184662,
-0.0006571471458300948,
-0.20054781436920166,
0.22413726150989532,
-0.2120179831981659,
0.14749886095523834,
-0.17154692113399506,
0.2607727348804474,
-0.07706250995397568,
-0.1702856421470642,
-0.20749662816524506,
0.14112655818462372,
0.07241867482662201,
-0.04374166950583458,
0.10351608693599701,
-0.32333430647850037,
0.0357649140059948,
-0.02251558192074299,
-0.01767721399664879,
-0.13562555611133575,
0.24434024095535278,
-0.12228375673294067,
0.07237125933170319,
0.2157762348651886,
0.011971615254878998,
0.3235706388950348,
-0.09660690277814865,
-0.2635621428489685,
0.2508925199508667,
-0.010224818252027035,
-0.21501216292381287,
-0.3447887599468231,
-0.015323050320148468,
-0.11403132230043411,
0.1705137938261032,
0.10016679018735886,
0.14830943942070007,
-0.11538678407669067,
-0.15692946314811707,
0.34966209530830383,
-0.25014275312423706,
0.15079990029335022,
0.2082969844341278,
-0.2508041262626648,
0.014040700159966946,
0.005579087417572737,
-0.23742565512657166,
0.3069550395011902,
0.16099722683429718,
0.1987277716398239,
-0.16049546003341675,
0.3372185528278351,
-0.07733701169490814,
0.2712594270706177,
-0.10710614174604416,
-0.06679302453994751,
-0.2148762196302414,
-0.3086567223072052,
-0.0462978258728981,
0.0400412417948246,
0.16609147191047668,
0.018307002261281013,
-0.1436123251914978,
-0.3267933130264282,
-0.1174258142709732,
-0.10234008729457855,
0.07449832558631897,
0.09039580076932907,
-0.16096222400665283,
0.032610997557640076,
0.2159782350063324,
0.09586469829082489,
0.022487269714474678,
-0.19814333319664001,
0.17453362047672272,
-0.13808418810367584,
-0.18265098333358765,
0.04953664168715477,
-0.2716623842716217,
-0.41716107726097107,
0.1454503983259201,
-0.20330175757408142,
-0.16483378410339355,
0.3285048007965088,
0.1629520058631897,
0.1186605766415596,
0.05230030417442322,
-0.15893112123012543,
0.02546573057770729,
0.15987080335617065,
-0.30734655261039734,
-0.29408717155456543,
-0.03475993871688843,
-0.21520604193210602,
-0.31344929337501526,
0.10401353240013123,
0.15268534421920776,
0.02604447677731514,
-0.13877703249454498,
-0.4238033592700958,
-0.10496082156896591,
0.19671757519245148,
-0.16866354644298553,
0.1031571477651596,
0.2168264389038086,
-0.14561688899993896,
0.15238694846630096,
0.36607828736305237,
0.13886693120002747,
-0.1767544001340866,
-0.14888574182987213,
-0.040929004549980164,
0.16287803649902344,
-0.22508324682712555,
0.2688630521297455,
-0.14008422195911407,
0.004550256300717592,
0.08514280617237091,
-0.11986824870109558,
-0.0900224968791008,
-0.01591515727341175,
0.2901495099067688,
-0.18088077008724213,
0.20158088207244873,
-0.2572287321090698,
0.11352767050266266,
0.26885372400283813,
0.27094340324401855,
-0.07890036702156067,
0.08372987061738968,
-0.041137002408504486,
0.004336990416049957,
0.0016574508044868708,
-0.08676955103874207,
-0.3078487515449524,
-0.16285239160060883,
0.12236492335796356,
-0.18607713282108307,
-0.11388347297906876,
0.30369502305984497,
0.04069254919886589,
0.33143794536590576,
-0.2351878136396408,
0.06488264352083206,
-0.05120139941573143,
-0.058933861553668976,
-0.1622592657804489,
0.08308815956115723,
0.01133175753057003,
0.14168915152549744,
-0.1922137588262558,
0.25325995683670044,
-0.10281910747289658,
-0.1253589540719986,
-0.34091904759407043,
-0.15453921258449554,
-0.05675911158323288,
0.14895401895046234,
-0.09289996325969696,
-0.2484833300113678,
-0.2218848615884781,
-0.14036895334720612,
-0.11061552166938782,
-0.17651355266571045,
0.14005567133426666,
-0.08301977813243866,
-0.26045510172843933,
0.1264026015996933,
-0.128626748919487,
-0.053998421877622604,
0.183741495013237,
-0.2759541869163513,
-0.002469883533194661,
0.15600553154945374,
0.0339333675801754,
-0.1577417254447937,
-0.192306250333786,
-0.059832677245140076,
0.319429486989975,
-0.2596786916255951,
-0.22728730738162994,
0.33461448550224304,
0.1464463323354721,
0.16284659504890442,
0.05044614523649216,
0.1713828146457672,
0.33791232109069824,
-0.06413383036851883,
-0.20079955458641052,
0.2304987609386444,
-0.19989605247974396,
0.2976382076740265,
-0.1337609887123108,
-0.1952667087316513,
0.1874682754278183,
0.028689192607998848,
-0.30241408944129944,
-0.2512238919734955,
0.07600361108779907,
0.218849778175354,
0.14184634387493134,
0.03317708894610405,
-0.05839262530207634,
-0.09849859029054642,
-0.1732451617717743,
0.010712314397096634,
0.1469983011484146,
0.3386288583278656,
0.21659979224205017,
0.18680377304553986,
-0.3323540985584259,
0.11120469123125076,
0.19802486896514893,
-0.1406271606683731,
-0.04092679172754288,
-0.05225532874464989,
-0.2652464210987091,
0.2500799894332886,
0.2606004774570465,
-0.258319616317749,
0.25159138441085815,
-0.16231602430343628,
-0.1813122183084488,
0.1846601366996765,
-0.39341315627098083,
0.2104794979095459,
-0.11098545044660568,
-0.15100936591625214,
-0.0006397701799869537,
0.19987832009792328,
0.12903425097465515,
0.15067633986473083,
0.15567642450332642,
0.2836531102657318,
-0.32559382915496826,
0.0743476152420044,
0.32931771874427795,
-0.21696308255195618,
-0.19156408309936523,
0.08386212587356567,
-0.039663318544626236,
-0.2540314793586731,
0.13872523605823517,
-0.103155717253685,
0.09029974788427353,
-0.09932055324316025,
-0.15311896800994873,
0.09232497960329056,
0.21488513052463531,
-0.11311433464288712,
0.2045459747314453,
0.05688394978642464,
-0.2101813107728958,
-0.033457040786743164,
-0.09225902706384659,
-0.25015562772750854,
0.21556711196899414,
0.1783304363489151,
-0.039280377328395844,
0.09324623644351959,
0.06597115844488144,
0.25357234477996826,
-0.2571614682674408,
0.20555756986141205,
-0.22378483414649963,
0.1460435390472412,
0.21253734827041626,
-0.1480105072259903,
-0.08263227343559265,
-0.2412727326154709,
-0.2636549174785614,
0.12977778911590576,
0.008149622939527035,
-0.23166583478450775,
0.32029664516448975,
-0.2968115210533142,
-0.32855933904647827,
0.012963270768523216,
0.17852970957756042,
-0.22166922688484192,
0.04898674041032791,
-0.10440030694007874,
0.06545282155275345,
0.08113574981689453,
0.2095211297273636,
0.2265825867652893,
0.10512042045593262,
0.144334077835083,
0.032813746482133865,
-0.0914253443479538,
0.089408740401268,
0.18947982788085938,
-0.31956300139427185,
0.1333031952381134,
0.05855895206332207,
0.2621016800403595,
-0.24185234308242798,
-0.3029412031173706,
0.038032397627830505,
-0.0845404788851738,
-0.12232550978660583,
-0.0025210168678313494,
0.021772775799036026,
-0.02453819289803505,
-0.10585807263851166,
-0.1233847513794899,
0.08259870857000351,
0.07276731729507446,
0.10565603524446487,
0.027592472732067108,
0.07756209373474121,
-0.04653308913111687,
-0.16464434564113617,
0.21096980571746826,
0.26213520765304565,
-0.06868142634630203,
-0.0046209245920181274,
0.24540521204471588,
-0.06433077156543732,
0.29464706778526306,
-0.2982444167137146,
-0.21197323501110077,
-0.2885926365852356,
-0.31542837619781494,
-0.19397598505020142,
0.14291054010391235,
0.001404638634994626,
-0.06952403485774994,
0.027435971423983574,
0.01357422024011612,
-0.09136978536844254,
0.2451944500207901,
-0.02913953922688961,
0.03823480010032654,
0.054861512035131454,
-0.060499656945466995,
0.009681196883320808,
-0.22642293572425842,
0.1367240995168686,
-0.17251309752464294,
0.018737342208623886,
0.014963710680603981,
0.2542491853237152,
-0.20015186071395874,
0.25853654742240906,
-0.14002735912799835,
-0.2582034766674042,
0.32841014862060547,
-0.18571515381336212,
-0.08320052176713943,
0.1293421983718872,
-0.06993059813976288,
-0.09348488599061966,
-0.13980992138385773,
0.3019014596939087,
-0.035277385264635086,
-0.272876113653183,
0.23946639895439148,
-0.22008036077022552,
0.3029666244983673,
-0.24911370873451233,
-0.2226535975933075,
0.2531462609767914,
0.34333834052085876,
0.2499052733182907,
-0.16655531525611877,
0.13143137097358704,
-0.19772620499134064,
0.08599765598773956,
-0.08613880723714828,
-0.15059149265289307,
0.2788158357143402,
0.26015451550483704,
-0.28026941418647766,
-0.13458552956581116,
0.2551595866680145,
0.17377497255802155,
-0.06638467311859131,
-0.1389770358800888,
-0.1450544148683548,
-0.1536308377981186,
-0.08596483618021011,
0.15500792860984802,
-0.184073805809021,
-0.05355222895741463,
0.2524460554122925,
-0.1592143476009369,
-0.19170120358467102,
0.3398049473762512,
-0.24959135055541992,
0.2723532021045685,
0.03500887379050255,
-0.05681246146559715,
0.1907462775707245,
-0.251956582069397,
0.1393098682165146,
-0.19849897921085358,
0.04446394369006157,
-0.23731529712677002,
-0.007001720834523439,
0.031165268272161484,
-0.035199590027332306,
-0.15072521567344666,
0.3477078974246979,
0.3969382345676422,
-0.15465861558914185,
0.308840811252594,
-0.052270665764808655,
-0.046632319688797,
0.18035933375358582,
-0.13440494239330292,
0.09418109804391861,
-0.09526356309652328,
-0.2583061456680298,
0.05444120615720749,
0.2660149931907654,
0.10355851799249649,
0.15921449661254883,
0.10577038675546646,
-0.32401490211486816,
-0.08890192955732346,
0.24896229803562164,
0.15502378344535828,
-0.13655471801757812,
-0.049703340977430344,
-0.07319707423448563,
0.2081695944070816,
-0.2693161070346832,
-0.208134725689888,
-0.2281547486782074,
0.16282305121421814,
0.3318984806537628,
0.13833798468112946,
0.2141304910182953,
0.13689538836479187,
0.0666254460811615,
-0.17066970467567444,
0.13674502074718475,
-0.1670859009027481,
-0.10880044847726822,
-0.17902757227420807,
0.23424091935157776,
-0.07571674883365631,
-0.16796496510505676,
0.11779127269983292,
0.30140140652656555,
0.09890678524971008,
0.02800935134291649,
-0.28153955936431885,
-0.11171343922615051,
-0.3949679136276245,
-0.14848290383815765,
0.3681057393550873,
0.18836398422718048,
-0.2356330156326294,
-0.018065068870782852,
-0.431328147649765,
-0.2658286392688751,
0.15865620970726013,
0.25473925471305847,
0.03266015276312828,
0.2004195600748062,
-0.14055971801280975,
-0.2752244174480438,
-0.22020407021045685,
-0.29522809386253357,
0.2001911848783493,
-0.1627347469329834,
-0.1265806406736374,
0.16154420375823975,
0.16136988997459412,
-0.13377158343791962,
-0.28374651074409485,
-0.24511784315109253,
0.010923354886472225,
-0.32750555872917175,
0.2900870740413666,
0.10805320739746094,
-0.26848840713500977,
0.22117991745471954,
0.22161927819252014,
-0.2478480488061905,
-0.15924322605133057,
-0.12512603402137756,
-0.05051209777593613,
-0.2600418031215668,
-0.20272891223430634,
0.2514376938343048,
-0.22836944460868835,
0.3601911962032318,
0.2914172112941742,
0.00042406536522321403,
0.11766014248132706,
0.32403919100761414,
0.028075048699975014,
0.09271964430809021,
0.03305940702557564,
-0.014604718424379826,
-0.08276176452636719,
0.0784221664071083,
-0.005649415776133537,
0.2392043024301529,
0.12067846953868866,
0.2585817575454712,
-0.26895850896835327,
-0.032185304909944534,
0.1821339875459671,
-0.15206395089626312,
-0.18256321549415588,
-0.08841270208358765,
0.011988451704382896,
-0.01536600012332201,
-0.2698623239994049,
0.09499026089906693,
0.07787586003541946,
-0.10531967878341675,
0.2864908277988434,
0.03925701975822449,
0.11399514973163605,
-0.15377505123615265,
0.13244211673736572,
0.1685469001531601,
-0.15078048408031464,
0.14276382327079773,
-0.1789945513010025,
0.23540833592414856,
0.1387643963098526,
-0.17148329317569733,
-0.22844015061855316,
-0.13112914562225342,
0.19913779199123383,
0.1136631965637207,
-0.043049558997154236,
-0.11842989176511765,
-0.02490609511733055,
0.03234538063406944,
-0.061787936836481094,
-0.11276630312204361,
-0.2120445817708969,
0.11676819622516632,
-0.12679727375507355,
0.20667721331119537,
0.09415765106678009,
0.29783859848976135,
0.0880185067653656,
0.11800645291805267,
-0.36624205112457275,
-0.09460165351629257,
0.0472431406378746,
-0.27291297912597656,
0.07576009631156921,
-0.04012928903102875,
0.1874290555715561,
0.19909286499023438,
-0.14141744375228882,
-0.04563251882791519,
0.23917703330516815,
-0.2507918179035187,
-0.3213302493095398,
0.2957727313041687,
0.20822428166866302,
-0.30136755108833313,
-0.3266710638999939,
-0.23501691222190857,
-0.17346861958503723,
-0.35884544253349304,
-0.0619332455098629,
0.015549267642199993,
0.20799194276332855,
0.32249024510383606,
-0.1825389266014099,
0.0733325183391571,
-0.14800892770290375,
-0.2547823488712311,
0.3234597444534302,
0.0397985614836216,
0.0426260381937027,
0.2630400061607361,
-0.004252870567142963,
0.22418847680091858,
-0.07549850642681122,
0.3482034504413605,
0.055836256593465805,
0.026319045573472977,
0.1810859888792038,
0.08408114314079285,
-0.011810246855020523,
0.19386039674282074,
0.0006179812480695546,
0.04560203105211258,
-0.1818748116493225,
-0.12098752707242966,
0.31528592109680176,
0.1896088719367981,
0.14505761861801147,
-0.12362340837717056,
-0.08379054814577103,
0.3263767659664154,
0.23911245167255402,
0.06658121943473816,
0.012827501632273197,
0.20076903700828552,
0.2012065201997757,
0.20121751725673676,
-0.02227492444217205,
-0.3677501082420349,
-0.05573313310742378,
-0.33235594630241394,
0.049583550542593,
0.18057219684123993,
-0.0901949480175972,
0.23892326653003693,
-0.19085197150707245,
-0.28352901339530945,
0.13576990365982056,
0.110520139336586,
-0.38534802198410034,
-0.26741907000541687,
0.11364015191793442,
-0.3258451521396637,
0.034308288246393204,
0.1546478271484375,
-0.23325802385807037,
0.0938556045293808,
-0.22467760741710663,
-0.04376271367073059,
-0.24317112565040588,
-0.22045530378818512,
-0.21125786006450653,
0.06265521049499512,
0.19376914203166962,
-0.22761505842208862,
-0.04685712978243828,
0.26659104228019714,
0.2710020840167999,
-0.1666439175605774,
0.14227019250392914,
0.29186341166496277,
0.23787038028240204,
0.023656627163290977,
0.27199745178222656,
-0.36473897099494934,
-0.20961548388004303,
-0.21889150142669678,
-0.06253404170274734,
-0.09976721554994583,
-0.22832287847995758,
0.2325923889875412,
-0.018970610573887825,
-0.08222271502017975,
0.09382952749729156,
-0.16870315372943878,
0.09851162135601044,
0.1789926290512085,
0.21262210607528687,
0.24481917917728424,
-0.28552207350730896,
0.2718998193740845,
-0.026619993150234222,
-0.19057728350162506,
-0.1748328059911728,
0.2158525288105011,
-0.0925266295671463,
0.1660887598991394,
-0.14349325001239777,
0.12519700825214386,
-0.06528405845165253,
-0.38744428753852844,
0.2978243827819824,
-0.3328949809074402,
0.007683995645493269,
-0.08273647725582123,
-0.053393132984638214,
-0.2053641378879547,
0.13093535602092743,
0.29358264803886414,
0.08777157962322235,
-0.014051160775125027,
0.1658666580915451,
0.14456085860729218,
0.19138969480991364,
0.23964810371398926,
0.19926516711711884,
-0.15533168613910675,
0.03538031876087189,
-0.003240209072828293,
0.08887279778718948,
0.13612118363380432,
0.08460468053817749,
0.181221604347229,
0.18294721841812134,
-0.247502401471138,
-0.3031252324581146,
0.14335758984088898,
0.2613135874271393,
0.17216996848583221,
0.2648194134235382,
0.11766662448644638,
0.042217329144477844,
0.13701584935188293,
-0.30172058939933777,
0.259006530046463,
-0.08173128962516785,
-0.042925089597702026,
0.28162530064582825,
0.01855512522161007,
0.10627395659685135,
-0.2732154130935669,
0.08555000275373459,
0.22332000732421875,
-0.17787879705429077,
0.18135884404182434,
0.12253370881080627,
-0.15605393052101135,
0.21823133528232574,
0.07269115000963211,
0.2027406394481659,
0.16096940636634827,
-0.2533554434776306,
-0.17191168665885925,
0.1900753378868103,
-0.07507456839084625,
0.10279057919979095,
0.35853204131126404,
0.1566033512353897,
-0.005073692183941603,
-0.16736719012260437,
0.17326246201992035,
0.06371977180242538,
-0.25480738282203674,
0.3364889621734619,
-0.16257059574127197,
-0.1295921504497528,
0.03744722530245781,
-0.02782791294157505,
-0.1083904430270195,
0.09967104345560074,
0.28038865327835083,
0.21646332740783691,
-0.12242786586284637,
0.06630602478981018,
-0.21958816051483154,
-0.24659009277820587,
0.05270115286111832,
0.29293093085289,
0.17549481987953186,
-0.07742612063884735,
-0.14760540425777435,
0.29425424337387085,
0.1266794055700302,
-0.042843062430620193,
-0.27646055817604065,
-0.2911718189716339,
-0.19423502683639526,
-1.4236884453566745e-06,
-0.0033363818656653166,
-0.315218448638916,
-0.28129664063453674,
0.0788663700222969,
-0.2109377235174179,
0.20051418244838715,
0.049148574471473694,
-0.1080549955368042,
0.006465227343142033,
0.1533662974834442,
0.017716210335493088,
0.0428849421441555,
0.32529008388519287,
0.1971389502286911,
-0.24383226037025452,
0.21193525195121765,
0.16559278964996338,
0.15442222356796265,
-0.19760988652706146,
0.2489442676305771,
-0.13343527913093567,
-0.07854293286800385,
-0.06010456755757332,
0.07447059452533722,
0.16123907268047333,
-0.3138364255428314,
-0.07627054303884506,
-0.32750022411346436,
-0.07567974925041199,
-0.1677822768688202,
0.42937126755714417,
-0.3394778072834015,
-0.32694298028945923,
-0.17930001020431519,
0.3548700511455536,
-0.08099155873060226,
-0.052569180727005005,
0.06785552203655243,
-0.13719512522220612,
0.05885378271341324,
-0.0007322910241782665,
0.1906285285949707,
0.26267117261886597,
-0.14462196826934814,
-0.1407683789730072,
0.3294578790664673,
0.23494824767112732,
-0.025970062240958214,
-0.24869880080223083,
-0.21263332664966583,
0.31604692339897156,
0.09083937108516693,
-0.031286075711250305,
0.05822944641113281,
0.35942140221595764,
-0.2284497171640396,
-0.4229726791381836,
-0.4355800747871399,
0.13267964124679565,
-0.22295919060707092,
0.2502650022506714,
0.05524904653429985,
-0.2988012135028839,
-0.1707448661327362,
0.23401136696338654,
0.0048784734681248665,
-0.143574059009552,
-0.045043427497148514,
-0.038145050406455994,
-0.17140012979507446,
-0.3128022849559784,
-0.04053317755460739,
-0.08998133987188339,
-0.13601066172122955,
-0.08903484791517258,
0.2310839742422104,
0.12821000814437866,
0.03182724863290787,
-0.26883769035339355,
-0.13510380685329437,
-0.14278025925159454,
-0.09538792818784714,
0.03262487053871155,
-0.07195334136486053,
0.08142191171646118,
0.14025169610977173,
-0.03571527451276779,
0.1224500834941864,
0.010303511284291744,
-0.24549081921577454,
-0.05731203779578209,
-0.3244962692260742,
0.009629826992750168,
0.17329007387161255,
0.1280805766582489,
0.33439210057258606,
-0.09963173419237137,
0.352767676115036,
0.2359493523836136,
-0.01460199523717165,
0.07010696828365326,
0.13168039917945862,
-0.09957226365804672,
-0.07932562381029129,
0.24376845359802246,
-0.015595398843288422,
0.23870687186717987,
0.23822414875030518,
-0.1871737837791443,
0.11524804681539536,
0.11099840700626373,
0.17176231741905212,
0.21229708194732666,
-0.28235429525375366,
0.45879971981048584,
0.11362074315547943,
-0.18138404190540314,
0.3430771827697754,
0.24820064008235931,
0.16063351929187775,
-0.013871703296899796,
0.2363298237323761,
0.1817106455564499,
-0.09001267701387405,
0.28557947278022766,
-0.06417360156774521,
-0.15749336779117584,
0.10122212022542953,
0.20234595239162445,
0.19537121057510376,
-0.17799587547779083,
-0.05673188716173172,
0.2775525152683258,
0.24385453760623932,
-0.08094896376132965,
0.12528248131275177,
0.032508429139852524,
-0.04859732836484909,
-0.21877045929431915,
0.1829322725534439,
-0.08901328593492508,
0.10299276560544968,
-0.22311708331108093,
0.2300596982240677,
0.1626131236553192,
-0.24990969896316528,
0.22781915962696075,
-0.09201543778181076,
-0.23068445920944214,
0.2768358886241913,
0.34608039259910583,
0.18614089488983154,
-0.014721614308655262,
0.3119482100009918,
0.16716010868549347,
0.24743269383907318,
-0.17007017135620117,
0.1082824319601059,
-0.2211044430732727,
0.16312001645565033,
0.23326775431632996,
0.00520509947091341,
-0.055609818547964096,
0.22486884891986847,
0.16716688871383667,
-0.11795753240585327,
-0.292547345161438,
-0.34611421823501587,
-0.22552397847175598,
0.13265836238861084,
0.09797512739896774,
0.13726164400577545,
-0.182638019323349,
0.3264246881008148,
0.05432397499680519,
-0.16497771441936493,
0.029075510799884796,
-0.2872007191181183,
0.2711487412452698,
0.2430899441242218,
-0.11829464882612228,
-0.15432889759540558,
-0.2937489151954651,
0.26639437675476074,
-0.1616286337375641,
0.11838144063949585,
-0.016597945243120193,
0.11848841607570648,
-0.1872241050004959,
0.07512150704860687,
-0.11545073240995407,
-0.020337067544460297,
-0.2714013457298279,
0.23789642751216888,
-0.23044219613075256,
0.2327219843864441,
0.2558441162109375,
0.12356643378734589,
0.05653201416134834,
-0.11550971120595932,
0.02092457190155983,
0.2588326632976532,
0.0439005121588707,
-0.26459550857543945,
0.13896691799163818,
0.10146259516477585,
-0.13288678228855133,
-0.11743704974651337,
0.2175058275461197,
0.25109538435935974,
0.08525356650352478,
-0.31026747822761536,
-0.15036961436271667,
-0.0194694921374321,
-0.23500534892082214,
0.2532883286476135,
0.09408340603113174,
0.2828095853328705,
0.1161801815032959,
0.23188093304634094,
-0.09521099925041199,
0.10845620930194855,
0.005273140501230955,
0.013279976323246956,
-0.31745627522468567,
-0.17692331969738007,
-0.04067663103342056,
0.09237293899059296,
-0.058071888983249664,
0.3103708326816559,
-0.24985621869564056,
0.08076050132513046,
-0.13934972882270813,
-0.20261088013648987,
0.20796199142932892,
0.21559502184391022,
0.3661856949329376,
0.3186999261379242,
-0.0846790000796318,
-0.12353065609931946,
0.09625108540058136,
-0.20755784213542938,
-0.08846985548734665,
-0.1315222829580307,
-0.17754952609539032,
0.05806752294301987,
-0.05065644532442093,
0.006131121888756752,
-0.0658482238650322,
0.09806562960147858,
-0.34031105041503906,
-0.22595849633216858,
-0.3122924566268921,
-0.2841871976852417,
0.0736904889345169,
-0.2620982527732849,
-0.042747121304273605,
0.2981817126274109,
-0.20705479383468628,
0.14125679433345795,
-0.11094510555267334,
-0.14271008968353271,
-0.2685644328594208,
0.1329677402973175,
0.24970349669456482,
-0.001217851066030562,
-0.07099326699972153,
0.10131392627954483,
0.047358378767967224,
-0.07702313363552094,
0.13350209593772888,
-0.10324063152074814,
-0.251810222864151,
0.12359385192394257,
-0.13855302333831787,
0.20749174058437347,
-0.16374365985393524,
0.1739979386329651,
-0.24095061421394348,
-0.24313300848007202,
-0.38063034415245056,
0.009244519285857677,
-0.210259348154068,
-0.3051546812057495,
-0.10233864188194275,
0.021708333864808083,
0.13314850628376007,
-0.18437550961971283,
-0.011112324893474579,
0.16595572233200073,
-0.11105945706367493,
-0.10332753509283066,
-0.2244129180908203,
-0.26817598938941956,
0.32427141070365906,
-0.06418915838003159,
0.14406269788742065,
-0.1698991060256958,
0.18799693882465363,
0.30288437008857727,
0.16284866631031036,
-0.013340718112885952,
-0.19198188185691833,
-0.20024555921554565,
-0.2884356379508972,
0.12223903834819794,
0.012429791502654552,
0.10915447026491165,
0.2748945951461792,
-0.34279128909111023,
0.16663378477096558,
-0.05569632351398468,
-0.08498072624206543,
-0.07609495520591736,
-0.23546266555786133,
0.3176823854446411,
0.09133639931678772,
0.13594631850719452,
0.07353048771619797,
-0.08767290413379669,
-0.07242219895124435,
-0.28838562965393066,
0.011261804960668087,
-0.20630794763565063,
0.3047690987586975,
0.036479491740465164,
0.14624056220054626,
0.22891266644001007,
-0.17790772020816803,
0.12646488845348358,
-0.029649414122104645,
-0.10502621531486511,
0.041134368628263474,
0.04185671731829643,
-0.21782828867435455,
0.28842693567276,
-0.1270822286605835,
0.09334690868854523,
-0.18358421325683594,
0.22918666899204254,
0.05109021067619324,
0.2362884283065796,
-0.25194981694221497,
0.07653757929801941,
0.09441547095775604,
-0.09878939390182495,
0.2648886740207672,
-0.3192506730556488,
-0.11108670383691788,
0.3598610460758209,
0.16789546608924866,
0.17700591683387756,
-0.31968846917152405,
0.034212224185466766,
-0.09652655571699142,
0.21762490272521973,
0.04521176964044571,
0.1751018911600113,
0.3271486759185791,
0.08009789139032364,
0.13901817798614502,
0.05791304260492325,
-0.08382784575223923,
0.27027809619903564,
0.19448834657669067,
0.27028000354766846,
-0.2601270079612732,
-0.0525728315114975,
0.29333463311195374,
0.10012346506118774,
0.15786541998386383,
0.019909443333745003,
0.16361016035079956,
-0.10338688641786575,
-0.17158104479312897,
0.07911395281553268,
-0.05444754287600517,
-0.26513317227363586,
0.33199232816696167,
-0.11701266467571259,
-0.12800616025924683,
-0.1522160768508911,
0.2606952488422394,
-0.049338098615407944,
0.0896192193031311,
-0.1088821068406105,
-0.06471151858568192,
-0.3113130033016205,
-0.13257914781570435,
-0.14237496256828308,
-0.3646090626716614,
0.17093642055988312,
-0.3566037118434906,
-0.23436762392520905,
-0.30650094151496887,
-0.10912692546844482,
0.010160429403185844,
0.08968228101730347,
0.17647165060043335,
-0.33967018127441406,
0.033640582114458084,
-0.13868673145771027,
-0.26096951961517334,
0.1884557008743286,
0.07648250460624695,
-0.03544691577553749,
-0.0035887430422008038,
-0.24524655938148499,
0.0969143956899643,
-0.11515504121780396,
-0.22991566359996796,
-0.26952633261680603,
-0.0595664381980896,
0.009339825250208378,
0.0414024218916893,
-0.31137537956237793,
-0.2697409987449646,
0.003941268660128117,
0.04484514147043228,
-0.0769466757774353,
0.18184073269367218,
0.28352585434913635,
-0.1524464637041092,
0.11700769513845444,
0.1512124389410019,
0.2835483253002167,
-0.22137221693992615,
-0.14728796482086182,
0.054932188242673874,
0.07815307378768921,
-0.2295939028263092,
0.036307722330093384,
-0.04356648400425911,
0.36410462856292725,
-0.3305681049823761,
-0.27083277702331543,
0.029933813959360123,
0.15799756348133087,
0.0805220752954483,
0.033952921628952026,
0.11232319474220276,
0.21880364418029785,
-0.1436464935541153,
-0.11407224088907242,
0.24233898520469666,
0.17629380524158478,
-0.17687633633613586,
0.05342448130249977,
0.28709039092063904,
0.28626808524131775,
0.15786324441432953,
-0.16429239511489868,
-0.2691293954849243,
0.13839450478553772,
-0.032795265316963196,
-0.1501418501138687,
0.29414981603622437,
-0.16194656491279602,
-0.20504975318908691,
0.19440892338752747,
-0.02753555402159691,
-0.24835087358951569,
-0.02816166914999485,
0.17023806273937225,
-0.13312789797782898,
0.020530447363853455,
0.2538381516933441,
0.132302924990654,
-0.03220568969845772,
-0.13466687500476837,
0.1953587681055069,
0.2805742919445038,
0.09092865139245987,
-0.11541246622800827,
-0.26102668046951294,
0.13979074358940125,
0.20407819747924805,
-0.13714709877967834,
0.3038567006587982,
-0.07581007480621338,
0.06219206005334854,
0.2617848217487335,
0.28987687826156616,
0.16939634084701538,
0.21198582649230957,
0.23588445782661438,
0.25011980533599854,
-0.041345879435539246,
0.27354609966278076,
0.008095758967101574,
0.13623051345348358,
-0.12281746417284012,
-0.05956725776195526,
-0.1206914484500885,
0.26239994168281555,
-0.316244900226593,
0.06945407390594482,
-0.0719812735915184,
-0.24488753080368042,
0.38012585043907166,
0.14632903039455414,
0.11104939132928848,
0.051305584609508514,
0.018740305677056313,
-0.34517785906791687,
-0.30265381932258606,
0.2409467250108719,
0.17347438633441925,
-0.16284771263599396,
0.004502756986767054,
-0.2887316048145294,
0.04794303700327873,
0.2773052752017975,
-0.15419542789459229,
0.3249882459640503,
0.2681701183319092,
-0.1626923829317093,
-0.19469374418258667,
0.09462790936231613,
-0.04599859192967415,
0.039167143404483795,
-0.21289484202861786,
0.0495099239051342,
0.016439158469438553,
-0.2858703136444092,
0.03573921322822571,
0.23452027142047882,
-0.06174098700284958,
-0.13978712260723114,
0.18164218962192535,
0.026942672207951546,
0.22392643988132477,
-0.033657606691122055,
0.3460586369037628,
-0.24369867146015167,
0.17081992328166962,
0.2563357949256897,
0.09218867123126984,
-0.13170121610164642,
0.2475002408027649,
0.020521271973848343,
-0.008204071782529354,
-0.25949355959892273,
0.18778786063194275,
-0.27316421270370483,
-0.23865163326263428,
0.17355582118034363,
-0.19326023757457733,
0.25288745760917664,
-0.2848444879055023,
-0.1520448625087738,
0.17108024656772614,
-0.15640980005264282,
-0.023134198039770126,
-0.08931441605091095,
0.1469998061656952,
0.21849291026592255,
-0.31109288334846497,
-0.276577889919281,
0.3874184191226959,
0.18811941146850586,
0.20596939325332642,
-0.2801695168018341,
0.2920968532562256,
-0.23510867357254028,
0.056096650660037994,
0.14647065103054047,
0.20779334008693695,
0.1973927915096283,
-0.127004474401474,
0.20779840648174286,
-0.07766017317771912,
0.24330280721187592,
0.4018608033657074,
0.10168084502220154,
-0.17062538862228394,
0.22703894972801208,
0.3028005361557007,
-0.08895166963338852,
0.22376547753810883,
-0.1453440934419632,
-0.0464041642844677,
0.16425183415412903,
-0.10003606230020523,
0.07111214101314545,
0.17659646272659302,
0.030731530860066414,
0.08409792184829712,
0.24249267578125,
0.3223053812980652,
0.0006362890126183629,
0.07019162178039551,
-0.20884858071804047,
0.1629595011472702,
-0.056376464664936066,
-0.040792401880025864,
-0.031055154278874397,
0.021946169435977936,
-0.16283893585205078,
-0.21935971081256866,
0.07366510480642319,
0.004776036832481623,
-0.2006153017282486,
0.2042122781276703,
-0.08382351696491241,
-0.182023286819458,
0.010590829886496067,
-0.2810584008693695,
-0.2239248901605606,
-0.08024705201387405,
-0.2507472336292267,
-0.06473080813884735,
-0.043295394629240036,
-0.3251488208770752,
-0.007182772736996412,
-0.28607994318008423,
-0.0013105685357004404,
-0.07464460283517838,
-0.03388302028179169,
0.14557963609695435,
-0.3569865822792053,
-0.03670724853873253,
0.13907042145729065,
0.004689717199653387,
0.3047631084918976,
0.2981565296649933,
-0.07948015630245209,
0.08986485749483109,
-0.04041709750890732,
-0.035189397633075714,
0.1742706447839737,
-0.11571278423070908,
0.2158282846212387,
0.07604535669088364,
0.25436416268348694,
0.23128417134284973,
0.05663274601101875,
-0.20396435260772705,
0.2764365077018738,
0.09688003361225128,
0.18074508011341095,
-0.29172760248184204,
-0.28797608613967896,
0.07692137360572815,
-0.1383124589920044,
0.25568899512290955,
0.19354654848575592,
-0.02785533294081688,
0.23035170137882233,
0.3218699097633362,
0.30099284648895264,
-0.22421903908252716,
0.12279893457889557,
-0.16215330362319946,
-0.09272463619709015,
0.17363101243972778,
-0.19083216786384583,
-0.04932992905378342,
0.24060313403606415,
-0.2267642766237259,
-0.2543692886829376,
0.14875143766403198,
0.22027409076690674,
0.009809909388422966,
-0.15164580941200256,
-0.028824331238865852,
0.06836766749620438,
0.2368374764919281,
-0.03339376300573349,
0.2792445719242096,
0.23837947845458984,
-0.07619109004735947,
-0.1111825555562973,
0.11606273055076599,
-0.2780817747116089,
0.024798516184091568,
-0.24342337250709534,
-0.10325571149587631,
0.11521097272634506,
0.0739610567688942,
-0.19979022443294525,
0.29921990633010864,
0.10275030136108398,
0.24641679227352142,
-0.03213530406355858,
0.10555434972047806,
-0.052502039819955826,
-0.19002985954284668,
-0.06427720934152603,
0.08292222023010254,
0.06892776489257812,
-0.07589541375637054,
-0.2049298882484436,
-0.1414577066898346,
0.30562591552734375,
0.1380344182252884,
-0.02660319395363331,
-0.0019301932770758867,
-0.20122721791267395,
-0.114500992000103,
0.13663683831691742,
0.11196836084127426,
0.28126102685928345,
0.04756864160299301,
0.13861896097660065,
0.3139594793319702,
-0.01459411345422268,
-0.11596806347370148,
-0.11914730072021484,
0.24520649015903473,
0.14755402505397797,
0.21799735724925995,
-0.12502361834049225,
0.10532643646001816,
0.1951822191476822,
0.20975540578365326,
0.2633276581764221,
0.26380637288093567,
-0.12285444885492325,
0.0643170177936554,
-0.2503127157688141,
-0.09350519627332687,
0.14256136119365692,
-0.16075396537780762,
0.08824533224105835,
-0.3301644027233124,
0.05618223920464516,
-0.23858848214149475,
0.24145478010177612,
-0.014238748699426651,
0.07886070013046265,
0.4050118923187256,
0.08176863938570023,
-0.025448855012655258,
0.017327718436717987,
-0.07854025810956955,
0.2419501543045044,
0.23215606808662415,
-0.2879233956336975,
-0.0617053359746933,
-0.16362117230892181,
-0.09199199080467224,
-0.21649201214313507,
0.18351837992668152,
0.033765532076358795,
-0.1721392273902893,
-0.25188058614730835,
-0.19119730591773987,
0.19380301237106323,
0.09252797067165375,
0.1900174468755722,
0.05536608397960663,
-0.309644490480423,
0.1573994904756546,
0.12939655780792236,
-0.12276360392570496,
0.1878262758255005,
-0.23433800041675568,
-0.24882569909095764,
-0.20325309038162231,
0.2616663873195648,
0.010165117681026459,
0.03046790324151516,
-0.10263883322477341,
-0.21416951715946198,
-0.2428300380706787,
0.42261913418769836,
-0.13257662951946259,
-0.28819820284843445,
0.037969522178173065,
-0.3417437970638275,
0.23876875638961792,
0.07698005437850952,
0.1571202129125595,
-0.20052388310432434,
-0.20095203816890717,
0.1477997601032257,
-0.258709579706192,
-0.32987746596336365,
0.12248517572879791,
0.20695824921131134,
-0.08604200184345245,
0.31247660517692566,
-0.0020659405272454023,
-0.1745515763759613,
-0.3128041625022888,
0.32265380024909973,
-0.012869544327259064,
-0.09353487193584442,
-0.09491003304719925,
-0.20092535018920898,
-0.27761539816856384,
-0.2327154129743576,
0.008687237277626991,
0.22538085281848907,
-0.08532529324293137,
0.16118104755878448,
-0.23917049169540405,
-0.08355224877595901,
-0.3452857732772827,
-0.08154845237731934,
0.08475258201360703,
-0.12961997091770172,
-0.1531088501214981,
0.03495378419756889,
-0.06998169422149658,
-0.1938910335302353,
0.17579370737075806,
-0.018402371555566788,
0.014000711031258106,
-0.08950494974851608,
0.1444391906261444,
0.11732036620378494,
0.07900609821081161,
-0.06130049750208855,
-0.1920786052942276,
-0.1318833976984024,
-0.2451111376285553,
0.26521435379981995,
-0.18930624425411224,
0.04882774129509926,
-0.3269653022289276,
0.014329381287097931,
-0.29145461320877075,
-0.11260110139846802,
-0.320568710565567,
-0.1885984241962433,
-0.037668343633413315,
-0.20378126204013824,
0.2660955488681793,
-0.08232706785202026,
-0.03582296893000603,
0.2685226500034332,
0.230628103017807,
-0.049543507397174835,
0.18547089397907257,
0.1614830642938614,
0.15246853232383728,
0.3303557336330414,
0.3138580620288849,
-0.09310203790664673,
0.03629619628190994,
-0.06687983870506287,
-0.26645150780677795,
-0.2297171652317047,
-0.2399977743625641,
0.14286097884178162,
-0.2944702208042145,
0.29957857728004456,
0.2604486048221588,
-0.14232346415519714,
-0.24299539625644684,
0.19980254769325256,
-0.03548305109143257,
-0.2502190172672272,
-0.06471420079469681,
0.06499050557613373,
-0.2232527881860733,
-0.05857698991894722,
-0.2389136105775833,
0.19504784047603607,
0.20625077188014984,
-0.09187909960746765,
-0.29230254888534546,
0.04094898700714111,
0.204408198595047,
0.08469698578119278,
0.3961479961872101,
0.029406670480966568,
-0.04510284215211868,
-0.06554975360631943,
0.21783119440078735,
0.2647913694381714,
0.24488596618175507,
0.04047023132443428,
-0.1995667964220047,
0.11207672953605652,
0.14886070787906647,
-0.23814599215984344,
-0.42897090315818787,
-0.35817742347717285,
-0.05529789999127388,
0.2287905514240265,
0.16492052376270294,
0.19511425495147705,
-0.10765214264392853,
-0.295464426279068,
0.1752595752477646,
-0.17555223405361176,
0.171433687210083,
0.23796606063842773,
-0.005641883704811335,
-0.19555459916591644,
0.35197845101356506,
-0.08762900531291962,
-0.2261744737625122,
-0.17118652164936066,
0.10108672082424164,
-0.3436198830604553,
-0.18282537162303925,
-0.19504830241203308,
-0.07462354749441147,
0.3074003756046295,
0.060079220682382584,
-0.02363729104399681,
-0.13524720072746277,
-0.05019764229655266,
0.31273362040519714,
0.3179996609687805,
0.2985036373138428,
0.07006371766328812,
-0.09054533392190933,
0.11023081839084625,
-0.23058316111564636,
0.1921232044696808,
-0.1671638786792755,
-0.10715360939502716,
-0.11316206306219101,
0.19275997579097748,
0.02174072153866291,
-0.43727803230285645,
-0.09218727797269821,
0.056811969727277756,
0.27804791927337646,
0.10955619812011719,
-0.2426278293132782,
-0.24995599687099457,
0.09883017092943192,
0.11295148730278015,
-0.027423718944191933,
-0.3185711205005646,
-0.06479799747467041,
-0.14540688693523407,
0.20284149050712585,
-0.11592984944581985,
0.14389726519584656,
0.12664037942886353,
-0.21179716289043427,
-0.08334814757108688,
0.06538864225149155,
0.03823494538664818,
0.00418252544477582,
0.15773627161979675,
0.2469833940267563,
-0.2640581429004669,
0.03278227150440216,
0.03500978648662567,
-0.20773659646511078,
0.27982673048973083,
-0.10396051406860352,
0.07094205915927887,
-0.2469889223575592,
0.013579165562987328,
0.11286640167236328,
-0.1606227606534958,
-0.06017275154590607,
0.2781367301940918,
-0.20453864336013794,
0.260709673166275,
0.1264849305152893,
-0.24145178496837616,
-0.4080060124397278,
0.0761381983757019,
-0.23896072804927826,
-0.007888484746217728,
-0.2028091996908188,
0.01647239550948143,
0.20682859420776367,
-0.3235264718532562,
-0.008483829908072948,
0.005480270832777023,
0.18767213821411133,
-0.2813052833080292,
-0.1579209864139557,
-0.08710206300020218,
0.2451600879430771,
0.22833822667598724,
-0.1590271145105362,
0.24495790898799896,
0.22788335382938385,
-0.3617238700389862,
0.11141310632228851,
-0.27223822474479675,
0.1355755627155304,
-0.007889898493885994,
-0.013681558892130852,
0.25195080041885376,
0.03183312341570854,
-0.06275880336761475,
0.11181627213954926,
-0.13762718439102173,
0.09591774642467499,
0.22826704382896423,
0.3420228362083435,
0.2071383148431778,
-0.32100868225097656,
0.16147316992282867,
-0.36452168226242065,
-0.08198787271976471,
0.16428807377815247,
-0.056341394782066345,
-0.09108292311429977,
-0.0373305082321167,
0.072047658264637,
-0.1302010416984558,
-0.1775815337896347,
-0.14422905445098877,
0.17368175089359283,
-0.1171826645731926,
-0.07837476581335068,
-0.10155520588159561,
-0.08500050008296967,
0.025930631905794144,
-0.2976720631122589,
0.12538662552833557,
0.14302615821361542,
0.1332145780324936,
-0.05525682866573334,
-0.02385341003537178,
0.08306290209293365,
-0.1970181167125702,
-0.14741265773773193,
-0.4535534381866455,
-0.20030277967453003,
0.10722246021032333,
-0.11739877611398697,
0.19121652841567993,
0.12065231800079346,
0.13678725063800812,
-0.3244917094707489,
-0.31242701411247253,
-0.08573494851589203,
0.08729048818349838,
0.08004427701234818,
-0.07526067644357681,
0.1906297653913498,
0.16841596364974976,
0.03411681950092316,
0.18481050431728363,
0.1725378781557083,
-0.2307855635881424,
-0.13196727633476257,
0.14909596741199493,
0.11450106650590897,
-0.10776674002408981,
0.07801371067762375,
0.16748124361038208,
0.10918985307216644,
0.18589018285274506,
-0.2772640287876129,
-0.36464861035346985,
0.18580222129821777,
0.12694600224494934,
0.19953684508800507,
0.3266142010688782,
-0.19388967752456665,
0.28373289108276367,
-0.023444319143891335,
-0.06387396156787872,
-0.2981848120689392,
-0.2849063575267792,
0.03998139128088951,
-0.2864340543746948,
-0.2868434190750122,
0.16170547902584076,
-0.30876174569129944,
0.2605517506599426,
-0.19632698595523834,
-0.01860835961997509,
-0.28961771726608276,
-0.06704629957675934,
0.025278287008404732,
-0.2380887120962143,
0.06184130907058716,
0.17300978302955627,
-0.20372417569160461,
-0.22220046818256378,
-0.14560359716415405,
-0.1493532359600067,
0.1459982991218567,
0.21443600952625275,
0.2739715576171875,
0.05867036432027817,
0.012443128041923046,
0.21656343340873718,
0.3834514319896698,
0.30134114623069763,
-0.18874341249465942,
-0.11531008780002594,
-0.13411270081996918,
0.11748816817998886,
0.34051692485809326,
0.1682388037443161,
-0.187789648771286,
0.2963244616985321,
-0.3241526484489441,
-0.24796052277088165,
-0.149386465549469,
-0.04548255726695061,
-0.17867586016654968,
-0.22251082956790924,
-0.3042524456977844,
0.2061152309179306,
-0.29016175866127014,
0.3108951449394226,
0.17080821096897125,
-0.30790799856185913,
-0.08244158327579498,
-0.06426342576742172,
0.1866818517446518,
-0.3181720972061157,
-0.0702095702290535,
0.14518553018569946,
-0.16440394520759583,
0.01797839254140854,
-0.1247931644320488,
-0.029154624789953232,
0.14246641099452972,
0.1839352250099182,
-0.12389866262674332,
-0.27420011162757874,
0.15486159920692444,
0.16639946401119232,
-0.1275617629289627,
0.017369531095027924,
-0.01596933975815773,
0.19605882465839386,
-0.08605705946683884,
0.3000301122665405,
0.1738077849149704,
-0.23263156414031982,
-0.10257444530725479,
-0.1649017035961151,
-0.061587970703840256,
-0.2704562842845917,
0.05056567117571831,
-0.0009777810191735625,
-0.007867759093642235,
-0.04242359474301338,
-0.3368198275566101,
-0.2990536689758301,
0.11739598214626312,
0.06095733121037483,
0.10401267558336258,
-0.1601973921060562,
0.12286286056041718,
0.2543056607246399,
-0.16835609078407288,
-0.3072187602519989,
0.2884129583835602,
-0.06222138553857803,
-0.15639165043830872,
0.21547940373420715,
0.33159446716308594,
-0.08081737905740738,
-0.2922535240650177,
0.014049087651073933,
0.052962977439165115,
-0.2441713660955429,
0.07833883911371231,
0.13719385862350464,
-0.16917717456817627,
0.4062902629375458,
0.24774965643882751,
0.1439676135778427,
-0.2693770229816437,
0.21862901747226715,
0.011671967804431915,
-0.01392077375203371,
0.05855037644505501,
0.11921676993370056,
0.056366704404354095,
0.21605536341667175,
-0.35728776454925537,
-0.2274940311908722,
-0.1687549501657486,
0.14693428575992584,
0.11640999466180801,
0.1538863480091095,
0.05596008524298668,
0.29157814383506775,
-0.2678598165512085,
-0.21769095957279205,
0.13432835042476654,
-0.054929882287979126,
0.1857556402683258,
0.2621822655200958,
0.32769596576690674,
-0.20073382556438446,
-0.26311028003692627,
0.15751288831233978,
-0.14162126183509827,
-0.10332099348306656,
0.1295129507780075,
-0.03152969107031822,
0.026484860107302666,
0.24847723543643951,
0.1818149834871292,
-0.1424805223941803,
0.16100037097930908,
0.019798308610916138,
0.17476128041744232,
0.08959168195724487,
-0.2980307340621948,
0.3436599671840668,
-0.056261323392391205,
0.3814169466495514,
0.22608397901058197,
0.15128010511398315,
0.051434822380542755,
-0.15025323629379272,
0.12301436066627502,
-0.21878133714199066,
-0.022327205166220665,
-0.08619295060634613,
0.08703245222568512,
0.05061662569642067,
-0.29226866364479065,
-0.0886676236987114,
-0.029467778280377388,
0.10146579146385193,
0.2609306573867798,
-0.2560969591140747,
-0.3009405732154846,
0.12232128530740738,
-0.16068878769874573,
0.2072262316942215,
-0.11694936454296112,
-0.11325148493051529,
-0.09924407303333282,
0.028581302613019943,
0.2630177438259125,
-0.36303630471229553,
-0.31133371591567993,
-0.1854160726070404,
-0.02944008819758892,
-0.01685785874724388,
0.24641364812850952,
-0.338543176651001,
-0.21480920910835266,
-0.32912397384643555,
-0.1462697684764862,
-0.147423654794693,
-0.2174818217754364,
0.15241234004497528,
0.04106888547539711,
-0.12227895110845566,
0.21291489899158478,
0.2111697494983673,
0.1743011474609375,
-0.009617014788091183,
0.13104090094566345,
-0.07618425786495209,
-0.11003529280424118,
-0.1490844488143921,
0.09763982892036438,
-0.13663506507873535,
-0.18126554787158966,
0.06966276466846466,
0.3810703456401825,
-0.0920465961098671,
-0.0807047113776207,
0.19306057691574097,
-0.0850706398487091,
0.20200422406196594,
0.35671862959861755,
0.11484397947788239,
-0.13471083343029022,
-0.08190981298685074,
0.09391654282808304,
0.21444754302501678,
-0.06280453503131866,
-0.19011381268501282,
0.12776567041873932,
-0.10836809128522873,
-0.08971930295228958,
0.05459173768758774,
0.02864493429660797,
0.13587674498558044,
-0.041321881115436554,
0.09677620977163315,
0.1457415521144867,
-0.25607234239578247,
0.10447049885988235,
-0.11181958764791489,
-0.022082943469285965,
0.2875324785709381,
0.24494947493076324,
0.3475568890571594,
0.04745258763432503,
0.38826999068260193,
0.10281123220920563,
0.09424231946468353,
-0.02573050744831562,
-0.1928732544183731,
-0.2754496932029724,
-0.1185155138373375,
0.1733947992324829,
-0.06431429088115692,
0.09195199608802795,
-0.015195232816040516,
-0.13790370523929596,
-0.18677754700183868,
-0.014202860184013844,
0.1910877227783203,
0.2474634200334549,
0.14664143323898315,
-0.049613747745752335,
0.2730769217014313,
-0.250120609998703,
-0.1195119172334671,
-0.37826764583587646,
-0.1409246176481247,
-0.16326484084129333,
0.0036784568801522255,
0.24237065017223358,
-0.07682935148477554,
0.26960331201553345,
0.08706444501876831,
0.03316332399845123,
-0.012408018112182617,
0.07825781404972076,
0.053305454552173615,
-0.12085249274969101,
-0.2247813642024994,
-0.20497365295886993,
-0.03417971357703209,
-0.37181568145751953,
0.13204126060009003,
-0.29246985912323,
0.013131399638950825,
-0.0747077539563179,
0.1877678632736206,
0.027944602072238922,
-0.026774106547236443,
0.21611593663692474,
0.37644603848457336,
-0.12433294951915741,
-0.09489751607179642,
0.12269455939531326,
0.10821470618247986,
-0.2555831968784332,
0.056196682155132294,
0.3545413017272949,
-0.23616936802864075,
-0.2676682770252228,
-0.1275259256362915,
-0.15799029171466827,
0.3890281915664673,
-0.06400540471076965,
-0.0038459845818579197,
0.18229500949382782,
0.20358332991600037,
-0.3354416787624359,
-0.2973095774650574,
-0.08382457494735718,
-0.29004383087158203,
0.06146193668246269,
-0.31411945819854736,
-0.028787018731236458,
-0.05369266867637634,
-0.003931790590286255,
-0.0740494579076767,
0.18538038432598114,
0.2598396837711334,
0.0028347184415906668,
-0.16164761781692505,
0.160486102104187,
-0.04703056067228317,
-0.06117967888712883,
0.2107318639755249,
0.23789110779762268,
0.23772574961185455,
0.19383402168750763,
0.08773989230394363,
0.1514894664287567,
-0.18209289014339447,
-0.3172374665737152,
0.13495774567127228,
-0.06078816577792168,
-0.21933358907699585,
0.009439590387046337,
0.022562623023986816,
-0.23931598663330078,
0.0015458350535482168,
-0.25284910202026367,
-0.05994256213307381,
0.06750695407390594,
0.17442436516284943,
0.1276911199092865,
-0.13705551624298096,
-0.2500813603401184,
0.284942626953125,
0.15703696012496948,
0.16230887174606323,
0.16899657249450684,
0.07182645797729492,
0.015843890607357025,
0.08048145473003387,
0.3182404935359955,
0.15958653390407562,
0.159320667386055,
-0.025386180728673935,
0.07627913355827332,
0.14099472761154175,
-0.17701400816440582,
-0.07619523257017136,
-0.13361331820487976,
-0.08502203226089478,
0.17449520528316498,
0.1680176556110382,
-0.16941571235656738,
-0.14007827639579773,
0.1970689743757248,
-0.28237175941467285,
-0.03733087703585625,
-0.08919883519411087,
-0.12293154746294022,
-0.07399839162826538,
0.14012840390205383,
-0.06767820566892624,
-0.018654515966773033,
-0.10771597176790237,
0.198719322681427,
0.16911186277866364,
-0.1636221557855606,
0.04423262178897858,
-0.13067565858364105,
-0.14556652307510376,
-0.1819445788860321,
0.21396449208259583,
0.2277001291513443,
-0.26561102271080017,
-0.2922418713569641,
-0.09691917151212692,
-0.13455675542354584,
-0.27504754066467285,
-0.14220963418483734,
0.238089457154274,
0.025108695030212402,
0.39597371220588684,
0.13676181435585022,
-0.17964714765548706,
-0.2302996963262558,
-0.015744276344776154,
-0.15314385294914246,
-0.11714552342891693,
-0.16258011758327484,
-0.08280851691961288,
0.19681422412395477,
0.28088119626045227,
0.2185584008693695,
-0.13708463311195374,
-0.048569243401288986,
0.3642052114009857,
-0.06039245426654816,
0.0294791329652071,
0.03367028385400772,
0.1356724351644516,
-0.1914920210838318,
0.20938090980052948,
0.04146195575594902,
-0.0948524996638298,
-0.1833994835615158,
-0.0991724357008934,
-0.004951448179781437,
-0.18118269741535187,
-0.08271211385726929,
0.18475884199142456,
0.26337161660194397,
0.0516304187476635,
-0.01133485697209835,
-0.079375259578228,
0.016583744436502457,
0.23179824650287628,
-0.2758350372314453,
-0.21888987720012665,
-0.005869090557098389,
0.1759607493877411,
0.09304340183734894,
-0.23095491528511047,
-0.2634868919849396,
0.06474483758211136,
-0.2742001414299011,
0.2607119679450989,
0.16528131067752838,
-0.006806257646530867,
0.1433582752943039,
-0.07200092077255249,
-0.07622243463993073,
0.2852378189563751,
0.030865740031003952,
0.21349091827869415,
-0.11839393526315689,
-0.1849323958158493,
0.09774928539991379,
0.11811336129903793,
0.402964323759079,
0.34274768829345703,
0.18826474249362946,
0.24565337598323822,
0.09250254184007645,
-0.047994911670684814,
0.23297128081321716,
-0.046669766306877136,
-0.11307457089424133,
-0.06549885869026184,
-0.11879333108663559,
0.30409762263298035,
-0.33202508091926575,
-0.05850755050778389,
0.16883310675621033,
0.3033205568790436,
0.09693214297294617,
-0.10257210582494736,
0.08560454100370407,
-0.03508635610342026,
-0.30397820472717285,
0.13140517473220825,
-0.021115142852067947,
-0.12939570844173431,
0.031689006835222244,
-0.13694556057453156,
-0.21990284323692322,
0.054321806877851486,
-0.18488137423992157,
0.18018804490566254,
0.21099291741847992,
0.10189691931009293,
-0.016977662220597267,
0.06701590120792389,
-0.07288581877946854,
0.24298180639743805,
0.25764650106430054,
-0.27871036529541016,
-0.31969037652015686,
-0.15447847545146942,
-0.03105846606194973,
-0.0030778818763792515,
-0.14721158146858215,
-0.1711314469575882,
0.0117357661947608,
-0.16866624355316162,
-0.033616743981838226,
0.0016224205028265715,
-0.26451945304870605,
0.05018886923789978,
0.0666235014796257,
-0.08789301663637161,
0.026112062856554985,
0.17238011956214905,
-0.20512385666370392,
0.10008155554533005,
0.03314198553562164,
0.29028627276420593,
-0.27062055468559265,
0.12714597582817078,
0.13843557238578796,
-0.20701417326927185,
-0.37036430835723877,
-0.06518156826496124,
0.293195903301239,
-0.10222502052783966,
-0.1227729395031929,
-0.00258544459939003,
0.11876588314771652,
0.039539650082588196,
0.3197624981403351,
-0.06950600445270538,
0.04745630547404289,
0.2465161234140396,
-0.08998390287160873,
-0.16232933104038239,
0.01732378453016281,
-0.06524576246738434,
-0.0390276163816452,
-0.3355066776275635,
-0.04945581778883934,
-0.025172142311930656,
-0.14787879586219788,
0.1338319629430771,
0.3461146056652069,
0.06814226508140564,
0.3184455931186676,
0.0613064244389534,
-0.03665388002991676,
0.08838672190904617,
-0.09976885467767715,
-0.045185741037130356,
-0.17489290237426758,
-0.13970257341861725,
0.2418963760137558,
-0.07168634235858917,
0.14572849869728088,
0.18069949746131897,
-0.13878731429576874,
-0.16170479357242584,
-0.3493128716945648,
0.19961220026016235,
-0.16524875164031982,
-0.0499211885035038,
-0.06274907290935516,
-0.05736784264445305,
-0.044056735932826996,
0.2107527256011963,
-0.14772862195968628,
-0.2169540524482727,
0.21685177087783813,
-0.07091119885444641,
0.1218474805355072,
0.19387409090995789,
-0.11610347777605057,
0.12710542976856232,
-0.023454245179891586,
-0.12891432642936707,
-0.11185743659734726,
0.08933141827583313,
-0.06240095570683479,
-0.1931566298007965,
0.27973732352256775,
0.18218189477920532,
0.0892181321978569,
-0.015210827812552452,
0.006337890867143869,
0.18322685360908508,
-0.34974437952041626,
0.03029256872832775,
-0.170510932803154,
-0.007276094518601894,
0.15766757726669312,
-0.3050958514213562,
-0.020069140940904617,
-0.17612098157405853,
-0.20474740862846375,
-0.06365280598402023,
-0.20229743421077728,
-0.28335586190223694,
-0.11311287432909012,
-0.147805318236351,
-0.13362635672092438,
0.11273536086082458,
-0.2807943522930145,
0.0416073277592659,
-0.15750454366207123,
0.20985083281993866,
-0.1071741133928299,
-0.2939620912075043,
-0.08988572657108307,
0.36601120233535767,
0.3565964102745056,
0.14915180206298828,
-0.12309140712022781,
0.14042803645133972,
0.30947524309158325,
-0.34468305110931396,
0.14673955738544464,
0.28269854187965393,
-0.19842739403247833,
-0.11810015141963959,
-0.03360546752810478,
-0.10140974074602127,
0.0824345052242279,
-0.08644479513168335,
-0.034507181495428085,
-0.15260116755962372,
-0.26551586389541626,
0.22339393198490143,
-0.10310725122690201,
-0.324400931596756,
0.16714763641357422,
-0.041291672736406326,
0.2334378957748413,
-0.21188576519489288,
-0.019566304981708527,
-0.2060205340385437,
-0.1977839171886444,
0.07674121111631393,
-0.12787510454654694,
-0.1437559872865677,
-0.15296675264835358,
-0.24851492047309875,
0.0674482062458992,
0.16957177221775055,
0.12781766057014465,
0.14793136715888977,
0.13722454011440277,
-0.11278588324785233,
-0.24121695756912231,
0.2949528098106384,
0.04985105246305466,
0.1127830371260643,
-0.2482326328754425,
-0.007707931101322174,
0.11944712698459625,
0.0323881097137928,
-0.24099215865135193,
0.2153921127319336,
-0.052584629505872726,
0.21552738547325134,
0.15279388427734375,
0.1579786092042923,
0.11193700134754181,
-0.19910676777362823,
-0.25398263335227966,
0.02726011537015438,
-0.08720466494560242,
-0.13473111391067505,
-0.3578081727027893,
0.16088718175888062,
0.004189980681985617,
-0.24497690796852112,
-0.010252769105136395,
-0.14176906645298004,
-0.2649456560611725,
-0.15076684951782227,
-0.11988027393817902,
0.21762175858020782,
0.06878088414669037,
0.08228932321071625,
0.12420592457056046,
-0.0008086450980044901,
0.2889591157436371,
-0.1155097484588623,
-0.18383929133415222,
0.03697862848639488,
0.25781387090682983,
0.05618574842810631,
-0.06702155619859695,
-0.013134797103703022,
0.08880844712257385,
0.2087494432926178,
0.275991290807724,
0.11885500699281693,
-0.15776455402374268,
-0.11563435196876526,
0.02771742455661297,
-0.25815168023109436,
-0.059801824390888214,
0.23406442999839783,
-0.1299077272415161,
-0.11863035708665848,
-0.05584937334060669,
0.12187202274799347,
0.06628522276878357,
-0.027526332065463066,
-0.04163229838013649,
-0.08022524416446686,
-0.062478840351104736,
0.1388145238161087,
0.07245737314224243,
0.1661536991596222,
-0.01848968118429184,
0.16277094185352325,
-0.03106788545846939,
-0.04062748700380325,
-0.14308124780654907,
-0.12573406100273132,
0.21274983882904053,
0.08440646529197693,
-0.14208665490150452,
0.17273853719234467,
0.05938546732068062,
-0.01112138107419014,
0.05622405186295509,
0.169527068734169,
0.23006798326969147,
-0.12034094333648682,
-0.02354401908814907,
-0.21538841724395752,
-0.25565141439437866,
0.045658327639102936,
-0.11815346777439117,
-0.1836368292570114,
0.2514443099498749,
0.07333820313215256,
-0.07043133676052094,
-0.044736701995134354,
-0.19367679953575134,
0.07854178547859192,
0.029081955552101135,
-0.12935520708560944,
-0.0005349285784177482,
0.10127635300159454,
-0.0004385245847515762,
0.28743776679039,
-0.11486942321062088,
-0.04477855563163757,
-0.05074865743517876,
-0.1438075453042984,
-0.0923033207654953,
-0.004549620673060417,
0.09979679435491562,
-0.23079101741313934,
-0.17857064306735992,
0.11652927100658417,
-0.2747361660003662,
0.2698972821235657,
-0.1949051469564438,
0.15579450130462646,
-0.24331487715244293,
0.07634057104587555,
0.13958391547203064,
-0.08053787797689438,
-0.13061895966529846,
-0.01251364778727293,
-0.2815186679363251,
0.0007105311378836632,
-0.23426692187786102,
-0.008331360295414925,
0.09744460880756378,
-0.03368489071726799,
-0.21280233561992645,
-0.041590847074985504,
0.008095411583781242,
0.09287958592176437,
0.26143932342529297,
0.23932786285877228,
-0.2249048948287964,
0.06731465458869934,
0.08747151494026184,
-0.033254820853471756,
0.11150806397199631,
-0.13284288346767426,
-0.007561570964753628,
-0.1806989461183548,
0.1594688594341278,
-0.07532057911157608,
0.20853103697299957,
0.008741112425923347,
-0.054614726454019547,
-0.28175318241119385,
0.17934732139110565,
-0.027414247393608093,
0.04465552791953087,
-0.14411449432373047,
-0.33040326833724976,
0.09777919203042984,
-0.05960160866379738,
-0.07199899107217789,
-0.015774475410580635,
-0.14407604932785034,
0.06938908994197845,
0.19415754079818726,
0.230159729719162,
0.048569511622190475,
0.21184059977531433,
-0.21815313398838043,
0.14084284007549286,
-0.2847062647342682,
0.06711383163928986,
-0.08095379173755646,
0.2556985914707184,
0.10604788362979889,
0.3387027978897095,
-0.09113329648971558,
0.22200648486614227,
-0.1021241769194603,
0.25710591673851013,
-0.23659464716911316,
0.07227785885334015,
-0.11380727589130402,
-0.15599434077739716,
0.10769279301166534,
-0.2477850615978241,
-0.129546657204628,
0.0887584313750267,
0.306670606136322,
0.3382990062236786,
-0.04494943469762802,
0.17444804310798645,
-0.21076202392578125,
-0.04885787516832352,
0.1462162882089615,
-0.01014208234846592,
-0.09386363625526428,
-0.007717541418969631,
-0.019040172919631004,
0.0993337631225586,
0.06745830178260803,
-0.057434361428022385,
0.12811383605003357,
-0.2682085931301117,
0.209207221865654,
-0.29587122797966003,
-0.0071367304772138596,
-0.343431681394577,
-0.005383516661822796,
-0.14622047543525696,
-0.07085870206356049,
-0.02736075408756733,
-0.03537994995713234,
0.047563254833221436,
-0.07197346538305283,
0.11192789673805237,
0.19809836149215698,
-0.4043216109275818,
-0.10756287723779678,
0.10799571871757507,
-0.06484348326921463,
0.21798908710479736,
0.19172658026218414,
0.40697216987609863,
0.16126203536987305,
-0.04712287336587906,
0.043626584112644196,
0.1276741474866867,
-0.16761736571788788,
-0.022539392113685608,
0.08792755752801895,
-0.2145242542028427,
0.3457236588001251,
-0.005490903276950121,
0.060688093304634094,
-0.22708049416542053,
-0.06604362279176712,
0.06644216924905777,
0.07111084461212158,
-0.08490940183401108,
0.3768957853317261,
-0.09421861916780472,
0.19857750833034515,
-0.17122676968574524,
0.09348735958337784,
-0.0015340900281444192,
-0.04253436252474785,
0.067570261657238,
0.07109882682561874,
0.11546143144369125,
0.1272626668214798,
-0.23794564604759216,
-0.09409505873918533,
-0.14302268624305725,
-0.07913756370544434,
-0.13387933373451233,
-0.30177614092826843,
0.04871969297528267,
-0.2005225121974945,
-0.02486838772892952,
-0.06533677875995636,
0.3387829065322876,
0.007490584161132574,
-0.019698426127433777,
-0.17222455143928528,
-0.025282034650444984,
-0.07131793349981308,
-0.29953765869140625,
0.28024107217788696,
0.09674785286188126,
0.26692265272140503,
0.0801510289311409,
-0.018642611801624298,
0.18629831075668335,
0.1792556643486023,
-0.2948690354824066,
-0.11088337749242783,
-0.18176089227199554,
-0.19159060716629028,
0.07386655360460281,
0.2122296392917633,
-0.13342615962028503,
-0.1452324241399765,
-0.029416775330901146,
-0.1566246598958969,
-0.24541759490966797,
-0.40333089232444763,
-0.08908139169216156,
-0.20452481508255005,
0.07351554185152054,
-0.20209582149982452,
-0.016538875177502632,
0.20036213099956512,
-0.028034944087266922,
-0.1880180686712265,
0.31138116121292114,
-0.09977814555168152,
-0.032456863671541214,
0.24583441019058228,
0.27574896812438965,
0.2087920606136322,
-0.23647700250148773,
-0.09970016032457352,
-0.23818723857402802,
0.14328806102275848,
0.22142794728279114,
0.35751980543136597,
0.23708713054656982,
0.22250856459140778,
-0.23212149739265442,
0.21273721754550934,
-0.3274475336074829,
0.20142316818237305,
-0.045122817158699036,
0.07226584106683731,
-0.29513490200042725,
-0.023447584360837936,
0.203985333442688,
-0.27397090196609497,
0.03937026858329773,
-0.10837582498788834,
0.31262901425361633,
-0.04256449639797211,
0.14531292021274567,
-0.12821532785892487,
0.18240702152252197,
0.22426961362361908,
0.026046156883239746,
-0.06433309614658356,
-0.03407273441553116,
-0.09572821855545044,
-0.05931634083390236,
-0.016147296875715256,
-0.06793518364429474,
-0.36688196659088135,
-0.26648932695388794,
-0.24077191948890686,
0.4175422489643097,
0.13625286519527435,
0.17354916036128998,
-0.02220856212079525,
0.08093205839395523,
0.08076906949281693,
-0.06755311042070389,
0.10238081216812134,
-0.11425020545721054,
-0.25514233112335205,
-0.04834825545549393,
0.2093692272901535,
-0.1053381860256195,
0.14730563759803772,
0.14920096099376678,
0.28359246253967285,
-0.09284884482622147,
-0.3367307484149933,
0.21651813387870789,
-0.11902622878551483,
-0.2525196373462677,
-0.04838576912879944,
0.17332109808921814,
0.2130317986011505,
-0.30670902132987976,
0.21659067273139954,
0.13794401288032532,
-0.059715040028095245,
-0.1367030292749405,
-0.3014768958091736,
-0.16614018380641937,
0.3143349885940552,
-0.05669059976935387,
0.11156982183456421,
0.09424421936273575,
-0.18146926164627075,
0.1069197952747345,
0.16836021840572357,
0.020599476993083954,
-0.0413396842777729,
-0.3466331362724304,
-0.021456755697727203,
-0.07305042445659637,
-0.10290143638849258,
-0.0698201134800911,
0.32822489738464355,
-0.1981852799654007,
0.11310364305973053,
0.016126343980431557,
-0.18526621162891388,
0.17797566950321198,
-0.1778438687324524,
-0.08220323175191879,
-0.16245508193969727,
0.24341148138046265,
0.2438134253025055,
0.18502341210842133,
0.01166523341089487,
0.22188769280910492,
-0.11728039383888245,
0.035719603300094604,
0.07696063071489334,
0.29451778531074524,
-0.25507694482803345,
0.262975811958313,
-0.14427030086517334,
0.03498966991901398,
0.15059787034988403,
0.18568335473537445,
-0.09939005225896835,
-0.030598070472478867,
0.006933290045708418,
-0.18727341294288635,
-0.00051409553270787,
0.008744609542191029,
-0.20334681868553162,
-0.20772051811218262,
-0.21024678647518158,
-0.04692261666059494,
-0.12356582283973694,
-0.06493684649467468,
0.13321183621883392,
-0.21682587265968323,
-0.07906147092580795,
0.0006728160660713911,
-0.21093210577964783,
0.10677593946456909,
0.0870569571852684,
-0.3324565291404724,
0.3114716112613678,
0.00733796926215291,
-0.08759436011314392,
0.3144906759262085,
-0.019341368228197098,
-0.08607731014490128,
-0.29840460419654846,
0.07493085414171219,
0.043725527822971344,
-0.15594226121902466,
-0.03037230484187603,
0.2990960478782654,
-0.08301861584186554,
0.05788743495941162,
-0.04647522419691086,
0.3227904438972473,
0.02358940988779068,
-0.03870771825313568,
-0.1295802742242813,
0.23938477039337158,
-0.059457797557115555,
0.2086532562971115,
-0.03453068062663078,
0.24741840362548828,
0.011034873314201832,
0.24267126619815826,
0.02960905246436596,
0.04305240884423256,
0.13514594733715057,
-0.016674518585205078,
0.18287236988544464,
-0.26859042048454285,
0.03589949011802673,
-0.3484688997268677,
-0.09608568996191025,
0.16378338634967804,
-0.21024133265018463,
-0.13187356293201447,
-0.3042371869087219,
0.12098678946495056,
-0.21846508979797363,
-0.2234426885843277,
-0.27559950947761536,
0.06751054525375366,
0.07585388422012329,
-0.10461243987083435,
0.12798148393630981,
0.016046646982431412,
0.07274361699819565,
0.1164214164018631,
0.08251077681779861,
-0.07755116373300552,
0.20259985327720642,
-0.08328919857740402,
0.16996395587921143,
-0.09220730513334274,
0.08241501450538635,
0.13997074961662292,
0.2497318834066391,
0.2463880032300949,
0.018553955480456352,
-0.019267410039901733,
-0.04291783645749092,
0.1303780972957611,
0.11090433597564697,
-0.17405150830745697,
0.33485114574432373,
0.10106932371854782,
-0.13834954798221588,
0.21692506968975067,
-0.0877859890460968,
-0.06137382611632347,
-0.006652992218732834,
0.1046416312456131,
0.00435218820348382,
-0.22612714767456055,
0.06056498363614082,
-0.26054489612579346,
0.16343365609645844,
0.09085530787706375,
0.05698598176240921,
0.13011963665485382,
0.0995103120803833,
-0.009104987606406212,
-0.15531352162361145,
0.15565380454063416,
0.10058200359344482,
-0.297126442193985,
-0.12083172053098679,
0.060935575515031815,
-0.1828833818435669,
0.292531281709671,
-0.11044995486736298,
-0.27160507440567017,
0.2225903868675232,
0.04504767432808876,
0.13251453638076782,
-0.13502420485019684,
-0.10428734123706818,
0.20193782448768616,
0.09009377658367157,
-0.13755065202713013,
0.13763278722763062,
0.08332367241382599,
-0.3255390226840973,
0.0042345416732132435,
-0.2358410656452179,
0.18445593118667603,
-0.15186841785907745,
-0.016006944701075554,
-0.20344753563404083,
0.11087852716445923,
0.04299190640449524,
-0.15082821249961853,
-0.215976744890213,
-0.11761127412319183,
0.06940897554159164,
-0.03845635801553726,
-0.023184645920991898,
0.06814703345298767,
-0.02394815906882286,
0.10604573786258698,
-0.24210244417190552,
-0.10597501695156097,
0.08345445245504379,
-0.17319531738758087,
0.04815686121582985,
-0.16809402406215668,
0.24822765588760376,
-0.11705023795366287,
0.27781274914741516,
-0.21461808681488037,
-0.10686880350112915,
0.2266497015953064,
-0.02058599330484867,
-0.20554347336292267,
0.3036869466304779,
0.13549889624118805,
0.19600337743759155,
0.08895806968212128,
-0.21806465089321136,
0.09380045533180237,
-0.0232833344489336,
0.28131139278411865,
-0.10416127741336823,
-0.083988718688488,
-0.2286713570356369,
-0.002143619116395712,
-0.006188349332660437,
-0.11869099736213684,
-0.04273408278822899,
0.12053424119949341,
0.031535014510154724,
-0.15315838158130646,
-0.16602596640586853,
-0.10143314301967621,
0.06656742095947266,
-0.06497950106859207,
0.08878494054079056,
-0.05945999175310135,
0.1965521275997162,
-0.21573513746261597,
0.06468123942613602,
0.0704951286315918,
0.057131510227918625,
0.19633325934410095,
0.1770772784948349,
0.179401233792305,
0.11335389316082001,
-0.15895047783851624,
-0.11648702621459961,
0.08999381214380264,
-0.07777471840381622,
-0.2184184491634369,
-0.19930116832256317,
0.042252976447343826,
0.031851861625909805,
0.07109924405813217,
0.14763563871383667,
-0.2669350802898407,
0.00724001182243228,
-0.02246975339949131,
0.14597854018211365,
0.2803495228290558,
0.14013275504112244,
-0.09673842042684555,
0.11658012121915817,
0.10553330928087234,
0.16748319566249847,
-0.022220656275749207,
0.10737783461809158,
-0.16446298360824585,
-0.1240101307630539,
0.03362911939620972,
-0.13301891088485718,
-0.3121975064277649,
-0.053465861827135086,
0.07618063688278198,
0.08828400820493698,
0.17983606457710266,
-0.11013621091842651,
-0.21564705669879913,
-0.12634184956550598,
0.05746905505657196,
-0.33411407470703125,
0.19480015337467194,
0.2695324420928955,
0.06075906753540039,
0.28170469403266907,
-0.24342958629131317,
0.1649821251630783,
-0.133228600025177,
-0.10416989028453827,
-0.1682935506105423,
0.3052189350128174,
0.18956269323825836,
-0.18387560546398163,
0.3889734148979187,
-0.08161702007055283,
-0.06021088734269142,
-0.2019547075033188,
-0.29364582896232605,
-0.12465840578079224,
-0.23529931902885437,
-0.3370922803878784,
-0.05314623564481735,
0.3461168706417084,
0.21949176490306854,
0.13788054883480072,
-0.20888306200504303,
-0.01186487264931202,
0.189607635140419,
0.2412405163049698,
-0.03257974982261658,
0.3082810640335083,
-0.08264604955911636,
0.07529410719871521,
-0.1969199776649475,
0.2540963888168335,
0.04345737025141716,
-0.09666360169649124,
-0.1370365172624588,
-0.034089989960193634,
0.13338442146778107,
0.04644696041941643,
0.205068901181221,
-0.07505152374505997,
-0.1649692952632904,
-0.12048223614692688,
0.021671513095498085,
-0.0800701156258583,
0.14273591339588165,
0.1463271528482437,
0.2755904197692871,
-0.018038729205727577,
0.05425666272640228,
0.002139090560376644,
0.02612823247909546,
-0.040715351700782776,
0.3033716082572937,
0.03963927924633026,
0.06500685960054398,
0.11602748930454254,
-0.23692011833190918,
-0.08109817653894424,
0.023599442094564438,
0.04569999873638153,
-0.08658064156770706,
0.2095794975757599,
-0.16893357038497925,
0.13936318457126617,
0.0010463193757459521,
-0.11145109683275223,
-0.05228622630238533,
0.08904818445444107,
-0.17652752995491028,
-0.07858863472938538,
0.12844796478748322,
0.23445506393909454,
-0.1347820907831192,
0.2816661298274994,
-0.22752907872200012,
-0.13182297348976135,
-0.11343025416135788,
-0.3223499059677124,
-0.13043908774852753,
-0.002995011629536748,
0.23777484893798828,
0.011326494626700878,
-0.005281809717416763,
-0.049216851592063904,
-0.26969727873802185,
0.1339404135942459,
-0.07929203659296036,
0.16285188496112823,
-0.3632679581642151,
0.023928651586174965,
-0.06456129997968674,
0.14366011321544647,
-0.2073213756084442,
-0.20854774117469788,
-0.09681542217731476,
0.3162115514278412,
0.30444255471229553,
0.2802910804748535,
0.06083058565855026,
0.1419798731803894,
0.0360158309340477,
0.07520349323749542,
0.10237474739551544,
0.010580283589661121,
-0.19573019444942474,
0.03243869170546532,
0.10915083438158035,
-0.22730427980422974,
0.1856132596731186,
0.052001819014549255,
-0.2411651611328125,
0.18174569308757782,
0.25268813967704773,
0.20804399251937866,
-0.3006608486175537,
0.11908664554357529,
-0.03660855442285538,
-0.08482139557600021,
0.1424371600151062,
-0.12366018444299698,
0.25616371631622314,
0.02703258767724037,
-0.2692174017429352,
0.28966769576072693,
-0.0071997023187577724,
-0.2564072906970978,
-0.09053022414445877,
0.184352308511734,
-0.0583609938621521,
-0.0015188424149528146,
0.1794520914554596,
-0.019145581871271133,
-0.31329914927482605,
0.3138468265533447,
0.2130366712808609,
0.21814005076885223,
0.0839153304696083,
0.029811188578605652,
-0.1773013025522232,
-0.09977322071790695,
0.07228708267211914,
0.1995287388563156,
0.1816694140434265,
0.1811235249042511,
0.05870438367128372,
0.1119682565331459,
0.1478167027235031,
-0.14947272837162018,
0.16442862153053284,
0.04062141850590706,
-0.11993400752544403,
0.3051808178424835,
0.03618069365620613,
-0.022617483511567116,
0.28109052777290344,
0.005215495824813843,
-0.16993728280067444,
0.07614172250032425,
0.0086143733933568,
-0.1846090406179428,
-0.32701221108436584,
0.18362191319465637,
-0.3556993901729584,
0.27621254324913025,
-0.33517053723335266,
-0.3450557589530945,
-0.07867971062660217,
0.06736384332180023,
0.2260321080684662,
-0.15292097628116608,
0.2920672595500946,
0.11861176043748856,
0.27920791506767273,
0.4040137231349945,
0.38949140906333923,
-0.2210533320903778,
-0.02814650349318981,
0.20479123294353485,
-0.043341077864170074,
0.1558520346879959,
0.24557730555534363,
0.2139734923839569,
0.0734747052192688,
0.11310325562953949,
0.21868403255939484,
0.02589215338230133,
0.134073868393898,
-0.0980733186006546,
0.1954440474510193,
0.05728260427713394,
0.008112290874123573,
0.3749156892299652,
0.06210249289870262,
-0.19467276334762573,
-0.16828501224517822,
0.29697132110595703,
0.1610053926706314,
-0.2799791693687439,
-0.073692187666893,
0.20969629287719727,
-0.11677248775959015,
-0.20937146246433258,
-0.1001301258802414,
-0.03429445996880531,
0.17908284068107605,
0.13201291859149933,
0.014021567068994045,
-0.019506584852933884,
-0.14893986284732819,
-0.13845159113407135,
0.18586209416389465,
0.3025311231613159,
-0.12285914272069931,
0.11575806140899658,
-0.19260795414447784,
-0.0013846645597368479,
-0.11063715815544128,
0.017079893499612808,
-0.23700229823589325,
-0.004472251515835524,
0.34342724084854126,
-0.13895177841186523,
0.1689767986536026,
0.17983999848365784,
0.14319096505641937,
0.13624566793441772,
-0.15417161583900452,
-0.026351917535066605,
-0.05511439964175224,
0.18306845426559448,
0.2338833212852478,
0.04616880044341087,
0.06214344501495361,
-0.08041873574256897,
0.05458879470825195,
-0.1949140578508377,
0.32378458976745605,
0.059806205332279205,
0.13143330812454224,
-0.12178967148065567,
0.1583726704120636,
0.0023191117215901613,
-0.06271645426750183,
0.12533938884735107,
-0.11743878573179245,
-0.2723903954029083,
0.16155187785625458,
-0.1217724084854126,
0.1569497138261795,
0.14569690823554993,
-0.026199348270893097,
-0.13977497816085815,
0.07655869424343109,
0.1278717815876007,
0.29619330167770386,
0.063528873026371,
-0.26418083906173706,
0.20937958359718323,
-0.13015227019786835,
0.04352899640798569,
-0.058937184512615204,
-0.1258729249238968,
0.1857459396123886,
0.06392980366945267,
-0.26069068908691406,
-0.11340099573135376,
-0.14209924638271332,
-0.23187130689620972,
-0.13555492460727692,
-0.2801777422428131,
-0.22848060727119446,
-0.250899076461792,
-0.04938627406954765,
-0.13739433884620667,
0.013259373605251312,
0.0784425362944603,
-0.15772287547588348,
-0.08849219232797623,
-0.23408906161785126,
0.09849286824464798,
0.24845381081104279,
0.12197109311819077,
-0.171489417552948,
-0.10645969957113266,
-0.1039946898818016,
-0.24430270493030548,
0.1264035999774933,
0.013344350270926952,
0.055215392261743546,
0.15272502601146698,
-0.20014198124408722,
-0.011956105940043926,
-0.02023874595761299,
-0.32189688086509705,
0.011031746864318848,
-0.013112633489072323,
-0.3251175880432129,
-0.030694561079144478,
0.3016529679298401,
0.14281469583511353,
-0.17047010362148285,
-0.27139168977737427,
0.2519954442977905,
-0.1753131002187729,
-0.1984250247478485,
-0.04255655035376549,
-0.06237153336405754,
0.31723496317863464,
-0.08336766064167023,
-0.16761159896850586,
-0.05311479791998863,
-0.06979767233133316,
0.08457048237323761,
0.12428134679794312,
-0.004317617975175381,
-0.14656047523021698,
0.030974045395851135,
-0.01597585156559944,
-0.07013807445764542,
0.028128869831562042,
-0.07851624488830566,
-0.06746140122413635,
0.15091826021671295,
0.07900532335042953,
-0.2623336911201477,
-0.02375338040292263,
-0.23106196522712708,
-0.12328242510557175,
0.20725871622562408,
0.04137369617819786,
0.19188597798347473,
-0.22234958410263062,
0.05308191478252411,
0.1880275011062622,
0.1131199523806572,
0.1375633031129837,
0.07851150631904602,
-0.13388805091381073,
-0.14869794249534607,
-0.06008739396929741,
-0.3498493731021881,
-0.10839153081178665,
-0.08790092915296555,
0.12059473991394043,
0.22551122307777405,
-0.013889223337173462,
-0.3097965717315674,
0.1396072506904602,
-0.023304520174860954,
0.03256578743457794,
-0.0010352210374549031,
-0.05181875452399254,
-0.16938748955726624,
0.1052297055721283,
0.24872146546840668,
-0.2707376480102539,
-0.22401201725006104,
0.00425267918035388,
0.03114563785493374,
-0.10113447159528732,
0.04840463027358055,
0.06451692432165146,
0.22178052365779877,
-0.09919193387031555,
0.10262729227542877,
0.19612114131450653,
0.1614934355020523,
-0.12400545924901962,
0.255530446767807,
-0.025353530421853065,
-0.082553431391716,
0.25134098529815674,
0.22051586210727692,
0.09919530153274536,
-0.1331799030303955,
-0.06624646484851837,
0.06584130227565765,
-0.11012031137943268,
0.2574937045574188,
-0.046097882091999054,
0.2018507421016693,
-0.16825473308563232,
-0.07550685852766037,
-0.14016760885715485,
0.11481937766075134,
-0.07126185297966003,
0.06423097103834152,
-0.20679454505443573,
0.2885511815547943,
-0.16244691610336304,
0.06526916474103928,
-0.1024199053645134,
-0.29786908626556396,
-0.0023895741906017065,
-0.21329259872436523,
0.1070343479514122,
0.19454853236675262,
-0.07341628521680832,
-0.031045475974678993,
-9.948811566573568e-06,
0.26411139965057373,
-0.24705025553703308,
-0.06856264919042587,
-0.09669085592031479,
-0.2693536579608917,
0.16070982813835144,
0.023633817210793495,
-0.14561115205287933,
0.10147698223590851,
0.13927526772022247,
-0.15636618435382843,
-0.15143419802188873,
0.013412905856966972,
-0.08273351937532425,
-0.03606695681810379,
0.12574489414691925,
0.07849791646003723,
-0.13743452727794647,
-0.15096811950206757,
-0.2598040699958801,
-0.1302400827407837,
0.1982302963733673,
0.12748569250106812,
-0.10639887303113937,
-0.3096464276313782,
0.1296808123588562,
-0.004082728177309036,
0.03576194867491722,
0.17887839674949646,
0.19689548015594482,
-0.19962191581726074,
0.13367408514022827,
0.2648825943470001,
0.09162117540836334,
0.12267301231622696,
0.12342959642410278,
-0.059865519404411316,
0.21398146450519562,
-0.002394043607637286,
0.16359928250312805,
0.12426893413066864,
-0.43988853693008423,
0.022118283435702324,
-0.10905224829912186,
0.16355465352535248,
0.02154681459069252,
0.2673575282096863,
0.19027256965637207,
-0.06962403655052185,
0.16435867547988892,
0.2676287293434143,
-0.04408620670437813,
0.21293027698993683,
-0.20961607992649078,
-0.0876452848315239,
-0.0771079957485199,
0.16154640913009644,
0.023845456540584564,
-0.12416442483663559,
-0.22562028467655182,
0.2621460556983948,
-0.18235190212726593,
0.06939760595560074,
-0.09579183161258698,
-0.09414776414632797,
-0.2505352795124054,
-0.08132355660200119,
0.16858072578907013,
-0.2880610525608063,
0.07905127108097076,
0.30804243683815,
0.18825678527355194,
-0.19517824053764343,
-0.3047003448009491,
-0.1468881070613861,
0.048445895314216614,
-0.12960417568683624,
0.18576852977275848,
-0.06367151439189911,
0.2552587687969208,
0.10068200528621674,
0.08817487955093384,
0.16540685296058655,
-0.24327632784843445,
-0.08760786801576614,
-0.10799268633127213,
-0.07003087550401688,
-0.20100422203540802,
-0.19775651395320892,
0.05346912145614624,
0.14782099425792694,
-0.16958902776241302,
-0.24803191423416138,
0.18157586455345154,
-0.08926617354154587,
-0.3099668323993683,
-0.15073633193969727,
-0.29832950234413147,
0.2606218159198761,
-0.12001995742321014,
-0.052864495664834976,
0.009182442910969257,
0.03443988412618637,
-0.09103516489267349,
-0.1283186972141266,
0.1868777722120285,
0.01612251251935959,
-0.1368921399116516,
-0.07963652908802032,
0.21344543993473053,
-0.08725763857364655,
0.06863973289728165,
-0.05687130242586136,
-0.14572760462760925,
0.07712597399950027,
0.07779386639595032,
0.06613851338624954,
0.19670437276363373,
-0.11840907484292984,
0.03837739676237106,
-0.25356635451316833,
0.0786566287279129,
-0.24391916394233704,
-0.27312222123146057,
0.2643890380859375,
0.1893308013677597,
0.17994868755340576,
-0.030495507642626762,
0.1565694361925125,
-0.07507891952991486,
-0.08411986380815506,
0.04859686642885208,
0.18842703104019165,
0.11978359520435333,
-0.2303798794746399,
-0.11407763510942459,
-0.11329185962677002,
-0.16383680701255798,
-0.04526589438319206,
-0.15662109851837158,
-0.030990876257419586,
0.10440453141927719,
0.14327625930309296,
-0.07058606296777725,
-0.20764970779418945,
-0.19652491807937622,
0.248994380235672,
-0.08441388607025146,
-0.35074734687805176,
-0.16254159808158875,
0.09366384148597717,
-0.097779281437397,
-0.16139639914035797,
-0.036448802798986435,
0.016285613179206848,
-0.2624734044075012,
-0.14936766028404236,
-0.1837487667798996,
-0.2501508593559265,
0.15222565829753876,
0.03383927792310715,
-0.05271637439727783,
-0.23984096944332123,
0.16194622218608856,
0.20543506741523743,
0.03198370710015297,
-0.014953105710446835,
-0.039483025670051575,
0.0012707595014944673,
-0.07228201627731323,
-0.055132996290922165,
-0.015064635314047337,
-0.17852964997291565,
-0.14714007079601288,
0.22834423184394836,
0.013261686079204082,
0.1427595466375351,
-0.3897758722305298,
0.32246947288513184,
0.1765366643667221,
0.15860967338085175,
-0.3726934492588043,
-0.009314211085438728,
-0.31658869981765747,
-0.003013633657246828,
0.2927020192146301,
-0.08538633584976196,
0.3032863736152649,
0.10989101976156235,
-0.3116340637207031,
-0.11296793818473816,
0.15135088562965393,
0.18251527845859528,
-0.22898340225219727,
-0.10554806143045425,
-0.17449578642845154,
-0.23680035769939423,
-0.16803649067878723,
0.1855301707983017,
-0.13610000908374786,
0.017657078802585602,
-0.19237585365772247,
0.1526627540588379,
-0.10457742214202881,
-0.09058165550231934,
-0.28212425112724304,
-0.15447281301021576,
-0.15708164870738983,
0.014399245381355286,
0.10372471809387207,
-0.1807640790939331,
-0.232509583234787,
-0.18268468976020813,
-0.20831932127475739,
-0.13869021832942963,
-0.09928768873214722,
0.22675016522407532,
-0.0006908230134285986,
-0.15852123498916626,
-0.32579806447029114,
-0.1672971397638321,
0.3751375377178192,
-0.05055497586727142,
0.1897384226322174,
0.0957312285900116,
-0.27818596363067627,
0.19731833040714264,
0.19818519055843353,
-0.26157695055007935,
-0.010280965827405453,
-0.2778266668319702,
0.2387174814939499,
-0.06819995492696762,
0.1565047800540924,
-0.2674158215522766,
0.13395735621452332,
0.08293706923723221,
-0.12035371363162994,
-0.16065604984760284,
-0.4252624809741974,
-0.07877159863710403,
-0.04878921061754227,
0.20204778015613556,
0.041376642882823944,
0.2538178563117981,
0.035312969237565994,
-0.02151169255375862,
-0.35390132665634155,
-0.011038676835596561,
0.22357600927352905,
-0.08944711834192276,
0.03499970585107803,
-0.21281929314136505,
0.051474250853061676,
-0.1738974153995514,
0.25229883193969727,
-0.26622918248176575,
0.037330228835344315,
-0.2107526957988739,
-0.21420122683048248,
0.1253470629453659,
-0.13248400390148163,
0.008831898681819439,
0.10695387423038483,
0.23680059611797333,
-0.15362302958965302,
0.3999318480491638,
-0.050127558410167694,
0.14977197349071503,
0.20984132587909698,
0.05292687937617302,
0.239655539393425,
0.25485584139823914,
-0.3350410759449005,
-0.062123171985149384,
-0.0987289547920227,
0.12836654484272003,
0.1421777904033661,
-0.08765246719121933,
0.15030714869499207,
-0.13728664815425873,
0.40703994035720825,
0.22068831324577332,
0.06871389597654343,
0.36539995670318604,
0.29057827591896057,
0.0967680960893631,
0.004024329595267773,
-0.11003928631544113,
0.19634613394737244,
0.1573472023010254,
0.2185438871383667,
0.041148070245981216,
0.14308863878250122,
-0.01456521451473236,
-0.09849979728460312,
0.058579977601766586,
-0.13788896799087524,
0.095289446413517,
0.2902604639530182,
-0.2254301756620407,
0.16657719016075134,
0.3536885380744934,
-0.13833087682724,
0.26651620864868164,
-0.23749224841594696,
-0.13211452960968018,
0.26793423295021057,
0.2521168887615204,
0.24389666318893433,
-0.06500083208084106,
0.26329585909843445,
-0.11879804730415344,
-0.0643293708562851,
0.05652002990245819,
0.15714222192764282,
-0.08846680819988251,
0.07868009805679321,
-0.15483225882053375,
-0.07266025245189667,
-0.07040764391422272,
0.3511000871658325,
0.0768478661775589,
-0.1528061032295227,
0.2130601704120636,
-0.1966828852891922,
-0.19064004719257355,
0.19617588818073273,
-0.19087432324886322,
-0.1560099869966507,
-0.20344513654708862,
0.15239039063453674,
-0.05429413914680481,
0.20729705691337585,
-0.22450752556324005,
0.12844395637512207,
0.17309395968914032,
0.0036809637676924467,
0.26192784309387207,
0.07125180214643478,
0.04306582733988762,
0.20238623023033142,
-0.07178182154893875,
-0.16404297947883606,
-0.08755114674568176,
-0.034022536128759384,
-0.233853280544281,
0.04221989959478378,
0.2534430921077728,
-0.08486609160900116,
0.10113630443811417,
0.2816171944141388,
-0.025383535772562027,
0.20863130688667297,
0.24114690721035004,
-0.28912752866744995,
0.03382748365402222,
-0.10152478516101837,
-0.12760120630264282,
-0.25869134068489075,
0.22248761355876923,
-0.08112166076898575,
0.02331494726240635,
0.24713127315044403,
0.20993497967720032,
0.024789994582533836,
-0.07978876680135727,
0.2713365852832794,
-0.21708130836486816,
-0.1735026091337204,
0.24038949608802795,
0.05143013969063759,
-0.07882649451494217,
0.024428099393844604,
0.06363670527935028,
0.008027415722608566,
-0.14240963757038116,
0.10910821706056595,
0.02526658959686756,
0.11815085262060165,
-0.15223796665668488,
-0.041685935109853745,
0.13643497228622437,
-0.2640838027000427,
-0.31499019265174866,
0.32215237617492676,
0.03450450673699379,
-0.14387497305870056,
0.042284637689590454,
-0.05106305703520775,
-0.05063726007938385,
0.11795512586832047,
0.004780198447406292,
-0.021643906831741333,
-0.056197281926870346,
-0.19353032112121582,
0.16213728487491608,
-0.11142223328351974,
-0.09871997684240341,
0.04868500679731369,
0.12580104172229767,
-0.21365243196487427,
0.11733467131853104,
0.09539573639631271,
0.3401912450790405,
-0.07914169877767563,
-0.04787207394838333,
-0.12063930928707123,
0.17252343893051147,
0.10317661613225937,
-0.21032686531543732,
-0.08783601224422455,
0.010121193714439869,
0.02066725865006447,
0.13639600574970245,
0.18125514686107635,
-0.127854123711586,
-0.2484215348958969,
-0.08304403722286224,
-0.3791668713092804,
-0.0260678231716156,
-0.10979042947292328,
-0.08766525238752365,
-0.037623196840286255,
0.3649898171424866,
-0.1697807013988495,
0.19622159004211426,
-0.1659122258424759,
-0.1766447275876999,
0.18645143508911133,
-0.13225650787353516,
-0.1131531149148941,
0.25243449211120605,
-0.27616414427757263,
-0.015581144019961357,
-0.13393522799015045,
-0.30084308981895447,
0.17023608088493347,
-0.013490363024175167,
0.003643321804702282,
-0.040533483028411865,
0.29481521248817444,
-0.0015810801414772868,
-0.21479955315589905,
-0.06138540431857109,
-0.00797935388982296,
0.04066353291273117,
-0.18617317080497742,
-0.24806442856788635,
-0.15398462116718292,
0.12283274531364441,
0.021389728412032127,
-0.064748115837574,
0.15762150287628174,
-0.15298618376255035,
0.07022201269865036,
-0.21974729001522064,
-0.01367765013128519,
-0.15772302448749542,
0.03535313531756401,
0.2750886082649231,
0.08722822368144989,
-0.25061336159706116,
0.016152463853359222,
-0.16515274345874786,
0.2079722285270691,
0.08563648909330368,
0.07984185218811035,
0.22183915972709656,
0.11881762742996216,
-0.03141406551003456,
-0.0627981647849083,
-0.16103552281856537,
-0.06015603616833687,
-0.07077537477016449,
-0.1750403493642807,
-0.0215686596930027,
0.2826661765575409,
-0.24414630234241486,
-0.1953863799571991,
-0.19507715106010437,
-0.005876705050468445,
0.129313662648201,
0.2392352670431137,
-0.10495689511299133,
-0.22508971393108368,
0.2061469405889511,
0.062210142612457275,
-0.04444671422243118,
0.10793723165988922,
-0.1039876714348793,
0.03016737848520279,
-0.25678783655166626,
-0.24506768584251404,
0.0672227069735527,
-0.18554283678531647,
-0.23284709453582764,
-0.021546578034758568,
-0.15821939706802368,
0.16236864030361176,
0.1938154101371765,
0.12602274119853973,
-0.030204616487026215,
-0.3220895826816559,
0.2704727351665497,
-0.13772627711296082,
-0.04751404747366905,
-0.20188595354557037,
0.03666229918599129,
-0.15585708618164062,
-0.10744278877973557,
-0.17165234684944153,
0.11430118978023529,
-0.019139885902404785,
0.06323353201150894,
-0.3240148425102234,
-0.18777574598789215,
-0.048159707337617874,
-0.1379850208759308,
-0.2612200081348419,
0.06490219384431839,
-0.2398817390203476,
-0.15709975361824036,
-0.13919883966445923,
-0.3410356938838959,
-0.20061874389648438,
-0.14646905660629272,
-0.16921314597129822,
0.07877109199762344,
0.03263167291879654,
-0.21970364451408386,
0.22957013547420502,
0.08423227071762085,
-0.1471255123615265,
-0.14079801738262177,
0.03595230355858803,
0.192439466714859,
0.07922481000423431,
-0.11490058898925781,
0.2312994748353958,
0.3726220726966858,
-0.27955713868141174,
0.04736703261733055,
0.11761927604675293,
-0.05850273743271828,
-0.09226930886507034,
0.1142565980553627,
-0.0921279713511467,
-0.2662423849105835,
0.0614236555993557,
-0.09285788983106613,
0.10740409046411514,
0.02322429232299328,
0.23101025819778442,
-0.0017614621901884675,
-0.080596424639225,
0.2769696116447449,
-0.06827523559331894,
-0.0783054307103157,
-0.019311483949422836,
0.36435991525650024,
-0.12710034847259521,
-0.17870938777923584,
0.1311872899532318,
-0.09422144293785095,
-0.07200990617275238,
0.09968217462301254,
-0.2546548545360565,
0.18259690701961517,
-0.19525064527988434,
-0.06399452686309814,
0.12421052157878876,
-0.23425352573394775,
0.2399885207414627,
0.1288011521100998,
-0.19562792778015137,
0.0303927194327116,
-0.0026927900034934282,
-0.2788930833339691,
-0.10659809410572052,
-0.11435873061418533,
-0.07283509522676468,
-0.014313317835330963,
0.05380748584866524,
0.12376219034194946,
0.2429513782262802,
-0.2935594916343689,
0.013865997083485126,
0.22594350576400757,
-0.06856373697519302,
0.186506450176239,
0.24462036788463593,
-0.02898106351494789,
-0.21845266222953796,
0.03193027153611183,
-0.08494661003351212,
-0.2665373980998993,
-0.2497628629207611,
-0.05261366069316864,
-0.37049588561058044,
-0.027304157614707947,
0.1930430829524994,
-0.24067379534244537,
-0.23694176971912384,
0.056043729186058044,
-0.15454107522964478,
0.14113853871822357,
0.12435304373502731,
-0.10408513247966766,
-0.03274991735816002,
0.024733394384384155,
0.035508882254362106,
-0.3536398112773895,
0.036027077585458755,
0.1443387269973755,
0.12735706567764282,
-0.12672728300094604,
0.25012892484664917,
0.20322255790233612,
0.260734885931015,
0.14449186623096466,
-0.24769975244998932,
-0.26979944109916687,
0.23300962150096893,
-0.21108582615852356,
0.19983625411987305,
0.08705552667379379,
0.18869084119796753,
0.18091648817062378,
-0.12936313450336456,
-0.1038191020488739,
-0.11878842860460281,
-0.1248883306980133,
-0.0880148708820343,
0.0137700280174613,
-0.012660342268645763,
0.18478642404079437,
0.24098365008831024,
-0.24705640971660614,
-0.09422101825475693,
0.08474593609571457,
0.00822513923048973,
0.057599954307079315,
-0.2531302869319916,
0.18867766857147217,
0.2567629814147949,
0.3375507891178131,
0.09296871721744537,
-0.038881637156009674,
0.3257332444190979,
0.1257385015487671,
-0.13012492656707764,
0.21696779131889343,
0.3264082074165344,
-0.13984273374080658,
0.08925621211528778,
0.3436042070388794,
0.32913991808891296,
0.26598477363586426,
-0.12609422206878662,
0.27549269795417786,
-0.20630685985088348,
0.20042483508586884,
0.2083347886800766,
0.040201157331466675,
0.16259893774986267,
-0.17425289750099182,
0.0011318230535835028,
-0.07719060778617859,
-0.038646746426820755,
-0.007092123851180077,
0.2798236608505249,
0.28744447231292725,
-0.14550766348838806,
-0.05790681019425392,
-0.12633340060710907,
-0.061946287751197815,
0.17180894315242767,
-0.14032621681690216,
-0.16560666263103485,
-0.1351754367351532,
0.21164007484912872,
0.13639983534812927,
-0.10897906869649887,
-0.09890314936637878,
-0.2179529070854187,
-0.3055373728275299,
0.22907419502735138,
-0.055976517498493195,
0.08619251102209091,
-0.024547869339585304,
0.08747944235801697,
0.06913420557975769,
0.015109010972082615,
0.29560208320617676,
-0.11546823382377625,
0.23331530392169952,
0.33689185976982117,
0.39111199975013733,
0.013727590441703796,
-0.08789556473493576,
0.14474856853485107,
-0.031837377697229385,
-0.11111685633659363,
0.19269131124019623,
-0.07772062718868256,
0.1487075835466385,
0.28697773814201355,
0.1672174632549286,
-0.07684482634067535,
-0.026544425636529922,
0.07783550769090652,
0.18811115622520447,
0.0631989985704422,
0.2007441371679306,
-0.23548398911952972,
-0.16716772317886353,
0.11398028582334518,
0.17465583980083466,
0.31139636039733887,
-0.24222026765346527,
0.01565815880894661,
0.21493422985076904,
0.017643500119447708,
0.155233234167099,
0.0623382106423378,
0.09538669139146805,
0.03999742493033409,
0.10298696905374527,
0.2726951837539673,
-0.04796982556581497,
0.2238321602344513,
-0.09858597815036774,
-0.1004704013466835,
0.009298404678702354,
-0.11330661922693253,
0.05102820321917534,
0.016925306990742683,
-0.17733995616436005,
-0.006760081741958857,
0.20753566920757294,
0.30789366364479065,
-0.10095024108886719,
-0.21237587928771973,
0.2495502084493637,
-0.017545193433761597,
-0.1997147649526596,
-0.25175344944000244,
0.07737056165933609,
0.19150230288505554,
0.027847038581967354,
-0.2379334717988968,
-0.14646704494953156,
0.21010242402553558,
-0.26479512453079224,
0.22652028501033783,
-0.04706727713346481,
-0.2071598619222641,
-0.015091736800968647,
0.2913639545440674,
0.3047366738319397,
0.052836328744888306,
-0.1373448371887207,
0.07878777384757996,
-0.1530398279428482,
-0.06467676907777786,
-0.1085415855050087,
-0.3058848977088928,
-0.09876719862222672,
0.24544629454612732,
0.05367647483944893,
-0.24618728458881378,
-0.1298394501209259,
-0.06539449095726013,
-0.17629308998584747,
-0.12863126397132874,
-0.09876208752393723,
-0.07811911404132843,
0.011697042733430862,
-0.15490801632404327,
-0.14159563183784485,
-0.002666644984856248,
-0.2370571345090866,
0.015903769060969353,
-0.2854249179363251,
0.2724522650241852,
-0.15419284999370575,
0.2285972684621811,
0.061616797000169754,
0.15585556626319885,
-0.18310879170894623,
-0.018901150673627853,
-0.1185121089220047,
0.09112724661827087,
0.14312100410461426,
-0.07089561223983765,
-0.04221762716770172,
0.02149725705385208,
-0.2731879949569702,
-0.009080309420824051,
0.08224201202392578,
-0.047595057636499405,
-0.06153528392314911,
0.12812580168247223,
0.24138043820858002,
0.31818336248397827,
0.07317261397838593,
-0.05247507989406586,
0.2897474467754364,
0.056569695472717285,
0.11831239610910416,
0.23284204304218292,
-0.07950124889612198,
0.09503448009490967,
0.045441485941410065,
-0.14113083481788635,
-0.04894397035241127,
-0.008891170844435692,
0.13601793348789215,
-0.03948112204670906,
0.12339302897453308,
0.06800314784049988,
0.2549150288105011,
0.21056053042411804,
-0.21742503345012665,
-0.04946766793727875,
0.14320455491542816,
-0.003573913360014558,
-0.010324698872864246,
0.030147189274430275,
-0.039223793894052505,
0.060581207275390625,
-0.0792900025844574,
0.10718894749879837,
-0.1288551390171051,
-0.09658870100975037,
0.1705070286989212,
0.23169603943824768,
-0.011323335580527782,
-0.1555434763431549,
0.20646235346794128,
-0.027266472578048706,
0.019341204315423965,
-0.1875292956829071,
-0.08073081076145172,
-0.15909232199192047,
0.07913216948509216,
-0.24834738671779633,
-0.1511564999818802,
-0.037153370678424835,
0.13714933395385742,
-0.09955984354019165,
-0.11843112856149673,
-0.1707887351512909,
0.17717212438583374,
-0.23433934152126312,
-0.01122517604380846,
-0.2547602355480194,
0.16204321384429932,
0.0207534022629261,
-0.30161410570144653,
-0.22984711825847626,
0.23533663153648376,
-0.04675117880105972,
-0.04999731481075287,
-0.11567974090576172,
0.11459779739379883,
0.13676774501800537,
-0.06959505379199982,
0.2794919013977051,
0.034344471991062164,
-0.22736409306526184,
0.13849157094955444,
0.03485056757926941,
0.12073033303022385,
0.03663821518421173,
0.09978915005922318,
-0.22466453909873962,
0.1299566924571991,
0.03615204617381096,
0.2250627726316452,
-0.11548034101724625,
-0.20936261117458344,
-0.256958544254303,
0.24609002470970154,
-0.2446969896554947,
0.2557297348976135,
0.23057211935520172,
0.10441499203443527,
0.12911225855350494,
0.10888364911079407,
-0.03570912405848503,
-0.19423915445804596,
0.03791036084294319,
0.12170223891735077,
0.15492834150791168,
-0.07249037176370621,
0.09151692688465118,
0.0659680962562561,
-0.12458190321922302,
0.03403238207101822,
0.07121183723211288,
0.2745417356491089,
-0.20106978714466095,
-0.0459517203271389,
-0.09453649818897247,
-0.15287455916404724,
-0.09687490016222,
0.16609206795692444,
-0.09923125803470612,
-0.10192468017339706,
0.06697981059551239,
0.15839023888111115,
-0.06378178298473358,
-0.01687188446521759,
0.1824316382408142,
0.1070195883512497,
0.06125378981232643,
-0.13167715072631836,
0.08145570009946823,
0.022546276450157166,
0.029063066467642784,
0.11130036413669586,
0.0741717666387558,
-0.2782656252384186,
-0.07584300637245178,
0.01891310140490532,
-0.06377100199460983,
0.17194022238254547,
-0.3097168803215027,
0.076506108045578,
-0.12191947549581528,
0.14912262558937073,
-0.05263734981417656,
-0.23300661146640778,
0.02721777930855751,
0.11995247006416321,
-0.15126357972621918,
-0.2609708607196808,
-0.19493526220321655,
-0.23441168665885925,
-0.3686329424381256,
0.060631997883319855,
-0.10398562997579575,
-0.21503615379333496,
-0.25520825386047363,
-0.15826277434825897,
-0.21266856789588928,
0.16354072093963623,
0.014598867855966091,
-0.17945596575737,
-0.023101825267076492,
-0.11769739538431168,
0.24824221432209015,
-0.17118322849273682,
0.012283654883503914,
0.002116761403158307,
0.047398071736097336,
0.2076536864042282,
-0.18669235706329346,
-0.08165399730205536,
-0.12568627297878265,
0.028122026473283768,
-0.09292149543762207,
0.12557362020015717,
0.011398366652429104,
-0.2700919508934021,
-0.3068765103816986,
0.2201375514268875,
-0.18743079900741577,
0.07698218524456024,
0.232707217335701,
-0.05376210808753967,
0.12008647620677948,
0.2730306088924408,
0.11423852294683456,
-0.1723000705242157,
-0.01970749720931053,
-0.17811702191829681,
0.17951662838459015,
-0.057382453233003616,
-0.02483687549829483,
0.019248610362410545,
0.19161202013492584,
-0.19537366926670074,
-0.2593293786048889,
0.12204308807849884,
-0.17580263316631317,
0.28515973687171936,
-0.10996007919311523,
0.05383129417896271,
-0.1618027687072754,
0.045932721346616745,
-0.014659610576927662,
-0.04616690054535866,
0.009357906877994537,
0.39686545729637146,
0.0017673176480457187,
0.1575879603624344,
0.0027671330608427525,
0.06024249270558357,
0.1650005728006363,
0.09303504228591919,
0.1606793850660324,
0.04225288704037666,
0.17107121646404266,
0.24111543595790863,
-0.12604881823062897,
0.23547182977199554,
-0.19897088408470154,
0.18212909996509552,
0.09729836136102676,
0.0929451584815979,
0.301254004240036,
0.054123688489198685,
-0.10026639699935913,
0.011534045450389385,
0.08744270354509354,
-0.10500560700893402,
0.21442699432373047,
-0.2242574691772461,
-0.36961689591407776,
-0.33869436383247375,
0.024485647678375244,
0.057945702224969864,
-0.13566772639751434,
-0.12425322830677032,
-0.1483730524778366,
-0.20285211503505707,
-0.09551773220300674,
0.3119414150714874,
-0.25333350896835327,
0.23523171246051788,
0.2817974090576172,
-0.21174906194210052,
-0.013879632577300072,
-0.26444607973098755,
-0.2670469582080841,
-0.1230093389749527,
-0.03422844782471657,
-0.2732538878917694,
-0.19276884198188782,
0.17347711324691772,
0.16421326994895935,
0.05112617835402489,
0.006028767675161362,
0.028743676841259003,
-0.2598942816257477,
-0.31475362181663513,
0.05608265474438667,
0.1719655990600586,
-0.04098225757479668,
-0.3137669861316681,
-0.14620181918144226,
-0.05257321149110794,
-0.11428788304328918,
0.1688491404056549,
-0.2576153874397278,
0.3410038948059082,
-0.10685499012470245,
0.09918487817049026,
-0.06267040967941284,
-0.07733185589313507,
0.056447140872478485,
0.24571768939495087,
-0.21090155839920044,
0.1671365648508072,
0.08562816679477692,
-0.18332616984844208,
0.12408791482448578,
0.06981085240840912,
0.21525593101978302,
0.1777210682630539,
-0.1950552612543106,
-0.022063596174120903,
-0.15916964411735535,
-0.2572298049926758,
-0.1499582976102829,
0.1932695209980011,
-0.03635847568511963,
-0.15028519928455353,
-0.2044111043214798,
0.14612403512001038,
0.16813156008720398,
-0.19688862562179565,
0.207221120595932,
-0.11428370326757431,
-0.0757676213979721,
0.08164152503013611,
-0.06511323153972626,
-0.26462897658348083,
0.036253463476896286,
-0.304345965385437,
-0.04465540125966072,
-0.22162576019763947,
0.035544898360967636,
-0.09211945533752441,
-0.21646742522716522,
0.04986119642853737,
0.25577208399772644,
0.192286878824234,
0.28234967589378357,
-0.04922559857368469,
0.13240206241607666,
0.02659030817449093,
0.37807533144950867,
-0.1324922740459442,
0.056407030671834946,
0.09701232612133026,
-0.2674109637737274,
0.08264381438493729,
-0.060444995760917664,
-0.0627749115228653,
-0.2767987549304962,
0.177425354719162,
0.20410801470279694,
0.20877666771411896,
0.0803305134177208,
0.025761691853404045,
-0.0037666151765733957,
-0.025791723281145096,
-0.1957758516073227,
0.2911717891693115,
0.05551417917013168,
-0.19117890298366547,
-0.23459839820861816,
-0.22866469621658325,
-0.15030010044574738,
-0.2836802303791046,
-0.22218532860279083,
-0.12918561697006226,
-0.2441001534461975,
-0.07185161858797073,
-0.09401858597993851,
0.032328151166439056,
-0.2570788860321045,
-0.010707803070545197,
-0.07018667459487915,
-0.27769118547439575,
-0.2589697241783142,
0.2924015522003174,
-0.11530926823616028,
-0.06795817613601685,
0.32103437185287476,
-0.13225096464157104,
-0.22217467427253723,
-0.08731716871261597,
-0.08001884818077087,
-0.12129765748977661,
0.007246037945151329,
0.037813831120729446,
0.23289887607097626,
-0.2017086297273636,
0.08714605867862701,
0.2110883891582489,
0.10810916125774384,
-0.3649448752403259,
0.07388529181480408,
0.23067493736743927,
0.08172079175710678,
-0.18146808445453644,
0.19564619660377502,
-0.12178338319063187,
-0.3352552056312561,
0.24082186818122864,
0.39480283856391907,
-0.16325415670871735,
0.2815096378326416,
0.28318220376968384,
-0.2427154928445816,
0.016292724758386612,
0.1510884314775467,
-0.047834765166044235,
0.11243083328008652,
-0.28328683972358704,
0.24395956099033356,
-0.02031000144779682,
-0.05595798045396805,
-0.19914238154888153,
0.18844152987003326,
-0.2853589653968811,
-0.1468866765499115,
-0.23782166838645935,
0.15079642832279205,
-0.0603560134768486,
0.10025505721569061,
-0.0854366198182106,
0.10036707669496536,
0.11207757890224457,
-0.13861000537872314,
0.007607166189700365,
-0.17604860663414001,
0.1678379476070404,
-0.1213005855679512,
0.4349377751350403,
0.005651297979056835,
-0.07092200219631195,
-0.11079943180084229,
0.014827748760581017,
-0.02038678154349327,
0.3818940222263336,
-0.13112647831439972,
-0.01744355820119381,
0.2397564947605133,
-0.08207018673419952,
-0.1188453659415245,
0.14902250468730927,
0.04254160076379776,
0.03110373765230179,
-0.18758970499038696,
0.2807673215866089,
0.015156540088355541,
-0.3036269247531891,
0.2532326877117157,
0.1804911196231842,
0.14039497077465057,
0.19220606982707977,
-0.08986248821020126,
-0.14614538848400116,
-0.3109353482723236,
-0.06917272508144379,
-0.17452745139598846,
-0.1337432861328125,
0.03805146738886833,
0.05500686913728714,
0.0692095160484314,
0.17969611287117004,
-0.018088556826114655,
0.08201617747545242,
-0.15418487787246704,
-0.03777627274394035,
-0.09187901020050049,
-0.12414456158876419,
0.13943378627300262,
0.21754701435565948,
0.0801047757267952,
-0.1516004353761673,
-0.023335067555308342,
0.029074622318148613,
-0.08279102295637131,
0.1712830662727356,
-0.05880219489336014,
-0.24005042016506195,
-0.060089822858572006,
0.030980737879872322,
-0.3019598424434662,
-0.15506362915039062,
-0.027910815551877022,
-0.061698995530605316,
-0.01514950767159462,
-0.32576122879981995,
0.03675665333867073,
-0.00956478901207447,
0.1888088583946228,
0.09391982853412628,
0.015812812373042107,
-0.18677902221679688,
0.16777102649211884,
0.3235454559326172,
-0.14822471141815186,
0.0416935533285141,
-0.28766539692878723,
0.17718851566314697,
0.14229877293109894,
0.2308485507965088,
-0.43462491035461426,
0.000727543025277555,
0.1878105103969574,
-0.2633119523525238,
0.01666504330933094,
-0.005138722248375416,
-0.27452313899993896,
-0.12490316480398178,
0.07946734875440598,
0.07507440447807312,
-0.038649752736091614,
-0.14031602442264557,
-0.3353002369403839,
0.01786116138100624,
-0.23135347664356232,
-0.19755835831165314,
-0.30795466899871826,
0.19172504544258118,
0.03664669767022133,
-0.2991902530193329,
0.2173314392566681,
0.012843597680330276,
-0.21549783647060394,
0.2940675616264343,
-0.08235815167427063,
0.17905184626579285,
0.1396365612745285,
-0.23841454088687897,
0.11900953948497772,
-0.06726223975419998,
-0.29142889380455017,
0.17499494552612305,
0.09874378144741058,
-0.22982285916805267,
-0.2064410150051117,
-0.20802314579486847,
-0.21427315473556519,
-0.15063856542110443,
-0.05101728439331055,
0.11367277801036835,
-0.20818491280078888,
0.1308201253414154,
-0.08571220189332962,
0.08995193988084793,
-0.15865634381771088,
-0.06298855692148209,
4.39014402218163e-05,
-0.10386521369218826,
0.09099434316158295,
0.1144578829407692,
0.16417241096496582,
0.04116879031062126,
0.28023761510849,
-0.2319759726524353,
-0.04170546308159828,
-0.000616234727203846,
-0.3445560038089752,
0.11987677961587906,
0.05420027673244476,
0.0590907484292984,
0.0555761344730854,
-0.044494688510894775,
0.020164847373962402,
-0.23600083589553833,
-0.3395082950592041,
-0.15799038112163544,
0.37028494477272034,
-0.15922749042510986,
-0.30731117725372314,
0.15916579961776733,
0.26560133695602417,
-0.2730780839920044,
0.11257994174957275,
0.04472636803984642,
0.10770482569932938,
-0.22248290479183197,
0.09730122983455658,
0.2614802420139313,
-0.23809848725795746,
-0.11323513835668564,
-0.08180291950702667,
-0.16070476174354553,
-0.012455787509679794,
-0.006019407417625189,
-0.22790563106536865,
0.10995768755674362,
0.23806361854076385,
-0.2676454782485962,
-0.32613247632980347,
0.04696710407733917,
-0.11908356845378876,
-0.05895909667015076,
0.05483986809849739,
-0.09699713438749313,
-0.282013475894928,
-0.0028165127150714397,
0.12129093706607819,
-0.03153640031814575,
-0.045285679399967194,
-0.15144625306129456,
-0.19364474713802338,
-0.11515504866838455,
-0.07046189159154892,
-0.32436254620552063,
0.040895432233810425,
-0.036656975746154785,
0.09126193821430206,
0.1394256055355072,
0.190506249666214,
-0.07659262418746948,
0.11858300864696503,
-0.10987313091754913,
0.055599745362997055,
-0.06258993595838547,
-0.04220133274793625,
0.24609845876693726,
-0.1859225481748581,
0.13086570799350739,
-0.10031283646821976,
-0.07636172324419022,
-0.1306275576353073,
-0.2418772578239441,
-0.18308031558990479,
-0.0735492929816246,
-0.09279365092515945,
0.1576898843050003,
0.2761324346065521,
0.007256283890455961,
-0.08398021757602692,
0.10455267876386642,
0.03913518413901329,
-0.10622171312570572,
-0.005345473065972328,
0.06837213039398193,
-0.06124173849821091,
-0.0883815735578537,
0.15342801809310913,
-0.014906338416039944,
-0.23979872465133667,
0.05399347469210625,
0.20586420595645905,
-0.11526420712471008,
-0.030033787712454796,
0.08050403743982315,
-0.011347095482051373,
-0.10096245259046555,
-0.09758469462394714,
0.2681632339954376,
0.25191012024879456,
0.2946859300136566,
-0.24331283569335938,
0.24074183404445648,
-0.21911953389644623,
-0.11097674816846848,
0.030048629269003868,
-0.19624894857406616,
0.15043222904205322,
-0.0940597653388977,
0.17468923330307007,
0.06390363723039627,
0.15819543600082397,
-0.046364959329366684,
0.05678257718682289,
0.036132730543613434,
-0.17636659741401672,
-0.11460278928279877,
-0.00320631661452353,
-0.30979835987091064,
0.16147880256175995,
-0.23537677526474,
-0.17350265383720398,
0.11821998655796051,
0.12079746276140213,
0.15905243158340454,
-0.03287259861826897,
-0.0037997490726411343,
-0.0321984700858593,
-0.28879180550575256,
0.028494732454419136,
0.12366246432065964,
-0.26967519521713257,
0.19241169095039368,
-0.11691556125879288,
0.01757158525288105,
-0.17901043593883514,
0.19863572716712952,
-0.17642779648303986,
0.004421379417181015,
0.4081428349018097,
-0.12199521064758301,
0.23532302677631378,
0.2677028775215149,
0.14692018926143646,
0.06819480657577515,
-0.0033989734947681427,
-0.059098973870277405,
-0.03665463253855705,
-0.00121272262185812,
-0.27006053924560547,
0.4665759205818176,
-0.14433002471923828,
0.1766594797372818,
-0.017885124310851097,
0.20389579236507416,
-0.3545836806297302,
-0.09396429359912872,
-0.033545881509780884,
-0.07307635992765427,
0.05576475337147713,
0.1093682125210762,
-0.15668709576129913,
-0.16070319712162018,
-0.0598221980035305,
0.34018802642822266,
-0.1804562509059906,
-0.029585089534521103,
-0.005478682462126017,
0.030423089861869812,
0.21828071773052216,
0.08890421688556671,
-0.06101579591631889,
-0.16620559990406036,
0.06136886775493622,
0.08769606798887253,
-0.24466659128665924,
0.014774788171052933,
-0.08308011293411255,
0.2602381110191345,
0.08620955049991608,
0.19021397829055786,
0.1883232295513153,
-0.331125944852829,
-0.12226235866546631,
0.05903100222349167,
0.049207571893930435,
0.051519591361284256,
-0.047625720500946045,
-0.1302972435951233,
0.1662335991859436,
-0.306334912776947,
0.11650528758764267,
-0.21409745514392853,
0.15467630326747894,
-0.14358413219451904,
0.31674924492836,
0.17438238859176636,
0.027586152777075768,
0.1542918086051941,
-0.200637549161911,
0.16452699899673462,
0.02281961962580681,
-0.05026531219482422,
-0.20715028047561646,
0.06812310963869095,
0.044590480625629425,
-0.1602201908826828,
0.1682843267917633,
0.018493222072720528,
-0.3452037274837494,
-0.007609127089381218,
-0.1125410944223404,
0.02663431130349636,
-0.03478848561644554,
0.08892892301082611,
-0.04450919106602669,
0.1803922951221466,
-0.3325332999229431,
-0.1408948302268982,
-0.08324353396892548,
-0.015003538690507412,
0.040833231061697006,
-0.34922972321510315,
-0.24136359989643097,
0.0535009503364563,
-0.00498826103284955,
-0.24737457931041718,
0.3140524923801422,
0.08653216809034348,
-0.044483765959739685,
-0.1170552521944046,
0.13397343456745148,
0.22554093599319458,
0.25241851806640625,
-0.05502244457602501,
-0.09090904146432877,
0.10792169719934464,
0.30537721514701843,
0.13326525688171387,
0.08520232886075974,
-0.004809834528714418,
0.036933932453393936,
0.1438436210155487,
-0.18981780111789703,
-0.33770552277565,
-0.23989315330982208,
-0.2126404345035553,
0.21880944073200226,
0.1540796011686325,
-0.004765768069773912,
-0.09626513719558716,
0.1098383218050003,
0.021742967888712883,
-0.287710964679718,
0.2198464423418045,
-0.4144190847873688,
0.06228192523121834,
-0.129069983959198,
0.10655812174081802,
-0.18891318142414093,
0.3418688178062439,
-0.2702484726905823,
0.03563562035560608,
0.06727113574743271,
0.2226794809103012,
0.10364993661642075,
-0.03134709224104881,
-0.10561667382717133,
0.10016338527202606,
-0.12022523581981659,
-0.10436337441205978,
-0.28372159600257874,
0.03179789334535599,
0.1844276636838913,
0.007433541584759951,
-0.04379376024007797,
0.09047489613294601,
-0.050775621086359024,
0.2992594540119171,
0.3071477711200714,
0.026071449741721153,
-0.27941444516181946,
0.03943011164665222,
0.16896700859069824,
0.038260798901319504,
-0.1800360083580017,
0.21010877192020416,
0.047189861536026,
0.11600382626056671,
-0.11468443274497986,
0.13113975524902344,
-0.2591402530670166,
-0.2776910662651062,
-0.2561374008655548,
-0.048441581428050995,
-0.1099850982427597,
0.20033060014247894,
-0.009977880865335464,
0.16568619012832642,
0.09364475309848785,
-0.015551581978797913,
-0.11904968321323395,
0.21687234938144684,
0.23250235617160797,
0.2037157118320465,
-0.21130938827991486,
-0.16758430004119873,
0.016032304614782333,
-0.06817159056663513,
-0.16044750809669495,
0.3290359079837799,
0.2741185426712036,
-0.1320367008447647,
0.1897900104522705,
0.1513286978006363,
0.11190611869096756,
0.22420929372310638,
-0.05228421464562416,
0.32402631640434265,
0.02744414284825325,
-0.2580726444721222,
0.09977684170007706,
-0.2393486499786377,
0.01316420640796423,
0.18459607660770416,
-0.19662180542945862,
-0.34663182497024536,
-0.20264577865600586,
0.2978086471557617,
0.28719645738601685,
-0.26249879598617554,
-0.2581392824649811,
0.15868794918060303,
-0.11847453564405441,
0.05488651618361473,
0.3220699727535248,
-0.06253951042890549,
-0.1885715126991272,
0.1512511819601059,
0.12407348304986954,
-0.28074100613594055,
0.08242545276880264,
0.3060743808746338,
-0.05407757684588432,
-0.27157941460609436,
-0.007982405833899975,
0.178142711520195,
-0.11903580278158188,
-0.25390738248825073,
-0.2116856426000595,
0.14781969785690308,
0.29880836606025696,
0.27158987522125244,
-0.21289542317390442,
-0.05389365181326866,
-0.2482912242412567,
0.3214622139930725,
-0.20080019533634186,
0.3378714323043823,
0.08515437692403793,
0.0012933306861668825,
-0.28535667061805725,
0.053155217319726944,
-0.09272170811891556,
0.22042718529701233,
0.3336104452610016,
-0.2128293812274933,
-0.1761006861925125,
-0.07164659351110458,
0.14594724774360657,
-0.02460189163684845,
0.2390897423028946,
-0.02617066353559494,
0.09019467234611511,
0.17730243504047394,
0.16214188933372498,
0.11051028966903687,
0.06055588275194168,
0.010272802785038948,
0.08855234831571579,
0.15746933221817017,
0.3121184706687927,
0.06938499957323074,
-0.3029644191265106,
-0.09517627954483032,
0.05834022909402847,
0.22448526322841644,
0.26855042576789856,
-0.17488664388656616,
0.05599673092365265,
-0.24087722599506378,
-0.12927208840847015,
-0.13141556084156036,
-0.232748880982399,
-0.0364554226398468,
-0.16898003220558167,
-0.0060471477918326855,
-0.027591228485107422,
-0.005815677344799042,
-0.1819823980331421,
-0.0689554363489151,
0.15572622418403625,
0.20762503147125244,
0.17399962246418,
0.12771722674369812,
-0.25838175415992737,
-0.12631206214427948,
0.22320561110973358,
0.20092681050300598,
0.2249564528465271,
0.3117177188396454,
-0.31812378764152527,
0.020341675728559494,
-0.03619610145688057,
-0.12454062700271606,
-0.11017360538244247,
-0.21564853191375732,
0.30490022897720337,
-0.19024558365345,
-0.1494850367307663,
0.009780786000192165,
-0.22710126638412476,
-0.10074801743030548,
0.10691660642623901,
0.16565640270709991,
0.3006378412246704,
-0.061032164841890335,
0.08234953880310059,
-0.24051907658576965,
0.18312771618366241,
0.2737170457839966,
0.35222771763801575,
0.028984829783439636,
0.04453263059258461,
0.13156992197036743,
-0.027094487100839615,
-0.07347331196069717,
0.2955968677997589,
0.23472155630588531,
-0.08647184818983078,
0.1313759982585907,
0.2279490828514099,
0.22541444003582,
0.20121324062347412,
0.18707877397537231,
0.08612627536058426,
-0.30234140157699585,
0.05549168586730957,
-0.10387534648180008,
-0.069283626973629,
-0.2775295376777649,
-0.1398356407880783,
-0.1625165343284607,
-0.2574358284473419,
-0.29444509744644165,
-0.15562035143375397,
-0.3101845979690552,
0.36995264887809753,
-0.05216534063220024,
0.17926722764968872,
0.23318946361541748,
-0.2473752796649933,
0.1962137073278427,
-0.3089042901992798,
-0.17428699135780334,
0.10463201254606247,
0.058391373604536057,
-0.22559912502765656,
0.031223341822624207,
-0.3486981987953186,
0.00032577887759543955,
-0.21367916464805603,
-0.3486137390136719,
0.22064201533794403,
0.13109375536441803,
-0.09018491208553314,
-0.20545411109924316,
-0.13959887623786926,
0.13997237384319305,
-0.02142127975821495,
-0.29093506932258606,
-0.29975128173828125,
0.08228319138288498,
0.2838817238807678,
0.09772860258817673,
0.2356945425271988,
0.18406574428081512,
0.22486066818237305,
0.21971625089645386,
0.2006518840789795,
-0.193291574716568,
0.1033921167254448,
0.29387325048446655,
-0.0506569929420948,
0.2618325650691986,
0.2678816616535187,
0.039454828947782516,
0.2589198648929596,
-0.21563391387462616,
0.07562001794576645,
0.32107779383659363,
-0.0996076762676239,
-0.3515467643737793,
0.30387064814567566,
-0.14504964649677277,
-0.09824737906455994,
0.11604371666908264,
-0.05247649922966957,
0.26891276240348816,
0.16423413157463074,
-0.2621401250362396,
0.24009288847446442,
-0.0731210708618164,
-0.03456244617700577,
0.12194119393825531,
0.2777298390865326,
-0.08523223549127579,
0.20479026436805725,
0.24270141124725342,
0.34791815280914307,
-0.14149799942970276,
-0.04321414604783058,
0.08741414546966553,
-0.15695695579051971,
0.08292580395936966,
-0.23695921897888184,
0.027113525196909904,
-0.060285165905952454,
0.03747725114226341,
-0.25220170617103577,
0.18600818514823914,
-0.327696293592453,
-0.2734594941139221,
0.11156733334064484,
-0.08071000874042511,
0.15094469487667084,
0.16588735580444336,
0.1313786804676056,
-0.18875044584274292,
0.1775606870651245,
0.04161623865365982,
-0.24640950560569763
# 40 "src/lenet.cpp" 2
};
const dtype bias2[65]={

# 1 "src/../weights/hls_bias4.txt" 1
0.01143996324390173,
0.02724457159638405,
0.0026173985097557306,
0.033457327634096146,
-0.03945976123213768,
0.03555420786142349,
-0.04173563793301582,
0.02152937650680542,
0.03171663358807564,
-0.021842097863554955,
-0.010132590308785439,
-0.013945626094937325,
0.006374177988618612,
-0.0357247069478035,
-0.026077523827552795,
-0.011399561539292336,
-0.033310387283563614,
-0.011354431509971619,
-0.007910162210464478,
0.010206055827438831,
-0.03136986121535301,
-0.03489633649587631,
-0.03047223761677742,
0.03179264813661575,
-0.054811786860227585,
-0.048065364360809326,
-0.046440403908491135,
0.02773318439722061,
-0.05160757526755333,
0.0021828904282301664,
-0.0050192284397780895,
-0.03094705194234848,
0.03558310121297836,
-0.024523910135030746,
0.00783811416476965,
0.014215445145964622,
-0.013672747649252415,
-0.0003217639459762722,
-0.02772887796163559,
-0.015572285279631615,
-0.04393437132239342,
0.007452061865478754,
-0.009351510554552078,
0.028837958350777626,
-0.004315131809562445,
0.01379980705678463,
0.023839572444558144,
0.06445780396461487,
-0.03336425498127937,
-0.003627082798629999,
-0.03366398811340332,
-0.012812450528144836,
0.011904390528798103,
0.005613897927105427,
0.010772226378321648,
-0.025396013632416725,
0.032775089144706726,
-0.028683194890618324,
-0.015150927938520908,
-0.009373902343213558,
0.0037183398380875587,
0.007864551618695259,
-0.015118603594601154,
0.05209657922387123,
0.0073998840525746346
# 43 "src/lenet.cpp" 2
};

dtype relu(dtype x){
    if(x>0) return x;
    else return 0;
}
dtype my_tanh(dtype x){
 if(x<-4.0) return -1.0;
 else if(x>4.0) return 1.0;
 else{
  TANH_SEARCH:
  for(int i=0;i<256;i++)
   if(x<tanh_index[i])
    return tanh_value[i];
 }
 return 1.0;
}
void Conv1_Cal(){






 CONV1_SIZE1:
    for(int i=0;i<5;i++){
     CONV1_SIZE2:
        for(int j=0;j<5;j++){
         CONV1_ROW:
            for(int row=0;row<(32 -5 +1);row++){
             CONV1_COL:
                for(int col=0;col<(32 -5 +1);col++){

                 CONV1_OUTD:
                    for(int out_d=0;out_d<6;out_d++){
                        if(i==0&&j==0){
                            layer2[out_d][row][col]=layer1[0][row+i][col+j]*conv1[out_d][0][i][j];
                        }
                        else{
                            layer2[out_d][row][col]+=layer1[0][row+i][col+j]*conv1[out_d][0][i][j];
                        }
                    }
                }
            }
        }
    }
    CONV1_BIAS_SIZE1:
    for(int i=0;i<32;i++){
     CONV1_BIAS_SIZE2:
        for(int j=0;j<(32 -5 +1);j++){
         CONV1_BIAS_OUTD:
            for(int out_d=0;out_d<6;out_d++)
            layer2[out_d][i][j]=relu(layer2[out_d][i][j]+conv1_bias[out_d]);
        }
    }
    return;
}
void Pool1_Cal(){
    dtype max1,max2;
    POOL1_DEPTH:
    for(int in_d=0;in_d<6;in_d++){
     POOL1_SIZE1:
        for(int i=0;i<(32 -5 +1);i+=2){
         POOL1_SIZE2:
            for(int j=0;j<(32 -5 +1);j+=2){
                max1=(layer2[in_d][i][j]>layer2[in_d][i][j+1])?layer2[in_d][i][j]:layer2[in_d][i][j+1];
                max2=(layer2[in_d][i+1][j]>layer2[in_d][i+1][j+1])?layer2[in_d][i+1][j]:layer2[in_d][i+1][j+1];
                layer3[in_d][i/2][j/2]=(max1>max2)?max1:max2;
            }
        }
    }
    return;
}
void Conv2_Cal(){






 CONV2_SIZE1:
    for(int i=0;i<5;i++){
     CONV2_SIZE2:
        for(int j=0;j<5;j++){
         CONV2_ROW:
            for(int row=0;row<((32 -5 +1)/2 -5 +1);row++){
             CONV2_COL:
                for(int col=0;col<((32 -5 +1)/2 -5 +1);col++){

                 CONV2_OUTD:
                    for(int out_d=0;out_d<16;out_d++){
                     CONV2_IND:
                        for(int in_d=0;in_d<6;in_d++){
                            if(i==0&&j==0&&in_d==0){
                                layer4[out_d][row][col]=layer3[in_d][row+i][col+j]*conv2[out_d][in_d][i][j];
                            }
                            else{
                                layer4[out_d][row][col]+=layer3[in_d][row+i][col+j]*conv2[out_d][in_d][i][j];
                            }
                        }
                    }
                }
            }
        }
    }
    CONV2_BIAS_SIZE1:
    for(int i=0;i<((32 -5 +1)/2 -5 +1);i++){
     CONV2_BIAS_SIZE2:
        for(int j=0;j<((32 -5 +1)/2 -5 +1);j++){
         CONV2_BIAS_OUTD:
            for(int out_d=0;out_d<16;out_d++)
            layer4[out_d][i][j]=relu(layer4[out_d][i][j]+conv2_bias[out_d]);
        }
    }
    return;
}
void Pool2_Cal(){
    dtype max1,max2;
    POOL2_DEPTH:
    for(int in_d=0;in_d<16;in_d++){
     POOL2_SIZE1:
        for(int i=0;i<((32 -5 +1)/2 -5 +1);i+=2){
         POOL2_SIZE2:
            for(int j=0;j<((32 -5 +1)/2 -5 +1);j+=2){
                max1=(layer4[in_d][i][j]>layer4[in_d][i][j+1])?layer4[in_d][i][j]:layer4[in_d][i][j+1];
                max2=(layer4[in_d][i+1][j]>layer4[in_d][i+1][j+1])?layer4[in_d][i+1][j]:layer4[in_d][i+1][j+1];
                layer5[in_d][i/2][j/2]=(max1>max2)?max1:max2;
            }
        }
    }
    return;
}
void Fullc1_Cal(){
 FULL1_LEN2:
    for(int i=0;i<84;i++){
     flatten2[i]=bias1[i];
        FULL1_LEN1:
        for(int j=0;j<(((32 -5 +1)/2 -5 +1)/2*((32 -5 +1)/2 -5 +1)/2*16);j++){
         flatten2[i]+=weight1[i][j]*flatten1[j];
        }
        flatten2[i]=my_tanh(flatten2[i]);
    }
    return;
}
void Fullc2_Cal(){

 FULL2_LEN3:
    for(int i=0;i<65;i++){
     flatten3[i]=bias2[i];
        FULL2_LEN2:
        for(int j=0;j<84;j++){
         flatten3[i]+=weight2[i][j]*flatten2[j];
        }
    }
    return;
}
int Biggest_Element(){
    int index=0;
    dtype maxn=-10000;
    BIGGEST:
    for(int i=0;i<65;i++){
        if(maxn<flatten3[i]){
            maxn=flatten3[i];
            index=i;
        }
    }
    return index;
}
void Flatten_Layer(){
    int index=0;
    FLAT_SIZE1:
    for(int i=0;i<((32 -5 +1)/2 -5 +1)/2;i++){
     FLAT_SIZE2:
        for(int j=0;j<((32 -5 +1)/2 -5 +1)/2;j++){
         FLAT_DEPTH:
            for(int t=0;t<16;t++){
                flatten1[index]=layer5[t][i][j];
                index++;
            }
        }
    }
    return;
}
int Lenet_HLS(dtype_in input_layer[1024],int id){_ssdm_SpecArrayDimSize(input_layer, 1024);
_ssdm_op_SpecInterface(id, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(input_layer, "axis", 1, 1, "both", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(0, "s_axilite", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");

 dtype_in data_buf[1024];
 COPY:
 for(int i=0;i<1024;i++){
  data_buf[i].data = input_layer[i].data;
  data_buf[i].dest = input_layer[i].dest;
  data_buf[i].id = input_layer[i].id;
  data_buf[i].keep = input_layer[i].keep;
  data_buf[i].last = input_layer[i].last;
  data_buf[i].strb = input_layer[i].strb;
  data_buf[i].user = input_layer[i].user;
 }
 LOAD_ROW:
 for(int i=0;i<32;i++){
  LOAD_COL:
  for(int j=0;j<32;j++){
   int index = i*32 +j;
   layer1[0][i][j]=((float)(data_buf[index].data))/255.0;
  }
 }
 int ret;
    Conv1_Cal();
    Pool1_Cal();
    Conv2_Cal();
    Pool2_Cal();
    Flatten_Layer();
    Fullc1_Cal();
    Fullc2_Cal();
    ret=Biggest_Element();
 return ret;
}
