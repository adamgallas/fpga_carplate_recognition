

================================================================
== Vivado HLS Report for 'my_tanh'
================================================================
* Date:           Wed Aug 19 09:56:46 2020

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        Lenet_HLS_Final
* Solution:       conv_optimization
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.552 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max   | min | max |   Type  |
    +---------+---------+-----------+----------+-----+-----+---------+
    |        5|      521| 50.000 ns | 5.210 us |    5|  521|   none  |
    +---------+---------+-----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------+---------+---------+----------+-----------+-----------+---------+----------+
        |               |  Latency (cycles) | Iteration|  Initiation Interval  |   Trip  |          |
        |   Loop Name   |   min   |   max   |  Latency |  achieved |   target  |  Count  | Pipelined|
        +---------------+---------+---------+----------+-----------+-----------+---------+----------+
        |- TANH_SEARCH  |        2|      513|         2|          -|          -| 1 ~ 256 |    no    |
        +---------------+---------+---------+----------+-----------+-----------+---------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 7 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 10 
7 --> 10 8 
8 --> 9 10 
9 --> 8 10 
10 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 5.64>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%x_V_read = call i12 @_ssdm_op_Read.ap_auto.i12(i12 %x_V)" [src/lenet.cpp:50]   --->   Operation 11 'read' 'x_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (1.99ns)   --->   "%icmp_ln885 = icmp eq i12 %x_V_read, 0" [src/lenet.cpp:50]   --->   Operation 12 'icmp' 'icmp_ln885' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "br i1 %icmp_ln885, label %.critedge87, label %_ifconv" [src/lenet.cpp:50]   --->   Operation 13 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%p_Result_9 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %x_V_read, i32 11)" [src/lenet.cpp:50]   --->   Operation 14 'bitselect' 'p_Result_9' <Predicate = (!icmp_ln885)> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (1.54ns)   --->   "%tmp_V = sub i12 0, %x_V_read" [src/lenet.cpp:50]   --->   Operation 15 'sub' 'tmp_V' <Predicate = (!icmp_ln885)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 16 [1/1] (0.69ns)   --->   "%tmp_V_3 = select i1 %p_Result_9, i12 %tmp_V, i12 %x_V_read" [src/lenet.cpp:50]   --->   Operation 16 'select' 'tmp_V_3' <Predicate = (!icmp_ln885)> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%p_Result_s = call i12 @llvm.part.select.i12(i12 %tmp_V_3, i32 11, i32 0) nounwind" [src/lenet.cpp:50]   --->   Operation 17 'partselect' 'p_Result_s' <Predicate = (!icmp_ln885)> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%p_Result_10 = call i32 @_ssdm_op_BitConcatenate.i32.i20.i12(i20 -1, i12 %p_Result_s)" [src/lenet.cpp:50]   --->   Operation 18 'bitconcatenate' 'p_Result_10' <Predicate = (!icmp_ln885)> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (3.39ns)   --->   "%l = call i32 @llvm.cttz.i32(i32 %p_Result_10, i1 true) nounwind" [src/lenet.cpp:50]   --->   Operation 19 'cttz' 'l' <Predicate = (!icmp_ln885)> <Delay = 3.39> <Core = "CTTZ">   --->   Core 64 'CTTZ' <Latency = 0> <II = 1> <Delay = 3.39> <FuncUnit> <Opcode : 'cttz'> <InPorts = 1> <OutPorts = 1>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%trunc_ln893 = trunc i32 %l to i11" [src/lenet.cpp:50]   --->   Operation 20 'trunc' 'trunc_ln893' <Predicate = (!icmp_ln885)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 8.55>
ST_2 : Operation 21 [1/1] (2.55ns)   --->   "%sub_ln894 = sub nsw i32 12, %l" [src/lenet.cpp:50]   --->   Operation 21 'sub' 'sub_ln894' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%trunc_ln894 = trunc i32 %sub_ln894 to i12" [src/lenet.cpp:50]   --->   Operation 22 'trunc' 'trunc_ln894' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (2.55ns)   --->   "%lsb_index = add nsw i32 -53, %sub_ln894" [src/lenet.cpp:50]   --->   Operation 23 'add' 'lsb_index' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_4 = call i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32 %lsb_index, i32 1, i32 31)" [src/lenet.cpp:50]   --->   Operation 24 'partselect' 'tmp_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (2.47ns)   --->   "%icmp_ln897 = icmp sgt i31 %tmp_4, 0" [src/lenet.cpp:50]   --->   Operation 25 'icmp' 'icmp_ln897' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%trunc_ln897 = trunc i32 %sub_ln894 to i4" [src/lenet.cpp:50]   --->   Operation 26 'trunc' 'trunc_ln897' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (1.73ns)   --->   "%sub_ln897 = sub i4 2, %trunc_ln897" [src/lenet.cpp:50]   --->   Operation 27 'sub' 'sub_ln897' <Predicate = true> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln897_1)   --->   "%zext_ln897 = zext i4 %sub_ln897 to i12" [src/lenet.cpp:50]   --->   Operation 28 'zext' 'zext_ln897' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln897_1)   --->   "%lshr_ln897 = lshr i12 -1, %zext_ln897" [src/lenet.cpp:50]   --->   Operation 29 'lshr' 'lshr_ln897' <Predicate = true> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 4.42> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln897_1)   --->   "%p_Result_4 = and i12 %tmp_V_3, %lshr_ln897" [src/lenet.cpp:50]   --->   Operation 30 'and' 'p_Result_4' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 31 [1/1] (2.39ns) (out node of the LUT)   --->   "%icmp_ln897_1 = icmp ne i12 %p_Result_4, 0" [src/lenet.cpp:50]   --->   Operation 31 'icmp' 'icmp_ln897_1' <Predicate = true> <Delay = 2.39> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%a = and i1 %icmp_ln897, %icmp_ln897_1" [src/lenet.cpp:50]   --->   Operation 32 'and' 'a' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%tmp_5 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %lsb_index, i32 31)" [src/lenet.cpp:50]   --->   Operation 33 'bitselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%xor_ln899 = xor i1 %tmp_5, true" [src/lenet.cpp:50]   --->   Operation 34 'xor' 'xor_ln899' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 35 [1/1] (1.54ns)   --->   "%add_ln899 = add i12 -53, %trunc_ln894" [src/lenet.cpp:50]   --->   Operation 35 'add' 'add_ln899' <Predicate = true> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%p_Result_3 = call i1 @_ssdm_op_BitSelect.i1.i12.i12(i12 %tmp_V_3, i12 %add_ln899)" [src/lenet.cpp:50]   --->   Operation 36 'bitselect' 'p_Result_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%and_ln899 = and i1 %p_Result_3, %xor_ln899" [src/lenet.cpp:50]   --->   Operation 37 'and' 'and_ln899' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 38 [1/1] (0.00ns) (grouped into LUT with out node or_ln)   --->   "%or_ln899 = or i1 %and_ln899, %a" [src/lenet.cpp:50]   --->   Operation 38 'or' 'or_ln899' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 39 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln = call i32 @_ssdm_op_BitConcatenate.i32.i31.i1(i31 0, i1 %or_ln899)" [src/lenet.cpp:50]   --->   Operation 39 'bitconcatenate' 'or_ln' <Predicate = true> <Delay = 0.97>
ST_2 : Operation 40 [1/1] (2.47ns)   --->   "%icmp_ln908 = icmp sgt i32 %lsb_index, 0" [src/lenet.cpp:50]   --->   Operation 40 'icmp' 'icmp_ln908' <Predicate = true> <Delay = 2.47> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 41 [1/1] (2.55ns)   --->   "%add_ln908 = add nsw i32 -54, %sub_ln894" [src/lenet.cpp:50]   --->   Operation 41 'add' 'add_ln908' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 42 [1/1] (2.55ns)   --->   "%sub_ln908 = sub i32 54, %sub_ln894" [src/lenet.cpp:50]   --->   Operation 42 'sub' 'sub_ln908' <Predicate = true> <Delay = 2.55> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 3 <SV = 2> <Delay = 7.31>
ST_3 : Operation 43 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%m = zext i12 %tmp_V_3 to i64" [src/lenet.cpp:50]   --->   Operation 43 'zext' 'm' <Predicate = (!icmp_ln908)> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%zext_ln907_1 = zext i12 %tmp_V_3 to i32" [src/lenet.cpp:50]   --->   Operation 44 'zext' 'zext_ln907_1' <Predicate = (icmp_ln908)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%lshr_ln908 = lshr i32 %zext_ln907_1, %add_ln908" [src/lenet.cpp:50]   --->   Operation 45 'lshr' 'lshr_ln908' <Predicate = (icmp_ln908)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 4.42> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%zext_ln908 = zext i32 %lshr_ln908 to i64" [src/lenet.cpp:50]   --->   Operation 46 'zext' 'zext_ln908' <Predicate = (icmp_ln908)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%zext_ln908_1 = zext i32 %sub_ln908 to i64" [src/lenet.cpp:50]   --->   Operation 47 'zext' 'zext_ln908_1' <Predicate = (!icmp_ln908)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%shl_ln908 = shl i64 %m, %zext_ln908_1" [src/lenet.cpp:50]   --->   Operation 48 'shl' 'shl_ln908' <Predicate = (!icmp_ln908)> <Delay = 0.00> <Core = "Shift">   --->   Core 28 'Shift' <Latency = 0> <II = 1> <Delay = 4.42> <FuncUnit> <Opcode : 'shl' 'lshr' 'ashr'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%m_1 = select i1 %icmp_ln908, i64 %zext_ln908, i64 %shl_ln908" [src/lenet.cpp:50]   --->   Operation 49 'select' 'm_1' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node m_2)   --->   "%zext_ln911 = zext i32 %or_ln to i64" [src/lenet.cpp:50]   --->   Operation 50 'zext' 'zext_ln911' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (4.42ns) (out node of the LUT)   --->   "%m_2 = add i64 %zext_ln911, %m_1" [src/lenet.cpp:50]   --->   Operation 51 'add' 'm_2' <Predicate = true> <Delay = 4.42> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (0.00ns)   --->   "%m_7 = call i63 @_ssdm_op_PartSelect.i63.i64.i32.i32(i64 %m_2, i32 1, i32 63)" [src/lenet.cpp:50]   --->   Operation 52 'partselect' 'm_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%tmp_6 = call i1 @_ssdm_op_BitSelect.i1.i64.i32(i64 %m_2, i32 54)" [src/lenet.cpp:50]   --->   Operation 53 'bitselect' 'tmp_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "%trunc_ln3 = call i52 @_ssdm_op_PartSelect.i52.i64.i32.i32(i64 %m_2, i32 1, i32 52)" [src/lenet.cpp:50]   --->   Operation 54 'partselect' 'trunc_ln3' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (2.89ns)   --->   "%icmp_ln924_1 = icmp eq i52 %trunc_ln3, 0" [src/lenet.cpp:50]   --->   Operation 55 'icmp' 'icmp_ln924_1' <Predicate = true> <Delay = 2.89> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 4 <SV = 3> <Delay = 7.30>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%m_8 = zext i63 %m_7 to i64" [src/lenet.cpp:50]   --->   Operation 56 'zext' 'm_8' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 57 [1/1] (0.69ns)   --->   "%select_ln915 = select i1 %tmp_6, i11 1023, i11 1022" [src/lenet.cpp:50]   --->   Operation 57 'select' 'select_ln915' <Predicate = true> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_4 : Operation 58 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln915 = sub i11 6, %trunc_ln893" [src/lenet.cpp:50]   --->   Operation 58 'sub' 'sub_ln915' <Predicate = true> <Delay = 0.00> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.87> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 59 [1/1] (3.75ns) (root node of TernaryAdder)   --->   "%add_ln915 = add i11 %sub_ln915, %select_ln915" [src/lenet.cpp:50]   --->   Operation 59 'add' 'add_ln915' <Predicate = true> <Delay = 3.75> <Core = "TAddSub">   --->   Core 83 'TAddSub' <Latency = 0> <II = 1> <Delay = 1.87> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 60 [1/1] (0.00ns)   --->   "%tmp_1 = call i12 @_ssdm_op_BitConcatenate.i12.i1.i11(i1 %p_Result_9, i11 %add_ln915)" [src/lenet.cpp:50]   --->   Operation 60 'bitconcatenate' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 61 [1/1] (0.00ns)   --->   "%p_Result_11 = call i64 @_ssdm_op_PartSet.i64.i64.i12.i32.i32(i64 %m_8, i12 %tmp_1, i32 52, i32 63)" [src/lenet.cpp:50]   --->   Operation 61 'partset' 'p_Result_11' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 62 [1/1] (1.88ns)   --->   "%icmp_ln924 = icmp ne i11 %add_ln915, -1" [src/lenet.cpp:50]   --->   Operation 62 'icmp' 'icmp_ln924' <Predicate = true> <Delay = 1.88> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 63 [1/1] (0.97ns)   --->   "%or_ln924 = or i1 %icmp_ln924_1, %icmp_ln924" [src/lenet.cpp:50]   --->   Operation 63 'or' 'or_ln924' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 5.46>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%bitcast_ln729 = bitcast i64 %p_Result_11 to double" [src/lenet.cpp:50]   --->   Operation 64 'bitcast' 'bitcast_ln729' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 65 [2/2] (5.46ns)   --->   "%tmp = fcmp olt double %bitcast_ln729, -4.000000e+00" [src/lenet.cpp:50]   --->   Operation 65 'dcmp' 'tmp' <Predicate = true> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>

State 6 <SV = 5> <Delay = 8.25>
ST_6 : Operation 66 [1/2] (5.46ns)   --->   "%tmp = fcmp olt double %bitcast_ln729, -4.000000e+00" [src/lenet.cpp:50]   --->   Operation 66 'dcmp' 'tmp' <Predicate = true> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 67 [1/1] (0.97ns)   --->   "%and_ln924 = and i1 %or_ln924, %tmp" [src/lenet.cpp:50]   --->   Operation 67 'and' 'and_ln924' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_6 : Operation 68 [1/1] (1.81ns)   --->   "br i1 %and_ln924, label %._crit_edge183.i104, label %.critedge_ifconv" [src/lenet.cpp:50]   --->   Operation 68 'br' <Predicate = true> <Delay = 1.81>
ST_6 : Operation 69 [2/2] (5.46ns)   --->   "%tmp_2 = fcmp ogt double %bitcast_ln729, 4.000000e+00" [src/lenet.cpp:51]   --->   Operation 69 'dcmp' 'tmp_2' <Predicate = (!and_ln924)> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 8.25>
ST_7 : Operation 70 [1/2] (5.46ns)   --->   "%tmp_2 = fcmp ogt double %bitcast_ln729, 4.000000e+00" [src/lenet.cpp:51]   --->   Operation 70 'dcmp' 'tmp_2' <Predicate = (!icmp_ln885)> <Delay = 5.46> <Core = "DCmp">   --->   Core 120 'DCmp' <Latency = 1> <II = 1> <Delay = 5.46> <FuncUnit> <Opcode : 'dcmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 71 [1/1] (0.97ns)   --->   "%and_ln924_1 = and i1 %or_ln924, %tmp_2" [src/lenet.cpp:51]   --->   Operation 71 'and' 'and_ln924_1' <Predicate = (!icmp_ln885)> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 72 [1/1] (1.81ns)   --->   "br i1 %and_ln924_1, label %._crit_edge183.i104, label %.critedge87" [src/lenet.cpp:51]   --->   Operation 72 'br' <Predicate = (!icmp_ln885)> <Delay = 1.81>
ST_7 : Operation 73 [1/1] (1.76ns)   --->   "br label %1" [src/lenet.cpp:54]   --->   Operation 73 'br' <Predicate = (!and_ln924_1) | (icmp_ln885)> <Delay = 1.76>

State 8 <SV = 7> <Delay = 3.25>
ST_8 : Operation 74 [1/1] (0.00ns)   --->   "%i_0 = phi i9 [ 0, %.critedge87 ], [ %i, %2 ]"   --->   Operation 74 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 75 [1/1] (1.66ns)   --->   "%icmp_ln54 = icmp eq i9 %i_0, -256" [src/lenet.cpp:54]   --->   Operation 75 'icmp' 'icmp_ln54' <Predicate = true> <Delay = 1.66> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 76 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 256, i64 128)"   --->   Operation 76 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 77 [1/1] (1.82ns)   --->   "%i = add i9 %i_0, 1" [src/lenet.cpp:54]   --->   Operation 77 'add' 'i' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.82> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_8 : Operation 78 [1/1] (0.00ns)   --->   "br i1 %icmp_ln54, label %._crit_edge183.i104.loopexit, label %2" [src/lenet.cpp:54]   --->   Operation 78 'br' <Predicate = true> <Delay = 0.00>
ST_8 : Operation 79 [1/1] (0.00ns)   --->   "%zext_ln55 = zext i9 %i_0 to i64" [src/lenet.cpp:55]   --->   Operation 79 'zext' 'zext_ln55' <Predicate = (!icmp_ln54)> <Delay = 0.00>
ST_8 : Operation 80 [1/1] (0.00ns)   --->   "%tanh_index_V_addr = getelementptr [256 x i9]* @tanh_index_V, i64 0, i64 %zext_ln55" [src/lenet.cpp:55]   --->   Operation 80 'getelementptr' 'tanh_index_V_addr' <Predicate = (!icmp_ln54)> <Delay = 0.00>
ST_8 : Operation 81 [2/2] (3.25ns)   --->   "%tanh_index_V_load = load i9* %tanh_index_V_addr, align 2" [src/lenet.cpp:55]   --->   Operation 81 'load' 'tanh_index_V_load' <Predicate = (!icmp_ln54)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>
ST_8 : Operation 82 [1/1] (1.81ns)   --->   "br label %._crit_edge183.i104"   --->   Operation 82 'br' <Predicate = (icmp_ln54)> <Delay = 1.81>

State 9 <SV = 8> <Delay = 5.24>
ST_9 : Operation 83 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([12 x i8]* @p_str) nounwind" [src/lenet.cpp:55]   --->   Operation 83 'specloopname' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 84 [1/2] (3.25ns)   --->   "%tanh_index_V_load = load i9* %tanh_index_V_addr, align 2" [src/lenet.cpp:55]   --->   Operation 84 'load' 'tanh_index_V_load' <Predicate = true> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>
ST_9 : Operation 85 [1/1] (0.00ns)   --->   "%sext_ln1495 = sext i9 %tanh_index_V_load to i12" [src/lenet.cpp:55]   --->   Operation 85 'sext' 'sext_ln1495' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 86 [1/1] (1.99ns)   --->   "%icmp_ln1495 = icmp sgt i12 %sext_ln1495, %x_V_read" [src/lenet.cpp:55]   --->   Operation 86 'icmp' 'icmp_ln1495' <Predicate = true> <Delay = 1.99> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.99> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_9 : Operation 87 [1/1] (0.00ns)   --->   "br i1 %icmp_ln1495, label %3, label %1" [src/lenet.cpp:55]   --->   Operation 87 'br' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 88 [1/1] (0.00ns)   --->   "%tanh_value_V_addr = getelementptr [256 x i8]* @tanh_value_V, i64 0, i64 %zext_ln55" [src/lenet.cpp:56]   --->   Operation 88 'getelementptr' 'tanh_value_V_addr' <Predicate = (icmp_ln1495)> <Delay = 0.00>
ST_9 : Operation 89 [2/2] (3.25ns)   --->   "%tanh_value_V_load = load i8* %tanh_value_V_addr, align 1" [src/lenet.cpp:56]   --->   Operation 89 'load' 'tanh_value_V_load' <Predicate = (icmp_ln1495)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>

State 10 <SV = 9> <Delay = 5.06>
ST_10 : Operation 90 [1/2] (3.25ns)   --->   "%tanh_value_V_load = load i8* %tanh_value_V_addr, align 1" [src/lenet.cpp:56]   --->   Operation 90 'load' 'tanh_value_V_load' <Predicate = (!and_ln924 & !and_ln924_1 & !icmp_ln54) | (icmp_ln885 & !icmp_ln54)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 8> <Depth = 256> <ROM>
ST_10 : Operation 91 [1/1] (1.81ns)   --->   "br label %._crit_edge183.i104" [src/lenet.cpp:56]   --->   Operation 91 'br' <Predicate = (!and_ln924 & !and_ln924_1 & !icmp_ln54) | (icmp_ln885 & !icmp_ln54)> <Delay = 1.81>
ST_10 : Operation 92 [1/1] (0.00ns)   --->   "%agg_result_V_0 = phi i8 [ %tanh_value_V_load, %3 ], [ -64, %_ifconv ], [ 64, %.critedge_ifconv ], [ 64, %._crit_edge183.i104.loopexit ]" [src/lenet.cpp:56]   --->   Operation 92 'phi' 'agg_result_V_0' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 93 [1/1] (0.00ns)   --->   "ret i8 %agg_result_V_0" [src/lenet.cpp:59]   --->   Operation 93 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 5.64ns
The critical path consists of the following:
	wire read on port 'x_V' (src/lenet.cpp:50) [6]  (0 ns)
	'sub' operation ('tmp.V', src/lenet.cpp:50) [11]  (1.55 ns)
	'select' operation ('tmp.V', src/lenet.cpp:50) [12]  (0.697 ns)
	'cttz' operation ('l', src/lenet.cpp:50) [15]  (3.4 ns)

 <State 2>: 8.55ns
The critical path consists of the following:
	'sub' operation ('sub_ln894', src/lenet.cpp:50) [16]  (2.55 ns)
	'add' operation ('lsb_index', src/lenet.cpp:50) [18]  (2.55 ns)
	'icmp' operation ('icmp_ln897', src/lenet.cpp:50) [20]  (2.47 ns)
	'and' operation ('a', src/lenet.cpp:50) [27]  (0 ns)
	'or' operation ('or_ln899', src/lenet.cpp:50) [33]  (0 ns)
	blocking operation 0.978 ns on control path)

 <State 3>: 7.32ns
The critical path consists of the following:
	'shl' operation ('shl_ln908', src/lenet.cpp:50) [43]  (0 ns)
	'select' operation ('m', src/lenet.cpp:50) [44]  (0 ns)
	'add' operation ('m', src/lenet.cpp:50) [46]  (4.42 ns)
	'icmp' operation ('icmp_ln924_1', src/lenet.cpp:50) [59]  (2.9 ns)

 <State 4>: 7.31ns
The critical path consists of the following:
	'select' operation ('select_ln915', src/lenet.cpp:50) [50]  (0.692 ns)
	'add' operation ('add_ln915', src/lenet.cpp:50) [53]  (3.76 ns)
	'icmp' operation ('icmp_ln924', src/lenet.cpp:50) [58]  (1.88 ns)
	'or' operation ('or_ln924', src/lenet.cpp:50) [60]  (0.978 ns)

 <State 5>: 5.46ns
The critical path consists of the following:
	'dcmp' operation ('tmp', src/lenet.cpp:50) [61]  (5.46 ns)

 <State 6>: 8.25ns
The critical path consists of the following:
	'dcmp' operation ('tmp', src/lenet.cpp:50) [61]  (5.46 ns)
	'and' operation ('and_ln924', src/lenet.cpp:50) [62]  (0.978 ns)
	multiplexor before 'phi' operation ('agg_result_V_0', src/lenet.cpp:56) with incoming values : ('tanh_value_V_load', src/lenet.cpp:56) [91]  (1.81 ns)

 <State 7>: 8.25ns
The critical path consists of the following:
	'dcmp' operation ('tmp_2', src/lenet.cpp:51) [65]  (5.46 ns)
	'and' operation ('and_ln924_1', src/lenet.cpp:51) [66]  (0.978 ns)
	multiplexor before 'phi' operation ('agg_result_V_0', src/lenet.cpp:56) with incoming values : ('tanh_value_V_load', src/lenet.cpp:56) [91]  (1.81 ns)

 <State 8>: 3.25ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', src/lenet.cpp:54) [71]  (0 ns)
	'getelementptr' operation ('tanh_index_V_addr', src/lenet.cpp:55) [79]  (0 ns)
	'load' operation ('tanh_index_V_load', src/lenet.cpp:55) on array 'tanh_index_V' [80]  (3.25 ns)

 <State 9>: 5.24ns
The critical path consists of the following:
	'load' operation ('tanh_index_V_load', src/lenet.cpp:55) on array 'tanh_index_V' [80]  (3.25 ns)
	'icmp' operation ('icmp_ln1495', src/lenet.cpp:55) [82]  (1.99 ns)

 <State 10>: 5.07ns
The critical path consists of the following:
	'load' operation ('tanh_value_V_load', src/lenet.cpp:56) on array 'tanh_value_V' [86]  (3.25 ns)
	multiplexor before 'phi' operation ('agg_result_V_0', src/lenet.cpp:56) with incoming values : ('tanh_value_V_load', src/lenet.cpp:56) [91]  (1.81 ns)
	'phi' operation ('agg_result_V_0', src/lenet.cpp:56) with incoming values : ('tanh_value_V_load', src/lenet.cpp:56) [91]  (0 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
