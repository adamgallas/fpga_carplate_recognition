// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv1_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_V_address0,
        layer1_V_ce0,
        layer1_V_q0,
        layer2_V_address0,
        layer2_V_ce0,
        layer2_V_we0,
        layer2_V_d0,
        layer2_V_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] layer1_V_address0;
output   layer1_V_ce0;
input  [11:0] layer1_V_q0;
output  [12:0] layer2_V_address0;
output   layer2_V_ce0;
output   layer2_V_we0;
output  [11:0] layer2_V_d0;
input  [11:0] layer2_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer1_V_ce0;
reg[12:0] layer2_V_address0;
reg layer2_V_ce0;
reg layer2_V_we0;
reg[11:0] layer2_V_d0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv1_V_0_address0;
reg    conv1_V_0_ce0;
wire   [5:0] conv1_V_0_q0;
wire   [2:0] conv1_bias_V_address0;
reg    conv1_bias_V_ce0;
wire   [2:0] conv1_bias_V_q0;
wire   [4:0] zext_ln68_fu_265_p1;
reg   [4:0] zext_ln68_reg_1218;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_275_p2;
reg   [2:0] i_reg_1226;
wire   [5:0] zext_ln70_1_fu_281_p1;
reg   [5:0] zext_ln70_1_reg_1231;
wire   [0:0] icmp_ln68_fu_269_p2;
wire   [4:0] zext_ln70_fu_285_p1;
reg   [4:0] zext_ln70_reg_1236;
wire    ap_CS_fsm_state3;
wire   [2:0] j_fu_295_p2;
reg   [2:0] j_reg_1244;
wire   [0:0] icmp_ln78_fu_307_p2;
reg   [0:0] icmp_ln78_reg_1249;
wire   [0:0] icmp_ln70_fu_289_p2;
wire   [8:0] zext_ln72_fu_313_p1;
reg   [8:0] zext_ln72_reg_1253;
wire   [4:0] row_fu_323_p2;
reg   [4:0] row_reg_1261;
wire    ap_CS_fsm_state4;
wire   [9:0] zext_ln79_fu_329_p1;
reg   [9:0] zext_ln79_reg_1266;
wire   [0:0] icmp_ln72_fu_317_p2;
wire   [4:0] add_ln79_fu_333_p2;
reg   [4:0] add_ln79_reg_1271;
wire   [4:0] col_fu_344_p2;
reg   [4:0] col_reg_1279;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln74_fu_338_p2;
wire   [13:0] zext_ln79_1_fu_367_p1;
reg   [13:0] zext_ln79_1_reg_1289;
wire    ap_CS_fsm_state6;
wire  signed [18:0] sext_ln77_fu_371_p1;
reg  signed [18:0] sext_ln77_reg_1294;
wire   [2:0] out_d_2_fu_381_p2;
reg   [2:0] out_d_2_reg_1302;
wire    ap_CS_fsm_state7;
wire   [8:0] add_ln1117_7_fu_440_p2;
reg   [8:0] add_ln1117_7_reg_1307;
wire   [0:0] icmp_ln77_fu_375_p2;
reg   [12:0] layer2_V_addr_7_reg_1312;
wire    ap_CS_fsm_state8;
reg  signed [5:0] conv1_V_0_load_reg_1322;
wire    ap_CS_fsm_state9;
wire  signed [18:0] r_V_fu_1213_p2;
reg  signed [18:0] r_V_reg_1327;
wire    ap_CS_fsm_state10;
wire   [0:0] p_Result_31_fu_545_p3;
reg   [0:0] p_Result_31_reg_1342;
wire    ap_CS_fsm_state11;
wire   [11:0] p_Val2_36_fu_603_p2;
reg   [11:0] p_Val2_36_reg_1348;
wire   [0:0] carry_8_fu_623_p2;
reg   [0:0] carry_8_reg_1353;
wire   [0:0] p_Result_33_fu_629_p3;
reg   [0:0] p_Result_33_reg_1359;
wire   [0:0] Range2_all_ones_2_fu_637_p3;
reg   [0:0] Range2_all_ones_2_reg_1364;
wire   [0:0] and_ln786_7_fu_683_p2;
reg   [0:0] and_ln786_7_reg_1370;
wire   [0:0] overflow_2_fu_707_p2;
reg   [0:0] overflow_2_reg_1375;
wire    ap_CS_fsm_state12;
wire   [0:0] underflow_4_fu_724_p2;
reg   [0:0] underflow_4_reg_1379;
wire   [0:0] or_ln340_8_fu_729_p2;
reg   [0:0] or_ln340_8_reg_1383;
wire   [11:0] select_ln340_5_fu_962_p3;
reg   [11:0] select_ln340_5_reg_1387;
wire    ap_CS_fsm_state14;
wire   [5:0] i_4_fu_976_p2;
reg   [5:0] i_4_reg_1395;
wire    ap_CS_fsm_state16;
wire   [9:0] zext_ln92_fu_982_p1;
reg   [9:0] zext_ln92_reg_1400;
wire   [0:0] icmp_ln90_fu_970_p2;
wire   [4:0] j_2_fu_992_p2;
reg   [4:0] j_2_reg_1408;
wire    ap_CS_fsm_state17;
wire   [13:0] zext_ln94_fu_998_p1;
reg   [13:0] zext_ln94_reg_1413;
wire   [0:0] icmp_ln92_fu_986_p2;
wire   [2:0] out_d_fu_1008_p2;
reg   [2:0] out_d_reg_1421;
wire    ap_CS_fsm_state18;
reg   [12:0] layer2_V_addr_reg_1426;
wire   [0:0] icmp_ln94_fu_1002_p2;
wire    ap_CS_fsm_state19;
wire   [10:0] trunc_ln1494_fu_1192_p1;
reg   [10:0] trunc_ln1494_reg_1436;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln1494_fu_1196_p2;
reg   [0:0] icmp_ln1494_reg_1441;
reg   [2:0] i_0_reg_174;
reg   [2:0] j_0_reg_186;
reg   [4:0] row_0_reg_197;
reg   [4:0] col_0_reg_208;
reg   [2:0] out_d_0_reg_220;
wire    ap_CS_fsm_state13;
reg   [5:0] i1_0_reg_231;
reg   [4:0] j2_0_reg_242;
reg   [2:0] out_d3_0_reg_253;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln1116_fu_362_p1;
wire   [63:0] zext_ln203_14_fu_507_p1;
wire   [63:0] zext_ln1117_8_fu_512_p1;
wire   [63:0] zext_ln1265_5_fu_1088_p1;
wire   [63:0] zext_ln95_fu_1093_p1;
wire    ap_CS_fsm_state15;
wire   [11:0] zext_ln46_fu_1208_p1;
wire   [2:0] or_ln78_fu_301_p2;
wire   [4:0] add_ln79_1_fu_350_p2;
wire   [9:0] tmp_14_fu_355_p3;
wire   [4:0] tmp_15_fu_391_p3;
wire   [5:0] zext_ln1117_fu_387_p1;
wire   [5:0] zext_ln1117_4_fu_399_p1;
wire   [5:0] add_ln1117_fu_407_p2;
wire   [5:0] add_ln1117_5_fu_413_p2;
wire   [7:0] tmp_66_fu_422_p3;
wire   [8:0] zext_ln1117_6_fu_418_p1;
wire   [8:0] zext_ln1117_7_fu_430_p1;
wire   [8:0] add_ln1117_6_fu_434_p2;
wire   [7:0] tmp_16_fu_445_p3;
wire   [8:0] zext_ln203_fu_453_p1;
wire   [8:0] zext_ln1117_5_fu_403_p1;
wire   [8:0] sub_ln203_fu_457_p2;
wire  signed [9:0] sext_ln203_fu_463_p1;
wire   [9:0] add_ln203_fu_467_p2;
wire   [8:0] trunc_ln203_fu_472_p1;
wire   [11:0] tmp_67_fu_484_p3;
wire   [13:0] p_shl_cast_fu_476_p3;
wire  signed [13:0] sext_ln203_2_fu_492_p1;
wire   [13:0] sub_ln203_2_fu_496_p2;
wire   [13:0] add_ln203_15_fu_502_p2;
wire  signed [17:0] lhs_V_2_fu_519_p3;
wire  signed [18:0] sext_ln728_fu_527_p1;
wire   [17:0] trunc_ln1192_fu_531_p1;
(* use_dsp48 = "no" *) wire   [18:0] ret_V_fu_534_p2;
wire   [17:0] add_ln1192_4_fu_539_p2;
wire   [4:0] trunc_ln718_2_fu_563_p1;
wire   [0:0] r_5_fu_566_p2;
wire   [0:0] tmp_77_fu_586_p3;
wire   [0:0] or_ln406_fu_580_p2;
wire   [0:0] and_ln415_2_fu_593_p2;
wire   [11:0] zext_ln415_2_fu_599_p1;
wire   [11:0] p_Val2_35_fu_553_p4;
wire   [0:0] tmp_78_fu_609_p3;
wire   [0:0] p_Result_32_fu_572_p3;
wire   [0:0] xor_ln416_11_fu_617_p2;
wire   [0:0] tmp_81_fu_645_p3;
wire   [0:0] xor_ln416_12_fu_659_p2;
wire   [0:0] or_ln416_8_fu_665_p2;
wire   [0:0] xor_ln779_2_fu_653_p2;
wire   [0:0] or_ln416_fu_671_p2;
wire   [0:0] deleted_ones_4_fu_677_p2;
wire   [0:0] xor_ln785_7_fu_693_p2;
wire   [0:0] or_ln785_2_fu_697_p2;
wire   [0:0] xor_ln785_8_fu_702_p2;
wire   [0:0] and_ln781_2_fu_689_p2;
wire   [0:0] or_ln786_2_fu_713_p2;
wire   [0:0] xor_ln786_4_fu_718_p2;
wire   [4:0] trunc_ln718_fu_751_p1;
wire   [0:0] p_Result_s_fu_735_p3;
wire   [0:0] r_4_fu_754_p2;
wire   [0:0] tmp_70_fu_773_p3;
wire   [0:0] r_fu_767_p2;
wire   [0:0] and_ln415_fu_780_p2;
wire   [11:0] zext_ln415_fu_786_p1;
wire   [11:0] p_Val2_30_fu_742_p4;
wire   [11:0] p_Val2_31_fu_790_p2;
wire   [0:0] tmp_71_fu_796_p3;
wire   [0:0] p_Result_29_fu_760_p3;
wire   [0:0] xor_ln416_9_fu_804_p2;
wire   [0:0] tmp_74_fu_837_p3;
wire   [0:0] xor_ln416_10_fu_850_p2;
wire   [0:0] or_ln416_6_fu_856_p2;
wire   [0:0] xor_ln779_fu_844_p2;
wire   [0:0] Range2_all_ones_fu_824_p3;
wire   [0:0] or_ln416_7_fu_862_p2;
wire   [0:0] carry_6_fu_810_p2;
wire   [0:0] and_ln777_fu_831_p2;
wire   [0:0] p_Result_30_fu_816_p3;
wire   [0:0] xor_ln785_fu_880_p2;
wire   [0:0] or_ln785_fu_886_p2;
wire   [0:0] xor_ln785_6_fu_892_p2;
wire   [0:0] deleted_ones_fu_868_p2;
wire   [0:0] and_ln781_fu_874_p2;
wire   [0:0] and_ln786_fu_904_p2;
wire   [0:0] or_ln786_fu_910_p2;
wire   [0:0] xor_ln786_3_fu_916_p2;
wire   [0:0] underflow_fu_922_p2;
wire   [0:0] overflow_fu_898_p2;
wire   [0:0] or_ln340_7_fu_934_p2;
wire   [0:0] or_ln340_5_fu_928_p2;
wire   [0:0] or_ln340_6_fu_940_p2;
wire   [11:0] select_ln340_fu_946_p3;
wire   [11:0] select_ln388_fu_954_p3;
wire   [7:0] tmp_12_fu_1014_p3;
wire   [4:0] tmp_13_fu_1026_p3;
wire   [8:0] zext_ln1265_fu_1022_p1;
wire   [8:0] zext_ln1265_4_fu_1034_p1;
wire   [8:0] sub_ln1265_fu_1038_p2;
wire  signed [9:0] sext_ln1265_1_fu_1044_p1;
wire   [9:0] add_ln1265_fu_1048_p2;
wire   [8:0] trunc_ln1265_fu_1053_p1;
wire   [11:0] tmp_63_fu_1065_p3;
wire   [13:0] p_shl6_cast_fu_1057_p3;
wire  signed [13:0] sext_ln1265_2_fu_1073_p1;
wire   [13:0] sub_ln1265_1_fu_1077_p2;
wire   [13:0] add_ln1265_4_fu_1083_p2;
wire  signed [11:0] lhs_V_fu_1098_p0;
wire  signed [2:0] sext_ln1265_fu_1102_p0;
wire  signed [2:0] rhs_V_fu_1106_p0;
wire  signed [12:0] lhs_V_fu_1098_p1;
wire  signed [12:0] rhs_V_fu_1106_p1;
wire   [12:0] ret_V_4_fu_1110_p2;
wire  signed [11:0] sext_ln1265_fu_1102_p1;
wire  signed [11:0] p_Val2_28_fu_1124_p1;
wire   [11:0] p_Val2_28_fu_1124_p2;
wire   [0:0] p_Result_35_fu_1130_p3;
wire   [0:0] p_Result_34_fu_1116_p3;
wire   [0:0] xor_ln786_fu_1138_p2;
wire   [0:0] xor_ln340_2_fu_1156_p2;
wire   [0:0] xor_ln340_fu_1150_p2;
wire   [0:0] underflow_3_fu_1144_p2;
wire   [0:0] or_ln340_fu_1162_p2;
wire   [11:0] select_ln340_2_fu_1168_p3;
wire   [11:0] select_ln388_2_fu_1176_p3;
wire   [11:0] select_ln340_4_fu_1184_p3;
wire   [10:0] select_ln46_fu_1202_p3;
wire  signed [11:0] r_V_fu_1213_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

Conv1_Cal_conv1_V_0 #(
    .DataWidth( 6 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
conv1_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_V_0_address0),
    .ce0(conv1_V_0_ce0),
    .q0(conv1_V_0_q0)
);

Conv1_Cal_conv1_bbkb #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1_bias_V_address0),
    .ce0(conv1_bias_V_ce0),
    .q0(conv1_bias_V_q0)
);

Lenet_HLS_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 19 ))
Lenet_HLS_mul_mulcud_U1(
    .din0(conv1_V_0_load_reg_1322),
    .din1(r_V_fu_1213_p1),
    .dout(r_V_fu_1213_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln77_fu_375_p2 == 1'd1))) begin
        col_0_reg_208 <= col_reg_1279;
    end else if (((icmp_ln72_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col_0_reg_208 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_231 <= 6'd0;
    end else if (((icmp_ln92_fu_986_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i1_0_reg_231 <= i_4_reg_1395;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_174 <= i_reg_1226;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_174 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_1002_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        j2_0_reg_242 <= j_2_reg_1408;
    end else if (((icmp_ln90_fu_970_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j2_0_reg_242 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln72_fu_317_p2 == 1'd1))) begin
        j_0_reg_186 <= j_reg_1244;
    end else if (((icmp_ln68_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        out_d3_0_reg_253 <= out_d_reg_1421;
    end else if (((icmp_ln92_fu_986_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        out_d3_0_reg_253 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        out_d_0_reg_220 <= out_d_2_reg_1302;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_d_0_reg_220 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln74_fu_338_p2 == 1'd1))) begin
        row_0_reg_197 <= row_reg_1261;
    end else if (((icmp_ln70_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_0_reg_197 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Range2_all_ones_2_reg_1364 <= ret_V_fu_534_p2[32'd18];
        and_ln786_7_reg_1370 <= and_ln786_7_fu_683_p2;
        carry_8_reg_1353 <= carry_8_fu_623_p2;
        p_Result_31_reg_1342 <= ret_V_fu_534_p2[32'd18];
        p_Result_33_reg_1359 <= p_Val2_36_fu_603_p2[32'd11];
        p_Val2_36_reg_1348 <= p_Val2_36_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln1117_7_reg_1307 <= add_ln1117_7_fu_440_p2;
        layer2_V_addr_7_reg_1312 <= zext_ln203_14_fu_507_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln79_reg_1271 <= add_ln79_fu_333_p2;
        zext_ln79_reg_1266[4 : 0] <= zext_ln79_fu_329_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_reg_1279 <= col_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv1_V_0_load_reg_1322 <= conv1_V_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_4_reg_1395 <= i_4_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1226 <= i_fu_275_p2;
        zext_ln68_reg_1218[2 : 0] <= zext_ln68_fu_265_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln1494_reg_1441 <= icmp_ln1494_fu_1196_p2;
        trunc_ln1494_reg_1436 <= trunc_ln1494_fu_1192_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln78_reg_1249 <= icmp_ln78_fu_307_p2;
        zext_ln72_reg_1253[2 : 0] <= zext_ln72_fu_313_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_2_reg_1408 <= j_2_fu_992_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1244 <= j_fu_295_p2;
        zext_ln70_reg_1236[2 : 0] <= zext_ln70_fu_285_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln94_fu_1002_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        layer2_V_addr_reg_1426 <= zext_ln1265_5_fu_1088_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        or_ln340_8_reg_1383 <= or_ln340_8_fu_729_p2;
        overflow_2_reg_1375 <= overflow_2_fu_707_p2;
        underflow_4_reg_1379 <= underflow_4_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_d_2_reg_1302 <= out_d_2_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_d_reg_1421 <= out_d_fu_1008_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_reg_1327 <= r_V_fu_1213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_reg_1261 <= row_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        select_ln340_5_reg_1387 <= select_ln340_5_fu_962_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sext_ln77_reg_1294 <= sext_ln77_fu_371_p1;
        zext_ln79_1_reg_1289[4 : 0] <= zext_ln79_1_fu_367_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln70_1_reg_1231[2 : 0] <= zext_ln70_1_fu_281_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_970_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        zext_ln92_reg_1400[5 : 0] <= zext_ln92_fu_982_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_986_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        zext_ln94_reg_1413[4 : 0] <= zext_ln94_fu_998_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln90_fu_970_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_970_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv1_V_0_ce0 = 1'b1;
    end else begin
        conv1_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv1_bias_V_ce0 = 1'b1;
    end else begin
        conv1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer1_V_ce0 = 1'b1;
    end else begin
        layer1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        layer2_V_address0 = layer2_V_addr_reg_1426;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln78_reg_1249 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (overflow_2_reg_1375 == 1'd1)) | ((icmp_ln78_reg_1249 == 1'd0) & (overflow_2_reg_1375 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (underflow_4_reg_1379 == 1'd1)))) begin
        layer2_V_address0 = layer2_V_addr_7_reg_1312;
    end else begin
        layer2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln78_reg_1249 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (overflow_2_reg_1375 == 1'd1)) | ((icmp_ln78_reg_1249 == 1'd0) & (overflow_2_reg_1375 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (underflow_4_reg_1379 == 1'd1)))) begin
        layer2_V_ce0 = 1'b1;
    end else begin
        layer2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        layer2_V_d0 = zext_ln46_fu_1208_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        layer2_V_d0 = select_ln340_5_reg_1387;
    end else if (((icmp_ln78_reg_1249 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (overflow_2_reg_1375 == 1'd1))) begin
        layer2_V_d0 = 12'd2047;
    end else if (((icmp_ln78_reg_1249 == 1'd0) & (overflow_2_reg_1375 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (underflow_4_reg_1379 == 1'd1))) begin
        layer2_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        layer2_V_d0 = p_Val2_36_reg_1348;
    end else begin
        layer2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln78_reg_1249 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (overflow_2_reg_1375 == 1'd1)) | ((icmp_ln78_reg_1249 == 1'd0) & (overflow_2_reg_1375 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (or_ln340_8_reg_1383 == 1'd1) & (underflow_4_reg_1379 == 1'd1)))) begin
        layer2_V_we0 = 1'b1;
    end else begin
        layer2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln68_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln70_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln72_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln74_fu_338_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln77_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln78_reg_1249 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln90_fu_970_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln92_fu_986_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln94_fu_1002_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range2_all_ones_2_fu_637_p3 = ret_V_fu_534_p2[32'd18];

assign Range2_all_ones_fu_824_p3 = r_V_reg_1327[32'd18];

assign add_ln1117_5_fu_413_p2 = (add_ln1117_fu_407_p2 + zext_ln70_1_reg_1231);

assign add_ln1117_6_fu_434_p2 = (zext_ln1117_6_fu_418_p1 + zext_ln1117_7_fu_430_p1);

assign add_ln1117_7_fu_440_p2 = (add_ln1117_6_fu_434_p2 + zext_ln72_reg_1253);

assign add_ln1117_fu_407_p2 = (zext_ln1117_fu_387_p1 + zext_ln1117_4_fu_399_p1);

assign add_ln1192_4_fu_539_p2 = ($signed(lhs_V_2_fu_519_p3) + $signed(trunc_ln1192_fu_531_p1));

assign add_ln1265_4_fu_1083_p2 = (sub_ln1265_1_fu_1077_p2 + zext_ln94_reg_1413);

assign add_ln1265_fu_1048_p2 = ($signed(sext_ln1265_1_fu_1044_p1) + $signed(zext_ln92_reg_1400));

assign add_ln203_15_fu_502_p2 = (sub_ln203_2_fu_496_p2 + zext_ln79_1_reg_1289);

assign add_ln203_fu_467_p2 = ($signed(sext_ln203_fu_463_p1) + $signed(zext_ln79_reg_1266));

assign add_ln79_1_fu_350_p2 = (col_0_reg_208 + zext_ln70_reg_1236);

assign add_ln79_fu_333_p2 = (zext_ln68_reg_1218 + row_0_reg_197);

assign and_ln415_2_fu_593_p2 = (tmp_77_fu_586_p3 & or_ln406_fu_580_p2);

assign and_ln415_fu_780_p2 = (tmp_70_fu_773_p3 & r_fu_767_p2);

assign and_ln777_fu_831_p2 = (xor_ln416_9_fu_804_p2 & p_Result_29_fu_760_p3);

assign and_ln781_2_fu_689_p2 = (carry_8_reg_1353 & Range2_all_ones_2_reg_1364);

assign and_ln781_fu_874_p2 = (carry_6_fu_810_p2 & Range2_all_ones_fu_824_p3);

assign and_ln786_7_fu_683_p2 = (p_Result_33_fu_629_p3 & deleted_ones_4_fu_677_p2);

assign and_ln786_fu_904_p2 = (p_Result_30_fu_816_p3 & deleted_ones_fu_868_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign carry_6_fu_810_p2 = (xor_ln416_9_fu_804_p2 & p_Result_29_fu_760_p3);

assign carry_8_fu_623_p2 = (xor_ln416_11_fu_617_p2 & p_Result_32_fu_572_p3);

assign col_fu_344_p2 = (col_0_reg_208 + 5'd1);

assign conv1_V_0_address0 = zext_ln1117_8_fu_512_p1;

assign conv1_bias_V_address0 = zext_ln95_fu_1093_p1;

assign deleted_ones_4_fu_677_p2 = (or_ln416_fu_671_p2 & Range2_all_ones_2_fu_637_p3);

assign deleted_ones_fu_868_p2 = (or_ln416_7_fu_862_p2 & Range2_all_ones_fu_824_p3);

assign i_4_fu_976_p2 = (i1_0_reg_231 + 6'd1);

assign i_fu_275_p2 = (i_0_reg_174 + 3'd1);

assign icmp_ln1494_fu_1196_p2 = (($signed(select_ln340_4_fu_1184_p3) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_269_p2 = ((i_0_reg_174 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_289_p2 = ((j_0_reg_186 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_317_p2 = ((row_0_reg_197 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_338_p2 = ((col_0_reg_208 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_375_p2 = ((out_d_0_reg_220 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_307_p2 = ((or_ln78_fu_301_p2 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_970_p2 = ((i1_0_reg_231 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_986_p2 = ((j2_0_reg_242 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_1002_p2 = ((out_d3_0_reg_253 == 3'd6) ? 1'b1 : 1'b0);

assign j_2_fu_992_p2 = (j2_0_reg_242 + 5'd1);

assign j_fu_295_p2 = (j_0_reg_186 + 3'd1);

assign layer1_V_address0 = zext_ln1116_fu_362_p1;

assign lhs_V_2_fu_519_p3 = {{layer2_V_q0}, {6'd0}};

assign lhs_V_fu_1098_p0 = layer2_V_q0;

assign lhs_V_fu_1098_p1 = lhs_V_fu_1098_p0;

assign or_ln340_5_fu_928_p2 = (underflow_fu_922_p2 | overflow_fu_898_p2);

assign or_ln340_6_fu_940_p2 = (or_ln340_7_fu_934_p2 | and_ln781_fu_874_p2);

assign or_ln340_7_fu_934_p2 = (xor_ln785_6_fu_892_p2 | and_ln786_fu_904_p2);

assign or_ln340_8_fu_729_p2 = (underflow_4_fu_724_p2 | overflow_2_fu_707_p2);

assign or_ln340_fu_1162_p2 = (xor_ln340_2_fu_1156_p2 | p_Result_35_fu_1130_p3);

assign or_ln406_fu_580_p2 = (r_5_fu_566_p2 | p_Result_31_fu_545_p3);

assign or_ln416_6_fu_856_p2 = (xor_ln416_10_fu_850_p2 | tmp_71_fu_796_p3);

assign or_ln416_7_fu_862_p2 = (xor_ln779_fu_844_p2 | or_ln416_6_fu_856_p2);

assign or_ln416_8_fu_665_p2 = (xor_ln416_12_fu_659_p2 | tmp_78_fu_609_p3);

assign or_ln416_fu_671_p2 = (xor_ln779_2_fu_653_p2 | or_ln416_8_fu_665_p2);

assign or_ln785_2_fu_697_p2 = (xor_ln785_7_fu_693_p2 | p_Result_33_reg_1359);

assign or_ln785_fu_886_p2 = (xor_ln785_fu_880_p2 | p_Result_30_fu_816_p3);

assign or_ln786_2_fu_713_p2 = (and_ln786_7_reg_1370 | and_ln781_2_fu_689_p2);

assign or_ln786_fu_910_p2 = (and_ln786_fu_904_p2 | and_ln781_fu_874_p2);

assign or_ln78_fu_301_p2 = (j_0_reg_186 | i_0_reg_174);

assign out_d_2_fu_381_p2 = (out_d_0_reg_220 + 3'd1);

assign out_d_fu_1008_p2 = (out_d3_0_reg_253 + 3'd1);

assign overflow_2_fu_707_p2 = (xor_ln785_8_fu_702_p2 & or_ln785_2_fu_697_p2);

assign overflow_fu_898_p2 = (xor_ln785_6_fu_892_p2 & or_ln785_fu_886_p2);

assign p_Result_29_fu_760_p3 = r_V_reg_1327[32'd17];

assign p_Result_30_fu_816_p3 = p_Val2_31_fu_790_p2[32'd11];

assign p_Result_31_fu_545_p3 = ret_V_fu_534_p2[32'd18];

assign p_Result_32_fu_572_p3 = add_ln1192_4_fu_539_p2[32'd17];

assign p_Result_33_fu_629_p3 = p_Val2_36_fu_603_p2[32'd11];

assign p_Result_34_fu_1116_p3 = ret_V_4_fu_1110_p2[32'd12];

assign p_Result_35_fu_1130_p3 = p_Val2_28_fu_1124_p2[32'd11];

assign p_Result_s_fu_735_p3 = r_V_reg_1327[32'd16];

assign p_Val2_28_fu_1124_p1 = layer2_V_q0;

assign p_Val2_28_fu_1124_p2 = ($signed(sext_ln1265_fu_1102_p1) + $signed(p_Val2_28_fu_1124_p1));

assign p_Val2_30_fu_742_p4 = {{r_V_reg_1327[17:6]}};

assign p_Val2_31_fu_790_p2 = (zext_ln415_fu_786_p1 + p_Val2_30_fu_742_p4);

assign p_Val2_35_fu_553_p4 = {{add_ln1192_4_fu_539_p2[17:6]}};

assign p_Val2_36_fu_603_p2 = (zext_ln415_2_fu_599_p1 + p_Val2_35_fu_553_p4);

assign p_shl6_cast_fu_1057_p3 = {{trunc_ln1265_fu_1053_p1}, {5'd0}};

assign p_shl_cast_fu_476_p3 = {{trunc_ln203_fu_472_p1}, {5'd0}};

assign r_4_fu_754_p2 = ((trunc_ln718_fu_751_p1 != 5'd0) ? 1'b1 : 1'b0);

assign r_5_fu_566_p2 = ((trunc_ln718_2_fu_563_p1 != 5'd0) ? 1'b1 : 1'b0);

assign r_V_fu_1213_p1 = sext_ln77_reg_1294;

assign r_fu_767_p2 = (r_4_fu_754_p2 | p_Result_s_fu_735_p3);

assign ret_V_4_fu_1110_p2 = ($signed(lhs_V_fu_1098_p1) + $signed(rhs_V_fu_1106_p1));

assign ret_V_fu_534_p2 = ($signed(r_V_reg_1327) + $signed(sext_ln728_fu_527_p1));

assign rhs_V_fu_1106_p0 = conv1_bias_V_q0;

assign rhs_V_fu_1106_p1 = rhs_V_fu_1106_p0;

assign row_fu_323_p2 = (row_0_reg_197 + 5'd1);

assign select_ln340_2_fu_1168_p3 = ((xor_ln340_fu_1150_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_28_fu_1124_p2);

assign select_ln340_4_fu_1184_p3 = ((or_ln340_fu_1162_p2[0:0] === 1'b1) ? select_ln340_2_fu_1168_p3 : select_ln388_2_fu_1176_p3);

assign select_ln340_5_fu_962_p3 = ((or_ln340_6_fu_940_p2[0:0] === 1'b1) ? select_ln340_fu_946_p3 : select_ln388_fu_954_p3);

assign select_ln340_fu_946_p3 = ((or_ln340_5_fu_928_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_31_fu_790_p2);

assign select_ln388_2_fu_1176_p3 = ((underflow_3_fu_1144_p2[0:0] === 1'b1) ? 12'd2048 : p_Val2_28_fu_1124_p2);

assign select_ln388_fu_954_p3 = ((underflow_fu_922_p2[0:0] === 1'b1) ? 12'd2048 : p_Val2_31_fu_790_p2);

assign select_ln46_fu_1202_p3 = ((icmp_ln1494_reg_1441[0:0] === 1'b1) ? trunc_ln1494_reg_1436 : 11'd0);

assign sext_ln1265_1_fu_1044_p1 = $signed(sub_ln1265_fu_1038_p2);

assign sext_ln1265_2_fu_1073_p1 = $signed(tmp_63_fu_1065_p3);

assign sext_ln1265_fu_1102_p0 = conv1_bias_V_q0;

assign sext_ln1265_fu_1102_p1 = sext_ln1265_fu_1102_p0;

assign sext_ln203_2_fu_492_p1 = $signed(tmp_67_fu_484_p3);

assign sext_ln203_fu_463_p1 = $signed(sub_ln203_fu_457_p2);

assign sext_ln728_fu_527_p1 = lhs_V_2_fu_519_p3;

assign sext_ln77_fu_371_p1 = $signed(layer1_V_q0);

assign sub_ln1265_1_fu_1077_p2 = ($signed(p_shl6_cast_fu_1057_p3) - $signed(sext_ln1265_2_fu_1073_p1));

assign sub_ln1265_fu_1038_p2 = (zext_ln1265_fu_1022_p1 - zext_ln1265_4_fu_1034_p1);

assign sub_ln203_2_fu_496_p2 = ($signed(p_shl_cast_fu_476_p3) - $signed(sext_ln203_2_fu_492_p1));

assign sub_ln203_fu_457_p2 = (zext_ln203_fu_453_p1 - zext_ln1117_5_fu_403_p1);

assign tmp_12_fu_1014_p3 = {{out_d3_0_reg_253}, {5'd0}};

assign tmp_13_fu_1026_p3 = {{out_d3_0_reg_253}, {2'd0}};

assign tmp_14_fu_355_p3 = {{add_ln79_reg_1271}, {add_ln79_1_fu_350_p2}};

assign tmp_15_fu_391_p3 = {{out_d_0_reg_220}, {2'd0}};

assign tmp_16_fu_445_p3 = {{out_d_0_reg_220}, {5'd0}};

assign tmp_63_fu_1065_p3 = {{add_ln1265_fu_1048_p2}, {2'd0}};

assign tmp_66_fu_422_p3 = {{add_ln1117_5_fu_413_p2}, {2'd0}};

assign tmp_67_fu_484_p3 = {{add_ln203_fu_467_p2}, {2'd0}};

assign tmp_70_fu_773_p3 = r_V_reg_1327[32'd5];

assign tmp_71_fu_796_p3 = p_Val2_31_fu_790_p2[32'd11];

assign tmp_74_fu_837_p3 = r_V_reg_1327[32'd18];

assign tmp_77_fu_586_p3 = r_V_reg_1327[32'd5];

assign tmp_78_fu_609_p3 = p_Val2_36_fu_603_p2[32'd11];

assign tmp_81_fu_645_p3 = ret_V_fu_534_p2[32'd18];

assign trunc_ln1192_fu_531_p1 = r_V_reg_1327[17:0];

assign trunc_ln1265_fu_1053_p1 = add_ln1265_fu_1048_p2[8:0];

assign trunc_ln1494_fu_1192_p1 = select_ln340_4_fu_1184_p3[10:0];

assign trunc_ln203_fu_472_p1 = add_ln203_fu_467_p2[8:0];

assign trunc_ln718_2_fu_563_p1 = r_V_reg_1327[4:0];

assign trunc_ln718_fu_751_p1 = r_V_reg_1327[4:0];

assign underflow_3_fu_1144_p2 = (xor_ln786_fu_1138_p2 & p_Result_34_fu_1116_p3);

assign underflow_4_fu_724_p2 = (xor_ln786_4_fu_718_p2 & p_Result_31_reg_1342);

assign underflow_fu_922_p2 = (xor_ln786_3_fu_916_p2 & p_Result_s_fu_735_p3);

assign xor_ln340_2_fu_1156_p2 = (p_Result_34_fu_1116_p3 ^ 1'd1);

assign xor_ln340_fu_1150_p2 = (p_Result_35_fu_1130_p3 ^ p_Result_34_fu_1116_p3);

assign xor_ln416_10_fu_850_p2 = (p_Result_29_fu_760_p3 ^ 1'd1);

assign xor_ln416_11_fu_617_p2 = (tmp_78_fu_609_p3 ^ 1'd1);

assign xor_ln416_12_fu_659_p2 = (p_Result_32_fu_572_p3 ^ 1'd1);

assign xor_ln416_9_fu_804_p2 = (tmp_71_fu_796_p3 ^ 1'd1);

assign xor_ln779_2_fu_653_p2 = (tmp_81_fu_645_p3 ^ 1'd1);

assign xor_ln779_fu_844_p2 = (tmp_74_fu_837_p3 ^ 1'd1);

assign xor_ln785_6_fu_892_p2 = (p_Result_s_fu_735_p3 ^ 1'd1);

assign xor_ln785_7_fu_693_p2 = (carry_8_reg_1353 ^ Range2_all_ones_2_reg_1364);

assign xor_ln785_8_fu_702_p2 = (p_Result_31_reg_1342 ^ 1'd1);

assign xor_ln785_fu_880_p2 = (and_ln777_fu_831_p2 ^ Range2_all_ones_fu_824_p3);

assign xor_ln786_3_fu_916_p2 = (or_ln786_fu_910_p2 ^ 1'd1);

assign xor_ln786_4_fu_718_p2 = (or_ln786_2_fu_713_p2 ^ 1'd1);

assign xor_ln786_fu_1138_p2 = (p_Result_35_fu_1130_p3 ^ 1'd1);

assign zext_ln1116_fu_362_p1 = tmp_14_fu_355_p3;

assign zext_ln1117_4_fu_399_p1 = tmp_15_fu_391_p3;

assign zext_ln1117_5_fu_403_p1 = tmp_15_fu_391_p3;

assign zext_ln1117_6_fu_418_p1 = add_ln1117_5_fu_413_p2;

assign zext_ln1117_7_fu_430_p1 = tmp_66_fu_422_p3;

assign zext_ln1117_8_fu_512_p1 = add_ln1117_7_reg_1307;

assign zext_ln1117_fu_387_p1 = out_d_0_reg_220;

assign zext_ln1265_4_fu_1034_p1 = tmp_13_fu_1026_p3;

assign zext_ln1265_5_fu_1088_p1 = add_ln1265_4_fu_1083_p2;

assign zext_ln1265_fu_1022_p1 = tmp_12_fu_1014_p3;

assign zext_ln203_14_fu_507_p1 = add_ln203_15_fu_502_p2;

assign zext_ln203_fu_453_p1 = tmp_16_fu_445_p3;

assign zext_ln415_2_fu_599_p1 = and_ln415_2_fu_593_p2;

assign zext_ln415_fu_786_p1 = and_ln415_fu_780_p2;

assign zext_ln46_fu_1208_p1 = select_ln46_fu_1202_p3;

assign zext_ln68_fu_265_p1 = i_0_reg_174;

assign zext_ln70_1_fu_281_p1 = i_0_reg_174;

assign zext_ln70_fu_285_p1 = j_0_reg_186;

assign zext_ln72_fu_313_p1 = j_0_reg_186;

assign zext_ln79_1_fu_367_p1 = col_0_reg_208;

assign zext_ln79_fu_329_p1 = row_0_reg_197;

assign zext_ln92_fu_982_p1 = i1_0_reg_231;

assign zext_ln94_fu_998_p1 = j2_0_reg_242;

assign zext_ln95_fu_1093_p1 = out_d3_0_reg_253;

always @ (posedge ap_clk) begin
    zext_ln68_reg_1218[4:3] <= 2'b00;
    zext_ln70_1_reg_1231[5:3] <= 3'b000;
    zext_ln70_reg_1236[4:3] <= 2'b00;
    zext_ln72_reg_1253[8:3] <= 6'b000000;
    zext_ln79_reg_1266[9:5] <= 5'b00000;
    zext_ln79_1_reg_1289[13:5] <= 9'b000000000;
    zext_ln92_reg_1400[9:6] <= 4'b0000;
    zext_ln94_reg_1413[13:5] <= 9'b000000000;
end

endmodule //Conv1_Cal
