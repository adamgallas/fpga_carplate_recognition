// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv2_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer3_V_address0,
        layer3_V_ce0,
        layer3_V_q0,
        layer4_V_address0,
        layer4_V_ce0,
        layer4_V_we0,
        layer4_V_d0,
        layer4_V_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] layer3_V_address0;
output   layer3_V_ce0;
input  [11:0] layer3_V_q0;
output  [10:0] layer4_V_address0;
output   layer4_V_ce0;
output   layer4_V_we0;
output  [11:0] layer4_V_d0;
input  [11:0] layer4_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer3_V_ce0;
reg[10:0] layer4_V_address0;
reg layer4_V_ce0;
reg layer4_V_we0;
reg[11:0] layer4_V_d0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] conv2_V_address0;
reg    conv2_V_ce0;
wire   [5:0] conv2_V_q0;
wire   [3:0] conv2_bias_V_address0;
reg    conv2_bias_V_ce0;
wire   [2:0] conv2_bias_V_q0;
wire   [3:0] zext_ln124_fu_287_p1;
reg   [3:0] zext_ln124_reg_1340;
wire    ap_CS_fsm_state2;
wire   [2:0] i_fu_297_p2;
reg   [2:0] i_reg_1348;
wire   [63:0] zext_ln137_fu_303_p1;
reg   [63:0] zext_ln137_reg_1353;
wire   [0:0] icmp_ln124_fu_291_p2;
wire   [3:0] zext_ln126_fu_307_p1;
reg   [3:0] zext_ln126_reg_1358;
wire    ap_CS_fsm_state3;
wire   [2:0] j_fu_317_p2;
reg   [2:0] j_reg_1366;
wire   [12:0] zext_ln128_fu_323_p1;
reg   [12:0] zext_ln128_reg_1371;
wire   [0:0] icmp_ln126_fu_311_p2;
wire   [3:0] row_fu_333_p2;
reg   [3:0] row_reg_1379;
wire    ap_CS_fsm_state4;
wire   [8:0] zext_ln137_1_fu_339_p1;
reg   [8:0] zext_ln137_1_reg_1384;
wire   [0:0] icmp_ln128_fu_327_p2;
wire   [8:0] zext_ln130_fu_348_p1;
reg   [8:0] zext_ln130_reg_1389;
wire   [3:0] col_fu_358_p2;
reg   [3:0] col_reg_1397;
wire    ap_CS_fsm_state5;
wire   [11:0] zext_ln137_2_fu_364_p1;
reg   [11:0] zext_ln137_2_reg_1402;
wire   [0:0] icmp_ln130_fu_352_p2;
wire   [11:0] zext_ln133_fu_373_p1;
reg   [11:0] zext_ln133_reg_1407;
wire   [4:0] out_d_fu_383_p2;
reg   [4:0] out_d_reg_1415;
wire    ap_CS_fsm_state6;
wire  signed [9:0] sext_ln1117_fu_419_p1;
reg  signed [9:0] sext_ln1117_reg_1420;
wire   [0:0] icmp_ln133_fu_377_p2;
reg   [10:0] layer4_V_addr_6_reg_1425;
wire   [2:0] in_d_fu_476_p2;
reg   [2:0] in_d_reg_1433;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln136_fu_494_p2;
reg   [0:0] icmp_ln136_reg_1438;
wire   [0:0] icmp_ln135_fu_470_p2;
wire   [12:0] trunc_ln1117_fu_536_p1;
reg   [12:0] trunc_ln1117_reg_1442;
wire   [10:0] trunc_ln1117_1_fu_540_p1;
reg   [10:0] trunc_ln1117_1_reg_1447;
wire   [11:0] add_ln1116_1_fu_613_p2;
reg   [11:0] add_ln1116_1_reg_1452;
wire    ap_CS_fsm_state8;
reg  signed [11:0] layer3_V_load_reg_1467;
wire    ap_CS_fsm_state9;
reg  signed [5:0] conv2_V_load_reg_1472;
wire  signed [18:0] r_V_fu_1334_p2;
reg  signed [18:0] r_V_reg_1477;
wire    ap_CS_fsm_state10;
wire   [0:0] p_Result_24_fu_676_p3;
reg   [0:0] p_Result_24_reg_1492;
wire    ap_CS_fsm_state11;
wire   [11:0] p_Val2_25_fu_734_p2;
reg   [11:0] p_Val2_25_reg_1498;
wire   [0:0] carry_5_fu_754_p2;
reg   [0:0] carry_5_reg_1503;
wire   [0:0] p_Result_26_fu_760_p3;
reg   [0:0] p_Result_26_reg_1509;
wire   [0:0] Range2_all_ones_1_fu_768_p3;
reg   [0:0] Range2_all_ones_1_reg_1514;
wire   [0:0] and_ln786_4_fu_814_p2;
reg   [0:0] and_ln786_4_reg_1520;
wire   [0:0] overflow_1_fu_838_p2;
reg   [0:0] overflow_1_reg_1525;
wire    ap_CS_fsm_state12;
wire   [0:0] underflow_2_fu_855_p2;
reg   [0:0] underflow_2_reg_1529;
wire   [0:0] or_ln340_4_fu_860_p2;
reg   [0:0] or_ln340_4_reg_1533;
wire   [11:0] select_ln340_3_fu_1093_p3;
reg   [11:0] select_ln340_3_reg_1537;
wire    ap_CS_fsm_state14;
wire   [3:0] i_3_fu_1107_p2;
reg   [3:0] i_3_reg_1545;
wire    ap_CS_fsm_state16;
wire   [8:0] zext_ln151_fu_1113_p1;
reg   [8:0] zext_ln151_reg_1550;
wire   [0:0] icmp_ln149_fu_1101_p2;
wire   [3:0] j_1_fu_1123_p2;
reg   [3:0] j_1_reg_1558;
wire    ap_CS_fsm_state17;
wire   [11:0] zext_ln153_fu_1129_p1;
reg   [11:0] zext_ln153_reg_1563;
wire   [0:0] icmp_ln151_fu_1117_p2;
wire   [4:0] out_d_1_fu_1139_p2;
reg   [4:0] out_d_1_reg_1571;
wire    ap_CS_fsm_state18;
reg   [10:0] layer4_V_addr_reg_1576;
wire   [0:0] icmp_ln153_fu_1133_p2;
reg  signed [2:0] p_Val2_15_reg_1586;
wire    ap_CS_fsm_state19;
wire   [10:0] trunc_ln1494_fu_1313_p1;
reg   [10:0] trunc_ln1494_reg_1592;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln1494_fu_1317_p2;
reg   [0:0] icmp_ln1494_reg_1597;
reg   [2:0] i_0_reg_186;
reg   [2:0] j_0_reg_198;
reg   [3:0] row_0_reg_210;
reg   [3:0] col_0_reg_221;
reg   [4:0] out_d_0_reg_232;
reg   [2:0] in_d_0_reg_243;
wire    ap_CS_fsm_state13;
reg   [3:0] i1_0_reg_254;
reg   [3:0] j2_0_reg_265;
reg   [4:0] out_d3_0_reg_276;
wire    ap_CS_fsm_state21;
wire   [63:0] zext_ln203_13_fu_465_p1;
wire   [63:0] zext_ln1117_3_fu_635_p1;
wire   [63:0] zext_ln1116_4_fu_640_p1;
wire   [63:0] zext_ln1265_3_fu_1216_p1;
wire   [63:0] zext_ln154_fu_1145_p1;
wire    ap_CS_fsm_state15;
wire   [11:0] zext_ln46_fu_1329_p1;
wire   [3:0] add_ln137_fu_343_p2;
wire   [3:0] add_ln137_1_fu_368_p2;
wire   [7:0] tmp_7_fu_389_p3;
wire   [5:0] tmp_8_fu_401_p3;
wire   [8:0] zext_ln1117_fu_397_p1;
wire   [8:0] zext_ln1117_1_fu_409_p1;
wire   [8:0] sub_ln1117_fu_413_p2;
wire   [8:0] add_ln203_fu_423_p2;
wire   [8:0] add_ln203_12_fu_429_p2;
wire   [9:0] tmp_46_fu_442_p3;
wire   [11:0] p_shl_cast_fu_434_p3;
wire   [11:0] zext_ln203_fu_450_p1;
wire   [11:0] add_ln203_13_fu_454_p2;
wire   [11:0] add_ln203_14_fu_460_p2;
wire   [2:0] or_ln136_fu_482_p2;
wire   [2:0] or_ln136_1_fu_488_p2;
wire   [9:0] zext_ln1117_2_fu_500_p1;
wire  signed [9:0] add_ln1117_fu_504_p2;
wire   [11:0] tmp_47_fu_513_p3;
wire  signed [63:0] sext_ln1117_1_fu_509_p1;
wire  signed [63:0] sext_ln1117_2_fu_521_p1;
wire   [63:0] add_ln1117_1_fu_525_p2;
wire   [63:0] add_ln1117_2_fu_531_p2;
wire   [6:0] tmp_10_fu_544_p3;
wire   [3:0] tmp_11_fu_556_p3;
wire   [7:0] zext_ln1116_fu_552_p1;
wire   [7:0] zext_ln1116_3_fu_564_p1;
wire   [7:0] sub_ln1116_fu_568_p2;
wire  signed [8:0] sext_ln1116_fu_574_p1;
wire   [8:0] add_ln1116_fu_578_p2;
wire   [7:0] trunc_ln1116_fu_583_p1;
wire   [9:0] tmp_48_fu_595_p3;
wire   [11:0] p_shl6_cast_fu_587_p3;
wire  signed [11:0] sext_ln1116_1_fu_603_p1;
wire   [11:0] sub_ln1116_1_fu_607_p2;
wire   [12:0] p_shl10_cast_fu_618_p3;
wire   [12:0] add_ln1117_3_fu_625_p2;
wire   [12:0] add_ln1117_4_fu_630_p2;
wire  signed [17:0] lhs_V_1_fu_650_p3;
wire  signed [18:0] sext_ln728_fu_658_p1;
wire   [17:0] trunc_ln1192_fu_662_p1;
(* use_dsp48 = "no" *) wire   [18:0] ret_V_fu_665_p2;
wire   [17:0] add_ln1192_3_fu_670_p2;
wire   [4:0] trunc_ln718_1_fu_694_p1;
wire   [0:0] r_3_fu_697_p2;
wire   [0:0] tmp_58_fu_717_p3;
wire   [0:0] or_ln406_fu_711_p2;
wire   [0:0] and_ln415_1_fu_724_p2;
wire   [11:0] zext_ln415_1_fu_730_p1;
wire   [11:0] p_Val2_24_fu_684_p4;
wire   [0:0] tmp_59_fu_740_p3;
wire   [0:0] p_Result_25_fu_703_p3;
wire   [0:0] xor_ln416_7_fu_748_p2;
wire   [0:0] tmp_62_fu_776_p3;
wire   [0:0] xor_ln416_8_fu_790_p2;
wire   [0:0] or_ln416_5_fu_796_p2;
wire   [0:0] xor_ln779_1_fu_784_p2;
wire   [0:0] or_ln416_fu_802_p2;
wire   [0:0] deleted_ones_2_fu_808_p2;
wire   [0:0] xor_ln785_4_fu_824_p2;
wire   [0:0] or_ln785_1_fu_828_p2;
wire   [0:0] xor_ln785_5_fu_833_p2;
wire   [0:0] and_ln781_1_fu_820_p2;
wire   [0:0] or_ln786_1_fu_844_p2;
wire   [0:0] xor_ln786_2_fu_849_p2;
wire   [4:0] trunc_ln718_fu_882_p1;
wire   [0:0] p_Result_s_fu_866_p3;
wire   [0:0] r_2_fu_885_p2;
wire   [0:0] tmp_51_fu_904_p3;
wire   [0:0] r_fu_898_p2;
wire   [0:0] and_ln415_fu_911_p2;
wire   [11:0] zext_ln415_fu_917_p1;
wire   [11:0] p_Val2_19_fu_873_p4;
wire   [11:0] p_Val2_20_fu_921_p2;
wire   [0:0] tmp_52_fu_927_p3;
wire   [0:0] p_Result_22_fu_891_p3;
wire   [0:0] xor_ln416_5_fu_935_p2;
wire   [0:0] tmp_55_fu_968_p3;
wire   [0:0] xor_ln416_6_fu_981_p2;
wire   [0:0] or_ln416_3_fu_987_p2;
wire   [0:0] xor_ln779_fu_975_p2;
wire   [0:0] Range2_all_ones_fu_955_p3;
wire   [0:0] or_ln416_4_fu_993_p2;
wire   [0:0] carry_3_fu_941_p2;
wire   [0:0] and_ln777_fu_962_p2;
wire   [0:0] p_Result_23_fu_947_p3;
wire   [0:0] xor_ln785_fu_1011_p2;
wire   [0:0] or_ln785_fu_1017_p2;
wire   [0:0] xor_ln785_3_fu_1023_p2;
wire   [0:0] deleted_ones_fu_999_p2;
wire   [0:0] and_ln781_fu_1005_p2;
wire   [0:0] and_ln786_fu_1035_p2;
wire   [0:0] or_ln786_fu_1041_p2;
wire   [0:0] xor_ln786_1_fu_1047_p2;
wire   [0:0] underflow_fu_1053_p2;
wire   [0:0] overflow_fu_1029_p2;
wire   [0:0] or_ln340_3_fu_1065_p2;
wire   [0:0] or_ln340_1_fu_1059_p2;
wire   [0:0] or_ln340_2_fu_1071_p2;
wire   [11:0] select_ln340_fu_1077_p3;
wire   [11:0] select_ln388_fu_1085_p3;
wire   [7:0] tmp_5_fu_1150_p3;
wire   [5:0] tmp_6_fu_1162_p3;
wire   [8:0] zext_ln1265_1_fu_1170_p1;
wire   [8:0] zext_ln1265_fu_1158_p1;
wire   [8:0] add_ln1265_fu_1174_p2;
wire   [8:0] add_ln1265_1_fu_1180_p2;
wire   [9:0] tmp_43_fu_1193_p3;
wire   [11:0] zext_ln1265_2_fu_1201_p1;
wire   [11:0] p_shl12_cast_fu_1185_p3;
wire   [11:0] add_ln1265_2_fu_1205_p2;
wire   [11:0] add_ln1265_3_fu_1211_p2;
wire  signed [11:0] lhs_V_fu_1221_p0;
wire  signed [12:0] lhs_V_fu_1221_p1;
wire  signed [12:0] rhs_V_fu_1228_p1;
wire   [12:0] ret_V_2_fu_1231_p2;
wire  signed [11:0] sext_ln1265_fu_1225_p1;
wire  signed [11:0] p_Val2_17_fu_1245_p1;
wire   [11:0] p_Val2_17_fu_1245_p2;
wire   [0:0] p_Result_28_fu_1251_p3;
wire   [0:0] p_Result_27_fu_1237_p3;
wire   [0:0] xor_ln786_fu_1259_p2;
wire   [0:0] xor_ln340_1_fu_1277_p2;
wire   [0:0] xor_ln340_fu_1271_p2;
wire   [0:0] underflow_1_fu_1265_p2;
wire   [0:0] or_ln340_fu_1283_p2;
wire   [11:0] select_ln340_1_fu_1289_p3;
wire   [11:0] select_ln388_1_fu_1297_p3;
wire   [11:0] select_ln340_2_fu_1305_p3;
wire   [10:0] select_ln46_fu_1323_p3;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

Conv2_Cal_conv2_V #(
    .DataWidth( 6 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_V_address0),
    .ce0(conv2_V_ce0),
    .q0(conv2_V_q0)
);

Conv2_Cal_conv2_bdEe #(
    .DataWidth( 3 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv2_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_bias_V_address0),
    .ce0(conv2_bias_V_ce0),
    .q0(conv2_bias_V_q0)
);

Lenet_HLS_mul_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 19 ))
Lenet_HLS_mul_mulcud_U9(
    .din0(conv2_V_load_reg_1472),
    .din1(layer3_V_load_reg_1467),
    .dout(r_V_fu_1334_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln133_fu_377_p2 == 1'd1))) begin
        col_0_reg_221 <= col_reg_1397;
    end else if (((icmp_ln128_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col_0_reg_221 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_254 <= 4'd0;
    end else if (((icmp_ln151_fu_1117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i1_0_reg_254 <= i_3_reg_1545;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_186 <= i_reg_1348;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        in_d_0_reg_243 <= in_d_reg_1433;
    end else if (((icmp_ln133_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        in_d_0_reg_243 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_1133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        j2_0_reg_265 <= j_1_reg_1558;
    end else if (((icmp_ln149_fu_1101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j2_0_reg_265 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_327_p2 == 1'd1))) begin
        j_0_reg_198 <= j_reg_1366;
    end else if (((icmp_ln124_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_198 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        out_d3_0_reg_276 <= out_d_1_reg_1571;
    end else if (((icmp_ln151_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        out_d3_0_reg_276 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln135_fu_470_p2 == 1'd1))) begin
        out_d_0_reg_232 <= out_d_reg_1415;
    end else if (((icmp_ln130_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        out_d_0_reg_232 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln130_fu_352_p2 == 1'd1))) begin
        row_0_reg_210 <= row_reg_1379;
    end else if (((icmp_ln126_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_0_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Range2_all_ones_1_reg_1514 <= ret_V_fu_665_p2[32'd18];
        and_ln786_4_reg_1520 <= and_ln786_4_fu_814_p2;
        carry_5_reg_1503 <= carry_5_fu_754_p2;
        p_Result_24_reg_1492 <= ret_V_fu_665_p2[32'd18];
        p_Result_26_reg_1509 <= p_Val2_25_fu_734_p2[32'd11];
        p_Val2_25_reg_1498 <= p_Val2_25_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_470_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln1116_1_reg_1452 <= add_ln1116_1_fu_613_p2;
        icmp_ln136_reg_1438 <= icmp_ln136_fu_494_p2;
        trunc_ln1117_1_reg_1447 <= trunc_ln1117_1_fu_540_p1;
        trunc_ln1117_reg_1442 <= trunc_ln1117_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_reg_1397 <= col_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv2_V_load_reg_1472 <= conv2_V_q0;
        layer3_V_load_reg_1467 <= layer3_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_3_reg_1545 <= i_3_fu_1107_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1348 <= i_fu_297_p2;
        zext_ln124_reg_1340[2 : 0] <= zext_ln124_fu_287_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln1494_reg_1597 <= icmp_ln1494_fu_1317_p2;
        trunc_ln1494_reg_1592 <= trunc_ln1494_fu_1313_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_reg_1433 <= in_d_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_1_reg_1558 <= j_1_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1366 <= j_fu_317_p2;
        zext_ln126_reg_1358[2 : 0] <= zext_ln126_fu_307_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        layer4_V_addr_6_reg_1425 <= zext_ln203_13_fu_465_p1;
        sext_ln1117_reg_1420[9 : 1] <= sext_ln1117_fu_419_p1[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln153_fu_1133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        layer4_V_addr_reg_1576 <= zext_ln1265_3_fu_1216_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        or_ln340_4_reg_1533 <= or_ln340_4_fu_860_p2;
        overflow_1_reg_1525 <= overflow_1_fu_838_p2;
        underflow_2_reg_1529 <= underflow_2_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_d_1_reg_1571 <= out_d_1_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_d_reg_1415 <= out_d_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_Val2_15_reg_1586 <= conv2_bias_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_reg_1477 <= r_V_fu_1334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        row_reg_1379 <= row_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        select_ln340_3_reg_1537 <= select_ln340_3_fu_1093_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln126_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln128_reg_1371[2 : 0] <= zext_ln128_fu_323_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln130_reg_1389[3 : 0] <= zext_ln130_fu_348_p1[3 : 0];
        zext_ln137_1_reg_1384[3 : 0] <= zext_ln137_1_fu_339_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln133_reg_1407[3 : 0] <= zext_ln133_fu_373_p1[3 : 0];
        zext_ln137_2_reg_1402[3 : 0] <= zext_ln137_2_fu_364_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln137_reg_1353[2 : 0] <= zext_ln137_fu_303_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln149_fu_1101_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        zext_ln151_reg_1550[3 : 0] <= zext_ln151_fu_1113_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln151_fu_1117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        zext_ln153_reg_1563[3 : 0] <= zext_ln153_fu_1129_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln149_fu_1101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln149_fu_1101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv2_V_ce0 = 1'b1;
    end else begin
        conv2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv2_bias_V_ce0 = 1'b1;
    end else begin
        conv2_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        layer3_V_ce0 = 1'b1;
    end else begin
        layer3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19))) begin
        layer4_V_address0 = layer4_V_addr_reg_1576;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (overflow_1_reg_1525 == 1'd1)) | ((overflow_1_reg_1525 == 1'd0) & (icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (underflow_2_reg_1529 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        layer4_V_address0 = layer4_V_addr_6_reg_1425;
    end else begin
        layer4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (overflow_1_reg_1525 == 1'd1)) | ((overflow_1_reg_1525 == 1'd0) & (icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (underflow_2_reg_1529 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        layer4_V_ce0 = 1'b1;
    end else begin
        layer4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        layer4_V_d0 = zext_ln46_fu_1329_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        layer4_V_d0 = select_ln340_3_reg_1537;
    end else if (((icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (overflow_1_reg_1525 == 1'd1))) begin
        layer4_V_d0 = 12'd2047;
    end else if (((overflow_1_reg_1525 == 1'd0) & (icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (underflow_2_reg_1529 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        layer4_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        layer4_V_d0 = p_Val2_25_reg_1498;
    end else begin
        layer4_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (overflow_1_reg_1525 == 1'd1)) | ((overflow_1_reg_1525 == 1'd0) & (icmp_ln136_reg_1438 == 1'd0) & (or_ln340_4_reg_1533 == 1'd1) & (underflow_2_reg_1529 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        layer4_V_we0 = 1'b1;
    end else begin
        layer4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln124_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln126_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln130_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln133_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln135_fu_470_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln136_reg_1438 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln149_fu_1101_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln151_fu_1117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln153_fu_1133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range2_all_ones_1_fu_768_p3 = ret_V_fu_665_p2[32'd18];

assign Range2_all_ones_fu_955_p3 = r_V_reg_1477[32'd18];

assign add_ln1116_1_fu_613_p2 = (sub_ln1116_1_fu_607_p2 + zext_ln133_reg_1407);

assign add_ln1116_fu_578_p2 = ($signed(sext_ln1116_fu_574_p1) + $signed(zext_ln130_reg_1389));

assign add_ln1117_1_fu_525_p2 = ($signed(sext_ln1117_1_fu_509_p1) + $signed(sext_ln1117_2_fu_521_p1));

assign add_ln1117_2_fu_531_p2 = (add_ln1117_1_fu_525_p2 + zext_ln137_reg_1353);

assign add_ln1117_3_fu_625_p2 = (trunc_ln1117_reg_1442 + p_shl10_cast_fu_618_p3);

assign add_ln1117_4_fu_630_p2 = (add_ln1117_3_fu_625_p2 + zext_ln128_reg_1371);

assign add_ln1117_fu_504_p2 = ($signed(sext_ln1117_reg_1420) + $signed(zext_ln1117_2_fu_500_p1));

assign add_ln1192_3_fu_670_p2 = ($signed(lhs_V_1_fu_650_p3) + $signed(trunc_ln1192_fu_662_p1));

assign add_ln1265_1_fu_1180_p2 = (add_ln1265_fu_1174_p2 + zext_ln151_reg_1550);

assign add_ln1265_2_fu_1205_p2 = (zext_ln1265_2_fu_1201_p1 + p_shl12_cast_fu_1185_p3);

assign add_ln1265_3_fu_1211_p2 = (add_ln1265_2_fu_1205_p2 + zext_ln153_reg_1563);

assign add_ln1265_fu_1174_p2 = (zext_ln1265_1_fu_1170_p1 + zext_ln1265_fu_1158_p1);

assign add_ln137_1_fu_368_p2 = (col_0_reg_221 + zext_ln126_reg_1358);

assign add_ln137_fu_343_p2 = (row_0_reg_210 + zext_ln124_reg_1340);

assign add_ln203_12_fu_429_p2 = (zext_ln137_1_reg_1384 + add_ln203_fu_423_p2);

assign add_ln203_13_fu_454_p2 = (p_shl_cast_fu_434_p3 + zext_ln203_fu_450_p1);

assign add_ln203_14_fu_460_p2 = (zext_ln137_2_reg_1402 + add_ln203_13_fu_454_p2);

assign add_ln203_fu_423_p2 = (zext_ln1117_fu_397_p1 + zext_ln1117_1_fu_409_p1);

assign and_ln415_1_fu_724_p2 = (tmp_58_fu_717_p3 & or_ln406_fu_711_p2);

assign and_ln415_fu_911_p2 = (tmp_51_fu_904_p3 & r_fu_898_p2);

assign and_ln777_fu_962_p2 = (xor_ln416_5_fu_935_p2 & p_Result_22_fu_891_p3);

assign and_ln781_1_fu_820_p2 = (carry_5_reg_1503 & Range2_all_ones_1_reg_1514);

assign and_ln781_fu_1005_p2 = (carry_3_fu_941_p2 & Range2_all_ones_fu_955_p3);

assign and_ln786_4_fu_814_p2 = (p_Result_26_fu_760_p3 & deleted_ones_2_fu_808_p2);

assign and_ln786_fu_1035_p2 = (p_Result_23_fu_947_p3 & deleted_ones_fu_999_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign carry_3_fu_941_p2 = (xor_ln416_5_fu_935_p2 & p_Result_22_fu_891_p3);

assign carry_5_fu_754_p2 = (xor_ln416_7_fu_748_p2 & p_Result_25_fu_703_p3);

assign col_fu_358_p2 = (col_0_reg_221 + 4'd1);

assign conv2_V_address0 = zext_ln1117_3_fu_635_p1;

assign conv2_bias_V_address0 = zext_ln154_fu_1145_p1;

assign deleted_ones_2_fu_808_p2 = (or_ln416_fu_802_p2 & Range2_all_ones_1_fu_768_p3);

assign deleted_ones_fu_999_p2 = (or_ln416_4_fu_993_p2 & Range2_all_ones_fu_955_p3);

assign i_3_fu_1107_p2 = (i1_0_reg_254 + 4'd1);

assign i_fu_297_p2 = (i_0_reg_186 + 3'd1);

assign icmp_ln124_fu_291_p2 = ((i_0_reg_186 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_311_p2 = ((j_0_reg_198 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_327_p2 = ((row_0_reg_210 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_352_p2 = ((col_0_reg_221 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_377_p2 = ((out_d_0_reg_232 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_470_p2 = ((in_d_0_reg_243 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_494_p2 = ((or_ln136_1_fu_488_p2 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_1317_p2 = (($signed(select_ln340_2_fu_1305_p3) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_1101_p2 = ((i1_0_reg_254 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln151_fu_1117_p2 = ((j2_0_reg_265 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_1133_p2 = ((out_d3_0_reg_276 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_476_p2 = (in_d_0_reg_243 + 3'd1);

assign j_1_fu_1123_p2 = (j2_0_reg_265 + 4'd1);

assign j_fu_317_p2 = (j_0_reg_198 + 3'd1);

assign layer3_V_address0 = zext_ln1116_4_fu_640_p1;

assign lhs_V_1_fu_650_p3 = {{layer4_V_q0}, {6'd0}};

assign lhs_V_fu_1221_p0 = layer4_V_q0;

assign lhs_V_fu_1221_p1 = lhs_V_fu_1221_p0;

assign or_ln136_1_fu_488_p2 = (or_ln136_fu_482_p2 | j_0_reg_198);

assign or_ln136_fu_482_p2 = (in_d_0_reg_243 | i_0_reg_186);

assign or_ln340_1_fu_1059_p2 = (underflow_fu_1053_p2 | overflow_fu_1029_p2);

assign or_ln340_2_fu_1071_p2 = (or_ln340_3_fu_1065_p2 | and_ln781_fu_1005_p2);

assign or_ln340_3_fu_1065_p2 = (xor_ln785_3_fu_1023_p2 | and_ln786_fu_1035_p2);

assign or_ln340_4_fu_860_p2 = (underflow_2_fu_855_p2 | overflow_1_fu_838_p2);

assign or_ln340_fu_1283_p2 = (xor_ln340_1_fu_1277_p2 | p_Result_28_fu_1251_p3);

assign or_ln406_fu_711_p2 = (r_3_fu_697_p2 | p_Result_24_fu_676_p3);

assign or_ln416_3_fu_987_p2 = (xor_ln416_6_fu_981_p2 | tmp_52_fu_927_p3);

assign or_ln416_4_fu_993_p2 = (xor_ln779_fu_975_p2 | or_ln416_3_fu_987_p2);

assign or_ln416_5_fu_796_p2 = (xor_ln416_8_fu_790_p2 | tmp_59_fu_740_p3);

assign or_ln416_fu_802_p2 = (xor_ln779_1_fu_784_p2 | or_ln416_5_fu_796_p2);

assign or_ln785_1_fu_828_p2 = (xor_ln785_4_fu_824_p2 | p_Result_26_reg_1509);

assign or_ln785_fu_1017_p2 = (xor_ln785_fu_1011_p2 | p_Result_23_fu_947_p3);

assign or_ln786_1_fu_844_p2 = (and_ln786_4_reg_1520 | and_ln781_1_fu_820_p2);

assign or_ln786_fu_1041_p2 = (and_ln786_fu_1035_p2 | and_ln781_fu_1005_p2);

assign out_d_1_fu_1139_p2 = (out_d3_0_reg_276 + 5'd1);

assign out_d_fu_383_p2 = (out_d_0_reg_232 + 5'd1);

assign overflow_1_fu_838_p2 = (xor_ln785_5_fu_833_p2 & or_ln785_1_fu_828_p2);

assign overflow_fu_1029_p2 = (xor_ln785_3_fu_1023_p2 & or_ln785_fu_1017_p2);

assign p_Result_22_fu_891_p3 = r_V_reg_1477[32'd17];

assign p_Result_23_fu_947_p3 = p_Val2_20_fu_921_p2[32'd11];

assign p_Result_24_fu_676_p3 = ret_V_fu_665_p2[32'd18];

assign p_Result_25_fu_703_p3 = add_ln1192_3_fu_670_p2[32'd17];

assign p_Result_26_fu_760_p3 = p_Val2_25_fu_734_p2[32'd11];

assign p_Result_27_fu_1237_p3 = ret_V_2_fu_1231_p2[32'd12];

assign p_Result_28_fu_1251_p3 = p_Val2_17_fu_1245_p2[32'd11];

assign p_Result_s_fu_866_p3 = r_V_reg_1477[32'd16];

assign p_Val2_17_fu_1245_p1 = layer4_V_q0;

assign p_Val2_17_fu_1245_p2 = ($signed(sext_ln1265_fu_1225_p1) + $signed(p_Val2_17_fu_1245_p1));

assign p_Val2_19_fu_873_p4 = {{r_V_reg_1477[17:6]}};

assign p_Val2_20_fu_921_p2 = (zext_ln415_fu_917_p1 + p_Val2_19_fu_873_p4);

assign p_Val2_24_fu_684_p4 = {{add_ln1192_3_fu_670_p2[17:6]}};

assign p_Val2_25_fu_734_p2 = (zext_ln415_1_fu_730_p1 + p_Val2_24_fu_684_p4);

assign p_shl10_cast_fu_618_p3 = {{trunc_ln1117_1_reg_1447}, {2'd0}};

assign p_shl12_cast_fu_1185_p3 = {{add_ln1265_1_fu_1180_p2}, {3'd0}};

assign p_shl6_cast_fu_587_p3 = {{trunc_ln1116_fu_583_p1}, {4'd0}};

assign p_shl_cast_fu_434_p3 = {{add_ln203_12_fu_429_p2}, {3'd0}};

assign r_2_fu_885_p2 = ((trunc_ln718_fu_882_p1 != 5'd0) ? 1'b1 : 1'b0);

assign r_3_fu_697_p2 = ((trunc_ln718_1_fu_694_p1 != 5'd0) ? 1'b1 : 1'b0);

assign r_fu_898_p2 = (r_2_fu_885_p2 | p_Result_s_fu_866_p3);

assign ret_V_2_fu_1231_p2 = ($signed(lhs_V_fu_1221_p1) + $signed(rhs_V_fu_1228_p1));

assign ret_V_fu_665_p2 = ($signed(r_V_reg_1477) + $signed(sext_ln728_fu_658_p1));

assign rhs_V_fu_1228_p1 = p_Val2_15_reg_1586;

assign row_fu_333_p2 = (row_0_reg_210 + 4'd1);

assign select_ln340_1_fu_1289_p3 = ((xor_ln340_fu_1271_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_17_fu_1245_p2);

assign select_ln340_2_fu_1305_p3 = ((or_ln340_fu_1283_p2[0:0] === 1'b1) ? select_ln340_1_fu_1289_p3 : select_ln388_1_fu_1297_p3);

assign select_ln340_3_fu_1093_p3 = ((or_ln340_2_fu_1071_p2[0:0] === 1'b1) ? select_ln340_fu_1077_p3 : select_ln388_fu_1085_p3);

assign select_ln340_fu_1077_p3 = ((or_ln340_1_fu_1059_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_20_fu_921_p2);

assign select_ln388_1_fu_1297_p3 = ((underflow_1_fu_1265_p2[0:0] === 1'b1) ? 12'd2048 : p_Val2_17_fu_1245_p2);

assign select_ln388_fu_1085_p3 = ((underflow_fu_1053_p2[0:0] === 1'b1) ? 12'd2048 : p_Val2_20_fu_921_p2);

assign select_ln46_fu_1323_p3 = ((icmp_ln1494_reg_1597[0:0] === 1'b1) ? trunc_ln1494_reg_1592 : 11'd0);

assign sext_ln1116_1_fu_603_p1 = $signed(tmp_48_fu_595_p3);

assign sext_ln1116_fu_574_p1 = $signed(sub_ln1116_fu_568_p2);

assign sext_ln1117_1_fu_509_p1 = add_ln1117_fu_504_p2;

assign sext_ln1117_2_fu_521_p1 = $signed(tmp_47_fu_513_p3);

assign sext_ln1117_fu_419_p1 = $signed(sub_ln1117_fu_413_p2);

assign sext_ln1265_fu_1225_p1 = p_Val2_15_reg_1586;

assign sext_ln728_fu_658_p1 = lhs_V_1_fu_650_p3;

assign sub_ln1116_1_fu_607_p2 = ($signed(p_shl6_cast_fu_587_p3) - $signed(sext_ln1116_1_fu_603_p1));

assign sub_ln1116_fu_568_p2 = (zext_ln1116_fu_552_p1 - zext_ln1116_3_fu_564_p1);

assign sub_ln1117_fu_413_p2 = (zext_ln1117_fu_397_p1 - zext_ln1117_1_fu_409_p1);

assign tmp_10_fu_544_p3 = {{in_d_0_reg_243}, {4'd0}};

assign tmp_11_fu_556_p3 = {{in_d_0_reg_243}, {1'd0}};

assign tmp_43_fu_1193_p3 = {{add_ln1265_1_fu_1180_p2}, {1'd0}};

assign tmp_46_fu_442_p3 = {{add_ln203_12_fu_429_p2}, {1'd0}};

assign tmp_47_fu_513_p3 = {{add_ln1117_fu_504_p2}, {2'd0}};

assign tmp_48_fu_595_p3 = {{add_ln1116_fu_578_p2}, {1'd0}};

assign tmp_51_fu_904_p3 = r_V_reg_1477[32'd5];

assign tmp_52_fu_927_p3 = p_Val2_20_fu_921_p2[32'd11];

assign tmp_55_fu_968_p3 = r_V_reg_1477[32'd18];

assign tmp_58_fu_717_p3 = r_V_reg_1477[32'd5];

assign tmp_59_fu_740_p3 = p_Val2_25_fu_734_p2[32'd11];

assign tmp_5_fu_1150_p3 = {{out_d3_0_reg_276}, {3'd0}};

assign tmp_62_fu_776_p3 = ret_V_fu_665_p2[32'd18];

assign tmp_6_fu_1162_p3 = {{out_d3_0_reg_276}, {1'd0}};

assign tmp_7_fu_389_p3 = {{out_d_0_reg_232}, {3'd0}};

assign tmp_8_fu_401_p3 = {{out_d_0_reg_232}, {1'd0}};

assign trunc_ln1116_fu_583_p1 = add_ln1116_fu_578_p2[7:0];

assign trunc_ln1117_1_fu_540_p1 = add_ln1117_2_fu_531_p2[10:0];

assign trunc_ln1117_fu_536_p1 = add_ln1117_2_fu_531_p2[12:0];

assign trunc_ln1192_fu_662_p1 = r_V_reg_1477[17:0];

assign trunc_ln1494_fu_1313_p1 = select_ln340_2_fu_1305_p3[10:0];

assign trunc_ln718_1_fu_694_p1 = r_V_reg_1477[4:0];

assign trunc_ln718_fu_882_p1 = r_V_reg_1477[4:0];

assign underflow_1_fu_1265_p2 = (xor_ln786_fu_1259_p2 & p_Result_27_fu_1237_p3);

assign underflow_2_fu_855_p2 = (xor_ln786_2_fu_849_p2 & p_Result_24_reg_1492);

assign underflow_fu_1053_p2 = (xor_ln786_1_fu_1047_p2 & p_Result_s_fu_866_p3);

assign xor_ln340_1_fu_1277_p2 = (p_Result_27_fu_1237_p3 ^ 1'd1);

assign xor_ln340_fu_1271_p2 = (p_Result_28_fu_1251_p3 ^ p_Result_27_fu_1237_p3);

assign xor_ln416_5_fu_935_p2 = (tmp_52_fu_927_p3 ^ 1'd1);

assign xor_ln416_6_fu_981_p2 = (p_Result_22_fu_891_p3 ^ 1'd1);

assign xor_ln416_7_fu_748_p2 = (tmp_59_fu_740_p3 ^ 1'd1);

assign xor_ln416_8_fu_790_p2 = (p_Result_25_fu_703_p3 ^ 1'd1);

assign xor_ln779_1_fu_784_p2 = (tmp_62_fu_776_p3 ^ 1'd1);

assign xor_ln779_fu_975_p2 = (tmp_55_fu_968_p3 ^ 1'd1);

assign xor_ln785_3_fu_1023_p2 = (p_Result_s_fu_866_p3 ^ 1'd1);

assign xor_ln785_4_fu_824_p2 = (carry_5_reg_1503 ^ Range2_all_ones_1_reg_1514);

assign xor_ln785_5_fu_833_p2 = (p_Result_24_reg_1492 ^ 1'd1);

assign xor_ln785_fu_1011_p2 = (and_ln777_fu_962_p2 ^ Range2_all_ones_fu_955_p3);

assign xor_ln786_1_fu_1047_p2 = (or_ln786_fu_1041_p2 ^ 1'd1);

assign xor_ln786_2_fu_849_p2 = (or_ln786_1_fu_844_p2 ^ 1'd1);

assign xor_ln786_fu_1259_p2 = (p_Result_28_fu_1251_p3 ^ 1'd1);

assign zext_ln1116_3_fu_564_p1 = tmp_11_fu_556_p3;

assign zext_ln1116_4_fu_640_p1 = add_ln1116_1_reg_1452;

assign zext_ln1116_fu_552_p1 = tmp_10_fu_544_p3;

assign zext_ln1117_1_fu_409_p1 = tmp_8_fu_401_p3;

assign zext_ln1117_2_fu_500_p1 = in_d_0_reg_243;

assign zext_ln1117_3_fu_635_p1 = add_ln1117_4_fu_630_p2;

assign zext_ln1117_fu_397_p1 = tmp_7_fu_389_p3;

assign zext_ln124_fu_287_p1 = i_0_reg_186;

assign zext_ln1265_1_fu_1170_p1 = tmp_6_fu_1162_p3;

assign zext_ln1265_2_fu_1201_p1 = tmp_43_fu_1193_p3;

assign zext_ln1265_3_fu_1216_p1 = add_ln1265_3_fu_1211_p2;

assign zext_ln1265_fu_1158_p1 = tmp_5_fu_1150_p3;

assign zext_ln126_fu_307_p1 = j_0_reg_198;

assign zext_ln128_fu_323_p1 = j_0_reg_198;

assign zext_ln130_fu_348_p1 = add_ln137_fu_343_p2;

assign zext_ln133_fu_373_p1 = add_ln137_1_fu_368_p2;

assign zext_ln137_1_fu_339_p1 = row_0_reg_210;

assign zext_ln137_2_fu_364_p1 = col_0_reg_221;

assign zext_ln137_fu_303_p1 = i_0_reg_186;

assign zext_ln151_fu_1113_p1 = i1_0_reg_254;

assign zext_ln153_fu_1129_p1 = j2_0_reg_265;

assign zext_ln154_fu_1145_p1 = out_d3_0_reg_276;

assign zext_ln203_13_fu_465_p1 = add_ln203_14_fu_460_p2;

assign zext_ln203_fu_450_p1 = tmp_46_fu_442_p3;

assign zext_ln415_1_fu_730_p1 = and_ln415_1_fu_724_p2;

assign zext_ln415_fu_917_p1 = and_ln415_fu_911_p2;

assign zext_ln46_fu_1329_p1 = select_ln46_fu_1323_p3;

always @ (posedge ap_clk) begin
    zext_ln124_reg_1340[3] <= 1'b0;
    zext_ln137_reg_1353[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln126_reg_1358[3] <= 1'b0;
    zext_ln128_reg_1371[12:3] <= 10'b0000000000;
    zext_ln137_1_reg_1384[8:4] <= 5'b00000;
    zext_ln130_reg_1389[8:4] <= 5'b00000;
    zext_ln137_2_reg_1402[11:4] <= 8'b00000000;
    zext_ln133_reg_1407[11:4] <= 8'b00000000;
    sext_ln1117_reg_1420[0] <= 1'b0;
    zext_ln151_reg_1550[8:4] <= 5'b00000;
    zext_ln153_reg_1563[11:4] <= 8'b00000000;
end

endmodule //Conv2_Cal
