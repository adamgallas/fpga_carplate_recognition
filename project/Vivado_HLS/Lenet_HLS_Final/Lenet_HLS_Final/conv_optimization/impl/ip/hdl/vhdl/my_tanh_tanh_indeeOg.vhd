-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity my_tanh_tanh_indeeOg_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of my_tanh_tanh_indeeOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "100000000", 1 => "100000010", 2 => "100000100", 3 => "100000110", 
    4 => "100001000", 5 => "100001010", 6 => "100001100", 7 => "100001110", 
    8 => "100010000", 9 => "100010010", 10 => "100010100", 11 => "100010110", 
    12 => "100011000", 13 => "100011010", 14 => "100011100", 15 => "100011110", 
    16 => "100100000", 17 => "100100010", 18 => "100100100", 19 => "100100110", 
    20 => "100101000", 21 => "100101010", 22 => "100101100", 23 => "100101110", 
    24 => "100110000", 25 => "100110010", 26 => "100110100", 27 => "100110110", 
    28 => "100111000", 29 => "100111010", 30 => "100111100", 31 => "100111110", 
    32 => "101000000", 33 => "101000010", 34 => "101000100", 35 => "101000110", 
    36 => "101001000", 37 => "101001010", 38 => "101001100", 39 => "101001110", 
    40 => "101010000", 41 => "101010010", 42 => "101010100", 43 => "101010110", 
    44 => "101011000", 45 => "101011010", 46 => "101011100", 47 => "101011110", 
    48 => "101100000", 49 => "101100010", 50 => "101100100", 51 => "101100110", 
    52 => "101101000", 53 => "101101010", 54 => "101101100", 55 => "101101110", 
    56 => "101110000", 57 => "101110010", 58 => "101110100", 59 => "101110110", 
    60 => "101111000", 61 => "101111010", 62 => "101111100", 63 => "101111110", 
    64 => "110000000", 65 => "110000010", 66 => "110000100", 67 => "110000110", 
    68 => "110001000", 69 => "110001010", 70 => "110001100", 71 => "110001110", 
    72 => "110010000", 73 => "110010010", 74 => "110010100", 75 => "110010110", 
    76 => "110011000", 77 => "110011010", 78 => "110011100", 79 => "110011110", 
    80 => "110100000", 81 => "110100010", 82 => "110100100", 83 => "110100110", 
    84 => "110101000", 85 => "110101010", 86 => "110101100", 87 => "110101110", 
    88 => "110110000", 89 => "110110010", 90 => "110110100", 91 => "110110110", 
    92 => "110111000", 93 => "110111010", 94 => "110111100", 95 => "110111110", 
    96 => "111000000", 97 => "111000010", 98 => "111000100", 99 => "111000110", 
    100 => "111001000", 101 => "111001010", 102 => "111001100", 103 => "111001110", 
    104 => "111010000", 105 => "111010010", 106 => "111010100", 107 => "111010110", 
    108 => "111011000", 109 => "111011010", 110 => "111011100", 111 => "111011110", 
    112 => "111100000", 113 => "111100010", 114 => "111100100", 115 => "111100110", 
    116 => "111101000", 117 => "111101010", 118 => "111101100", 119 => "111101110", 
    120 => "111110000", 121 => "111110010", 122 => "111110100", 123 => "111110110", 
    124 => "111111000", 125 => "111111010", 126 => "111111100", 127 => "111111110", 
    128 => "000000000", 129 => "000000010", 130 => "000000100", 131 => "000000110", 
    132 => "000001000", 133 => "000001010", 134 => "000001100", 135 => "000001110", 
    136 => "000010000", 137 => "000010010", 138 => "000010100", 139 => "000010110", 
    140 => "000011000", 141 => "000011010", 142 => "000011100", 143 => "000011110", 
    144 => "000100000", 145 => "000100010", 146 => "000100100", 147 => "000100110", 
    148 => "000101000", 149 => "000101010", 150 => "000101100", 151 => "000101110", 
    152 => "000110000", 153 => "000110010", 154 => "000110100", 155 => "000110110", 
    156 => "000111000", 157 => "000111010", 158 => "000111100", 159 => "000111110", 
    160 => "001000000", 161 => "001000010", 162 => "001000100", 163 => "001000110", 
    164 => "001001000", 165 => "001001010", 166 => "001001100", 167 => "001001110", 
    168 => "001010000", 169 => "001010010", 170 => "001010100", 171 => "001010110", 
    172 => "001011000", 173 => "001011010", 174 => "001011100", 175 => "001011110", 
    176 => "001100000", 177 => "001100010", 178 => "001100100", 179 => "001100110", 
    180 => "001101000", 181 => "001101010", 182 => "001101100", 183 => "001101110", 
    184 => "001110000", 185 => "001110010", 186 => "001110100", 187 => "001110110", 
    188 => "001111000", 189 => "001111010", 190 => "001111100", 191 => "001111110", 
    192 => "010000000", 193 => "010000010", 194 => "010000100", 195 => "010000110", 
    196 => "010001000", 197 => "010001010", 198 => "010001100", 199 => "010001110", 
    200 => "010010000", 201 => "010010010", 202 => "010010100", 203 => "010010110", 
    204 => "010011000", 205 => "010011010", 206 => "010011100", 207 => "010011110", 
    208 => "010100000", 209 => "010100010", 210 => "010100100", 211 => "010100110", 
    212 => "010101000", 213 => "010101010", 214 => "010101100", 215 => "010101110", 
    216 => "010110000", 217 => "010110010", 218 => "010110100", 219 => "010110110", 
    220 => "010111000", 221 => "010111010", 222 => "010111100", 223 => "010111110", 
    224 => "011000000", 225 => "011000010", 226 => "011000100", 227 => "011000110", 
    228 => "011001000", 229 => "011001010", 230 => "011001100", 231 => "011001110", 
    232 => "011010000", 233 => "011010010", 234 => "011010100", 235 => "011010110", 
    236 => "011011000", 237 => "011011010", 238 => "011011100", 239 => "011011110", 
    240 => "011100000", 241 => "011100010", 242 => "011100100", 243 => "011100110", 
    244 => "011101000", 245 => "011101010", 246 => "011101100", 247 => "011101110", 
    248 => "011110000", 249 => "011110010", 250 => "011110100", 251 => "011110110", 
    252 => "011111000", 253 => "011111010", 254 => "011111100", 255 => "011111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity my_tanh_tanh_indeeOg is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of my_tanh_tanh_indeeOg is
    component my_tanh_tanh_indeeOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    my_tanh_tanh_indeeOg_rom_U :  component my_tanh_tanh_indeeOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


