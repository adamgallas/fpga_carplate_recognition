// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Pool2_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer4_V_address0,
        layer4_V_ce0,
        layer4_V_q0,
        layer4_V_address1,
        layer4_V_ce1,
        layer4_V_q1,
        layer5_V_address0,
        layer5_V_ce0,
        layer5_V_we0,
        layer5_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] layer4_V_address0;
output   layer4_V_ce0;
input  [11:0] layer4_V_q0;
output  [10:0] layer4_V_address1;
output   layer4_V_ce1;
input  [11:0] layer4_V_q1;
output  [8:0] layer5_V_address0;
output   layer5_V_ce0;
output   layer5_V_we0;
output  [11:0] layer5_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] layer4_V_address0;
reg layer4_V_ce0;
reg[10:0] layer4_V_address1;
reg layer4_V_ce1;
reg layer5_V_ce0;
reg layer5_V_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] in_d_fu_188_p2;
reg   [4:0] in_d_reg_515;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln1494_fu_222_p2;
reg   [8:0] add_ln1494_reg_520;
wire   [0:0] icmp_ln162_fu_182_p2;
wire   [7:0] add_ln203_fu_240_p2;
reg   [7:0] add_ln203_reg_526;
wire   [63:0] add_ln1494_2_fu_285_p2;
reg   [63:0] add_ln1494_2_reg_534;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln164_fu_246_p2;
wire   [11:0] trunc_ln168_fu_291_p1;
reg   [11:0] trunc_ln168_reg_539;
wire   [63:0] add_ln1494_4_fu_334_p2;
reg   [63:0] add_ln1494_4_reg_545;
wire   [11:0] trunc_ln169_fu_340_p1;
reg   [11:0] trunc_ln169_reg_550;
wire   [9:0] add_ln203_2_fu_375_p2;
reg   [9:0] add_ln203_2_reg_556;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln166_fu_381_p2;
wire   [11:0] add_ln1494_6_fu_401_p2;
reg   [11:0] add_ln1494_6_reg_569;
wire   [3:0] or_ln167_fu_406_p2;
reg   [3:0] or_ln167_reg_574;
wire   [11:0] add_ln1494_8_fu_426_p2;
reg   [11:0] add_ln1494_8_reg_585;
wire   [3:0] i_fu_431_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] add_ln203_3_fu_456_p2;
reg   [63:0] add_ln203_3_reg_605;
wire   [63:0] add_ln203_4_fu_472_p2;
reg   [63:0] add_ln203_4_reg_611;
wire    ap_CS_fsm_state6;
wire   [9:0] add_ln203_5_fu_491_p2;
reg   [9:0] add_ln203_5_reg_617;
wire   [3:0] j_fu_496_p2;
reg   [3:0] j_reg_622;
wire    ap_CS_fsm_state7;
wire   [63:0] select_ln203_fu_502_p3;
reg   [63:0] select_ln203_reg_637;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [4:0] in_d_0_reg_141;
reg   [3:0] i_0_reg_152;
reg   [3:0] j_0_reg_164;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln1494_10_fu_396_p1;
wire   [63:0] zext_ln1494_13_fu_421_p1;
wire   [63:0] zext_ln1494_11_fu_437_p1;
wire   [63:0] zext_ln1494_14_fu_441_p1;
wire   [63:0] zext_ln203_4_fu_508_p1;
wire   [7:0] tmp_1_fu_198_p3;
wire   [5:0] tmp_2_fu_210_p3;
wire   [8:0] zext_ln1494_2_fu_218_p1;
wire   [8:0] zext_ln1494_1_fu_206_p1;
wire   [6:0] tmp_3_fu_228_p3;
wire   [7:0] zext_ln1494_fu_194_p1;
wire   [7:0] zext_ln203_fu_236_p1;
wire   [8:0] zext_ln1494_3_fu_252_p1;
wire   [8:0] add_ln1494_1_fu_256_p2;
wire   [11:0] tmp_7_fu_261_p3;
wire   [9:0] tmp_8_fu_273_p3;
wire   [63:0] zext_ln1494_4_fu_269_p1;
wire   [63:0] zext_ln1494_5_fu_281_p1;
wire   [3:0] or_ln168_fu_295_p2;
wire   [8:0] zext_ln1494_6_fu_301_p1;
wire   [8:0] add_ln1494_3_fu_305_p2;
wire   [11:0] tmp_9_fu_310_p3;
wire   [9:0] tmp_10_fu_322_p3;
wire   [63:0] zext_ln1494_7_fu_318_p1;
wire   [63:0] zext_ln1494_8_fu_330_p1;
wire   [2:0] tmp_11_fu_344_p4;
wire   [7:0] zext_ln203_1_fu_354_p1;
wire   [7:0] add_ln203_1_fu_358_p2;
wire   [9:0] p_shl3_cast_fu_367_p3;
wire   [9:0] zext_ln203_2_fu_363_p1;
wire   [11:0] zext_ln1494_9_fu_387_p1;
wire   [11:0] add_ln1494_5_fu_391_p2;
wire   [11:0] zext_ln1494_12_fu_412_p1;
wire   [11:0] add_ln1494_7_fu_416_p2;
wire   [0:0] grp_fu_176_p2;
wire   [3:0] select_ln167_fu_445_p3;
wire   [63:0] zext_ln167_fu_452_p1;
wire   [3:0] select_ln168_fu_461_p3;
wire   [63:0] zext_ln168_fu_468_p1;
wire   [2:0] tmp_12_fu_477_p4;
wire   [9:0] zext_ln203_3_fu_487_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_152 <= i_fu_431_p2;
    end else if (((icmp_ln162_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_d_0_reg_141 <= in_d_reg_515;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_d_0_reg_141 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_164 <= j_reg_622;
    end else if (((icmp_ln164_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_164 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln1494_2_reg_534[63 : 1] <= add_ln1494_2_fu_285_p2[63 : 1];
        add_ln1494_4_reg_545[63 : 2] <= add_ln1494_4_fu_334_p2[63 : 2];
        add_ln203_2_reg_556 <= add_ln203_2_fu_375_p2;
        trunc_ln168_reg_539[11 : 1] <= trunc_ln168_fu_291_p1[11 : 1];
        trunc_ln169_reg_550[11 : 2] <= trunc_ln169_fu_340_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln166_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1494_6_reg_569 <= add_ln1494_6_fu_401_p2;
        add_ln1494_8_reg_585[11 : 1] <= add_ln1494_8_fu_426_p2[11 : 1];
        or_ln167_reg_574[3 : 1] <= or_ln167_fu_406_p2[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln162_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln1494_reg_520[8 : 1] <= add_ln1494_fu_222_p2[8 : 1];
        add_ln203_reg_526 <= add_ln203_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln203_3_reg_605 <= add_ln203_3_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln203_4_reg_611 <= add_ln203_4_fu_472_p2;
        add_ln203_5_reg_617 <= add_ln203_5_fu_491_p2;
        j_reg_622 <= j_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_d_reg_515 <= in_d_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln203_reg_637 <= select_ln203_fu_502_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln162_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln162_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer4_V_address0 = select_ln203_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        layer4_V_address0 = add_ln203_3_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer4_V_address0 = zext_ln1494_11_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer4_V_address0 = zext_ln1494_10_fu_396_p1;
    end else begin
        layer4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        layer4_V_address1 = add_ln203_4_reg_611;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer4_V_address1 = zext_ln1494_14_fu_441_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer4_V_address1 = zext_ln1494_13_fu_421_p1;
    end else begin
        layer4_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        layer4_V_ce0 = 1'b1;
    end else begin
        layer4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        layer4_V_ce1 = 1'b1;
    end else begin
        layer4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer5_V_ce0 = 1'b1;
    end else begin
        layer5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer5_V_we0 = 1'b1;
    end else begin
        layer5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln162_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln164_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln166_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1494_1_fu_256_p2 = (zext_ln1494_3_fu_252_p1 + add_ln1494_reg_520);

assign add_ln1494_2_fu_285_p2 = (zext_ln1494_4_fu_269_p1 + zext_ln1494_5_fu_281_p1);

assign add_ln1494_3_fu_305_p2 = (zext_ln1494_6_fu_301_p1 + add_ln1494_reg_520);

assign add_ln1494_4_fu_334_p2 = (zext_ln1494_7_fu_318_p1 + zext_ln1494_8_fu_330_p1);

assign add_ln1494_5_fu_391_p2 = (trunc_ln168_reg_539 + zext_ln1494_9_fu_387_p1);

assign add_ln1494_6_fu_401_p2 = (trunc_ln169_reg_550 + zext_ln1494_9_fu_387_p1);

assign add_ln1494_7_fu_416_p2 = (trunc_ln168_reg_539 + zext_ln1494_12_fu_412_p1);

assign add_ln1494_8_fu_426_p2 = (trunc_ln169_reg_550 + zext_ln1494_12_fu_412_p1);

assign add_ln1494_fu_222_p2 = (zext_ln1494_2_fu_218_p1 + zext_ln1494_1_fu_206_p1);

assign add_ln203_1_fu_358_p2 = (zext_ln203_1_fu_354_p1 + add_ln203_reg_526);

assign add_ln203_2_fu_375_p2 = (p_shl3_cast_fu_367_p3 + zext_ln203_2_fu_363_p1);

assign add_ln203_3_fu_456_p2 = (add_ln1494_2_reg_534 + zext_ln167_fu_452_p1);

assign add_ln203_4_fu_472_p2 = (add_ln1494_4_reg_545 + zext_ln168_fu_468_p1);

assign add_ln203_5_fu_491_p2 = (add_ln203_2_reg_556 + zext_ln203_3_fu_487_p1);

assign add_ln203_fu_240_p2 = (zext_ln1494_fu_194_p1 + zext_ln203_fu_236_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_176_p2 = (($signed(layer4_V_q0) > $signed(layer4_V_q1)) ? 1'b1 : 1'b0);

assign i_fu_431_p2 = (i_0_reg_152 + 4'd2);

assign icmp_ln162_fu_182_p2 = ((in_d_0_reg_141 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_246_p2 = ((i_0_reg_152 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln166_fu_381_p2 = ((j_0_reg_164 < 4'd10) ? 1'b1 : 1'b0);

assign in_d_fu_188_p2 = (in_d_0_reg_141 + 5'd1);

assign j_fu_496_p2 = (j_0_reg_164 + 4'd2);

assign layer5_V_address0 = zext_ln203_4_fu_508_p1;

assign layer5_V_d0 = layer4_V_q0;

assign or_ln167_fu_406_p2 = (j_0_reg_164 | 4'd1);

assign or_ln168_fu_295_p2 = (i_0_reg_152 | 4'd1);

assign p_shl3_cast_fu_367_p3 = {{add_ln203_1_fu_358_p2}, {2'd0}};

assign select_ln167_fu_445_p3 = ((grp_fu_176_p2[0:0] === 1'b1) ? j_0_reg_164 : or_ln167_reg_574);

assign select_ln168_fu_461_p3 = ((grp_fu_176_p2[0:0] === 1'b1) ? j_0_reg_164 : or_ln167_reg_574);

assign select_ln203_fu_502_p3 = ((grp_fu_176_p2[0:0] === 1'b1) ? add_ln203_3_reg_605 : add_ln203_4_reg_611);

assign tmp_10_fu_322_p3 = {{add_ln1494_3_fu_305_p2}, {1'd0}};

assign tmp_11_fu_344_p4 = {{i_0_reg_152[3:1]}};

assign tmp_12_fu_477_p4 = {{j_0_reg_164[3:1]}};

assign tmp_1_fu_198_p3 = {{in_d_0_reg_141}, {3'd0}};

assign tmp_2_fu_210_p3 = {{in_d_0_reg_141}, {1'd0}};

assign tmp_3_fu_228_p3 = {{in_d_0_reg_141}, {2'd0}};

assign tmp_7_fu_261_p3 = {{add_ln1494_1_fu_256_p2}, {3'd0}};

assign tmp_8_fu_273_p3 = {{add_ln1494_1_fu_256_p2}, {1'd0}};

assign tmp_9_fu_310_p3 = {{add_ln1494_3_fu_305_p2}, {3'd0}};

assign trunc_ln168_fu_291_p1 = add_ln1494_2_fu_285_p2[11:0];

assign trunc_ln169_fu_340_p1 = add_ln1494_4_fu_334_p2[11:0];

assign zext_ln1494_10_fu_396_p1 = add_ln1494_5_fu_391_p2;

assign zext_ln1494_11_fu_437_p1 = add_ln1494_6_reg_569;

assign zext_ln1494_12_fu_412_p1 = or_ln167_fu_406_p2;

assign zext_ln1494_13_fu_421_p1 = add_ln1494_7_fu_416_p2;

assign zext_ln1494_14_fu_441_p1 = add_ln1494_8_reg_585;

assign zext_ln1494_1_fu_206_p1 = tmp_1_fu_198_p3;

assign zext_ln1494_2_fu_218_p1 = tmp_2_fu_210_p3;

assign zext_ln1494_3_fu_252_p1 = i_0_reg_152;

assign zext_ln1494_4_fu_269_p1 = tmp_7_fu_261_p3;

assign zext_ln1494_5_fu_281_p1 = tmp_8_fu_273_p3;

assign zext_ln1494_6_fu_301_p1 = or_ln168_fu_295_p2;

assign zext_ln1494_7_fu_318_p1 = tmp_9_fu_310_p3;

assign zext_ln1494_8_fu_330_p1 = tmp_10_fu_322_p3;

assign zext_ln1494_9_fu_387_p1 = j_0_reg_164;

assign zext_ln1494_fu_194_p1 = in_d_0_reg_141;

assign zext_ln167_fu_452_p1 = select_ln167_fu_445_p3;

assign zext_ln168_fu_468_p1 = select_ln168_fu_461_p3;

assign zext_ln203_1_fu_354_p1 = tmp_11_fu_344_p4;

assign zext_ln203_2_fu_363_p1 = add_ln203_1_fu_358_p2;

assign zext_ln203_3_fu_487_p1 = tmp_12_fu_477_p4;

assign zext_ln203_4_fu_508_p1 = add_ln203_5_reg_617;

assign zext_ln203_fu_236_p1 = tmp_3_fu_228_p3;

always @ (posedge ap_clk) begin
    add_ln1494_reg_520[0] <= 1'b0;
    add_ln1494_2_reg_534[0] <= 1'b0;
    trunc_ln168_reg_539[0] <= 1'b0;
    add_ln1494_4_reg_545[1:0] <= 2'b10;
    trunc_ln169_reg_550[1:0] <= 2'b10;
    or_ln167_reg_574[0] <= 1'b1;
    add_ln1494_8_reg_585[0] <= 1'b1;
end

endmodule //Pool2_Cal
