-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Add_Rectangle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_0_V_empty_n : IN STD_LOGIC;
    src_data_stream_0_V_read : OUT STD_LOGIC;
    src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_1_V_empty_n : IN STD_LOGIC;
    src_data_stream_1_V_read : OUT STD_LOGIC;
    src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_2_V_empty_n : IN STD_LOGIC;
    src_data_stream_2_V_read : OUT STD_LOGIC;
    dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_0_V_full_n : IN STD_LOGIC;
    dst_data_stream_0_V_write : OUT STD_LOGIC;
    dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_1_V_full_n : IN STD_LOGIC;
    dst_data_stream_1_V_write : OUT STD_LOGIC;
    dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_2_V_full_n : IN STD_LOGIC;
    dst_data_stream_2_V_write : OUT STD_LOGIC;
    xleft_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xleft_empty_n : IN STD_LOGIC;
    xleft_read : OUT STD_LOGIC;
    xright_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xright_empty_n : IN STD_LOGIC;
    xright_read : OUT STD_LOGIC;
    ytop_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ytop_empty_n : IN STD_LOGIC;
    ytop_read : OUT STD_LOGIC;
    ydown_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ydown_empty_n : IN STD_LOGIC;
    ydown_read : OUT STD_LOGIC );
end;


architecture behav of Add_Rectangle is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln89_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_stream_1_V_blk_n : STD_LOGIC;
    signal src_data_stream_2_V_blk_n : STD_LOGIC;
    signal dst_data_stream_0_V_blk_n : STD_LOGIC;
    signal dst_data_stream_1_V_blk_n : STD_LOGIC;
    signal dst_data_stream_2_V_blk_n : STD_LOGIC;
    signal xleft_blk_n : STD_LOGIC;
    signal xright_blk_n : STD_LOGIC;
    signal ytop_blk_n : STD_LOGIC;
    signal ydown_blk_n : STD_LOGIC;
    signal j_0_i_reg_270 : STD_LOGIC_VECTOR (10 downto 0);
    signal xleft_read_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal xright_read_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ytop_read_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ydown_read_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_1_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_1_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_2_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_2_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_3_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_3_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_4_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_4_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_5_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_5_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_6_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_6_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_7_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_7_reg_638 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_339_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_647 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln94_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_4_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_4_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_431_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln94_10_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_10_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_11_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_11_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_0_i_reg_259 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln86_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln94_6_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_7_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_4_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_3_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_2_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_5_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_3_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln89_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln94_9_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_8_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_11_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_12_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_5_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_10_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_14_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_15_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_7_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_13_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_6_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_8_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_9_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_3_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_2_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln94_fu_534_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln94_2_fu_549_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln94_4_fu_564_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln86_fu_333_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln86_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln86_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_259 <= i_reg_647;
            elsif ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_259 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_i_reg_270 <= j_fu_431_p2;
            elsif (((icmp_ln86_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_reg_270 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln94_1_reg_608 <= add_ln94_1_fu_287_p2;
                add_ln94_2_reg_613 <= add_ln94_2_fu_293_p2;
                add_ln94_3_reg_618 <= add_ln94_3_fu_299_p2;
                add_ln94_4_reg_623 <= add_ln94_4_fu_305_p2;
                add_ln94_5_reg_628 <= add_ln94_5_fu_311_p2;
                add_ln94_6_reg_633 <= add_ln94_6_fu_317_p2;
                add_ln94_7_reg_638 <= add_ln94_7_fu_323_p2;
                add_ln94_reg_603 <= add_ln94_fu_281_p2;
                xleft_read_reg_579 <= xleft_dout;
                xright_read_reg_585 <= xright_dout;
                ydown_read_reg_597 <= ydown_dout;
                ytop_read_reg_591 <= ytop_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                and_ln94_reg_652 <= and_ln94_fu_385_p2;
                or_ln94_4_reg_658 <= or_ln94_4_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_647 <= i_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln89_reg_663 <= icmp_ln89_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln94_10_reg_672 <= or_ln94_10_fu_523_p2;
                or_ln94_11_reg_679 <= or_ln94_11_fu_529_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n, icmp_ln86_fu_333_p2, ap_CS_fsm_state2, icmp_ln89_fu_425_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln86_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_425_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln89_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln94_1_fu_287_p2 <= std_logic_vector(unsigned(ytop_dout) + unsigned(ap_const_lv32_1));
    add_ln94_2_fu_293_p2 <= std_logic_vector(unsigned(ydown_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln94_3_fu_299_p2 <= std_logic_vector(unsigned(ydown_dout) + unsigned(ap_const_lv32_1));
    add_ln94_4_fu_305_p2 <= std_logic_vector(unsigned(xleft_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln94_5_fu_311_p2 <= std_logic_vector(unsigned(xleft_dout) + unsigned(ap_const_lv32_1));
    add_ln94_6_fu_317_p2 <= std_logic_vector(unsigned(xright_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln94_7_fu_323_p2 <= std_logic_vector(unsigned(xright_dout) + unsigned(ap_const_lv32_1));
    add_ln94_fu_281_p2 <= std_logic_vector(unsigned(ytop_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    and_ln94_1_fu_447_p2 <= (or_ln94_4_reg_658 and icmp_ln94_9_fu_442_p2);
    and_ln94_2_fu_452_p2 <= (icmp_ln94_8_fu_437_p2 and and_ln94_1_fu_447_p2);
    and_ln94_3_fu_518_p2 <= (or_ln94_9_fu_512_p2 and and_ln94_reg_652);
    and_ln94_fu_385_p2 <= (icmp_ln94_7_fu_380_p2 and icmp_ln94_6_fu_375_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n)
    begin
                ap_block_state1 <= ((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_0_V_empty_n, src_data_stream_1_V_empty_n, src_data_stream_2_V_empty_n, dst_data_stream_0_V_full_n, dst_data_stream_1_V_full_n, dst_data_stream_2_V_full_n, icmp_ln89_reg_663)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (dst_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_2_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_1_V_empty_n = ap_const_logic_0)) or ((icmp_ln89_reg_663 = ap_const_lv1_0) and (src_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln89_fu_425_p2)
    begin
        if ((icmp_ln89_fu_425_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln86_fu_333_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln86_fu_333_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    dst_data_stream_0_V_blk_n_assign_proc : process(dst_data_stream_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_0_V_blk_n <= dst_data_stream_0_V_full_n;
        else 
            dst_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_0_V_din <= 
        select_ln94_fu_534_p3 when (or_ln94_11_reg_679(0) = '1') else 
        src_data_stream_0_V_dout;

    dst_data_stream_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_0_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_1_V_blk_n_assign_proc : process(dst_data_stream_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_1_V_blk_n <= dst_data_stream_1_V_full_n;
        else 
            dst_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_1_V_din <= 
        select_ln94_2_fu_549_p3 when (or_ln94_11_reg_679(0) = '1') else 
        src_data_stream_1_V_dout;

    dst_data_stream_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_1_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    dst_data_stream_2_V_blk_n_assign_proc : process(dst_data_stream_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dst_data_stream_2_V_blk_n <= dst_data_stream_2_V_full_n;
        else 
            dst_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_2_V_din <= 
        select_ln94_4_fu_564_p3 when (or_ln94_11_reg_679(0) = '1') else 
        src_data_stream_2_V_dout;

    dst_data_stream_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dst_data_stream_2_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_339_p2 <= std_logic_vector(unsigned(i_0_i_reg_259) + unsigned(ap_const_lv10_1));
    icmp_ln86_fu_333_p2 <= "1" when (i_0_i_reg_259 = ap_const_lv10_2D0) else "0";
    icmp_ln89_fu_425_p2 <= "1" when (j_0_i_reg_270 = ap_const_lv11_500) else "0";
    icmp_ln94_10_fu_458_p2 <= "1" when (zext_ln89_fu_421_p1 = add_ln94_4_reg_623) else "0";
    icmp_ln94_11_fu_463_p2 <= "1" when (zext_ln89_fu_421_p1 = xleft_read_reg_579) else "0";
    icmp_ln94_12_fu_468_p2 <= "1" when (zext_ln89_fu_421_p1 = add_ln94_5_reg_628) else "0";
    icmp_ln94_13_fu_485_p2 <= "1" when (zext_ln89_fu_421_p1 = add_ln94_6_reg_633) else "0";
    icmp_ln94_14_fu_490_p2 <= "1" when (zext_ln89_fu_421_p1 = xright_read_reg_585) else "0";
    icmp_ln94_15_fu_495_p2 <= "1" when (zext_ln89_fu_421_p1 = add_ln94_7_reg_638) else "0";
    icmp_ln94_1_fu_350_p2 <= "1" when (zext_ln86_fu_329_p1 = ytop_read_reg_591) else "0";
    icmp_ln94_2_fu_355_p2 <= "1" when (zext_ln86_fu_329_p1 = add_ln94_1_reg_608) else "0";
    icmp_ln94_3_fu_360_p2 <= "1" when (zext_ln86_fu_329_p1 = add_ln94_2_reg_613) else "0";
    icmp_ln94_4_fu_365_p2 <= "1" when (zext_ln86_fu_329_p1 = ydown_read_reg_597) else "0";
    icmp_ln94_5_fu_370_p2 <= "1" when (zext_ln86_fu_329_p1 = add_ln94_3_reg_618) else "0";
    icmp_ln94_6_fu_375_p2 <= "1" when (signed(zext_ln86_fu_329_p1) > signed(ytop_read_reg_591)) else "0";
    icmp_ln94_7_fu_380_p2 <= "1" when (signed(zext_ln86_fu_329_p1) < signed(ydown_read_reg_597)) else "0";
    icmp_ln94_8_fu_437_p2 <= "1" when (signed(zext_ln89_fu_421_p1) > signed(xleft_read_reg_579)) else "0";
    icmp_ln94_9_fu_442_p2 <= "1" when (signed(zext_ln89_fu_421_p1) < signed(xright_read_reg_585)) else "0";
    icmp_ln94_fu_345_p2 <= "1" when (zext_ln86_fu_329_p1 = add_ln94_reg_603) else "0";

    internal_ap_ready_assign_proc : process(icmp_ln86_fu_333_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln86_fu_333_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_431_p2 <= std_logic_vector(unsigned(j_0_i_reg_270) + unsigned(ap_const_lv11_1));
    or_ln94_10_fu_523_p2 <= (and_ln94_3_fu_518_p2 or and_ln94_2_fu_452_p2);
    or_ln94_11_fu_529_p2 <= (and_ln94_reg_652 or and_ln94_2_fu_452_p2);
    or_ln94_1_fu_397_p2 <= (or_ln94_fu_391_p2 or icmp_ln94_fu_345_p2);
    or_ln94_2_fu_403_p2 <= (icmp_ln94_4_fu_365_p2 or icmp_ln94_3_fu_360_p2);
    or_ln94_3_fu_409_p2 <= (or_ln94_2_fu_403_p2 or icmp_ln94_5_fu_370_p2);
    or_ln94_4_fu_415_p2 <= (or_ln94_3_fu_409_p2 or or_ln94_1_fu_397_p2);
    or_ln94_5_fu_473_p2 <= (icmp_ln94_12_fu_468_p2 or icmp_ln94_11_fu_463_p2);
    or_ln94_6_fu_479_p2 <= (or_ln94_5_fu_473_p2 or icmp_ln94_10_fu_458_p2);
    or_ln94_7_fu_500_p2 <= (icmp_ln94_15_fu_495_p2 or icmp_ln94_14_fu_490_p2);
    or_ln94_8_fu_506_p2 <= (or_ln94_7_fu_500_p2 or icmp_ln94_13_fu_485_p2);
    or_ln94_9_fu_512_p2 <= (or_ln94_8_fu_506_p2 or or_ln94_6_fu_479_p2);
    or_ln94_fu_391_p2 <= (icmp_ln94_2_fu_355_p2 or icmp_ln94_1_fu_350_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln94_2_fu_549_p3 <= 
        ap_const_lv8_FF when (or_ln94_10_reg_672(0) = '1') else 
        src_data_stream_1_V_dout;
    select_ln94_4_fu_564_p3 <= 
        ap_const_lv8_0 when (or_ln94_10_reg_672(0) = '1') else 
        src_data_stream_2_V_dout;
    select_ln94_fu_534_p3 <= 
        ap_const_lv8_0 when (or_ln94_10_reg_672(0) = '1') else 
        src_data_stream_0_V_dout;

    src_data_stream_0_V_blk_n_assign_proc : process(src_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_0_V_blk_n <= src_data_stream_0_V_empty_n;
        else 
            src_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_0_V_read <= ap_const_logic_1;
        else 
            src_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_1_V_blk_n_assign_proc : process(src_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_1_V_blk_n <= src_data_stream_1_V_empty_n;
        else 
            src_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_1_V_read <= ap_const_logic_1;
        else 
            src_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_stream_2_V_blk_n_assign_proc : process(src_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln89_reg_663)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_2_V_blk_n <= src_data_stream_2_V_empty_n;
        else 
            src_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln89_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_reg_663 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_data_stream_2_V_read <= ap_const_logic_1;
        else 
            src_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    xleft_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_blk_n <= xleft_empty_n;
        else 
            xleft_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xleft_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n)
    begin
        if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xleft_read <= ap_const_logic_1;
        else 
            xleft_read <= ap_const_logic_0;
        end if; 
    end process;


    xright_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xright_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_blk_n <= xright_empty_n;
        else 
            xright_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xright_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n)
    begin
        if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            xright_read <= ap_const_logic_1;
        else 
            xright_read <= ap_const_logic_0;
        end if; 
    end process;


    ydown_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ydown_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_blk_n <= ydown_empty_n;
        else 
            ydown_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ydown_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n)
    begin
        if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ydown_read <= ap_const_logic_1;
        else 
            ydown_read <= ap_const_logic_0;
        end if; 
    end process;


    ytop_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ytop_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_blk_n <= ytop_empty_n;
        else 
            ytop_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ytop_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, xleft_empty_n, xright_empty_n, ytop_empty_n, ydown_empty_n)
    begin
        if ((not(((ydown_empty_n = ap_const_logic_0) or (ytop_empty_n = ap_const_logic_0) or (xright_empty_n = ap_const_logic_0) or (xleft_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ytop_read <= ap_const_logic_1;
        else 
            ytop_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln86_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_259),32));
    zext_ln89_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_270),32));
end behav;
