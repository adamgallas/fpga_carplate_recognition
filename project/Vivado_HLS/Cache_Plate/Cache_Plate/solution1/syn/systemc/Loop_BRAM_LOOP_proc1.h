// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_BRAM_LOOP_proc1_HH_
#define _Loop_BRAM_LOOP_proc1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_BRAM_LOOP_proc1 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > buffer_V_Addr_A;
    sc_out< sc_logic > buffer_V_EN_A;
    sc_out< sc_lv<4> > buffer_V_WEN_A;
    sc_out< sc_lv<32> > buffer_V_Din_A;
    sc_in< sc_lv<32> > buffer_V_Dout_A;
    sc_in< sc_lv<8> > gray_plate_data_stream_0_V_dout;
    sc_in< sc_logic > gray_plate_data_stream_0_V_empty_n;
    sc_out< sc_logic > gray_plate_data_stream_0_V_read;


    // Module declarations
    Loop_BRAM_LOOP_proc1(sc_module_name name);
    SC_HAS_PROCESS(Loop_BRAM_LOOP_proc1);

    ~Loop_BRAM_LOOP_proc1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > gray_plate_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln47_reg_182;
    sc_signal< sc_lv<3> > j_0_reg_109;
    sc_signal< sc_lv<1> > tmp_fu_124_p3;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln47_fu_132_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<3> > j_fu_138_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<13> > i_fu_166_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<13> > i_0_reg_97;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln53_fu_161_p1;
    sc_signal< sc_lv<32> > store_V_1_fu_74;
    sc_signal< sc_lv<32> > store_V_fu_148_p3;
    sc_signal< sc_lv<32> > buffer_V_Addr_A_orig;
    sc_signal< sc_lv<24> > trunc_ln700_fu_144_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<13> ap_const_lv13_E0F;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<13> ap_const_lv13_1FFF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_buffer_V_Addr_A();
    void thread_buffer_V_Addr_A_orig();
    void thread_buffer_V_Din_A();
    void thread_buffer_V_EN_A();
    void thread_buffer_V_WEN_A();
    void thread_gray_plate_data_stream_0_V_blk_n();
    void thread_gray_plate_data_stream_0_V_read();
    void thread_i_fu_166_p2();
    void thread_icmp_ln47_fu_132_p2();
    void thread_j_fu_138_p2();
    void thread_store_V_fu_148_p3();
    void thread_tmp_fu_124_p3();
    void thread_trunc_ln700_fu_144_p1();
    void thread_zext_ln53_fu_161_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
