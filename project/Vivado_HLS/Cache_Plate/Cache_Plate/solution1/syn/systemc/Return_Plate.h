// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Return_Plate_HH_
#define _Return_Plate_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Return_Plate : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_img_data_stream_0_V_dout;
    sc_in< sc_logic > input_img_data_stream_0_V_empty_n;
    sc_out< sc_logic > input_img_data_stream_0_V_read;
    sc_in< sc_lv<8> > input_img_data_stream_1_V_dout;
    sc_in< sc_logic > input_img_data_stream_1_V_empty_n;
    sc_out< sc_logic > input_img_data_stream_1_V_read;
    sc_in< sc_lv<8> > input_img_data_stream_2_V_dout;
    sc_in< sc_logic > input_img_data_stream_2_V_empty_n;
    sc_out< sc_logic > input_img_data_stream_2_V_read;
    sc_out< sc_lv<8> > output_plate_data_stream_0_V_din;
    sc_in< sc_logic > output_plate_data_stream_0_V_full_n;
    sc_out< sc_logic > output_plate_data_stream_0_V_write;
    sc_out< sc_lv<8> > output_plate_data_stream_1_V_din;
    sc_in< sc_logic > output_plate_data_stream_1_V_full_n;
    sc_out< sc_logic > output_plate_data_stream_1_V_write;
    sc_out< sc_lv<8> > output_plate_data_stream_2_V_din;
    sc_in< sc_logic > output_plate_data_stream_2_V_full_n;
    sc_out< sc_logic > output_plate_data_stream_2_V_write;
    sc_in< sc_lv<32> > xleft_dout;
    sc_in< sc_logic > xleft_empty_n;
    sc_out< sc_logic > xleft_read;
    sc_in< sc_lv<32> > xright_dout;
    sc_in< sc_logic > xright_empty_n;
    sc_out< sc_logic > xright_read;
    sc_in< sc_lv<32> > ytop_dout;
    sc_in< sc_logic > ytop_empty_n;
    sc_out< sc_logic > ytop_read;
    sc_in< sc_lv<32> > ydown_dout;
    sc_in< sc_logic > ydown_empty_n;
    sc_out< sc_logic > ydown_read;


    // Module declarations
    Return_Plate(sc_module_name name);
    SC_HAS_PROCESS(Return_Plate);

    ~Return_Plate();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > input_img_data_stream_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln64_reg_429;
    sc_signal< sc_logic > input_img_data_stream_1_V_blk_n;
    sc_signal< sc_logic > input_img_data_stream_2_V_blk_n;
    sc_signal< sc_logic > output_plate_data_stream_0_V_blk_n;
    sc_signal< sc_lv<1> > or_ln68_2_reg_443;
    sc_signal< sc_logic > output_plate_data_stream_1_V_blk_n;
    sc_signal< sc_logic > output_plate_data_stream_2_V_blk_n;
    sc_signal< sc_logic > xleft_blk_n;
    sc_signal< sc_logic > xright_blk_n;
    sc_signal< sc_logic > ytop_blk_n;
    sc_signal< sc_logic > ydown_blk_n;
    sc_signal< sc_lv<20> > indvar_flatten_reg_254;
    sc_signal< sc_lv<10> > i_0_i_reg_265;
    sc_signal< sc_lv<11> > j_0_i_reg_276;
    sc_signal< sc_lv<32> > xleft_read_reg_407;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > xright_read_reg_412;
    sc_signal< sc_lv<32> > ytop_read_reg_417;
    sc_signal< sc_lv<32> > ydown_read_reg_423;
    sc_signal< sc_lv<1> > icmp_ln64_fu_307_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<20> > add_ln64_fu_313_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<10> > select_ln64_2_fu_367_p3;
    sc_signal< sc_lv<1> > or_ln68_2_fu_395_p2;
    sc_signal< sc_lv<11> > j_fu_401_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > zext_ln64_fu_287_p1;
    sc_signal< sc_lv<1> > icmp_ln68_fu_291_p2;
    sc_signal< sc_lv<1> > icmp_ln68_1_fu_296_p2;
    sc_signal< sc_lv<1> > icmp_ln65_fu_319_p2;
    sc_signal< sc_lv<10> > add_ln64_1_fu_333_p2;
    sc_signal< sc_lv<32> > zext_ln64_1_fu_339_p1;
    sc_signal< sc_lv<1> > icmp_ln68_4_fu_343_p2;
    sc_signal< sc_lv<1> > icmp_ln68_5_fu_348_p2;
    sc_signal< sc_lv<1> > or_ln68_3_fu_353_p2;
    sc_signal< sc_lv<1> > or_ln68_1_fu_301_p2;
    sc_signal< sc_lv<11> > select_ln64_fu_325_p3;
    sc_signal< sc_lv<32> > zext_ln65_fu_375_p1;
    sc_signal< sc_lv<1> > icmp_ln68_2_fu_379_p2;
    sc_signal< sc_lv<1> > icmp_ln68_3_fu_384_p2;
    sc_signal< sc_lv<1> > select_ln64_1_fu_359_p3;
    sc_signal< sc_lv<1> > or_ln68_fu_389_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<20> ap_const_lv20_E1000;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<11> ap_const_lv11_500;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln64_1_fu_333_p2();
    void thread_add_ln64_fu_313_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_icmp_ln64_fu_307_p2();
    void thread_icmp_ln65_fu_319_p2();
    void thread_icmp_ln68_1_fu_296_p2();
    void thread_icmp_ln68_2_fu_379_p2();
    void thread_icmp_ln68_3_fu_384_p2();
    void thread_icmp_ln68_4_fu_343_p2();
    void thread_icmp_ln68_5_fu_348_p2();
    void thread_icmp_ln68_fu_291_p2();
    void thread_input_img_data_stream_0_V_blk_n();
    void thread_input_img_data_stream_0_V_read();
    void thread_input_img_data_stream_1_V_blk_n();
    void thread_input_img_data_stream_1_V_read();
    void thread_input_img_data_stream_2_V_blk_n();
    void thread_input_img_data_stream_2_V_read();
    void thread_j_fu_401_p2();
    void thread_or_ln68_1_fu_301_p2();
    void thread_or_ln68_2_fu_395_p2();
    void thread_or_ln68_3_fu_353_p2();
    void thread_or_ln68_fu_389_p2();
    void thread_output_plate_data_stream_0_V_blk_n();
    void thread_output_plate_data_stream_0_V_din();
    void thread_output_plate_data_stream_0_V_write();
    void thread_output_plate_data_stream_1_V_blk_n();
    void thread_output_plate_data_stream_1_V_din();
    void thread_output_plate_data_stream_1_V_write();
    void thread_output_plate_data_stream_2_V_blk_n();
    void thread_output_plate_data_stream_2_V_din();
    void thread_output_plate_data_stream_2_V_write();
    void thread_select_ln64_1_fu_359_p3();
    void thread_select_ln64_2_fu_367_p3();
    void thread_select_ln64_fu_325_p3();
    void thread_xleft_blk_n();
    void thread_xleft_read();
    void thread_xright_blk_n();
    void thread_xright_read();
    void thread_ydown_blk_n();
    void thread_ydown_read();
    void thread_ytop_blk_n();
    void thread_ytop_read();
    void thread_zext_ln64_1_fu_339_p1();
    void thread_zext_ln64_fu_287_p1();
    void thread_zext_ln65_fu_375_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
