// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_BRAM_LOOP_proc1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_BRAM_LOOP_proc1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_BRAM_LOOP_proc1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_ST_fsm_state1 = "1";
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_ST_fsm_state2 = "10";
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_ST_fsm_state5 = "1000";
const sc_lv<32> Loop_BRAM_LOOP_proc1::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_BRAM_LOOP_proc1::ap_const_boolean_1 = true;
const sc_lv<32> Loop_BRAM_LOOP_proc1::ap_const_lv32_2 = "10";
const bool Loop_BRAM_LOOP_proc1::ap_const_boolean_0 = false;
const sc_lv<1> Loop_BRAM_LOOP_proc1::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_BRAM_LOOP_proc1::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_BRAM_LOOP_proc1::ap_const_lv32_3 = "11";
const sc_lv<1> Loop_BRAM_LOOP_proc1::ap_const_lv1_1 = "1";
const sc_lv<13> Loop_BRAM_LOOP_proc1::ap_const_lv13_E0F = "111000001111";
const sc_lv<3> Loop_BRAM_LOOP_proc1::ap_const_lv3_0 = "000";
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_const_lv4_0 = "0000";
const sc_lv<4> Loop_BRAM_LOOP_proc1::ap_const_lv4_F = "1111";
const sc_lv<32> Loop_BRAM_LOOP_proc1::ap_const_lv32_C = "1100";
const sc_lv<3> Loop_BRAM_LOOP_proc1::ap_const_lv3_4 = "100";
const sc_lv<3> Loop_BRAM_LOOP_proc1::ap_const_lv3_1 = "1";
const sc_lv<13> Loop_BRAM_LOOP_proc1::ap_const_lv13_1FFF = "1111111111111";

Loop_BRAM_LOOP_proc1::Loop_BRAM_LOOP_proc1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( gray_plate_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln47_reg_182 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( gray_plate_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln47_reg_182 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( gray_plate_data_stream_0_V_empty_n );
    sensitive << ( icmp_ln47_reg_182 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln47_fu_132_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( tmp_fu_124_p3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_fu_124_p3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_buffer_V_Addr_A);
    sensitive << ( buffer_V_Addr_A_orig );

    SC_METHOD(thread_buffer_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln53_fu_161_p1 );

    SC_METHOD(thread_buffer_V_Din_A);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( store_V_1_fu_74 );

    SC_METHOD(thread_buffer_V_EN_A);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_buffer_V_WEN_A);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_gray_plate_data_stream_0_V_blk_n);
    sensitive << ( gray_plate_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln47_reg_182 );

    SC_METHOD(thread_gray_plate_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln47_reg_182 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_fu_166_p2);
    sensitive << ( i_0_reg_97 );

    SC_METHOD(thread_icmp_ln47_fu_132_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_0_reg_109 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_fu_138_p2);
    sensitive << ( j_0_reg_109 );

    SC_METHOD(thread_store_V_fu_148_p3);
    sensitive << ( gray_plate_data_stream_0_V_dout );
    sensitive << ( trunc_ln700_fu_144_p1 );

    SC_METHOD(thread_tmp_fu_124_p3);
    sensitive << ( i_0_reg_97 );

    SC_METHOD(thread_trunc_ln700_fu_144_p1);
    sensitive << ( store_V_1_fu_74 );

    SC_METHOD(thread_zext_ln53_fu_161_p1);
    sensitive << ( i_0_reg_97 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_124_p3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln47_fu_132_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_BRAM_LOOP_proc1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, buffer_V_Addr_A, "(port)buffer_V_Addr_A");
    sc_trace(mVcdFile, buffer_V_EN_A, "(port)buffer_V_EN_A");
    sc_trace(mVcdFile, buffer_V_WEN_A, "(port)buffer_V_WEN_A");
    sc_trace(mVcdFile, buffer_V_Din_A, "(port)buffer_V_Din_A");
    sc_trace(mVcdFile, buffer_V_Dout_A, "(port)buffer_V_Dout_A");
    sc_trace(mVcdFile, gray_plate_data_stream_0_V_dout, "(port)gray_plate_data_stream_0_V_dout");
    sc_trace(mVcdFile, gray_plate_data_stream_0_V_empty_n, "(port)gray_plate_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, gray_plate_data_stream_0_V_read, "(port)gray_plate_data_stream_0_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, gray_plate_data_stream_0_V_blk_n, "gray_plate_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln47_reg_182, "icmp_ln47_reg_182");
    sc_trace(mVcdFile, j_0_reg_109, "j_0_reg_109");
    sc_trace(mVcdFile, tmp_fu_124_p3, "tmp_fu_124_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln47_fu_132_p2, "icmp_ln47_fu_132_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_fu_138_p2, "j_fu_138_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, i_fu_166_p2, "i_fu_166_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, i_0_reg_97, "i_0_reg_97");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, zext_ln53_fu_161_p1, "zext_ln53_fu_161_p1");
    sc_trace(mVcdFile, store_V_1_fu_74, "store_V_1_fu_74");
    sc_trace(mVcdFile, store_V_fu_148_p3, "store_V_fu_148_p3");
    sc_trace(mVcdFile, buffer_V_Addr_A_orig, "buffer_V_Addr_A_orig");
    sc_trace(mVcdFile, trunc_ln700_fu_144_p1, "trunc_ln700_fu_144_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Loop_BRAM_LOOP_proc1::~Loop_BRAM_LOOP_proc1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_BRAM_LOOP_proc1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(tmp_fu_124_p3.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_124_p3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_124_p3.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_97 = i_fu_166_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_reg_97 = ap_const_lv13_E0F;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_132_p2.read()))) {
        j_0_reg_109 = j_fu_138_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_124_p3.read()))) {
        j_0_reg_109 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln47_reg_182 = icmp_ln47_fu_132_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        store_V_1_fu_74 = store_V_fu_148_p3.read();
    }
}

void Loop_BRAM_LOOP_proc1::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Loop_BRAM_LOOP_proc1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_BRAM_LOOP_proc1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_BRAM_LOOP_proc1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gray_plate_data_stream_0_V_empty_n.read()));
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gray_plate_data_stream_0_V_empty_n.read()));
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_BRAM_LOOP_proc1::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, gray_plate_data_stream_0_V_empty_n.read()));
}

void Loop_BRAM_LOOP_proc1::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln47_fu_132_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p3.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_BRAM_LOOP_proc1::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_BRAM_LOOP_proc1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p3.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_buffer_V_Addr_A() {
    buffer_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): buffer_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void Loop_BRAM_LOOP_proc1::thread_buffer_V_Addr_A_orig() {
    buffer_V_Addr_A_orig =  (sc_lv<32>) (zext_ln53_fu_161_p1.read());
}

void Loop_BRAM_LOOP_proc1::thread_buffer_V_Din_A() {
    buffer_V_Din_A = store_V_1_fu_74.read();
}

void Loop_BRAM_LOOP_proc1::thread_buffer_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_V_EN_A = ap_const_logic_1;
    } else {
        buffer_V_EN_A = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_buffer_V_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buffer_V_WEN_A = ap_const_lv4_F;
    } else {
        buffer_V_WEN_A = ap_const_lv4_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_gray_plate_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0))) {
        gray_plate_data_stream_0_V_blk_n = gray_plate_data_stream_0_V_empty_n.read();
    } else {
        gray_plate_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Loop_BRAM_LOOP_proc1::thread_gray_plate_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln47_reg_182.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gray_plate_data_stream_0_V_read = ap_const_logic_1;
    } else {
        gray_plate_data_stream_0_V_read = ap_const_logic_0;
    }
}

void Loop_BRAM_LOOP_proc1::thread_i_fu_166_p2() {
    i_fu_166_p2 = (!i_0_reg_97.read().is_01() || !ap_const_lv13_1FFF.is_01())? sc_lv<13>(): (sc_biguint<13>(i_0_reg_97.read()) + sc_bigint<13>(ap_const_lv13_1FFF));
}

void Loop_BRAM_LOOP_proc1::thread_icmp_ln47_fu_132_p2() {
    icmp_ln47_fu_132_p2 = (!j_0_reg_109.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_109.read() == ap_const_lv3_4);
}

void Loop_BRAM_LOOP_proc1::thread_j_fu_138_p2() {
    j_fu_138_p2 = (!j_0_reg_109.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_109.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Loop_BRAM_LOOP_proc1::thread_store_V_fu_148_p3() {
    store_V_fu_148_p3 = esl_concat<24,8>(trunc_ln700_fu_144_p1.read(), gray_plate_data_stream_0_V_dout.read());
}

void Loop_BRAM_LOOP_proc1::thread_tmp_fu_124_p3() {
    tmp_fu_124_p3 = i_0_reg_97.read().range(12, 12);
}

void Loop_BRAM_LOOP_proc1::thread_trunc_ln700_fu_144_p1() {
    trunc_ln700_fu_144_p1 = store_V_1_fu_74.read().range(24-1, 0);
}

void Loop_BRAM_LOOP_proc1::thread_zext_ln53_fu_161_p1() {
    zext_ln53_fu_161_p1 = esl_zext<64,13>(i_0_reg_97.read());
}

void Loop_BRAM_LOOP_proc1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_124_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln47_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln47_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

