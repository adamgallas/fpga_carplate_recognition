// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Return_Plate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Return_Plate::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Return_Plate::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Return_Plate::ap_ST_fsm_state1 = "1";
const sc_lv<3> Return_Plate::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> Return_Plate::ap_ST_fsm_state4 = "100";
const sc_lv<32> Return_Plate::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Return_Plate::ap_const_boolean_1 = true;
const sc_lv<32> Return_Plate::ap_const_lv32_1 = "1";
const bool Return_Plate::ap_const_boolean_0 = false;
const sc_lv<1> Return_Plate::ap_const_lv1_0 = "0";
const sc_lv<1> Return_Plate::ap_const_lv1_1 = "1";
const sc_lv<20> Return_Plate::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<10> Return_Plate::ap_const_lv10_0 = "0000000000";
const sc_lv<11> Return_Plate::ap_const_lv11_0 = "00000000000";
const sc_lv<20> Return_Plate::ap_const_lv20_E1000 = "11100001000000000000";
const sc_lv<20> Return_Plate::ap_const_lv20_1 = "1";
const sc_lv<11> Return_Plate::ap_const_lv11_500 = "10100000000";
const sc_lv<10> Return_Plate::ap_const_lv10_1 = "1";
const sc_lv<11> Return_Plate::ap_const_lv11_1 = "1";
const sc_lv<32> Return_Plate::ap_const_lv32_2 = "10";

Return_Plate::Return_Plate(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln64_1_fu_333_p2);
    sensitive << ( i_0_i_reg_265 );

    SC_METHOD(thread_add_ln64_fu_313_p2);
    sensitive << ( indvar_flatten_reg_254 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( input_img_data_stream_0_V_empty_n );
    sensitive << ( input_img_data_stream_1_V_empty_n );
    sensitive << ( input_img_data_stream_2_V_empty_n );
    sensitive << ( output_plate_data_stream_0_V_full_n );
    sensitive << ( output_plate_data_stream_1_V_full_n );
    sensitive << ( output_plate_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( input_img_data_stream_0_V_empty_n );
    sensitive << ( input_img_data_stream_1_V_empty_n );
    sensitive << ( input_img_data_stream_2_V_empty_n );
    sensitive << ( output_plate_data_stream_0_V_full_n );
    sensitive << ( output_plate_data_stream_1_V_full_n );
    sensitive << ( output_plate_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( input_img_data_stream_0_V_empty_n );
    sensitive << ( input_img_data_stream_1_V_empty_n );
    sensitive << ( input_img_data_stream_2_V_empty_n );
    sensitive << ( output_plate_data_stream_0_V_full_n );
    sensitive << ( output_plate_data_stream_1_V_full_n );
    sensitive << ( output_plate_data_stream_2_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( input_img_data_stream_0_V_empty_n );
    sensitive << ( input_img_data_stream_1_V_empty_n );
    sensitive << ( input_img_data_stream_2_V_empty_n );
    sensitive << ( output_plate_data_stream_0_V_full_n );
    sensitive << ( output_plate_data_stream_1_V_full_n );
    sensitive << ( output_plate_data_stream_2_V_full_n );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln64_fu_307_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln64_fu_307_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_254 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln65_fu_319_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_0_i_reg_276 );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln68_1_fu_296_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ydown_read_reg_423 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln64_fu_287_p1 );

    SC_METHOD(thread_icmp_ln68_2_fu_379_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xleft_read_reg_407 );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln65_fu_375_p1 );

    SC_METHOD(thread_icmp_ln68_3_fu_384_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( xright_read_reg_412 );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln65_fu_375_p1 );

    SC_METHOD(thread_icmp_ln68_4_fu_343_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ytop_read_reg_417 );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln64_1_fu_339_p1 );

    SC_METHOD(thread_icmp_ln68_5_fu_348_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ydown_read_reg_423 );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln64_1_fu_339_p1 );

    SC_METHOD(thread_icmp_ln68_fu_291_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ytop_read_reg_417 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln64_fu_287_p1 );

    SC_METHOD(thread_input_img_data_stream_0_V_blk_n);
    sensitive << ( input_img_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln64_reg_429 );

    SC_METHOD(thread_input_img_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_input_img_data_stream_1_V_blk_n);
    sensitive << ( input_img_data_stream_1_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln64_reg_429 );

    SC_METHOD(thread_input_img_data_stream_1_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_input_img_data_stream_2_V_blk_n);
    sensitive << ( input_img_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln64_reg_429 );

    SC_METHOD(thread_input_img_data_stream_2_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln64_reg_429 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_j_fu_401_p2);
    sensitive << ( select_ln64_fu_325_p3 );

    SC_METHOD(thread_or_ln68_1_fu_301_p2);
    sensitive << ( icmp_ln68_fu_291_p2 );
    sensitive << ( icmp_ln68_1_fu_296_p2 );

    SC_METHOD(thread_or_ln68_2_fu_395_p2);
    sensitive << ( select_ln64_1_fu_359_p3 );
    sensitive << ( or_ln68_fu_389_p2 );

    SC_METHOD(thread_or_ln68_3_fu_353_p2);
    sensitive << ( icmp_ln68_4_fu_343_p2 );
    sensitive << ( icmp_ln68_5_fu_348_p2 );

    SC_METHOD(thread_or_ln68_fu_389_p2);
    sensitive << ( icmp_ln68_2_fu_379_p2 );
    sensitive << ( icmp_ln68_3_fu_384_p2 );

    SC_METHOD(thread_output_plate_data_stream_0_V_blk_n);
    sensitive << ( output_plate_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_output_plate_data_stream_0_V_din);
    sensitive << ( input_img_data_stream_0_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_output_plate_data_stream_0_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_output_plate_data_stream_1_V_blk_n);
    sensitive << ( output_plate_data_stream_1_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_output_plate_data_stream_1_V_din);
    sensitive << ( input_img_data_stream_1_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_output_plate_data_stream_1_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_output_plate_data_stream_2_V_blk_n);
    sensitive << ( output_plate_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( or_ln68_2_reg_443 );

    SC_METHOD(thread_output_plate_data_stream_2_V_din);
    sensitive << ( input_img_data_stream_2_V_dout );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_output_plate_data_stream_2_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( or_ln68_2_reg_443 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_select_ln64_1_fu_359_p3);
    sensitive << ( icmp_ln65_fu_319_p2 );
    sensitive << ( or_ln68_3_fu_353_p2 );
    sensitive << ( or_ln68_1_fu_301_p2 );

    SC_METHOD(thread_select_ln64_2_fu_367_p3);
    sensitive << ( i_0_i_reg_265 );
    sensitive << ( icmp_ln65_fu_319_p2 );
    sensitive << ( add_ln64_1_fu_333_p2 );

    SC_METHOD(thread_select_ln64_fu_325_p3);
    sensitive << ( j_0_i_reg_276 );
    sensitive << ( icmp_ln65_fu_319_p2 );

    SC_METHOD(thread_xleft_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );

    SC_METHOD(thread_xleft_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_xright_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xright_empty_n );

    SC_METHOD(thread_xright_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_ydown_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_ydown_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_ytop_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ytop_empty_n );

    SC_METHOD(thread_ytop_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );

    SC_METHOD(thread_zext_ln64_1_fu_339_p1);
    sensitive << ( add_ln64_1_fu_333_p2 );

    SC_METHOD(thread_zext_ln64_fu_287_p1);
    sensitive << ( i_0_i_reg_265 );

    SC_METHOD(thread_zext_ln65_fu_375_p1);
    sensitive << ( select_ln64_fu_325_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xleft_empty_n );
    sensitive << ( xright_empty_n );
    sensitive << ( ytop_empty_n );
    sensitive << ( ydown_empty_n );
    sensitive << ( icmp_ln64_fu_307_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Return_Plate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_img_data_stream_0_V_dout, "(port)input_img_data_stream_0_V_dout");
    sc_trace(mVcdFile, input_img_data_stream_0_V_empty_n, "(port)input_img_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, input_img_data_stream_0_V_read, "(port)input_img_data_stream_0_V_read");
    sc_trace(mVcdFile, input_img_data_stream_1_V_dout, "(port)input_img_data_stream_1_V_dout");
    sc_trace(mVcdFile, input_img_data_stream_1_V_empty_n, "(port)input_img_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, input_img_data_stream_1_V_read, "(port)input_img_data_stream_1_V_read");
    sc_trace(mVcdFile, input_img_data_stream_2_V_dout, "(port)input_img_data_stream_2_V_dout");
    sc_trace(mVcdFile, input_img_data_stream_2_V_empty_n, "(port)input_img_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, input_img_data_stream_2_V_read, "(port)input_img_data_stream_2_V_read");
    sc_trace(mVcdFile, output_plate_data_stream_0_V_din, "(port)output_plate_data_stream_0_V_din");
    sc_trace(mVcdFile, output_plate_data_stream_0_V_full_n, "(port)output_plate_data_stream_0_V_full_n");
    sc_trace(mVcdFile, output_plate_data_stream_0_V_write, "(port)output_plate_data_stream_0_V_write");
    sc_trace(mVcdFile, output_plate_data_stream_1_V_din, "(port)output_plate_data_stream_1_V_din");
    sc_trace(mVcdFile, output_plate_data_stream_1_V_full_n, "(port)output_plate_data_stream_1_V_full_n");
    sc_trace(mVcdFile, output_plate_data_stream_1_V_write, "(port)output_plate_data_stream_1_V_write");
    sc_trace(mVcdFile, output_plate_data_stream_2_V_din, "(port)output_plate_data_stream_2_V_din");
    sc_trace(mVcdFile, output_plate_data_stream_2_V_full_n, "(port)output_plate_data_stream_2_V_full_n");
    sc_trace(mVcdFile, output_plate_data_stream_2_V_write, "(port)output_plate_data_stream_2_V_write");
    sc_trace(mVcdFile, xleft_dout, "(port)xleft_dout");
    sc_trace(mVcdFile, xleft_empty_n, "(port)xleft_empty_n");
    sc_trace(mVcdFile, xleft_read, "(port)xleft_read");
    sc_trace(mVcdFile, xright_dout, "(port)xright_dout");
    sc_trace(mVcdFile, xright_empty_n, "(port)xright_empty_n");
    sc_trace(mVcdFile, xright_read, "(port)xright_read");
    sc_trace(mVcdFile, ytop_dout, "(port)ytop_dout");
    sc_trace(mVcdFile, ytop_empty_n, "(port)ytop_empty_n");
    sc_trace(mVcdFile, ytop_read, "(port)ytop_read");
    sc_trace(mVcdFile, ydown_dout, "(port)ydown_dout");
    sc_trace(mVcdFile, ydown_empty_n, "(port)ydown_empty_n");
    sc_trace(mVcdFile, ydown_read, "(port)ydown_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, input_img_data_stream_0_V_blk_n, "input_img_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln64_reg_429, "icmp_ln64_reg_429");
    sc_trace(mVcdFile, input_img_data_stream_1_V_blk_n, "input_img_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, input_img_data_stream_2_V_blk_n, "input_img_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, output_plate_data_stream_0_V_blk_n, "output_plate_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, or_ln68_2_reg_443, "or_ln68_2_reg_443");
    sc_trace(mVcdFile, output_plate_data_stream_1_V_blk_n, "output_plate_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, output_plate_data_stream_2_V_blk_n, "output_plate_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, xleft_blk_n, "xleft_blk_n");
    sc_trace(mVcdFile, xright_blk_n, "xright_blk_n");
    sc_trace(mVcdFile, ytop_blk_n, "ytop_blk_n");
    sc_trace(mVcdFile, ydown_blk_n, "ydown_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_254, "indvar_flatten_reg_254");
    sc_trace(mVcdFile, i_0_i_reg_265, "i_0_i_reg_265");
    sc_trace(mVcdFile, j_0_i_reg_276, "j_0_i_reg_276");
    sc_trace(mVcdFile, xleft_read_reg_407, "xleft_read_reg_407");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, xright_read_reg_412, "xright_read_reg_412");
    sc_trace(mVcdFile, ytop_read_reg_417, "ytop_read_reg_417");
    sc_trace(mVcdFile, ydown_read_reg_423, "ydown_read_reg_423");
    sc_trace(mVcdFile, icmp_ln64_fu_307_p2, "icmp_ln64_fu_307_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln64_fu_313_p2, "add_ln64_fu_313_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln64_2_fu_367_p3, "select_ln64_2_fu_367_p3");
    sc_trace(mVcdFile, or_ln68_2_fu_395_p2, "or_ln68_2_fu_395_p2");
    sc_trace(mVcdFile, j_fu_401_p2, "j_fu_401_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln64_fu_287_p1, "zext_ln64_fu_287_p1");
    sc_trace(mVcdFile, icmp_ln68_fu_291_p2, "icmp_ln68_fu_291_p2");
    sc_trace(mVcdFile, icmp_ln68_1_fu_296_p2, "icmp_ln68_1_fu_296_p2");
    sc_trace(mVcdFile, icmp_ln65_fu_319_p2, "icmp_ln65_fu_319_p2");
    sc_trace(mVcdFile, add_ln64_1_fu_333_p2, "add_ln64_1_fu_333_p2");
    sc_trace(mVcdFile, zext_ln64_1_fu_339_p1, "zext_ln64_1_fu_339_p1");
    sc_trace(mVcdFile, icmp_ln68_4_fu_343_p2, "icmp_ln68_4_fu_343_p2");
    sc_trace(mVcdFile, icmp_ln68_5_fu_348_p2, "icmp_ln68_5_fu_348_p2");
    sc_trace(mVcdFile, or_ln68_3_fu_353_p2, "or_ln68_3_fu_353_p2");
    sc_trace(mVcdFile, or_ln68_1_fu_301_p2, "or_ln68_1_fu_301_p2");
    sc_trace(mVcdFile, select_ln64_fu_325_p3, "select_ln64_fu_325_p3");
    sc_trace(mVcdFile, zext_ln65_fu_375_p1, "zext_ln65_fu_375_p1");
    sc_trace(mVcdFile, icmp_ln68_2_fu_379_p2, "icmp_ln68_2_fu_379_p2");
    sc_trace(mVcdFile, icmp_ln68_3_fu_384_p2, "icmp_ln68_3_fu_384_p2");
    sc_trace(mVcdFile, select_ln64_1_fu_359_p3, "select_ln64_1_fu_359_p3");
    sc_trace(mVcdFile, or_ln68_fu_389_p2, "or_ln68_fu_389_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Return_Plate::~Return_Plate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Return_Plate::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_307_p2.read()))) {
        i_0_i_reg_265 = select_ln64_2_fu_367_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        i_0_i_reg_265 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_307_p2.read()))) {
        indvar_flatten_reg_254 = add_ln64_fu_313_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        indvar_flatten_reg_254 = ap_const_lv20_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_307_p2.read()))) {
        j_0_i_reg_276 = j_fu_401_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        j_0_i_reg_276 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln64_reg_429 = icmp_ln64_fu_307_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_307_p2.read()))) {
        or_ln68_2_reg_443 = or_ln68_2_fu_395_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        xleft_read_reg_407 = xleft_dout.read();
        xright_read_reg_412 = xright_dout.read();
        ydown_read_reg_423 = ydown_dout.read();
        ytop_read_reg_417 = ytop_dout.read();
    }
}

void Return_Plate::thread_add_ln64_1_fu_333_p2() {
    add_ln64_1_fu_333_p2 = (!i_0_i_reg_265.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_0_i_reg_265.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Return_Plate::thread_add_ln64_fu_313_p2() {
    add_ln64_fu_313_p2 = (!indvar_flatten_reg_254.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(indvar_flatten_reg_254.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void Return_Plate::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void Return_Plate::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Return_Plate::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void Return_Plate::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Return_Plate::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_0_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_1_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_2_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_0_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_1_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_2_V_full_n.read()))));
}

void Return_Plate::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_0_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_1_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_2_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_0_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_1_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_2_V_full_n.read()))));
}

void Return_Plate::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_0_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_1_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_2_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_0_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_1_V_full_n.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_2_V_full_n.read()))));
}

void Return_Plate::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read()));
}

void Return_Plate::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Return_Plate::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_0_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_1_V_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, input_img_data_stream_2_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_0_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_1_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_plate_data_stream_2_V_full_n.read())));
}

void Return_Plate::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln64_fu_307_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void Return_Plate::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Return_Plate::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Return_Plate::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Return_Plate::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Return_Plate::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Return_Plate::thread_icmp_ln64_fu_307_p2() {
    icmp_ln64_fu_307_p2 = (!indvar_flatten_reg_254.read().is_01() || !ap_const_lv20_E1000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_254.read() == ap_const_lv20_E1000);
}

void Return_Plate::thread_icmp_ln65_fu_319_p2() {
    icmp_ln65_fu_319_p2 = (!j_0_i_reg_276.read().is_01() || !ap_const_lv11_500.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_reg_276.read() == ap_const_lv11_500);
}

void Return_Plate::thread_icmp_ln68_1_fu_296_p2() {
    icmp_ln68_1_fu_296_p2 = (!zext_ln64_fu_287_p1.read().is_01() || !ydown_read_reg_423.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln64_fu_287_p1.read()) > sc_bigint<32>(ydown_read_reg_423.read()));
}

void Return_Plate::thread_icmp_ln68_2_fu_379_p2() {
    icmp_ln68_2_fu_379_p2 = (!zext_ln65_fu_375_p1.read().is_01() || !xleft_read_reg_407.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln65_fu_375_p1.read()) < sc_bigint<32>(xleft_read_reg_407.read()));
}

void Return_Plate::thread_icmp_ln68_3_fu_384_p2() {
    icmp_ln68_3_fu_384_p2 = (!zext_ln65_fu_375_p1.read().is_01() || !xright_read_reg_412.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln65_fu_375_p1.read()) > sc_bigint<32>(xright_read_reg_412.read()));
}

void Return_Plate::thread_icmp_ln68_4_fu_343_p2() {
    icmp_ln68_4_fu_343_p2 = (!zext_ln64_1_fu_339_p1.read().is_01() || !ytop_read_reg_417.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln64_1_fu_339_p1.read()) < sc_bigint<32>(ytop_read_reg_417.read()));
}

void Return_Plate::thread_icmp_ln68_5_fu_348_p2() {
    icmp_ln68_5_fu_348_p2 = (!zext_ln64_1_fu_339_p1.read().is_01() || !ydown_read_reg_423.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln64_1_fu_339_p1.read()) > sc_bigint<32>(ydown_read_reg_423.read()));
}

void Return_Plate::thread_icmp_ln68_fu_291_p2() {
    icmp_ln68_fu_291_p2 = (!zext_ln64_fu_287_p1.read().is_01() || !ytop_read_reg_417.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln64_fu_287_p1.read()) < sc_bigint<32>(ytop_read_reg_417.read()));
}

void Return_Plate::thread_input_img_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0))) {
        input_img_data_stream_0_V_blk_n = input_img_data_stream_0_V_empty_n.read();
    } else {
        input_img_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_input_img_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        input_img_data_stream_0_V_read = ap_const_logic_1;
    } else {
        input_img_data_stream_0_V_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_input_img_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0))) {
        input_img_data_stream_1_V_blk_n = input_img_data_stream_1_V_empty_n.read();
    } else {
        input_img_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_input_img_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        input_img_data_stream_1_V_read = ap_const_logic_1;
    } else {
        input_img_data_stream_1_V_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_input_img_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0))) {
        input_img_data_stream_2_V_blk_n = input_img_data_stream_2_V_empty_n.read();
    } else {
        input_img_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_input_img_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_reg_429.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        input_img_data_stream_2_V_read = ap_const_logic_1;
    } else {
        input_img_data_stream_2_V_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_j_fu_401_p2() {
    j_fu_401_p2 = (!select_ln64_fu_325_p3.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(select_ln64_fu_325_p3.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void Return_Plate::thread_or_ln68_1_fu_301_p2() {
    or_ln68_1_fu_301_p2 = (icmp_ln68_fu_291_p2.read() | icmp_ln68_1_fu_296_p2.read());
}

void Return_Plate::thread_or_ln68_2_fu_395_p2() {
    or_ln68_2_fu_395_p2 = (select_ln64_1_fu_359_p3.read() | or_ln68_fu_389_p2.read());
}

void Return_Plate::thread_or_ln68_3_fu_353_p2() {
    or_ln68_3_fu_353_p2 = (icmp_ln68_4_fu_343_p2.read() | icmp_ln68_5_fu_348_p2.read());
}

void Return_Plate::thread_or_ln68_fu_389_p2() {
    or_ln68_fu_389_p2 = (icmp_ln68_2_fu_379_p2.read() | icmp_ln68_3_fu_384_p2.read());
}

void Return_Plate::thread_output_plate_data_stream_0_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()))) {
        output_plate_data_stream_0_V_blk_n = output_plate_data_stream_0_V_full_n.read();
    } else {
        output_plate_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_output_plate_data_stream_0_V_din() {
    output_plate_data_stream_0_V_din = input_img_data_stream_0_V_dout.read();
}

void Return_Plate::thread_output_plate_data_stream_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_plate_data_stream_0_V_write = ap_const_logic_1;
    } else {
        output_plate_data_stream_0_V_write = ap_const_logic_0;
    }
}

void Return_Plate::thread_output_plate_data_stream_1_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()))) {
        output_plate_data_stream_1_V_blk_n = output_plate_data_stream_1_V_full_n.read();
    } else {
        output_plate_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_output_plate_data_stream_1_V_din() {
    output_plate_data_stream_1_V_din = input_img_data_stream_1_V_dout.read();
}

void Return_Plate::thread_output_plate_data_stream_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_plate_data_stream_1_V_write = ap_const_logic_1;
    } else {
        output_plate_data_stream_1_V_write = ap_const_logic_0;
    }
}

void Return_Plate::thread_output_plate_data_stream_2_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()))) {
        output_plate_data_stream_2_V_blk_n = output_plate_data_stream_2_V_full_n.read();
    } else {
        output_plate_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_output_plate_data_stream_2_V_din() {
    output_plate_data_stream_2_V_din = input_img_data_stream_2_V_dout.read();
}

void Return_Plate::thread_output_plate_data_stream_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_ln68_2_reg_443.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_plate_data_stream_2_V_write = ap_const_logic_1;
    } else {
        output_plate_data_stream_2_V_write = ap_const_logic_0;
    }
}

void Return_Plate::thread_select_ln64_1_fu_359_p3() {
    select_ln64_1_fu_359_p3 = (!icmp_ln65_fu_319_p2.read()[0].is_01())? sc_lv<1>(): ((icmp_ln65_fu_319_p2.read()[0].to_bool())? or_ln68_3_fu_353_p2.read(): or_ln68_1_fu_301_p2.read());
}

void Return_Plate::thread_select_ln64_2_fu_367_p3() {
    select_ln64_2_fu_367_p3 = (!icmp_ln65_fu_319_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln65_fu_319_p2.read()[0].to_bool())? add_ln64_1_fu_333_p2.read(): i_0_i_reg_265.read());
}

void Return_Plate::thread_select_ln64_fu_325_p3() {
    select_ln64_fu_325_p3 = (!icmp_ln65_fu_319_p2.read()[0].is_01())? sc_lv<11>(): ((icmp_ln65_fu_319_p2.read()[0].to_bool())? ap_const_lv11_0: j_0_i_reg_276.read());
}

void Return_Plate::thread_xleft_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xleft_blk_n = xleft_empty_n.read();
    } else {
        xleft_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_xleft_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        xleft_read = ap_const_logic_1;
    } else {
        xleft_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_xright_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        xright_blk_n = xright_empty_n.read();
    } else {
        xright_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_xright_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        xright_read = ap_const_logic_1;
    } else {
        xright_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_ydown_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ydown_blk_n = ydown_empty_n.read();
    } else {
        ydown_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_ydown_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        ydown_read = ap_const_logic_1;
    } else {
        ydown_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_ytop_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ytop_blk_n = ytop_empty_n.read();
    } else {
        ytop_blk_n = ap_const_logic_1;
    }
}

void Return_Plate::thread_ytop_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
        ytop_read = ap_const_logic_1;
    } else {
        ytop_read = ap_const_logic_0;
    }
}

void Return_Plate::thread_zext_ln64_1_fu_339_p1() {
    zext_ln64_1_fu_339_p1 = esl_zext<32,10>(add_ln64_1_fu_333_p2.read());
}

void Return_Plate::thread_zext_ln64_fu_287_p1() {
    zext_ln64_fu_287_p1 = esl_zext<32,10>(i_0_i_reg_265.read());
}

void Return_Plate::thread_zext_ln65_fu_375_p1() {
    zext_ln65_fu_375_p1 = esl_zext<32,11>(select_ln64_fu_325_p3.read());
}

void Return_Plate::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, xleft_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, xright_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ytop_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ydown_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln64_fu_307_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln64_fu_307_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

