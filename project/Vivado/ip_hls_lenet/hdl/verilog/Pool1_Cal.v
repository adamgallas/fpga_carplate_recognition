// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Pool1_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer2_V_address0,
        layer2_V_ce0,
        layer2_V_q0,
        layer2_V_address1,
        layer2_V_ce1,
        layer2_V_q1,
        layer3_V_address0,
        layer3_V_ce0,
        layer3_V_we0,
        layer3_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] layer2_V_address0;
output   layer2_V_ce0;
input  [11:0] layer2_V_q0;
output  [12:0] layer2_V_address1;
output   layer2_V_ce1;
input  [11:0] layer2_V_q1;
output  [10:0] layer3_V_address0;
output   layer3_V_ce0;
output   layer3_V_we0;
output  [11:0] layer3_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] layer2_V_address0;
reg layer2_V_ce0;
reg[12:0] layer2_V_address1;
reg layer2_V_ce1;
reg layer3_V_ce0;
reg layer3_V_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] in_d_fu_192_p2;
reg   [2:0] in_d_reg_547;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln1494_fu_228_p1;
reg  signed [9:0] sext_ln1494_reg_552;
wire   [0:0] icmp_ln103_fu_186_p2;
wire  signed [8:0] sext_ln203_fu_262_p1;
reg  signed [8:0] sext_ln203_reg_558;
wire   [63:0] sub_ln1494_1_fu_305_p2;
reg   [63:0] sub_ln1494_1_reg_566;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln105_fu_266_p2;
wire   [13:0] trunc_ln109_fu_311_p1;
reg   [13:0] trunc_ln109_reg_571;
wire   [63:0] sub_ln1494_2_fu_354_p2;
reg   [63:0] sub_ln1494_2_reg_577;
wire   [13:0] trunc_ln110_fu_360_p1;
reg   [13:0] trunc_ln110_reg_582;
wire   [11:0] sub_ln203_1_fu_407_p2;
reg   [11:0] sub_ln203_1_reg_588;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln107_fu_413_p2;
wire   [13:0] add_ln1494_11_fu_433_p2;
reg   [13:0] add_ln1494_11_reg_601;
wire   [4:0] or_ln108_fu_438_p2;
reg   [4:0] or_ln108_reg_606;
wire   [13:0] add_ln1494_13_fu_458_p2;
reg   [13:0] add_ln1494_13_reg_617;
wire   [4:0] i_fu_463_p2;
wire    ap_CS_fsm_state5;
wire   [63:0] add_ln203_6_fu_488_p2;
reg   [63:0] add_ln203_6_reg_637;
wire   [63:0] add_ln203_7_fu_504_p2;
reg   [63:0] add_ln203_7_reg_643;
wire    ap_CS_fsm_state6;
wire   [11:0] add_ln203_8_fu_523_p2;
reg   [11:0] add_ln203_8_reg_649;
wire   [4:0] j_fu_528_p2;
reg   [4:0] j_reg_654;
wire    ap_CS_fsm_state7;
wire   [63:0] select_ln203_fu_534_p3;
reg   [63:0] select_ln203_reg_669;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [2:0] in_d_0_reg_145;
reg   [4:0] i_0_reg_156;
reg   [4:0] j_0_reg_168;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln1494_19_fu_428_p1;
wire   [63:0] zext_ln1494_22_fu_453_p1;
wire   [63:0] zext_ln1494_20_fu_469_p1;
wire   [63:0] zext_ln1494_23_fu_473_p1;
wire   [63:0] zext_ln203_8_fu_540_p1;
wire   [7:0] tmp_s_fu_198_p3;
wire   [4:0] tmp_1_fu_210_p3;
wire   [8:0] zext_ln1494_fu_206_p1;
wire   [8:0] zext_ln1494_15_fu_218_p1;
wire   [8:0] sub_ln1494_fu_222_p2;
wire   [6:0] tmp_2_fu_232_p3;
wire   [3:0] tmp_3_fu_244_p3;
wire   [7:0] zext_ln203_fu_240_p1;
wire   [7:0] zext_ln203_5_fu_252_p1;
wire   [7:0] sub_ln203_fu_256_p2;
wire   [9:0] zext_ln1494_16_fu_272_p1;
wire   [9:0] add_ln1494_fu_276_p2;
wire   [14:0] tmp_13_fu_281_p3;
wire   [11:0] tmp_14_fu_293_p3;
wire  signed [63:0] sext_ln1494_1_fu_289_p1;
wire  signed [63:0] sext_ln1494_2_fu_301_p1;
wire   [4:0] or_ln109_fu_315_p2;
wire   [9:0] zext_ln1494_17_fu_321_p1;
wire   [9:0] add_ln1494_9_fu_325_p2;
wire   [14:0] tmp_15_fu_330_p3;
wire   [11:0] tmp_16_fu_342_p3;
wire  signed [63:0] sext_ln1494_3_fu_338_p1;
wire  signed [63:0] sext_ln1494_4_fu_350_p1;
wire   [3:0] tmp_17_fu_364_p4;
wire   [8:0] zext_ln203_6_fu_374_p1;
wire   [8:0] add_ln203_fu_378_p2;
wire   [7:0] trunc_ln203_fu_383_p1;
wire   [9:0] tmp_18_fu_395_p3;
wire   [11:0] p_shl4_cast_fu_387_p3;
wire  signed [11:0] sext_ln203_1_fu_403_p1;
wire   [13:0] zext_ln1494_18_fu_419_p1;
wire   [13:0] add_ln1494_10_fu_423_p2;
wire   [13:0] zext_ln1494_21_fu_444_p1;
wire   [13:0] add_ln1494_12_fu_448_p2;
wire   [0:0] grp_fu_180_p2;
wire   [4:0] select_ln108_fu_477_p3;
wire   [63:0] zext_ln108_fu_484_p1;
wire   [4:0] select_ln109_fu_493_p3;
wire   [63:0] zext_ln109_fu_500_p1;
wire   [3:0] tmp_19_fu_509_p4;
wire   [11:0] zext_ln203_7_fu_519_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_156 <= i_fu_463_p2;
    end else if (((icmp_ln103_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_156 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_d_0_reg_145 <= in_d_reg_547;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_d_0_reg_145 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_168 <= j_reg_654;
    end else if (((icmp_ln105_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_168 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln107_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln1494_11_reg_601 <= add_ln1494_11_fu_433_p2;
        add_ln1494_13_reg_617[13 : 1] <= add_ln1494_13_fu_458_p2[13 : 1];
        or_ln108_reg_606[4 : 1] <= or_ln108_fu_438_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln203_6_reg_637 <= add_ln203_6_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln203_7_reg_643 <= add_ln203_7_fu_504_p2;
        add_ln203_8_reg_649 <= add_ln203_8_fu_523_p2;
        j_reg_654 <= j_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_d_reg_547 <= in_d_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        select_ln203_reg_669 <= select_ln203_fu_534_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln1494_reg_552[9 : 2] <= sext_ln1494_fu_228_p1[9 : 2];
        sext_ln203_reg_558[8 : 1] <= sext_ln203_fu_262_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln1494_1_reg_566[63 : 2] <= sub_ln1494_1_fu_305_p2[63 : 2];
        sub_ln1494_2_reg_577[63 : 3] <= sub_ln1494_2_fu_354_p2[63 : 3];
        sub_ln203_1_reg_588[11 : 1] <= sub_ln203_1_fu_407_p2[11 : 1];
        trunc_ln109_reg_571[13 : 2] <= trunc_ln109_fu_311_p1[13 : 2];
        trunc_ln110_reg_582[13 : 3] <= trunc_ln110_fu_360_p1[13 : 3];
    end
end

always @ (*) begin
    if ((((icmp_ln103_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln103_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer2_V_address0 = select_ln203_reg_669;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        layer2_V_address0 = add_ln203_6_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer2_V_address0 = zext_ln1494_20_fu_469_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer2_V_address0 = zext_ln1494_19_fu_428_p1;
    end else begin
        layer2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        layer2_V_address1 = add_ln203_7_reg_643;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        layer2_V_address1 = zext_ln1494_23_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        layer2_V_address1 = zext_ln1494_22_fu_453_p1;
    end else begin
        layer2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        layer2_V_ce0 = 1'b1;
    end else begin
        layer2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        layer2_V_ce1 = 1'b1;
    end else begin
        layer2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer3_V_ce0 = 1'b1;
    end else begin
        layer3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer3_V_we0 = 1'b1;
    end else begin
        layer3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln103_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln105_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln107_fu_413_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1494_10_fu_423_p2 = (trunc_ln109_reg_571 + zext_ln1494_18_fu_419_p1);

assign add_ln1494_11_fu_433_p2 = (trunc_ln110_reg_582 + zext_ln1494_18_fu_419_p1);

assign add_ln1494_12_fu_448_p2 = (trunc_ln109_reg_571 + zext_ln1494_21_fu_444_p1);

assign add_ln1494_13_fu_458_p2 = (trunc_ln110_reg_582 + zext_ln1494_21_fu_444_p1);

assign add_ln1494_9_fu_325_p2 = ($signed(sext_ln1494_reg_552) + $signed(zext_ln1494_17_fu_321_p1));

assign add_ln1494_fu_276_p2 = ($signed(sext_ln1494_reg_552) + $signed(zext_ln1494_16_fu_272_p1));

assign add_ln203_6_fu_488_p2 = (sub_ln1494_1_reg_566 + zext_ln108_fu_484_p1);

assign add_ln203_7_fu_504_p2 = (sub_ln1494_2_reg_577 + zext_ln109_fu_500_p1);

assign add_ln203_8_fu_523_p2 = (sub_ln203_1_reg_588 + zext_ln203_7_fu_519_p1);

assign add_ln203_fu_378_p2 = ($signed(sext_ln203_reg_558) + $signed(zext_ln203_6_fu_374_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_180_p2 = (($signed(layer2_V_q0) > $signed(layer2_V_q1)) ? 1'b1 : 1'b0);

assign i_fu_463_p2 = (i_0_reg_156 + 5'd2);

assign icmp_ln103_fu_186_p2 = ((in_d_0_reg_145 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_266_p2 = ((i_0_reg_156 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_413_p2 = ((j_0_reg_168 < 5'd28) ? 1'b1 : 1'b0);

assign in_d_fu_192_p2 = (in_d_0_reg_145 + 3'd1);

assign j_fu_528_p2 = (j_0_reg_168 + 5'd2);

assign layer3_V_address0 = zext_ln203_8_fu_540_p1;

assign layer3_V_d0 = layer2_V_q0;

assign or_ln108_fu_438_p2 = (j_0_reg_168 | 5'd1);

assign or_ln109_fu_315_p2 = (i_0_reg_156 | 5'd1);

assign p_shl4_cast_fu_387_p3 = {{trunc_ln203_fu_383_p1}, {4'd0}};

assign select_ln108_fu_477_p3 = ((grp_fu_180_p2[0:0] === 1'b1) ? j_0_reg_168 : or_ln108_reg_606);

assign select_ln109_fu_493_p3 = ((grp_fu_180_p2[0:0] === 1'b1) ? j_0_reg_168 : or_ln108_reg_606);

assign select_ln203_fu_534_p3 = ((grp_fu_180_p2[0:0] === 1'b1) ? add_ln203_6_reg_637 : add_ln203_7_reg_643);

assign sext_ln1494_1_fu_289_p1 = $signed(tmp_13_fu_281_p3);

assign sext_ln1494_2_fu_301_p1 = $signed(tmp_14_fu_293_p3);

assign sext_ln1494_3_fu_338_p1 = $signed(tmp_15_fu_330_p3);

assign sext_ln1494_4_fu_350_p1 = $signed(tmp_16_fu_342_p3);

assign sext_ln1494_fu_228_p1 = $signed(sub_ln1494_fu_222_p2);

assign sext_ln203_1_fu_403_p1 = $signed(tmp_18_fu_395_p3);

assign sext_ln203_fu_262_p1 = $signed(sub_ln203_fu_256_p2);

assign sub_ln1494_1_fu_305_p2 = ($signed(sext_ln1494_1_fu_289_p1) - $signed(sext_ln1494_2_fu_301_p1));

assign sub_ln1494_2_fu_354_p2 = ($signed(sext_ln1494_3_fu_338_p1) - $signed(sext_ln1494_4_fu_350_p1));

assign sub_ln1494_fu_222_p2 = (zext_ln1494_fu_206_p1 - zext_ln1494_15_fu_218_p1);

assign sub_ln203_1_fu_407_p2 = ($signed(p_shl4_cast_fu_387_p3) - $signed(sext_ln203_1_fu_403_p1));

assign sub_ln203_fu_256_p2 = (zext_ln203_fu_240_p1 - zext_ln203_5_fu_252_p1);

assign tmp_13_fu_281_p3 = {{add_ln1494_fu_276_p2}, {5'd0}};

assign tmp_14_fu_293_p3 = {{add_ln1494_fu_276_p2}, {2'd0}};

assign tmp_15_fu_330_p3 = {{add_ln1494_9_fu_325_p2}, {5'd0}};

assign tmp_16_fu_342_p3 = {{add_ln1494_9_fu_325_p2}, {2'd0}};

assign tmp_17_fu_364_p4 = {{i_0_reg_156[4:1]}};

assign tmp_18_fu_395_p3 = {{add_ln203_fu_378_p2}, {1'd0}};

assign tmp_19_fu_509_p4 = {{j_0_reg_168[4:1]}};

assign tmp_1_fu_210_p3 = {{in_d_0_reg_145}, {2'd0}};

assign tmp_2_fu_232_p3 = {{in_d_0_reg_145}, {4'd0}};

assign tmp_3_fu_244_p3 = {{in_d_0_reg_145}, {1'd0}};

assign tmp_s_fu_198_p3 = {{in_d_0_reg_145}, {5'd0}};

assign trunc_ln109_fu_311_p1 = sub_ln1494_1_fu_305_p2[13:0];

assign trunc_ln110_fu_360_p1 = sub_ln1494_2_fu_354_p2[13:0];

assign trunc_ln203_fu_383_p1 = add_ln203_fu_378_p2[7:0];

assign zext_ln108_fu_484_p1 = select_ln108_fu_477_p3;

assign zext_ln109_fu_500_p1 = select_ln109_fu_493_p3;

assign zext_ln1494_15_fu_218_p1 = tmp_1_fu_210_p3;

assign zext_ln1494_16_fu_272_p1 = i_0_reg_156;

assign zext_ln1494_17_fu_321_p1 = or_ln109_fu_315_p2;

assign zext_ln1494_18_fu_419_p1 = j_0_reg_168;

assign zext_ln1494_19_fu_428_p1 = add_ln1494_10_fu_423_p2;

assign zext_ln1494_20_fu_469_p1 = add_ln1494_11_reg_601;

assign zext_ln1494_21_fu_444_p1 = or_ln108_fu_438_p2;

assign zext_ln1494_22_fu_453_p1 = add_ln1494_12_fu_448_p2;

assign zext_ln1494_23_fu_473_p1 = add_ln1494_13_reg_617;

assign zext_ln1494_fu_206_p1 = tmp_s_fu_198_p3;

assign zext_ln203_5_fu_252_p1 = tmp_3_fu_244_p3;

assign zext_ln203_6_fu_374_p1 = tmp_17_fu_364_p4;

assign zext_ln203_7_fu_519_p1 = tmp_19_fu_509_p4;

assign zext_ln203_8_fu_540_p1 = add_ln203_8_reg_649;

assign zext_ln203_fu_240_p1 = tmp_2_fu_232_p3;

always @ (posedge ap_clk) begin
    sext_ln1494_reg_552[1:0] <= 2'b00;
    sext_ln203_reg_558[0] <= 1'b0;
    sub_ln1494_1_reg_566[1:0] <= 2'b00;
    trunc_ln109_reg_571[1:0] <= 2'b00;
    sub_ln1494_2_reg_577[2:0] <= 3'b100;
    trunc_ln110_reg_582[2:0] <= 3'b100;
    sub_ln203_1_reg_588[0] <= 1'b0;
    or_ln108_reg_606[0] <= 1'b1;
    add_ln1494_13_reg_617[0] <= 1'b1;
end

endmodule //Pool1_Cal
