-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Fullc1_Cal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flatten2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    flatten2_V_ce0 : OUT STD_LOGIC;
    flatten2_V_we0 : OUT STD_LOGIC;
    flatten2_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    flatten2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    flatten1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flatten1_V_ce0 : OUT STD_LOGIC;
    flatten1_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Fullc1_Cal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv16_190 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110010000";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias1_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias1_V_ce0 : STD_LOGIC;
    signal bias1_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal weight1_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight1_V_ce0 : STD_LOGIC;
    signal weight1_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_175 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln177_fu_180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln177_reg_483 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_192_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_491 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln177_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flatten2_V_addr_reg_501 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_215_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln180_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight1_V_load_reg_524 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal flatten1_V_load_reg_529 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_475_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_reg_534 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln1192_fu_247_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1192_reg_540 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln718_fu_250_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln718_reg_545 : STD_LOGIC_VECTOR (4 downto 0);
    signal overflow_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal underflow_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_my_tanh_fu_165_ap_start : STD_LOGIC;
    signal grp_my_tanh_fu_165_ap_done : STD_LOGIC;
    signal grp_my_tanh_fu_165_ap_idle : STD_LOGIC;
    signal grp_my_tanh_fu_165_ap_ready : STD_LOGIC;
    signal grp_my_tanh_fu_165_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_131 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_reg_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_my_tanh_fu_165_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln178_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_2_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_204_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_14_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln203_1_fu_470_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1116_fu_226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1116_fu_230_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_253_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_fu_261_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_265_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_265_p2 : signal is "no";
    signal add_ln1192_2_fu_270_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_13_fu_283_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_2_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_364_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component my_tanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Lenet_HLS_mul_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Fullc1_Cal_bias1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component Fullc1_Cal_weighthbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    bias1_V_U : component Fullc1_Cal_bias1_V
    generic map (
        DataWidth => 3,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias1_V_address0,
        ce0 => bias1_V_ce0,
        q0 => bias1_V_q0);

    weight1_V_U : component Fullc1_Cal_weighthbi
    generic map (
        DataWidth => 6,
        AddressRange => 33600,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight1_V_address0,
        ce0 => weight1_V_ce0,
        q0 => weight1_V_q0);

    grp_my_tanh_fu_165 : component my_tanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_my_tanh_fu_165_ap_start,
        ap_done => grp_my_tanh_fu_165_ap_done,
        ap_idle => grp_my_tanh_fu_165_ap_idle,
        ap_ready => grp_my_tanh_fu_165_ap_ready,
        x_V => reg_175,
        ap_return => grp_my_tanh_fu_165_ap_return);

    Lenet_HLS_mul_mulibs_U23 : component Lenet_HLS_mul_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 6,
        dout_WIDTH => 19)
    port map (
        din0 => flatten1_V_load_reg_529,
        din1 => weight1_V_load_reg_524,
        dout => r_V_fu_475_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_my_tanh_fu_165_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_my_tanh_fu_165_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_my_tanh_fu_165_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_my_tanh_fu_165_ap_ready = ap_const_logic_1)) then 
                    grp_my_tanh_fu_165_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_my_tanh_fu_165_ap_done = ap_const_logic_1))) then 
                i_0_reg_131 <= i_reg_491;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_131 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_0_reg_154 <= j_reg_509;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_154 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_my_tanh_fu_165_ap_done = ap_const_logic_1))) then 
                phi_mul_reg_142 <= add_ln177_reg_483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_142 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln177_reg_483 <= add_ln177_fu_180_p2;
                i_reg_491 <= i_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                flatten1_V_load_reg_529 <= flatten1_V_q0;
                weight1_V_load_reg_524 <= weight1_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln177_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                flatten2_V_addr_reg_501 <= zext_ln178_fu_198_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_509 <= j_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                or_ln340_reg_558 <= or_ln340_fu_464_p2;
                overflow_reg_550 <= overflow_fu_434_p2;
                underflow_reg_554 <= underflow_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_V_reg_534 <= r_V_fu_475_p2;
                trunc_ln1192_reg_540 <= trunc_ln1192_fu_247_p1;
                trunc_ln718_reg_545 <= trunc_ln718_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_175 <= flatten2_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln177_fu_186_p2, ap_CS_fsm_state4, icmp_ln180_fu_209_p2, grp_my_tanh_fu_165_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln177_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln180_fu_209_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_my_tanh_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Range2_all_ones_fu_364_p3 <= ret_V_fu_265_p2(18 downto 18);
    add_ln1116_fu_230_p2 <= std_logic_vector(unsigned(phi_mul_reg_142) + unsigned(zext_ln1116_fu_226_p1));
    add_ln1192_2_fu_270_p2 <= std_logic_vector(signed(lhs_V_fu_253_p3) + signed(trunc_ln1192_reg_540));
    add_ln177_fu_180_p2 <= std_logic_vector(unsigned(phi_mul_reg_142) + unsigned(ap_const_lv16_190));
    and_ln415_fu_319_p2 <= (tmp_38_fu_312_p3 and r_fu_306_p2);
    and_ln781_fu_410_p2 <= (carry_2_fu_350_p2 and Range2_all_ones_fu_364_p3);
    and_ln786_fu_440_p2 <= (p_Result_21_fu_356_p3 and deleted_ones_fu_404_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln177_fu_186_p2)
    begin
        if ((((icmp_ln177_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln177_fu_186_p2)
    begin
        if (((icmp_ln177_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias1_V_address0 <= zext_ln178_fu_198_p1(7 - 1 downto 0);

    bias1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias1_V_ce0 <= ap_const_logic_1;
        else 
            bias1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_2_fu_350_p2 <= (xor_ln416_3_fu_344_p2 and p_Result_20_fu_298_p3);
    deleted_ones_fu_404_p2 <= (or_ln416_fu_398_p2 and Range2_all_ones_fu_364_p3);
    flatten1_V_address0 <= zext_ln181_fu_221_p1(9 - 1 downto 0);

    flatten1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flatten1_V_ce0 <= ap_const_logic_1;
        else 
            flatten1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatten2_V_address0 <= flatten2_V_addr_reg_501;

    flatten2_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, overflow_reg_550, ap_CS_fsm_state7, underflow_reg_554, or_ln340_reg_558, grp_my_tanh_fu_165_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (overflow_reg_550 = ap_const_lv1_1)) or ((overflow_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (underflow_reg_554 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_my_tanh_fu_165_ap_done = ap_const_logic_1)))) then 
            flatten2_V_ce0 <= ap_const_logic_1;
        else 
            flatten2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten2_V_d0_assign_proc : process(overflow_reg_550, ap_CS_fsm_state7, underflow_reg_554, or_ln340_reg_558, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state8, sext_ln203_fu_204_p1, p_Val2_14_fu_329_p2, sext_ln203_1_fu_470_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            flatten2_V_d0 <= sext_ln203_1_fu_470_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (overflow_reg_550 = ap_const_lv1_1))) then 
            flatten2_V_d0 <= ap_const_lv12_7FF;
        elsif (((overflow_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (underflow_reg_554 = ap_const_lv1_1))) then 
            flatten2_V_d0 <= ap_const_lv12_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            flatten2_V_d0 <= p_Val2_14_fu_329_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten2_V_d0 <= sext_ln203_fu_204_p1;
        else 
            flatten2_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    flatten2_V_we0_assign_proc : process(overflow_reg_550, ap_CS_fsm_state7, underflow_reg_554, or_ln340_reg_558, grp_my_tanh_fu_165_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (overflow_reg_550 = ap_const_lv1_1)) or ((overflow_reg_550 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (or_ln340_reg_558 = ap_const_lv1_1) and (underflow_reg_554 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_my_tanh_fu_165_ap_done = ap_const_logic_1)))) then 
            flatten2_V_we0 <= ap_const_logic_1;
        else 
            flatten2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_my_tanh_fu_165_ap_start <= grp_my_tanh_fu_165_ap_start_reg;
    i_fu_192_p2 <= std_logic_vector(unsigned(i_0_reg_131) + unsigned(ap_const_lv7_1));
    icmp_ln177_fu_186_p2 <= "1" when (i_0_reg_131 = ap_const_lv7_54) else "0";
    icmp_ln180_fu_209_p2 <= "1" when (j_0_reg_154 = ap_const_lv9_190) else "0";
    j_fu_215_p2 <= std_logic_vector(unsigned(j_0_reg_154) + unsigned(ap_const_lv9_1));
    lhs_V_fu_253_p3 <= (reg_175 & ap_const_lv6_0);
    or_ln340_fu_464_p2 <= (underflow_fu_458_p2 or overflow_fu_434_p2);
    or_ln416_2_fu_392_p2 <= (xor_ln416_4_fu_386_p2 or tmp_39_fu_336_p3);
    or_ln416_fu_398_p2 <= (xor_ln779_fu_380_p2 or or_ln416_2_fu_392_p2);
    or_ln785_fu_422_p2 <= (xor_ln785_fu_416_p2 or p_Result_21_fu_356_p3);
    or_ln786_fu_446_p2 <= (and_ln786_fu_440_p2 or and_ln781_fu_410_p2);
    overflow_fu_434_p2 <= (xor_ln785_2_fu_428_p2 and or_ln785_fu_422_p2);
    p_Result_20_fu_298_p3 <= add_ln1192_2_fu_270_p2(17 downto 17);
    p_Result_21_fu_356_p3 <= p_Val2_14_fu_329_p2(11 downto 11);
    p_Result_s_fu_275_p3 <= ret_V_fu_265_p2(18 downto 18);
    p_Val2_13_fu_283_p4 <= add_ln1192_2_fu_270_p2(17 downto 6);
    p_Val2_14_fu_329_p2 <= std_logic_vector(unsigned(zext_ln415_fu_325_p1) + unsigned(p_Val2_13_fu_283_p4));
    r_1_fu_293_p2 <= "0" when (trunc_ln718_reg_545 = ap_const_lv5_0) else "1";
    r_fu_306_p2 <= (r_1_fu_293_p2 or p_Result_s_fu_275_p3);
    ret_V_fu_265_p2 <= std_logic_vector(signed(r_V_reg_534) + signed(sext_ln728_fu_261_p1));
        sext_ln203_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_my_tanh_fu_165_ap_return),12));

        sext_ln203_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias1_V_q0),12));

        sext_ln728_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_253_p3),19));

    tmp_38_fu_312_p3 <= r_V_reg_534(5 downto 5);
    tmp_39_fu_336_p3 <= p_Val2_14_fu_329_p2(11 downto 11);
    tmp_42_fu_372_p3 <= ret_V_fu_265_p2(18 downto 18);
    trunc_ln1192_fu_247_p1 <= r_V_fu_475_p2(18 - 1 downto 0);
    trunc_ln718_fu_250_p1 <= r_V_fu_475_p2(5 - 1 downto 0);
    underflow_fu_458_p2 <= (xor_ln786_fu_452_p2 and p_Result_s_fu_275_p3);
    weight1_V_address0 <= zext_ln1116_2_fu_236_p1(16 - 1 downto 0);

    weight1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weight1_V_ce0 <= ap_const_logic_1;
        else 
            weight1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln416_3_fu_344_p2 <= (tmp_39_fu_336_p3 xor ap_const_lv1_1);
    xor_ln416_4_fu_386_p2 <= (p_Result_20_fu_298_p3 xor ap_const_lv1_1);
    xor_ln779_fu_380_p2 <= (tmp_42_fu_372_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_428_p2 <= (p_Result_s_fu_275_p3 xor ap_const_lv1_1);
    xor_ln785_fu_416_p2 <= (carry_2_fu_350_p2 xor Range2_all_ones_fu_364_p3);
    xor_ln786_fu_452_p2 <= (or_ln786_fu_446_p2 xor ap_const_lv1_1);
    zext_ln1116_2_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_fu_230_p2),64));
    zext_ln1116_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_154),16));
    zext_ln178_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_131),64));
    zext_ln181_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_154),64));
    zext_ln415_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_fu_319_p2),12));
end behav;
