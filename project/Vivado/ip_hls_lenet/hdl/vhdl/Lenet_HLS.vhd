-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lenet_HLS is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_layer_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_layer_TVALID : IN STD_LOGIC;
    input_layer_TREADY : OUT STD_LOGIC;
    input_layer_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    input_layer_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    input_layer_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_layer_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_layer_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_layer_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Lenet_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Lenet_HLS,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.747000,HLS_SYN_LAT=2946242,HLS_SYN_TPT=none,HLS_SYN_MEM=45,HLS_SYN_DSP=4,HLS_SYN_FF=6913,HLS_SYN_LUT=12940,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_406FE00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001101111111000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_FFA : STD_LOGIC_VECTOR (11 downto 0) := "111111111010";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_FF9 : STD_LOGIC_VECTOR (11 downto 0) := "111111111001";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_V_ce0 : STD_LOGIC;
    signal layer1_V_we0 : STD_LOGIC;
    signal layer1_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal layer2_V_ce0 : STD_LOGIC;
    signal layer2_V_we0 : STD_LOGIC;
    signal layer2_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_V_ce1 : STD_LOGIC;
    signal layer2_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer3_V_ce0 : STD_LOGIC;
    signal layer3_V_we0 : STD_LOGIC;
    signal layer3_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer4_V_ce0 : STD_LOGIC;
    signal layer4_V_we0 : STD_LOGIC;
    signal layer4_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer4_V_ce1 : STD_LOGIC;
    signal layer4_V_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer5_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer5_V_ce0 : STD_LOGIC;
    signal layer5_V_we0 : STD_LOGIC;
    signal layer5_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal flatten1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flatten1_V_ce0 : STD_LOGIC;
    signal flatten1_V_we0 : STD_LOGIC;
    signal flatten1_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal flatten2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal flatten2_V_ce0 : STD_LOGIC;
    signal flatten2_V_we0 : STD_LOGIC;
    signal flatten2_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal flatten3_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal flatten3_V_ce0 : STD_LOGIC;
    signal flatten3_V_we0 : STD_LOGIC;
    signal flatten3_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_layer_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln233_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_436_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_2_fu_458_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_1442 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_reg_1447 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln243_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln245_1_fu_484_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln245_1_reg_1452 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1460 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln203_fu_513_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_reg_1465 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln245_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_buf_data_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_buf_data_V_load_reg_1475 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_assign_reg_1495 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ireg_V_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_reg_1500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal p_Result_14_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln461_fu_552_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln461_reg_1515 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_15_fu_568_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_15_reg_1520 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_fu_572_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1525 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1530 : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_584_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1538 : STD_LOGIC_VECTOR (11 downto 0);
    signal QUAN_INC_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal QUAN_INC_reg_1547 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_608_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1553 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln591_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_reg_1560 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln598_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln598_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_638_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln595_reg_1570 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln595_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln595_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln582_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_672_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln583_reg_1590 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln603_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_1596 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_reg_1602 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_808_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_reg_1608 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_reg_1614 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln578_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln578_reg_1620 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln578_reg_1626 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_143_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_143_reg_1632 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_857_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos1_reg_1638 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln621_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln621_reg_1643 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_1_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_1_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1664 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln631_reg_1669 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln635_fu_935_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln635_reg_1675 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_939_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_reg_1680 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range1_all_zeros_1_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_1686 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln642_reg_1691 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_1026_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_6_reg_1697 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal select_ln557_fu_1251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln557_reg_1704 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_reg_1710 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln659_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln206_fu_1389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln206_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal i_1_fu_1399_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1730 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln203_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln204_fu_1416_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal select_ln204_1_fu_1424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_buf_data_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_buf_data_V_ce0 : STD_LOGIC;
    signal data_buf_data_V_we0 : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_ap_start : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_ap_done : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_ap_idle : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_ap_ready : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_flatten2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Fullc1_Cal_fu_343_flatten2_V_ce0 : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_flatten2_V_we0 : STD_LOGIC;
    signal grp_Fullc1_Cal_fu_343_flatten2_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Fullc1_Cal_fu_343_flatten1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Fullc1_Cal_fu_343_flatten1_V_ce0 : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_ap_start : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_ap_done : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_ap_idle : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_ap_ready : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_layer3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Conv2_Cal_fu_359_layer3_V_ce0 : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_layer4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Conv2_Cal_fu_359_layer4_V_ce0 : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_layer4_V_we0 : STD_LOGIC;
    signal grp_Conv2_Cal_fu_359_layer4_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Conv1_Cal_fu_371_ap_start : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_ap_done : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_ap_idle : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_ap_ready : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_layer1_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv1_Cal_fu_371_layer1_V_ce0 : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_layer2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_Conv1_Cal_fu_371_layer2_V_ce0 : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_layer2_V_we0 : STD_LOGIC;
    signal grp_Conv1_Cal_fu_371_layer2_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Pool1_Cal_fu_383_ap_start : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_ap_done : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_ap_idle : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_ap_ready : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_layer2_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_Pool1_Cal_fu_383_layer2_V_ce0 : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_layer2_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_Pool1_Cal_fu_383_layer2_V_ce1 : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_layer3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Pool1_Cal_fu_383_layer3_V_ce0 : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_layer3_V_we0 : STD_LOGIC;
    signal grp_Pool1_Cal_fu_383_layer3_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Pool2_Cal_fu_391_ap_start : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_ap_done : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_ap_idle : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_ap_ready : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_layer4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Pool2_Cal_fu_391_layer4_V_ce0 : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_layer4_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Pool2_Cal_fu_391_layer4_V_ce1 : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_layer5_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Pool2_Cal_fu_391_layer5_V_ce0 : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_layer5_V_we0 : STD_LOGIC;
    signal grp_Pool2_Cal_fu_391_layer5_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Fullc2_Cal_fu_399_ap_start : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_ap_done : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_ap_idle : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_ap_ready : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_flatten3_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Fullc2_Cal_fu_399_flatten3_V_ce0 : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_flatten3_V_we0 : STD_LOGIC;
    signal grp_Fullc2_Cal_fu_399_flatten3_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Fullc2_Cal_fu_399_flatten2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Fullc2_Cal_fu_399_flatten2_V_ce0 : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_ap_start : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_ap_done : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_ap_idle : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_ap_ready : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_layer5_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Flatten_Layer_fu_411_layer5_V_ce0 : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_flatten1_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Flatten_Layer_fu_411_flatten1_V_ce0 : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_flatten1_V_we0 : STD_LOGIC;
    signal grp_Flatten_Layer_fu_411_flatten1_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_reg_275 : STD_LOGIC_VECTOR (10 downto 0);
    signal i1_0_reg_286 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_297 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal p_04_3_i_reg_308 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ret_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_1_reg_332 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Fullc1_Cal_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_Conv2_Cal_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_Conv1_Cal_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_Pool1_Cal_fu_383_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_Pool2_Cal_fu_391_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_Fullc2_Cal_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_Flatten_Layer_fu_411_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal zext_ln234_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln247_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_9_fu_1293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln204_fu_1405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_419_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln246_fu_464_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_476_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln245_fu_488_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_fu_509_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_fu_504_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_tmp_V_fu_542_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_556_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_7_fu_560_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln556_fu_530_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln581_fu_596_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_602_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_622_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln595_fu_642_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_fu_659_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln586_fu_686_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_690_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_21_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_fu_696_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln588_fu_707_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln591_fu_723_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln591_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_732_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln595_fu_746_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln595_fu_751_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln595_fu_758_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln595_fu_762_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_s_fu_768_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln595_1_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_4_fu_715_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln406_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln406_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_804_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln582_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp63_cast_cast_fu_838_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_fu_654_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_142_fu_845_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_866_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln618_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln623_fu_895_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln623_fu_899_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_905_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln619_fu_871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln639_1_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln642_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln639_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_975_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln403_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_fu_988_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln403_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_1_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln403_fu_998_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln603_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_978_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln403_1_fu_1015_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln416_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln403_2_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln603_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln631_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1074_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal and_ln631_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln631_fu_1084_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln641_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln639_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_fu_1121_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln645_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln641_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln642_1_fu_1134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_2_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_fu_1126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln639_1_fu_1141_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_2_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_3_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_2_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln652_1_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln652_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln652_1_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln654_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln621_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_2_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln557_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_144_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln621_3_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1149_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln658_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln658_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln658_1_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln557_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln659_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_fu_1334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp57_demorgan_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln571_1_fu_1346_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln340_2_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_1_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_1327_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp58_fu_1357_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1495_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal regslice_both_input_layer_data_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal input_layer_TVALID_int : STD_LOGIC;
    signal input_layer_TREADY_int : STD_LOGIC;
    signal regslice_both_input_layer_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TKEEP_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_layer_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TSTRB_int : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_layer_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_user_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TUSER_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_layer_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_last_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_layer_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_id_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TID_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_layer_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_layer_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_layer_TDEST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_layer_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_layer_dest_V_U_ack_in : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component Fullc1_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flatten2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten2_V_ce0 : OUT STD_LOGIC;
        flatten2_V_we0 : OUT STD_LOGIC;
        flatten2_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        flatten2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        flatten1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flatten1_V_ce0 : OUT STD_LOGIC;
        flatten1_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv2_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        layer3_V_ce0 : OUT STD_LOGIC;
        layer3_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        layer4_V_ce0 : OUT STD_LOGIC;
        layer4_V_we0 : OUT STD_LOGIC;
        layer4_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        layer4_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Conv1_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        layer1_V_ce0 : OUT STD_LOGIC;
        layer1_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        layer2_V_ce0 : OUT STD_LOGIC;
        layer2_V_we0 : OUT STD_LOGIC;
        layer2_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        layer2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Pool1_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer2_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        layer2_V_ce0 : OUT STD_LOGIC;
        layer2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer2_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        layer2_V_ce1 : OUT STD_LOGIC;
        layer2_V_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        layer3_V_ce0 : OUT STD_LOGIC;
        layer3_V_we0 : OUT STD_LOGIC;
        layer3_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Pool2_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        layer4_V_ce0 : OUT STD_LOGIC;
        layer4_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer4_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        layer4_V_ce1 : OUT STD_LOGIC;
        layer4_V_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        layer5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        layer5_V_ce0 : OUT STD_LOGIC;
        layer5_V_we0 : OUT STD_LOGIC;
        layer5_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Fullc2_Cal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flatten3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten3_V_ce0 : OUT STD_LOGIC;
        flatten3_V_we0 : OUT STD_LOGIC;
        flatten3_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        flatten3_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        flatten2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten2_V_ce0 : OUT STD_LOGIC;
        flatten2_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Flatten_Layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        layer5_V_ce0 : OUT STD_LOGIC;
        layer5_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        flatten1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flatten1_V_ce0 : OUT STD_LOGIC;
        flatten1_V_we0 : OUT STD_LOGIC;
        flatten1_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_sitofp_ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HLS_fpext_3pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Lenet_HLS_ddiv_64qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Lenet_HLS_layer1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_layer2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_layer3_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_layer4_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_layer5_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_flattenlbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_flattenmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component Lenet_HLS_data_buncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Lenet_HLS_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    layer1_V_U : component Lenet_HLS_layer1_V
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer1_V_address0,
        ce0 => layer1_V_ce0,
        we0 => layer1_V_we0,
        d0 => layer1_V_d0,
        q0 => layer1_V_q0);

    layer2_V_U : component Lenet_HLS_layer2_V
    generic map (
        DataWidth => 12,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer2_V_address0,
        ce0 => layer2_V_ce0,
        we0 => layer2_V_we0,
        d0 => grp_Conv1_Cal_fu_371_layer2_V_d0,
        q0 => layer2_V_q0,
        address1 => grp_Pool1_Cal_fu_383_layer2_V_address1,
        ce1 => layer2_V_ce1,
        q1 => layer2_V_q1);

    layer3_V_U : component Lenet_HLS_layer3_V
    generic map (
        DataWidth => 12,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer3_V_address0,
        ce0 => layer3_V_ce0,
        we0 => layer3_V_we0,
        d0 => grp_Pool1_Cal_fu_383_layer3_V_d0,
        q0 => layer3_V_q0);

    layer4_V_U : component Lenet_HLS_layer4_V
    generic map (
        DataWidth => 12,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer4_V_address0,
        ce0 => layer4_V_ce0,
        we0 => layer4_V_we0,
        d0 => grp_Conv2_Cal_fu_359_layer4_V_d0,
        q0 => layer4_V_q0,
        address1 => grp_Pool2_Cal_fu_391_layer4_V_address1,
        ce1 => layer4_V_ce1,
        q1 => layer4_V_q1);

    layer5_V_U : component Lenet_HLS_layer5_V
    generic map (
        DataWidth => 12,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer5_V_address0,
        ce0 => layer5_V_ce0,
        we0 => layer5_V_we0,
        d0 => grp_Pool2_Cal_fu_391_layer5_V_d0,
        q0 => layer5_V_q0);

    flatten1_V_U : component Lenet_HLS_layer5_V
    generic map (
        DataWidth => 12,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flatten1_V_address0,
        ce0 => flatten1_V_ce0,
        we0 => flatten1_V_we0,
        d0 => grp_Flatten_Layer_fu_411_flatten1_V_d0,
        q0 => flatten1_V_q0);

    flatten2_V_U : component Lenet_HLS_flattenlbW
    generic map (
        DataWidth => 12,
        AddressRange => 84,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flatten2_V_address0,
        ce0 => flatten2_V_ce0,
        we0 => flatten2_V_we0,
        d0 => grp_Fullc1_Cal_fu_343_flatten2_V_d0,
        q0 => flatten2_V_q0);

    flatten3_V_U : component Lenet_HLS_flattenmb6
    generic map (
        DataWidth => 12,
        AddressRange => 65,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flatten3_V_address0,
        ce0 => flatten3_V_ce0,
        we0 => flatten3_V_we0,
        d0 => grp_Fullc2_Cal_fu_399_flatten3_V_d0,
        q0 => flatten3_V_q0);

    Lenet_HLS_AXILiteS_s_axi_U : component Lenet_HLS_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ret_reg_320,
        id => id);

    data_buf_data_V_U : component Lenet_HLS_data_buncg
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_buf_data_V_address0,
        ce0 => data_buf_data_V_ce0,
        we0 => data_buf_data_V_we0,
        d0 => input_layer_TDATA_int,
        q0 => data_buf_data_V_q0);

    grp_Fullc1_Cal_fu_343 : component Fullc1_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Fullc1_Cal_fu_343_ap_start,
        ap_done => grp_Fullc1_Cal_fu_343_ap_done,
        ap_idle => grp_Fullc1_Cal_fu_343_ap_idle,
        ap_ready => grp_Fullc1_Cal_fu_343_ap_ready,
        flatten2_V_address0 => grp_Fullc1_Cal_fu_343_flatten2_V_address0,
        flatten2_V_ce0 => grp_Fullc1_Cal_fu_343_flatten2_V_ce0,
        flatten2_V_we0 => grp_Fullc1_Cal_fu_343_flatten2_V_we0,
        flatten2_V_d0 => grp_Fullc1_Cal_fu_343_flatten2_V_d0,
        flatten2_V_q0 => flatten2_V_q0,
        flatten1_V_address0 => grp_Fullc1_Cal_fu_343_flatten1_V_address0,
        flatten1_V_ce0 => grp_Fullc1_Cal_fu_343_flatten1_V_ce0,
        flatten1_V_q0 => flatten1_V_q0);

    grp_Conv2_Cal_fu_359 : component Conv2_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv2_Cal_fu_359_ap_start,
        ap_done => grp_Conv2_Cal_fu_359_ap_done,
        ap_idle => grp_Conv2_Cal_fu_359_ap_idle,
        ap_ready => grp_Conv2_Cal_fu_359_ap_ready,
        layer3_V_address0 => grp_Conv2_Cal_fu_359_layer3_V_address0,
        layer3_V_ce0 => grp_Conv2_Cal_fu_359_layer3_V_ce0,
        layer3_V_q0 => layer3_V_q0,
        layer4_V_address0 => grp_Conv2_Cal_fu_359_layer4_V_address0,
        layer4_V_ce0 => grp_Conv2_Cal_fu_359_layer4_V_ce0,
        layer4_V_we0 => grp_Conv2_Cal_fu_359_layer4_V_we0,
        layer4_V_d0 => grp_Conv2_Cal_fu_359_layer4_V_d0,
        layer4_V_q0 => layer4_V_q0);

    grp_Conv1_Cal_fu_371 : component Conv1_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv1_Cal_fu_371_ap_start,
        ap_done => grp_Conv1_Cal_fu_371_ap_done,
        ap_idle => grp_Conv1_Cal_fu_371_ap_idle,
        ap_ready => grp_Conv1_Cal_fu_371_ap_ready,
        layer1_V_address0 => grp_Conv1_Cal_fu_371_layer1_V_address0,
        layer1_V_ce0 => grp_Conv1_Cal_fu_371_layer1_V_ce0,
        layer1_V_q0 => layer1_V_q0,
        layer2_V_address0 => grp_Conv1_Cal_fu_371_layer2_V_address0,
        layer2_V_ce0 => grp_Conv1_Cal_fu_371_layer2_V_ce0,
        layer2_V_we0 => grp_Conv1_Cal_fu_371_layer2_V_we0,
        layer2_V_d0 => grp_Conv1_Cal_fu_371_layer2_V_d0,
        layer2_V_q0 => layer2_V_q0);

    grp_Pool1_Cal_fu_383 : component Pool1_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Pool1_Cal_fu_383_ap_start,
        ap_done => grp_Pool1_Cal_fu_383_ap_done,
        ap_idle => grp_Pool1_Cal_fu_383_ap_idle,
        ap_ready => grp_Pool1_Cal_fu_383_ap_ready,
        layer2_V_address0 => grp_Pool1_Cal_fu_383_layer2_V_address0,
        layer2_V_ce0 => grp_Pool1_Cal_fu_383_layer2_V_ce0,
        layer2_V_q0 => layer2_V_q0,
        layer2_V_address1 => grp_Pool1_Cal_fu_383_layer2_V_address1,
        layer2_V_ce1 => grp_Pool1_Cal_fu_383_layer2_V_ce1,
        layer2_V_q1 => layer2_V_q1,
        layer3_V_address0 => grp_Pool1_Cal_fu_383_layer3_V_address0,
        layer3_V_ce0 => grp_Pool1_Cal_fu_383_layer3_V_ce0,
        layer3_V_we0 => grp_Pool1_Cal_fu_383_layer3_V_we0,
        layer3_V_d0 => grp_Pool1_Cal_fu_383_layer3_V_d0);

    grp_Pool2_Cal_fu_391 : component Pool2_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Pool2_Cal_fu_391_ap_start,
        ap_done => grp_Pool2_Cal_fu_391_ap_done,
        ap_idle => grp_Pool2_Cal_fu_391_ap_idle,
        ap_ready => grp_Pool2_Cal_fu_391_ap_ready,
        layer4_V_address0 => grp_Pool2_Cal_fu_391_layer4_V_address0,
        layer4_V_ce0 => grp_Pool2_Cal_fu_391_layer4_V_ce0,
        layer4_V_q0 => layer4_V_q0,
        layer4_V_address1 => grp_Pool2_Cal_fu_391_layer4_V_address1,
        layer4_V_ce1 => grp_Pool2_Cal_fu_391_layer4_V_ce1,
        layer4_V_q1 => layer4_V_q1,
        layer5_V_address0 => grp_Pool2_Cal_fu_391_layer5_V_address0,
        layer5_V_ce0 => grp_Pool2_Cal_fu_391_layer5_V_ce0,
        layer5_V_we0 => grp_Pool2_Cal_fu_391_layer5_V_we0,
        layer5_V_d0 => grp_Pool2_Cal_fu_391_layer5_V_d0);

    grp_Fullc2_Cal_fu_399 : component Fullc2_Cal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Fullc2_Cal_fu_399_ap_start,
        ap_done => grp_Fullc2_Cal_fu_399_ap_done,
        ap_idle => grp_Fullc2_Cal_fu_399_ap_idle,
        ap_ready => grp_Fullc2_Cal_fu_399_ap_ready,
        flatten3_V_address0 => grp_Fullc2_Cal_fu_399_flatten3_V_address0,
        flatten3_V_ce0 => grp_Fullc2_Cal_fu_399_flatten3_V_ce0,
        flatten3_V_we0 => grp_Fullc2_Cal_fu_399_flatten3_V_we0,
        flatten3_V_d0 => grp_Fullc2_Cal_fu_399_flatten3_V_d0,
        flatten3_V_q0 => flatten3_V_q0,
        flatten2_V_address0 => grp_Fullc2_Cal_fu_399_flatten2_V_address0,
        flatten2_V_ce0 => grp_Fullc2_Cal_fu_399_flatten2_V_ce0,
        flatten2_V_q0 => flatten2_V_q0);

    grp_Flatten_Layer_fu_411 : component Flatten_Layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Flatten_Layer_fu_411_ap_start,
        ap_done => grp_Flatten_Layer_fu_411_ap_done,
        ap_idle => grp_Flatten_Layer_fu_411_ap_idle,
        ap_ready => grp_Flatten_Layer_fu_411_ap_ready,
        layer5_V_address0 => grp_Flatten_Layer_fu_411_layer5_V_address0,
        layer5_V_ce0 => grp_Flatten_Layer_fu_411_layer5_V_ce0,
        layer5_V_q0 => layer5_V_q0,
        flatten1_V_address0 => grp_Flatten_Layer_fu_411_flatten1_V_address0,
        flatten1_V_ce0 => grp_Flatten_Layer_fu_411_flatten1_V_ce0,
        flatten1_V_we0 => grp_Flatten_Layer_fu_411_flatten1_V_we0,
        flatten1_V_d0 => grp_Flatten_Layer_fu_411_flatten1_V_d0);

    Lenet_HLS_sitofp_ocq_U34 : component Lenet_HLS_sitofp_ocq
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_419_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p1);

    Lenet_HLS_fpext_3pcA_U35 : component Lenet_HLS_fpext_3pcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1485,
        ce => ap_const_logic_1,
        dout => grp_fu_422_p1);

    Lenet_HLS_ddiv_64qcK_U36 : component Lenet_HLS_ddiv_64qcK
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_1_reg_1490,
        din1 => ap_const_lv64_406FE00000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    regslice_both_input_layer_data_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TDATA,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_data_V_U_ack_in,
        data_out => input_layer_TDATA_int,
        vld_out => input_layer_TVALID_int,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_data_V_U_apdone_blk);

    regslice_both_input_layer_keep_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TKEEP,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_keep_V_U_ack_in,
        data_out => input_layer_TKEEP_int,
        vld_out => regslice_both_input_layer_keep_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_keep_V_U_apdone_blk);

    regslice_both_input_layer_strb_V_U : component regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TSTRB,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_strb_V_U_ack_in,
        data_out => input_layer_TSTRB_int,
        vld_out => regslice_both_input_layer_strb_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_strb_V_U_apdone_blk);

    regslice_both_input_layer_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TUSER,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_user_V_U_ack_in,
        data_out => input_layer_TUSER_int,
        vld_out => regslice_both_input_layer_user_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_user_V_U_apdone_blk);

    regslice_both_input_layer_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TLAST,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_last_V_U_ack_in,
        data_out => input_layer_TLAST_int,
        vld_out => regslice_both_input_layer_last_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_last_V_U_apdone_blk);

    regslice_both_input_layer_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TID,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_id_V_U_ack_in,
        data_out => input_layer_TID_int,
        vld_out => regslice_both_input_layer_id_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_id_V_U_apdone_blk);

    regslice_both_input_layer_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_layer_TDEST,
        vld_in => input_layer_TVALID,
        ack_in => regslice_both_input_layer_dest_V_U_ack_in,
        data_out => input_layer_TDEST_int,
        vld_out => regslice_both_input_layer_dest_V_U_vld_out,
        ack_out => input_layer_TREADY_int,
        apdone_blk => regslice_both_input_layer_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv1_Cal_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv1_Cal_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln243_fu_452_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_Conv1_Cal_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv1_Cal_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_Conv1_Cal_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2_Cal_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv2_Cal_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_Conv2_Cal_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2_Cal_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2_Cal_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Flatten_Layer_fu_411_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Flatten_Layer_fu_411_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    grp_Flatten_Layer_fu_411_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Flatten_Layer_fu_411_ap_ready = ap_const_logic_1)) then 
                    grp_Flatten_Layer_fu_411_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Fullc1_Cal_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Fullc1_Cal_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                    grp_Fullc1_Cal_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Fullc1_Cal_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_Fullc1_Cal_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Fullc2_Cal_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Fullc2_Cal_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                    grp_Fullc2_Cal_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Fullc2_Cal_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_Fullc2_Cal_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Pool1_Cal_fu_383_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Pool1_Cal_fu_383_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    grp_Pool1_Cal_fu_383_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Pool1_Cal_fu_383_ap_ready = ap_const_logic_1)) then 
                    grp_Pool1_Cal_fu_383_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Pool2_Cal_fu_391_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Pool2_Cal_fu_391_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    grp_Pool2_Cal_fu_391_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Pool2_Cal_fu_391_ap_ready = ap_const_logic_1)) then 
                    grp_Pool2_Cal_fu_391_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_1))) then 
                i1_0_reg_286 <= ap_const_lv6_0;
            elsif (((icmp_ln245_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_0_reg_286 <= i_2_reg_1442;
            end if; 
        end if;
    end process;

    i_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_275 <= ap_const_lv11_0;
            elsif ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) then 
                i_0_reg_275 <= i_fu_436_p2;
            end if; 
        end if;
    end process;

    index_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Fullc2_Cal_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                index_1_reg_332 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                index_1_reg_332 <= i_1_reg_1730;
            end if; 
        end if;
    end process;

    j_0_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                j_0_reg_297 <= j_reg_1460;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln243_fu_452_p2 = ap_const_lv1_0))) then 
                j_0_reg_297 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_04_3_i_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Fullc2_Cal_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                p_04_3_i_reg_308 <= ap_const_lv12_800;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                p_04_3_i_reg_308 <= select_ln204_fu_1416_p3;
            end if; 
        end if;
    end process;

    ret_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Fullc2_Cal_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then 
                ret_reg_320 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                ret_reg_320 <= select_ln204_1_fu_1424_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                F2_reg_1538 <= F2_fu_584_p2;
                QUAN_INC_reg_1547 <= QUAN_INC_fu_590_p2;
                icmp_ln571_reg_1530 <= icmp_ln571_fu_578_p2;
                icmp_ln591_reg_1560 <= icmp_ln591_fu_616_p2;
                icmp_ln595_reg_1575 <= icmp_ln595_fu_648_p2;
                icmp_ln598_reg_1565 <= icmp_ln598_fu_632_p2;
                ireg_V_reg_1500 <= ireg_V_fu_527_p1;
                man_V_2_reg_1525 <= man_V_2_fu_572_p2;
                p_Result_14_reg_1505 <= ireg_V_fu_527_p1(63 downto 63);
                    p_Result_15_reg_1520(51 downto 0) <= p_Result_15_fu_568_p1(51 downto 0);
                sh_amt_reg_1553 <= sh_amt_fu_608_p3;
                trunc_ln595_reg_1570 <= trunc_ln595_fu_638_p1;
                    zext_ln461_reg_1515(10 downto 0) <= zext_ln461_fu_552_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                Range1_all_ones_1_reg_1657 <= Range1_all_ones_1_fu_915_p2;
                Range1_all_zeros_1_reg_1686 <= Range1_all_zeros_1_fu_951_p2;
                Range2_V_1_reg_1680 <= Range2_V_1_fu_939_p2;
                and_ln578_reg_1620 <= and_ln578_fu_828_p2;
                and_ln642_reg_1691 <= and_ln642_fu_969_p2;
                empty_143_reg_1632 <= empty_143_fu_851_p2;
                icmp_ln578_reg_1626 <= icmp_ln578_fu_833_p2;
                icmp_ln582_reg_1585 <= icmp_ln582_fu_667_p2;
                icmp_ln603_reg_1596 <= icmp_ln603_fu_681_p2;
                icmp_ln621_reg_1643 <= icmp_ln621_fu_875_p2;
                icmp_ln631_reg_1669 <= icmp_ln631_fu_929_p2;
                p_Result_16_reg_1602 <= p_Val2_4_fu_715_p3(11 downto 11);
                p_Val2_5_reg_1608 <= p_Val2_5_fu_808_p2;
                pos1_reg_1638 <= pos1_fu_857_p2;
                sext_ln581_reg_1580 <= sext_ln581_fu_664_p1;
                tmp_24_reg_1614 <= p_Val2_5_fu_808_p2(11 downto 11);
                tmp_27_reg_1664 <= pos2_fu_866_p2(11 downto 11);
                trunc_ln583_reg_1590 <= trunc_ln583_fu_672_p1;
                xor_ln621_1_reg_1650 <= xor_ln621_1_fu_889_p2;
                    zext_ln635_reg_1675(31 downto 0) <= zext_ln635_fu_935_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln245_fu_492_p2 = ap_const_lv1_0))) then
                add_ln203_reg_1465 <= add_ln203_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                and_ln659_reg_1716 <= and_ln659_fu_1287_p2;
                overflow_reg_1710 <= overflow_fu_1281_p2;
                p_Val2_6_reg_1697 <= p_Val2_6_fu_1026_p3;
                select_ln557_reg_1704 <= select_ln557_fu_1251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_buf_data_V_load_reg_1475 <= data_buf_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                i_1_reg_1730 <= i_1_fu_1399_p2;
                    zext_ln206_reg_1722(6 downto 0) <= zext_ln206_fu_1389_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_1442 <= i_2_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_1460 <= j_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln243_fu_452_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1447(9 downto 5) <= shl_ln_fu_468_p3(9 downto 5);
                    zext_ln245_1_reg_1452(10 downto 5) <= zext_ln245_1_fu_484_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_1_reg_1490 <= grp_fu_422_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_reg_1485 <= grp_fu_419_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                v_assign_reg_1495 <= grp_fu_425_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_1447(4 downto 0) <= "00000";
    zext_ln245_1_reg_1452(4 downto 0) <= "00000";
    zext_ln245_1_reg_1452(11) <= '0';
    zext_ln461_reg_1515(11) <= '0';
    p_Result_15_reg_1520(53 downto 52) <= "01";
    zext_ln635_reg_1675(53 downto 32) <= "0000000000000000000000";
    zext_ln206_reg_1722(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln233_fu_430_p2, ap_CS_fsm_state3, icmp_ln243_fu_452_p2, ap_CS_fsm_state4, icmp_ln245_fu_492_p2, ap_CS_fsm_state62, icmp_ln203_fu_1393_p2, grp_Fullc1_Cal_fu_343_ap_done, grp_Conv2_Cal_fu_359_ap_done, grp_Conv1_Cal_fu_371_ap_done, grp_Pool1_Cal_fu_383_ap_done, grp_Pool2_Cal_fu_391_ap_done, grp_Fullc2_Cal_fu_399_ap_done, grp_Flatten_Layer_fu_411_ap_done, ap_CS_fsm_state61, ap_CS_fsm_state59, ap_CS_fsm_state53, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state57, input_layer_TVALID_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln243_fu_452_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln245_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state49 => 
                if (((grp_Conv1_Cal_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((grp_Pool1_Cal_fu_383_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((grp_Conv2_Cal_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((grp_Pool2_Cal_fu_391_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((grp_Flatten_Layer_fu_411_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((grp_Fullc1_Cal_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((grp_Fullc2_Cal_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((icmp_ln203_fu_1393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_552_p1));
    QUAN_INC_fu_590_p2 <= "1" when (signed(F2_fu_584_p2) > signed(ap_const_lv12_6)) else "0";
    Range1_all_ones_1_fu_915_p2 <= (icmp_ln621_fu_875_p2 and and_ln621_fu_909_p2);
    Range1_all_ones_fu_1096_p2 <= (select_ln631_fu_1084_p3 and Range1_all_ones_1_reg_1657);
    Range1_all_zeros_1_fu_951_p2 <= "1" when (man_V_fu_659_p3 = ap_const_lv54_0) else "0";
    Range1_all_zeros_fu_1106_p2 <= (ap_const_lv1_1 xor Range1_all_ones_1_reg_1657);
    Range2_V_1_fu_939_p2 <= std_logic_vector(shift_right(unsigned(man_V_fu_659_p3),to_integer(unsigned('0' & zext_ln635_fu_935_p1(31-1 downto 0)))));
    Range2_all_ones_fu_1079_p2 <= "1" when (Range2_V_1_reg_1680 = r_V_fu_1074_p2) else "0";
    add_ln203_fu_513_p2 <= std_logic_vector(unsigned(zext_ln245_1_reg_1452) + unsigned(zext_ln203_fu_509_p1));
    add_ln581_fu_596_p2 <= std_logic_vector(signed(ap_const_lv12_FFA) + signed(F2_fu_584_p2));
    add_ln591_fu_723_p2 <= std_logic_vector(signed(ap_const_lv12_FF9) + signed(F2_reg_1538));
    add_ln595_fu_642_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_584_p2));
    and_ln340_1_fu_1375_p2 <= (empty_143_reg_1632 and and_ln340_fu_1369_p2);
    and_ln340_fu_1369_p2 <= (xor_ln571_fu_1364_p2 and or_ln340_2_fu_1322_p2);
    and_ln403_1_fu_1010_p2 <= (xor_ln403_fu_1005_p2 and and_ln578_reg_1620);
    and_ln403_2_fu_1034_p2 <= (xor_ln416_fu_983_p2 and and_ln403_fu_994_p2);
    and_ln403_fu_994_p2 <= (p_Result_16_reg_1602 and and_ln578_reg_1620);
    and_ln406_fu_798_p2 <= (qb_fu_740_p3 and or_ln406_fu_793_p2);
    and_ln557_fu_1247_p2 <= (p_Result_14_reg_1505 and icmp_ln621_reg_1643);
    and_ln578_fu_828_p2 <= (xor_ln582_fu_822_p2 and QUAN_INC_reg_1547);
    and_ln603_1_fu_1040_p2 <= (icmp_ln603_reg_1596 and icmp_ln578_reg_1626);
    and_ln603_2_fu_1050_p2 <= (xor_ln603_fu_1044_p2 and and_ln403_2_fu_1034_p2);
    and_ln603_fu_1022_p2 <= (icmp_ln603_reg_1596 and icmp_ln578_reg_1626);
    and_ln621_2_fu_1236_p2 <= (xor_ln621_fu_1225_p2 and p_Result_17_fu_1056_p3);
    and_ln621_3_fu_1242_p2 <= (p_Result_14_reg_1505 and and_ln621_2_fu_1236_p2);
    and_ln621_fu_909_p2 <= (xor_ln621_1_fu_889_p2 and lD_fu_905_p1);
    and_ln631_fu_1069_p2 <= (xor_ln631_fu_1064_p2 and icmp_ln631_reg_1669);
    and_ln639_fu_1092_p2 <= (xor_ln621_1_reg_1650 and icmp_ln631_reg_1669);
    and_ln641_fu_1111_p2 <= (icmp_ln641_fu_1101_p2 and Range1_all_zeros_fu_1106_p2);
    and_ln642_fu_969_p2 <= (or_ln639_fu_963_p2 and icmp_ln642_fu_945_p2);
    and_ln652_fu_1186_p2 <= (select_ln639_fu_1126_p3 and or_ln652_2_fu_1168_p2);
    and_ln654_fu_1213_p2 <= (select_ln639_fu_1126_p3 and and_ln603_2_fu_1050_p2);
    and_ln658_fu_1265_p2 <= (xor_ln658_fu_1259_p2 and icmp_ln621_reg_1643);
    and_ln659_fu_1287_p2 <= (p_Result_17_fu_1056_p3 and or_ln557_fu_1230_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);

    ap_block_state2_assign_proc : process(icmp_ln233_fu_430_p2, input_layer_TVALID_int)
    begin
                ap_block_state2 <= ((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state62, icmp_ln203_fu_1393_p2)
    begin
        if (((icmp_ln203_fu_1393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state62, icmp_ln203_fu_1393_p2)
    begin
        if (((icmp_ln203_fu_1393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ashr_ln586_fu_690_p2 <= std_logic_vector(shift_right(signed(man_V_fu_659_p3),to_integer(unsigned('0' & zext_ln586_fu_686_p1(31-1 downto 0)))));
    ashr_ln623_fu_899_p2 <= std_logic_vector(shift_right(signed(man_V_fu_659_p3),to_integer(unsigned('0' & zext_ln623_fu_895_p1(31-1 downto 0)))));

    data_buf_data_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, zext_ln234_fu_442_p1, zext_ln247_fu_518_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_buf_data_V_address0 <= zext_ln247_fu_518_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_buf_data_V_address0 <= zext_ln234_fu_442_p1(10 - 1 downto 0);
        else 
            data_buf_data_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_buf_data_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln233_fu_430_p2, ap_CS_fsm_state4, input_layer_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_buf_data_V_ce0 <= ap_const_logic_1;
        else 
            data_buf_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_buf_data_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln233_fu_430_p2, input_layer_TVALID_int)
    begin
        if ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) then 
            data_buf_data_V_we0 <= ap_const_logic_1;
        else 
            data_buf_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_1205_p3 <= 
        and_ln652_fu_1186_p2 when (or_ln652_fu_1180_p2(0) = '1') else 
        or_ln652_1_fu_1199_p2;
    deleted_zeros_fu_1149_p3 <= 
        select_ln639_fu_1126_p3 when (and_ln603_2_fu_1050_p2(0) = '1') else 
        select_ln639_1_fu_1141_p3;
    empty_142_fu_845_p2 <= std_logic_vector(unsigned(tmp63_cast_cast_fu_838_p3) + unsigned(exp_V_fu_654_p2));
    empty_143_fu_851_p2 <= "1" when (signed(empty_142_fu_845_p2) > signed(ap_const_lv12_5)) else "0";
    empty_144_fu_1219_p2 <= (ap_const_lv1_1 xor and_ln654_fu_1213_p2);
    exp_V_fu_654_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(zext_ln461_reg_1515));
    exp_tmp_V_fu_542_p4 <= ireg_V_fu_527_p1(62 downto 52);

    flatten1_V_address0_assign_proc : process(grp_Fullc1_Cal_fu_343_flatten1_V_address0, grp_Flatten_Layer_fu_411_flatten1_V_address0, ap_CS_fsm_state59, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            flatten1_V_address0 <= grp_Flatten_Layer_fu_411_flatten1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            flatten1_V_address0 <= grp_Fullc1_Cal_fu_343_flatten1_V_address0;
        else 
            flatten1_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flatten1_V_ce0_assign_proc : process(grp_Fullc1_Cal_fu_343_flatten1_V_ce0, grp_Flatten_Layer_fu_411_flatten1_V_ce0, ap_CS_fsm_state59, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            flatten1_V_ce0 <= grp_Flatten_Layer_fu_411_flatten1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            flatten1_V_ce0 <= grp_Fullc1_Cal_fu_343_flatten1_V_ce0;
        else 
            flatten1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten1_V_we0_assign_proc : process(grp_Flatten_Layer_fu_411_flatten1_V_we0, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            flatten1_V_we0 <= grp_Flatten_Layer_fu_411_flatten1_V_we0;
        else 
            flatten1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten2_V_address0_assign_proc : process(grp_Fullc1_Cal_fu_343_flatten2_V_address0, grp_Fullc2_Cal_fu_399_flatten2_V_address0, ap_CS_fsm_state61, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            flatten2_V_address0 <= grp_Fullc2_Cal_fu_399_flatten2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            flatten2_V_address0 <= grp_Fullc1_Cal_fu_343_flatten2_V_address0;
        else 
            flatten2_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    flatten2_V_ce0_assign_proc : process(grp_Fullc1_Cal_fu_343_flatten2_V_ce0, grp_Fullc2_Cal_fu_399_flatten2_V_ce0, ap_CS_fsm_state61, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            flatten2_V_ce0 <= grp_Fullc2_Cal_fu_399_flatten2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            flatten2_V_ce0 <= grp_Fullc1_Cal_fu_343_flatten2_V_ce0;
        else 
            flatten2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten2_V_we0_assign_proc : process(grp_Fullc1_Cal_fu_343_flatten2_V_we0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            flatten2_V_we0 <= grp_Fullc1_Cal_fu_343_flatten2_V_we0;
        else 
            flatten2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten3_V_address0_assign_proc : process(ap_CS_fsm_state62, grp_Fullc2_Cal_fu_399_flatten3_V_address0, ap_CS_fsm_state61, zext_ln204_fu_1405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            flatten3_V_address0 <= zext_ln204_fu_1405_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            flatten3_V_address0 <= grp_Fullc2_Cal_fu_399_flatten3_V_address0;
        else 
            flatten3_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    flatten3_V_ce0_assign_proc : process(ap_CS_fsm_state62, grp_Fullc2_Cal_fu_399_flatten3_V_ce0, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            flatten3_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            flatten3_V_ce0 <= grp_Fullc2_Cal_fu_399_flatten3_V_ce0;
        else 
            flatten3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten3_V_we0_assign_proc : process(grp_Fullc2_Cal_fu_399_flatten3_V_we0, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            flatten3_V_we0 <= grp_Fullc2_Cal_fu_399_flatten3_V_we0;
        else 
            flatten3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv1_Cal_fu_371_ap_start <= grp_Conv1_Cal_fu_371_ap_start_reg;
    grp_Conv2_Cal_fu_359_ap_start <= grp_Conv2_Cal_fu_359_ap_start_reg;
    grp_Flatten_Layer_fu_411_ap_start <= grp_Flatten_Layer_fu_411_ap_start_reg;
    grp_Fullc1_Cal_fu_343_ap_start <= grp_Fullc1_Cal_fu_343_ap_start_reg;
    grp_Fullc2_Cal_fu_399_ap_start <= grp_Fullc2_Cal_fu_399_ap_start_reg;
    grp_Pool1_Cal_fu_383_ap_start <= grp_Pool1_Cal_fu_383_ap_start_reg;
    grp_Pool2_Cal_fu_391_ap_start <= grp_Pool2_Cal_fu_391_ap_start_reg;
        grp_fu_419_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_buf_data_V_load_reg_1475),32));

    i_1_fu_1399_p2 <= std_logic_vector(unsigned(index_1_reg_332) + unsigned(ap_const_lv7_1));
    i_2_fu_458_p2 <= std_logic_vector(unsigned(i1_0_reg_286) + unsigned(ap_const_lv6_1));
    i_fu_436_p2 <= std_logic_vector(unsigned(i_0_reg_275) + unsigned(ap_const_lv11_1));
    icmp_ln1495_fu_1410_p2 <= "1" when (signed(p_04_3_i_reg_308) < signed(flatten3_V_q0)) else "0";
    icmp_ln203_fu_1393_p2 <= "1" when (index_1_reg_332 = ap_const_lv7_41) else "0";
    icmp_ln233_fu_430_p2 <= "1" when (i_0_reg_275 = ap_const_lv11_400) else "0";
    icmp_ln243_fu_452_p2 <= "1" when (i1_0_reg_286 = ap_const_lv6_20) else "0";
    icmp_ln245_fu_492_p2 <= "1" when (j_0_reg_297 = ap_const_lv6_20) else "0";
    icmp_ln571_fu_578_p2 <= "1" when (trunc_ln556_fu_530_p1 = ap_const_lv63_0) else "0";
    icmp_ln578_fu_833_p2 <= "1" when (signed(F2_reg_1538) < signed(ap_const_lv12_6)) else "0";
    icmp_ln582_fu_667_p2 <= "1" when (F2_reg_1538 = ap_const_lv12_6) else "0";
    icmp_ln585_fu_676_p2 <= "1" when (unsigned(sh_amt_reg_1553) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_616_p2 <= "1" when (signed(add_ln581_fu_596_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln595_1_fu_774_p2 <= "0" when (p_Result_s_fu_768_p2 = ap_const_lv54_0) else "1";
    icmp_ln595_fu_648_p2 <= "1" when (signed(add_ln595_fu_642_p2) > signed(ap_const_lv12_35)) else "0";
    icmp_ln598_fu_632_p2 <= "1" when (signed(tmp_22_fu_622_p4) > signed(ap_const_lv9_0)) else "0";
    icmp_ln603_fu_681_p2 <= "1" when (unsigned(sh_amt_reg_1553) < unsigned(ap_const_lv12_C)) else "0";
    icmp_ln621_fu_875_p2 <= "1" when (signed(pos1_fu_857_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln631_fu_929_p2 <= "1" when (signed(pos2_fu_866_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln641_fu_1101_p2 <= "1" when (Range2_V_1_reg_1680 = ap_const_lv54_0) else "0";
    icmp_ln642_fu_945_p2 <= "1" when (pos2_fu_866_p2 = ap_const_lv12_36) else "0";
    index_fu_504_p2 <= std_logic_vector(unsigned(shl_ln_reg_1447) + unsigned(zext_ln245_fu_488_p1));

    input_layer_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln233_fu_430_p2, input_layer_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) then 
            input_layer_TDATA_blk_n <= input_layer_TVALID_int;
        else 
            input_layer_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_layer_TREADY_assign_proc : process(input_layer_TVALID, regslice_both_input_layer_data_V_U_ack_in)
    begin
        if (((input_layer_TVALID = ap_const_logic_1) and (regslice_both_input_layer_data_V_U_ack_in = ap_const_logic_1))) then 
            input_layer_TREADY <= ap_const_logic_1;
        else 
            input_layer_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_layer_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln233_fu_430_p2, input_layer_TVALID_int)
    begin
        if ((not(((input_layer_TVALID_int = ap_const_logic_0) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln233_fu_430_p2 = ap_const_lv1_0))) then 
            input_layer_TREADY_int <= ap_const_logic_1;
        else 
            input_layer_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_527_p1 <= v_assign_reg_1495;
    j_fu_498_p2 <= std_logic_vector(unsigned(j_0_reg_297) + unsigned(ap_const_lv6_1));
    lD_fu_905_p1 <= ashr_ln623_fu_899_p2(1 - 1 downto 0);

    layer1_V_address0_assign_proc : process(grp_Conv1_Cal_fu_371_layer1_V_address0, ap_CS_fsm_state48, ap_CS_fsm_state49, zext_ln203_9_fu_1293_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            layer1_V_address0 <= zext_ln203_9_fu_1293_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer1_V_address0 <= grp_Conv1_Cal_fu_371_layer1_V_address0;
        else 
            layer1_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    layer1_V_ce0_assign_proc : process(grp_Conv1_Cal_fu_371_layer1_V_ce0, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            layer1_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer1_V_ce0 <= grp_Conv1_Cal_fu_371_layer1_V_ce0;
        else 
            layer1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_V_d0 <= 
        select_ln340_fu_1327_p3 when (and_ln340_1_fu_1375_p2(0) = '1') else 
        sel_tmp58_fu_1357_p3;

    layer1_V_we0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            layer1_V_we0 <= ap_const_logic_1;
        else 
            layer1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_V_address0_assign_proc : process(grp_Conv1_Cal_fu_371_layer2_V_address0, grp_Pool1_Cal_fu_383_layer2_V_address0, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer2_V_address0 <= grp_Pool1_Cal_fu_383_layer2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer2_V_address0 <= grp_Conv1_Cal_fu_371_layer2_V_address0;
        else 
            layer2_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    layer2_V_ce0_assign_proc : process(grp_Conv1_Cal_fu_371_layer2_V_ce0, grp_Pool1_Cal_fu_383_layer2_V_ce0, ap_CS_fsm_state49, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer2_V_ce0 <= grp_Pool1_Cal_fu_383_layer2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer2_V_ce0 <= grp_Conv1_Cal_fu_371_layer2_V_ce0;
        else 
            layer2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_V_ce1_assign_proc : process(grp_Pool1_Cal_fu_383_layer2_V_ce1, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer2_V_ce1 <= grp_Pool1_Cal_fu_383_layer2_V_ce1;
        else 
            layer2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_V_we0_assign_proc : process(grp_Conv1_Cal_fu_371_layer2_V_we0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer2_V_we0 <= grp_Conv1_Cal_fu_371_layer2_V_we0;
        else 
            layer2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_V_address0_assign_proc : process(grp_Conv2_Cal_fu_359_layer3_V_address0, grp_Pool1_Cal_fu_383_layer3_V_address0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer3_V_address0 <= grp_Pool1_Cal_fu_383_layer3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer3_V_address0 <= grp_Conv2_Cal_fu_359_layer3_V_address0;
        else 
            layer3_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    layer3_V_ce0_assign_proc : process(grp_Conv2_Cal_fu_359_layer3_V_ce0, grp_Pool1_Cal_fu_383_layer3_V_ce0, ap_CS_fsm_state53, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer3_V_ce0 <= grp_Pool1_Cal_fu_383_layer3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer3_V_ce0 <= grp_Conv2_Cal_fu_359_layer3_V_ce0;
        else 
            layer3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_V_we0_assign_proc : process(grp_Pool1_Cal_fu_383_layer3_V_we0, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer3_V_we0 <= grp_Pool1_Cal_fu_383_layer3_V_we0;
        else 
            layer3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer4_V_address0_assign_proc : process(grp_Conv2_Cal_fu_359_layer4_V_address0, grp_Pool2_Cal_fu_391_layer4_V_address0, ap_CS_fsm_state53, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer4_V_address0 <= grp_Pool2_Cal_fu_391_layer4_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer4_V_address0 <= grp_Conv2_Cal_fu_359_layer4_V_address0;
        else 
            layer4_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    layer4_V_ce0_assign_proc : process(grp_Conv2_Cal_fu_359_layer4_V_ce0, grp_Pool2_Cal_fu_391_layer4_V_ce0, ap_CS_fsm_state53, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer4_V_ce0 <= grp_Pool2_Cal_fu_391_layer4_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer4_V_ce0 <= grp_Conv2_Cal_fu_359_layer4_V_ce0;
        else 
            layer4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer4_V_ce1_assign_proc : process(grp_Pool2_Cal_fu_391_layer4_V_ce1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer4_V_ce1 <= grp_Pool2_Cal_fu_391_layer4_V_ce1;
        else 
            layer4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer4_V_we0_assign_proc : process(grp_Conv2_Cal_fu_359_layer4_V_we0, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer4_V_we0 <= grp_Conv2_Cal_fu_359_layer4_V_we0;
        else 
            layer4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer5_V_address0_assign_proc : process(grp_Pool2_Cal_fu_391_layer5_V_address0, grp_Flatten_Layer_fu_411_layer5_V_address0, ap_CS_fsm_state55, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            layer5_V_address0 <= grp_Flatten_Layer_fu_411_layer5_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer5_V_address0 <= grp_Pool2_Cal_fu_391_layer5_V_address0;
        else 
            layer5_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    layer5_V_ce0_assign_proc : process(grp_Pool2_Cal_fu_391_layer5_V_ce0, grp_Flatten_Layer_fu_411_layer5_V_ce0, ap_CS_fsm_state55, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            layer5_V_ce0 <= grp_Flatten_Layer_fu_411_layer5_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer5_V_ce0 <= grp_Pool2_Cal_fu_391_layer5_V_ce0;
        else 
            layer5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer5_V_we0_assign_proc : process(grp_Pool2_Cal_fu_391_layer5_V_we0, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer5_V_we0 <= grp_Pool2_Cal_fu_391_layer5_V_we0;
        else 
            layer5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln595_fu_762_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln595_fu_758_p1(31-1 downto 0)))));
    man_V_2_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_15_fu_568_p1));
    man_V_fu_659_p3 <= 
        man_V_2_reg_1525 when (p_Result_14_reg_1505(0) = '1') else 
        p_Result_15_reg_1520;
    or_ln340_1_fu_1317_p2 <= (xor_ln340_fu_1312_p2 or overflow_reg_1710);
    or_ln340_2_fu_1322_p2 <= (or_ln340_1_fu_1317_p2 or and_ln659_reg_1716);
    or_ln340_fu_1307_p2 <= (underflow_fu_1302_p2 or overflow_reg_1710);
    or_ln406_fu_793_p2 <= (r_fu_780_p2 or p_Result_14_reg_1505);
    or_ln557_fu_1230_p2 <= (xor_ln621_fu_1225_p2 or deleted_ones_fu_1205_p3);
    or_ln571_fu_1341_p2 <= (underflow_fu_1302_p2 or icmp_ln571_reg_1530);
    or_ln639_fu_963_p2 <= (xor_ln639_1_fu_957_p2 or tmp_26_fu_881_p3);
    or_ln645_fu_1117_p2 <= (xor_ln621_1_reg_1650 or Range1_all_zeros_1_reg_1686);
    or_ln652_1_fu_1199_p2 <= (tmp_28_fu_1192_p3 or Range1_all_zeros_fu_1106_p2);
    or_ln652_2_fu_1168_p2 <= (or_ln652_3_fu_1163_p2 or and_ln603_fu_1022_p2);
    or_ln652_3_fu_1163_p2 <= (xor_ln652_2_fu_1157_p2 or tmp_24_reg_1614);
    or_ln652_fu_1180_p2 <= (xor_ln652_1_fu_1174_p2 or or_ln652_2_fu_1168_p2);
    or_ln658_fu_1270_p2 <= (p_Result_17_fu_1056_p3 or and_ln658_fu_1265_p2);
    overflow_fu_1281_p2 <= (xor_ln658_1_fu_1276_p2 and or_ln658_fu_1270_p2);
    p_Result_15_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_560_p3),54));
    p_Result_17_fu_1056_p3 <= p_Val2_6_fu_1026_p3(11 downto 11);
    p_Result_1_fu_732_p3 <= man_V_fu_659_p3(to_integer(unsigned(sext_ln591_fu_728_p1)) downto to_integer(unsigned(sext_ln591_fu_728_p1))) when (to_integer(unsigned(sext_ln591_fu_728_p1))>= 0 and to_integer(unsigned(sext_ln591_fu_728_p1))<=53) else "-";
    p_Result_s_fu_768_p2 <= (man_V_fu_659_p3 and lshr_ln595_fu_762_p2);
    p_Val2_4_fu_715_p3 <= 
        trunc_ln586_fu_696_p1 when (icmp_ln585_fu_676_p2(0) = '1') else 
        select_ln588_fu_707_p3;
    p_Val2_5_fu_808_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_715_p3) + unsigned(zext_ln415_fu_804_p1));
    p_Val2_6_fu_1026_p3 <= 
        shl_ln604_fu_978_p2 when (and_ln603_fu_1022_p2(0) = '1') else 
        select_ln403_1_fu_1015_p3;
    pos1_fu_857_p2 <= std_logic_vector(unsigned(ap_const_lv12_6) + unsigned(F2_reg_1538));
    pos2_fu_866_p2 <= std_logic_vector(unsigned(ap_const_lv12_7) + unsigned(F2_reg_1538));
    qb_fu_740_p3 <= 
        p_Result_14_reg_1505 when (icmp_ln591_reg_1560(0) = '1') else 
        p_Result_1_fu_732_p3;
    r_V_fu_1074_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln635_reg_1675(31-1 downto 0)))));
    r_fu_780_p2 <= (icmp_ln598_reg_1565 and icmp_ln595_1_fu_774_p2);
    sel_tmp57_demorgan_fu_1353_p2 <= (icmp_ln571_reg_1530 or empty_143_reg_1632);
    sel_tmp58_fu_1357_p3 <= 
        select_ln571_1_fu_1346_p3 when (sel_tmp57_demorgan_fu_1353_p2(0) = '1') else 
        p_Val2_6_reg_1697;
    select_ln204_1_fu_1424_p3 <= 
        zext_ln206_reg_1722 when (icmp_ln1495_fu_1410_p2(0) = '1') else 
        ret_reg_320;
    select_ln204_fu_1416_p3 <= 
        flatten3_V_q0 when (icmp_ln1495_fu_1410_p2(0) = '1') else 
        p_04_3_i_reg_308;
    select_ln340_fu_1327_p3 <= 
        ap_const_lv12_7FF when (or_ln340_fu_1307_p2(0) = '1') else 
        p_Val2_6_reg_1697;
    select_ln403_1_fu_1015_p3 <= 
        p_Val2_5_reg_1608 when (and_ln403_1_fu_1010_p2(0) = '1') else 
        select_ln403_fu_998_p3;
    select_ln403_fu_998_p3 <= 
        p_Val2_5_reg_1608 when (and_ln403_fu_994_p2(0) = '1') else 
        select_ln582_fu_988_p3;
    select_ln557_fu_1251_p3 <= 
        empty_144_fu_1219_p2 when (and_ln557_fu_1247_p2(0) = '1') else 
        and_ln621_3_fu_1242_p2;
    select_ln571_1_fu_1346_p3 <= 
        select_ln571_fu_1334_p3 when (or_ln571_fu_1341_p2(0) = '1') else 
        p_Val2_6_reg_1697;
    select_ln571_fu_1334_p3 <= 
        ap_const_lv12_0 when (icmp_ln571_reg_1530(0) = '1') else 
        ap_const_lv12_800;
    select_ln582_fu_988_p3 <= 
        trunc_ln583_reg_1590 when (icmp_ln582_reg_1585(0) = '1') else 
        ap_const_lv12_0;
    select_ln588_fu_707_p3 <= 
        ap_const_lv12_FFF when (tmp_21_fu_700_p3(0) = '1') else 
        ap_const_lv12_0;
    select_ln595_fu_751_p3 <= 
        ap_const_lv6_0 when (icmp_ln595_reg_1575(0) = '1') else 
        sub_ln595_fu_746_p2;
    select_ln631_fu_1084_p3 <= 
        Range2_all_ones_fu_1079_p2 when (and_ln631_fu_1069_p2(0) = '1') else 
        xor_ln631_fu_1064_p2;
    select_ln639_1_fu_1141_p3 <= 
        and_ln641_fu_1111_p2 when (and_ln639_fu_1092_p2(0) = '1') else 
        select_ln642_1_fu_1134_p3;
    select_ln639_fu_1126_p3 <= 
        Range1_all_ones_fu_1096_p2 when (and_ln639_fu_1092_p2(0) = '1') else 
        select_ln642_fu_1121_p3;
    select_ln642_1_fu_1134_p3 <= 
        Range1_all_zeros_fu_1106_p2 when (and_ln642_reg_1691(0) = '1') else 
        or_ln645_fu_1117_p2;
    select_ln642_fu_1121_p3 <= 
        Range1_all_ones_1_reg_1657 when (and_ln642_reg_1691(0) = '1') else 
        xor_ln621_1_reg_1650;
        sext_ln581_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1553),32));

    sext_ln581cast_fu_975_p1 <= sext_ln581_reg_1580(12 - 1 downto 0);
        sext_ln591_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln591_fu_723_p2),32));

        sext_ln618_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_fu_857_p2),32));

        sext_ln619_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_866_p2),32));

    sh_amt_fu_608_p3 <= 
        add_ln581_fu_596_p2 when (QUAN_INC_fu_590_p2(0) = '1') else 
        sub_ln581_fu_602_p2;
    shl_ln604_fu_978_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1590),to_integer(unsigned('0' & sext_ln581cast_fu_975_p1(12-1 downto 0)))));
    shl_ln_fu_468_p3 <= (trunc_ln246_fu_464_p1 & ap_const_lv5_0);
    sub_ln581_fu_602_p2 <= std_logic_vector(unsigned(ap_const_lv12_6) - unsigned(F2_fu_584_p2));
    sub_ln595_fu_746_p2 <= std_logic_vector(signed(ap_const_lv6_3D) - signed(trunc_ln595_reg_1570));
    tmp63_cast_cast_fu_838_p3 <= 
        ap_const_lv12_2 when (QUAN_INC_reg_1547(0) = '1') else 
        ap_const_lv12_1;
    tmp_21_fu_700_p3 <= ireg_V_reg_1500(63 downto 63);
    tmp_22_fu_622_p4 <= F2_fu_584_p2(11 downto 3);
    tmp_26_fu_881_p3 <= pos1_fu_857_p2(11 downto 11);
    tmp_28_fu_1192_p3 <= pos1_reg_1638(11 downto 11);
    tmp_7_fu_560_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_556_p1);
    tmp_s_fu_476_p3 <= (i1_0_reg_286 & ap_const_lv5_0);
    trunc_ln246_fu_464_p1 <= i1_0_reg_286(5 - 1 downto 0);
    trunc_ln556_fu_530_p1 <= ireg_V_fu_527_p1(63 - 1 downto 0);
    trunc_ln565_fu_556_p1 <= ireg_V_fu_527_p1(52 - 1 downto 0);
    trunc_ln583_fu_672_p1 <= man_V_fu_659_p3(12 - 1 downto 0);
    trunc_ln586_fu_696_p1 <= ashr_ln586_fu_690_p2(12 - 1 downto 0);
    trunc_ln595_fu_638_p1 <= F2_fu_584_p2(6 - 1 downto 0);
    underflow_fu_1302_p2 <= (xor_ln659_fu_1297_p2 and select_ln557_reg_1704);
    xor_ln340_fu_1312_p2 <= (select_ln557_reg_1704 xor ap_const_lv1_1);
    xor_ln403_fu_1005_p2 <= (p_Result_16_reg_1602 xor ap_const_lv1_1);
    xor_ln416_fu_983_p2 <= (tmp_24_reg_1614 xor ap_const_lv1_1);
    xor_ln571_fu_1364_p2 <= (icmp_ln571_reg_1530 xor ap_const_lv1_1);
    xor_ln582_fu_822_p2 <= (icmp_ln582_fu_667_p2 xor ap_const_lv1_1);
    xor_ln603_fu_1044_p2 <= (ap_const_lv1_1 xor and_ln603_1_fu_1040_p2);
    xor_ln621_1_fu_889_p2 <= (tmp_26_fu_881_p3 xor ap_const_lv1_1);
    xor_ln621_fu_1225_p2 <= (icmp_ln621_reg_1643 xor ap_const_lv1_1);
    xor_ln631_fu_1064_p2 <= (tmp_27_reg_1664 xor ap_const_lv1_1);
    xor_ln639_1_fu_957_p2 <= (icmp_ln631_fu_929_p2 xor ap_const_lv1_1);
    xor_ln652_1_fu_1174_p2 <= (select_ln631_fu_1084_p3 xor ap_const_lv1_1);
    xor_ln652_2_fu_1157_p2 <= (ap_const_lv1_1 xor and_ln403_fu_994_p2);
    xor_ln658_1_fu_1276_p2 <= (p_Result_14_reg_1505 xor ap_const_lv1_1);
    xor_ln658_fu_1259_p2 <= (deleted_zeros_fu_1149_p3 xor ap_const_lv1_1);
    xor_ln659_fu_1297_p2 <= (ap_const_lv1_1 xor and_ln659_reg_1716);
    zext_ln203_9_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_reg_1465),64));
    zext_ln203_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_297),12));
    zext_ln204_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_reg_332),64));
    zext_ln206_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_reg_332),32));
    zext_ln234_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_275),64));
    zext_ln245_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_476_p3),12));
    zext_ln245_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_297),10));
    zext_ln247_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_504_p2),64));
    zext_ln415_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln406_fu_798_p2),12));
    zext_ln461_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_542_p4),12));
    zext_ln586_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_664_p1),54));
    zext_ln595_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln595_fu_751_p3),54));
    zext_ln623_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln618_fu_862_p1),54));
    zext_ln635_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln619_fu_871_p1),54));
end behav;
