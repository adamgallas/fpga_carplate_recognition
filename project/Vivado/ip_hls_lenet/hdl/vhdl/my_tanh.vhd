-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_tanh is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of my_tanh is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv64_C010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4010000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_FCB : STD_LOGIC_VECTOR (11 downto 0) := "111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tanh_index_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tanh_index_V_ce0 : STD_LOGIC;
    signal tanh_index_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tanh_value_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tanh_value_V_ce0 : STD_LOGIC;
    signal tanh_value_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln885_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_3_fu_199_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_V_3_reg_539 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln893_fu_233_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_552 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln908_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_7_reg_577 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_472_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_11_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln924_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln924_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln729_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln729_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln924_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal and_ln924_1_reg_611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln54_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_615 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_fu_505_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_619 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1495_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_138 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_agg_result_V_0_phi_fu_154_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_0_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_193_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_207_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_10_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_252_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_268_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_278_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln897_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_4_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln897_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_305_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_242_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln899_fu_319_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_3_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_428_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal sub_ln915_fu_454_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_447_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_459_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_8_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_465_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln924_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1495_fu_516_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_168_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component Lenet_HLS_dcmp_64g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component my_tanh_tanh_indeeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component my_tanh_tanh_valufYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    tanh_index_V_U : component my_tanh_tanh_indeeOg
    generic map (
        DataWidth => 9,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tanh_index_V_address0,
        ce0 => tanh_index_V_ce0,
        q0 => tanh_index_V_q0);

    tanh_value_V_U : component my_tanh_tanh_valufYi
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tanh_value_V_address0,
        ce0 => tanh_value_V_ce0,
        q0 => tanh_value_V_q0);

    Lenet_HLS_dcmp_64g8j_U18 : component Lenet_HLS_dcmp_64g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_168_opcode,
        dout => grp_fu_168_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_return_preg <= ap_phi_mux_agg_result_V_0_phi_fu_154_p8;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_499_p2 = ap_const_lv1_1)) or ((icmp_ln885_reg_530 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fu_174_p2 = ap_const_lv1_1)))) then 
                agg_result_V_0_reg_149 <= ap_const_lv8_40;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fu_174_p2 = ap_const_lv1_1))) then 
                agg_result_V_0_reg_149 <= ap_const_lv8_C0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln54_reg_615 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln924_1_reg_611) and (ap_const_lv1_0 = and_ln924_reg_607)) or ((icmp_ln54_reg_615 = ap_const_lv1_0) and (icmp_ln885_reg_530 = ap_const_lv1_1))))) then 
                agg_result_V_0_reg_149 <= tanh_value_V_q0;
            end if; 
        end if;
    end process;

    i_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1495_fu_520_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_0_reg_138 <= i_reg_619;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((grp_fu_174_p2 = ap_const_lv1_0) or (icmp_ln885_reg_530 = ap_const_lv1_1)))) then 
                i_0_reg_138 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln908_reg_567 <= add_ln908_fu_358_p2;
                icmp_ln908_reg_562 <= icmp_ln908_fu_352_p2;
                    or_ln_reg_557(0) <= or_ln_fu_344_p3(0);
                sub_ln908_reg_572 <= sub_ln908_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln885_reg_530 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                and_ln924_1_reg_611 <= grp_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln924_reg_607 <= grp_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bitcast_ln729_reg_602 <= bitcast_ln729_fu_495_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_619 <= i_fu_505_p2;
                icmp_ln54_reg_615 <= icmp_ln54_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln885_reg_530 <= icmp_ln885_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln924_1_reg_587 <= icmp_ln924_1_fu_438_p2;
                m_7_reg_577 <= m_2_fu_404_p2(63 downto 1);
                tmp_6_reg_582 <= m_2_fu_404_p2(54 downto 54);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln885_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                l_reg_547 <= l_fu_225_p3;
                p_Result_9_reg_534 <= x_V(11 downto 11);
                tmp_V_3_reg_539 <= tmp_V_3_fu_199_p3;
                trunc_ln893_reg_552 <= trunc_ln893_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                or_ln924_reg_597 <= or_ln924_fu_490_p2;
                p_Result_11_reg_592 <= p_Result_11_fu_472_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_499_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    zext_ln55_reg_624(8 downto 0) <= zext_ln55_fu_511_p1(8 downto 0);
            end if;
        end if;
    end process;
    or_ln_reg_557(31 downto 1) <= "0000000000000000000000000000000";
    zext_ln55_reg_624(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln885_fu_179_p2, icmp_ln885_reg_530, grp_fu_174_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln54_fu_499_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln1495_fu_520_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln885_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((icmp_ln885_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_fu_174_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((grp_fu_174_p2 = ap_const_lv1_0) or (icmp_ln885_reg_530 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln54_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1495_fu_520_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_fu_299_p2 <= (icmp_ln897_fu_262_p2 and icmp_ln897_1_fu_293_p2);
    add_ln899_fu_319_p2 <= std_logic_vector(signed(ap_const_lv12_FCB) + signed(trunc_ln894_fu_242_p1));
    add_ln908_fu_358_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_fu_237_p2));
    add_ln915_fu_459_p2 <= std_logic_vector(unsigned(sub_ln915_fu_454_p2) + unsigned(select_ln915_fu_447_p3));
    and_ln899_fu_332_p2 <= (xor_ln899_fu_313_p2 and p_Result_3_fu_325_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_V_0_phi_fu_154_p8_assign_proc : process(tanh_value_V_q0, icmp_ln885_reg_530, and_ln924_reg_607, and_ln924_1_reg_611, icmp_ln54_reg_615, agg_result_V_0_reg_149, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((icmp_ln54_reg_615 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln924_1_reg_611) and (ap_const_lv1_0 = and_ln924_reg_607)) or ((icmp_ln54_reg_615 = ap_const_lv1_0) and (icmp_ln885_reg_530 = ap_const_lv1_1))))) then 
            ap_phi_mux_agg_result_V_0_phi_fu_154_p8 <= tanh_value_V_q0;
        else 
            ap_phi_mux_agg_result_V_0_phi_fu_154_p8 <= agg_result_V_0_reg_149;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_agg_result_V_0_phi_fu_154_p8, ap_CS_fsm_state10, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_return <= ap_phi_mux_agg_result_V_0_phi_fu_154_p8;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln729_fu_495_p1 <= p_Result_11_reg_592;

    grp_fu_168_opcode_assign_proc : process(ap_CS_fsm_state5, grp_fu_174_p2, ap_CS_fsm_state6)
    begin
        if (((grp_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_168_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_168_opcode <= ap_const_lv5_4;
        else 
            grp_fu_168_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(bitcast_ln729_fu_495_p1, bitcast_ln729_reg_602, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_168_p0 <= bitcast_ln729_reg_602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_168_p0 <= bitcast_ln729_fu_495_p1;
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_168_p1 <= ap_const_lv64_4010000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_168_p1 <= ap_const_lv64_C010000000000000;
        else 
            grp_fu_168_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_174_p2 <= (or_ln924_reg_597 and grp_fu_168_p2);
    i_fu_505_p2 <= std_logic_vector(unsigned(i_0_reg_138) + unsigned(ap_const_lv9_1));
    icmp_ln1495_fu_520_p2 <= "1" when (signed(sext_ln1495_fu_516_p1) > signed(x_V)) else "0";
    icmp_ln54_fu_499_p2 <= "1" when (i_0_reg_138 = ap_const_lv9_100) else "0";
    icmp_ln885_fu_179_p2 <= "1" when (x_V = ap_const_lv12_0) else "0";
    icmp_ln897_1_fu_293_p2 <= "0" when (p_Result_4_fu_288_p2 = ap_const_lv12_0) else "1";
    icmp_ln897_fu_262_p2 <= "1" when (signed(tmp_4_fu_252_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_352_p2 <= "1" when (signed(lsb_index_fu_246_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_438_p2 <= "1" when (trunc_ln3_fu_428_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_484_p2 <= "0" when (add_ln915_fu_459_p2 = ap_const_lv11_7FF) else "1";
    
    l_fu_225_p3_proc : process(p_Result_10_fu_217_p3)
    begin
        l_fu_225_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_10_fu_217_p3(i) = '1' then
                l_fu_225_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_246_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_237_p2));
    lshr_ln897_fu_282_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv12_FFF),to_integer(unsigned('0' & zext_ln897_fu_278_p1(12-1 downto 0)))));
    lshr_ln908_fu_376_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_373_p1),to_integer(unsigned('0' & add_ln908_reg_567(31-1 downto 0)))));
    m_1_fu_394_p3 <= 
        zext_ln908_fu_381_p1 when (icmp_ln908_reg_562(0) = '1') else 
        shl_ln908_fu_388_p2;
    m_2_fu_404_p2 <= std_logic_vector(unsigned(zext_ln911_fu_401_p1) + unsigned(m_1_fu_394_p3));
    m_8_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_7_reg_577),64));
    m_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_reg_539),64));
    or_ln899_fu_338_p2 <= (and_ln899_fu_332_p2 or a_fu_299_p2);
    or_ln924_fu_490_p2 <= (icmp_ln924_fu_484_p2 or icmp_ln924_1_reg_587);
    or_ln_fu_344_p3 <= (ap_const_lv31_0 & or_ln899_fu_338_p2);
    p_Result_10_fu_217_p3 <= (ap_const_lv20_FFFFF & p_Result_s_fu_207_p4);
    p_Result_11_fu_472_p5 <= (tmp_1_fu_465_p3 & m_8_fu_444_p1(51 downto 0));
    p_Result_3_fu_325_p3 <= tmp_V_3_reg_539(to_integer(unsigned(add_ln899_fu_319_p2)) downto to_integer(unsigned(add_ln899_fu_319_p2))) when (to_integer(unsigned(add_ln899_fu_319_p2))>= 0 and to_integer(unsigned(add_ln899_fu_319_p2))<=11) else "-";
    p_Result_4_fu_288_p2 <= (tmp_V_3_reg_539 and lshr_ln897_fu_282_p2);
    p_Result_9_fu_185_p3 <= x_V(11 downto 11);
    
    p_Result_s_fu_207_p4_proc : process(tmp_V_3_fu_199_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable p_Result_s_fu_207_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_B(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_3_fu_199_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_B(4-1 downto 0)));
            for p_Result_s_fu_207_p4_i in 0 to 12-1 loop
                v0_cpy(p_Result_s_fu_207_p4_i) := tmp_V_3_fu_199_p3(12-1-p_Result_s_fu_207_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(12-1 downto 0)))));
        res_mask := res_mask(12-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_207_p4 <= resvalue(12-1 downto 0);
    end process;

    select_ln915_fu_447_p3 <= 
        ap_const_lv11_3FF when (tmp_6_reg_582(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1495_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tanh_index_V_q0),12));

    shl_ln908_fu_388_p2 <= std_logic_vector(shift_left(unsigned(m_fu_370_p1),to_integer(unsigned('0' & zext_ln908_1_fu_385_p1(31-1 downto 0)))));
    sub_ln894_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv32_C) - unsigned(l_reg_547));
    sub_ln897_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) - unsigned(trunc_ln897_fu_268_p1));
    sub_ln908_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_fu_237_p2));
    sub_ln915_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_552));
    tanh_index_V_address0 <= zext_ln55_fu_511_p1(8 - 1 downto 0);

    tanh_index_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            tanh_index_V_ce0 <= ap_const_logic_1;
        else 
            tanh_index_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tanh_value_V_address0 <= zext_ln55_reg_624(8 - 1 downto 0);

    tanh_value_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            tanh_value_V_ce0 <= ap_const_logic_1;
        else 
            tanh_value_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_465_p3 <= (p_Result_9_reg_534 & add_ln915_fu_459_p2);
    tmp_4_fu_252_p4 <= lsb_index_fu_246_p2(31 downto 1);
    tmp_5_fu_305_p3 <= lsb_index_fu_246_p2(31 downto 31);
    tmp_V_3_fu_199_p3 <= 
        tmp_V_fu_193_p2 when (p_Result_9_fu_185_p3(0) = '1') else 
        x_V;
    tmp_V_fu_193_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(x_V));
    trunc_ln3_fu_428_p4 <= m_2_fu_404_p2(52 downto 1);
    trunc_ln893_fu_233_p1 <= l_fu_225_p3(11 - 1 downto 0);
    trunc_ln894_fu_242_p1 <= sub_ln894_fu_237_p2(12 - 1 downto 0);
    trunc_ln897_fu_268_p1 <= sub_ln894_fu_237_p2(4 - 1 downto 0);
    xor_ln899_fu_313_p2 <= (tmp_5_fu_305_p3 xor ap_const_lv1_1);
    zext_ln55_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_138),64));
    zext_ln897_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_272_p2),12));
    zext_ln907_1_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_3_reg_539),32));
    zext_ln908_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_reg_572),64));
    zext_ln908_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_376_p2),64));
    zext_ln911_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_557),64));
end behav;
