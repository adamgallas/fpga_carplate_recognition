-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Flatten_Layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer5_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    layer5_V_ce0 : OUT STD_LOGIC;
    layer5_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    flatten1_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flatten1_V_ce0 : OUT STD_LOGIC;
    flatten1_V_we0 : OUT STD_LOGIC;
    flatten1_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of Flatten_Layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_150_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal index_fu_156_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal index_reg_273 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln214_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln216_fu_162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln216_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_172_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_286 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln220_fu_178_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln220_reg_291 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln216_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln218_fu_184_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln218_reg_296 : STD_LOGIC_VECTOR (9 downto 0);
    signal t_fu_194_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_reg_304 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln203_11_fu_245_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_11_reg_309 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln218_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln220_1_fu_259_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_77 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_0_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal index_1_reg_100 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_111 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_2_reg_122 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_12_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_204_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_10_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_9_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_11_fu_227_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_231_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_10_fu_239_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_77 <= i_reg_268;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_77 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    index_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_0_reg_88 <= index_reg_273;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                index_0_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    index_1_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                index_1_reg_100 <= add_ln220_reg_291;
            elsif (((icmp_ln214_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                index_1_reg_100 <= index_0_reg_88;
            end if; 
        end if;
    end process;

    index_2_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                index_2_reg_122 <= add_ln220_1_fu_259_p2;
            elsif (((icmp_ln216_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                index_2_reg_122 <= index_1_reg_100;
            end if; 
        end if;
    end process;

    j_0_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_111 <= j_reg_286;
            elsif (((icmp_ln214_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_111 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    t_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_0_reg_133 <= t_reg_304;
            elsif (((icmp_ln216_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_0_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln203_11_reg_309 <= add_ln203_11_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln220_reg_291 <= add_ln220_fu_178_p2;
                    zext_ln218_reg_296(2 downto 0) <= zext_ln218_fu_184_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_268 <= i_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln214_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                index_reg_273 <= index_fu_156_p2;
                    zext_ln216_reg_278(2 downto 0) <= zext_ln216_fu_162_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_286 <= j_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_reg_304 <= t_fu_194_p2;
            end if;
        end if;
    end process;
    zext_ln216_reg_278(7 downto 3) <= "00000";
    zext_ln218_reg_296(9 downto 3) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln214_fu_144_p2, ap_CS_fsm_state3, icmp_ln216_fu_166_p2, ap_CS_fsm_state4, icmp_ln218_fu_188_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln214_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln216_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln218_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln203_10_fu_239_p2 <= std_logic_vector(unsigned(zext_ln203_11_fu_227_p1) + unsigned(p_shl_cast_fu_231_p3));
    add_ln203_11_fu_245_p2 <= std_logic_vector(unsigned(add_ln203_10_fu_239_p2) + unsigned(zext_ln218_reg_296));
    add_ln203_9_fu_222_p2 <= std_logic_vector(unsigned(add_ln203_fu_216_p2) + unsigned(zext_ln216_reg_278));
    add_ln203_fu_216_p2 <= std_logic_vector(unsigned(zext_ln203_fu_200_p1) + unsigned(zext_ln203_10_fu_212_p1));
    add_ln220_1_fu_259_p2 <= std_logic_vector(unsigned(index_2_reg_122) + unsigned(ap_const_lv9_1));
    add_ln220_fu_178_p2 <= std_logic_vector(unsigned(index_1_reg_100) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln214_fu_144_p2)
    begin
        if ((((icmp_ln214_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln214_fu_144_p2)
    begin
        if (((icmp_ln214_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    flatten1_V_address0 <= zext_ln219_fu_254_p1(9 - 1 downto 0);

    flatten1_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flatten1_V_ce0 <= ap_const_logic_1;
        else 
            flatten1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flatten1_V_d0 <= layer5_V_q0;

    flatten1_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            flatten1_V_we0 <= ap_const_logic_1;
        else 
            flatten1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_150_p2 <= std_logic_vector(unsigned(i_0_reg_77) + unsigned(ap_const_lv3_1));
    icmp_ln214_fu_144_p2 <= "1" when (i_0_reg_77 = ap_const_lv3_5) else "0";
    icmp_ln216_fu_166_p2 <= "1" when (j_0_reg_111 = ap_const_lv3_5) else "0";
    icmp_ln218_fu_188_p2 <= "1" when (t_0_reg_133 = ap_const_lv5_10) else "0";
    index_fu_156_p2 <= std_logic_vector(unsigned(index_0_reg_88) + unsigned(ap_const_lv9_50));
    j_fu_172_p2 <= std_logic_vector(unsigned(j_0_reg_111) + unsigned(ap_const_lv3_1));
    layer5_V_address0 <= zext_ln203_12_fu_250_p1(9 - 1 downto 0);

    layer5_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer5_V_ce0 <= ap_const_logic_1;
        else 
            layer5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_231_p3 <= (add_ln203_9_fu_222_p2 & ap_const_lv2_0);
    t_fu_194_p2 <= std_logic_vector(unsigned(t_0_reg_133) + unsigned(ap_const_lv5_1));
    tmp_s_fu_204_p3 <= (t_0_reg_133 & ap_const_lv2_0);
    zext_ln203_10_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_204_p3),8));
    zext_ln203_11_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_9_fu_222_p2),10));
    zext_ln203_12_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_11_reg_309),64));
    zext_ln203_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_0_reg_133),8));
    zext_ln216_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_77),8));
    zext_ln218_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_111),10));
    zext_ln219_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_reg_122),64));
end behav;
