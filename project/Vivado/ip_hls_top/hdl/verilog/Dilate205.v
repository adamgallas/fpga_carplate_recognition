// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Dilate205 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [9:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln118_9_reg_1182;
reg   [0:0] icmp_ln899_reg_1138;
reg   [0:0] icmp_ln887_reg_1129;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] and_ln512_reg_1205;
reg   [0:0] and_ln512_reg_1205_pp0_iter4_reg;
reg   [31:0] t_V_9_reg_281;
wire  signed [31:0] stop_row_fu_292_p1;
reg  signed [31:0] stop_row_reg_1076;
reg    ap_block_state1;
wire  signed [31:0] cols_fu_300_p1;
reg  signed [31:0] cols_reg_1085;
wire  signed [31:0] sext_ln443_fu_314_p1;
reg  signed [31:0] sext_ln443_reg_1090;
wire  signed [31:0] sext_ln443_3_fu_324_p1;
reg  signed [31:0] sext_ln443_3_reg_1095;
wire   [10:0] add_ln458_fu_332_p2;
reg   [10:0] add_ln458_reg_1100;
wire   [1:0] add_ln507_fu_342_p2;
reg   [1:0] add_ln507_reg_1105;
wire   [1:0] add_ln458_3_fu_348_p2;
reg   [1:0] add_ln458_3_reg_1115;
wire   [0:0] icmp_ln443_fu_354_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_359_p2;
reg   [31:0] i_V_reg_1124;
wire   [0:0] icmp_ln887_fu_365_p2;
wire   [0:0] xor_ln457_fu_370_p2;
reg   [0:0] xor_ln457_reg_1133;
wire   [0:0] icmp_ln899_fu_386_p2;
wire   [0:0] icmp_ln879_fu_392_p2;
reg   [0:0] icmp_ln879_reg_1143;
wire   [0:0] icmp_ln879_4_fu_398_p2;
reg   [0:0] icmp_ln879_4_reg_1147;
wire   [0:0] icmp_ln899_4_fu_404_p2;
reg   [0:0] icmp_ln899_4_reg_1151;
wire   [1:0] sub_ln493_fu_551_p2;
reg   [1:0] sub_ln493_reg_1158;
wire   [1:0] sub_ln493_5_fu_577_p2;
reg   [1:0] sub_ln493_5_reg_1163;
wire   [1:0] sub_ln493_6_fu_603_p2;
reg   [1:0] sub_ln493_6_reg_1168;
wire   [0:0] icmp_ln444_fu_608_p2;
reg   [0:0] icmp_ln444_reg_1173;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op128_read_state4;
reg    ap_predicate_op134_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln444_reg_1173_pp0_iter1_reg;
reg   [0:0] icmp_ln444_reg_1173_pp0_iter2_reg;
reg   [0:0] icmp_ln444_reg_1173_pp0_iter3_reg;
wire   [31:0] j_V_fu_613_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln118_9_fu_670_p2;
reg   [0:0] and_ln118_9_reg_1182_pp0_iter1_reg;
wire  signed [12:0] x_fu_695_p3;
reg  signed [12:0] x_reg_1186;
wire   [0:0] or_ln457_fu_707_p2;
reg   [0:0] or_ln457_reg_1191;
reg   [0:0] or_ln457_reg_1191_pp0_iter1_reg;
wire   [1:0] sub_ln493_7_fu_712_p2;
reg   [1:0] sub_ln493_7_reg_1198;
reg   [1:0] sub_ln493_7_reg_1198_pp0_iter1_reg;
wire   [0:0] and_ln512_fu_717_p2;
reg   [0:0] and_ln512_reg_1205_pp0_iter1_reg;
reg   [0:0] and_ln512_reg_1205_pp0_iter2_reg;
reg   [0:0] and_ln512_reg_1205_pp0_iter3_reg;
reg   [10:0] k_buf_0_val_4_addr_reg_1214;
reg   [10:0] k_buf_0_val_5_addr_reg_1220;
wire   [7:0] src_kernel_win_0_va_58_fu_821_p3;
reg   [7:0] src_kernel_win_0_va_58_reg_1226;
reg   [7:0] src_kernel_win_0_va_58_reg_1226_pp0_iter3_reg;
reg   [7:0] src_kernel_win_0_va_58_reg_1226_pp0_iter4_reg;
wire   [7:0] src_kernel_win_0_va_59_fu_839_p3;
reg   [7:0] src_kernel_win_0_va_59_reg_1233;
reg   [7:0] src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg;
wire   [7:0] src_kernel_win_0_va_60_fu_857_p3;
reg   [7:0] src_kernel_win_0_va_60_reg_1240;
wire   [7:0] select_ln188_fu_876_p3;
reg   [7:0] select_ln188_reg_1247;
wire   [7:0] select_ln188_17_fu_920_p3;
reg   [7:0] select_ln188_17_reg_1253;
wire   [7:0] select_ln188_20_fu_976_p3;
reg   [7:0] select_ln188_20_reg_1259;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [10:0] k_buf_0_val_3_address0;
reg    k_buf_0_val_3_ce0;
reg    k_buf_0_val_3_we0;
wire   [7:0] k_buf_0_val_3_q0;
wire   [10:0] k_buf_0_val_3_address1;
reg    k_buf_0_val_3_ce1;
reg    k_buf_0_val_3_we1;
wire   [10:0] k_buf_0_val_4_address0;
reg    k_buf_0_val_4_ce0;
reg    k_buf_0_val_4_we0;
wire   [7:0] k_buf_0_val_4_q0;
wire   [10:0] k_buf_0_val_4_address1;
reg    k_buf_0_val_4_ce1;
reg    k_buf_0_val_4_we1;
wire   [10:0] k_buf_0_val_5_address0;
reg    k_buf_0_val_5_ce0;
reg    k_buf_0_val_5_we0;
wire   [7:0] k_buf_0_val_5_q0;
wire   [10:0] k_buf_0_val_5_address1;
reg    k_buf_0_val_5_ce1;
reg    k_buf_0_val_5_we1;
reg   [31:0] t_V_reg_270;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln835_fu_725_p1;
reg   [7:0] src_kernel_win_0_va_fu_142;
reg   [7:0] src_kernel_win_0_va_53_fu_146;
reg   [7:0] src_kernel_win_0_va_54_fu_150;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_63;
reg   [7:0] src_kernel_win_0_va_55_fu_154;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_64;
reg   [7:0] src_kernel_win_0_va_56_fu_158;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_65;
reg   [7:0] src_kernel_win_0_va_57_fu_162;
reg   [7:0] ap_sig_allocacmp_src_kernel_win_0_va_66;
reg   [7:0] right_border_buf_0_s_fu_166;
wire   [7:0] col_buf_0_val_0_0_fu_752_p3;
reg   [7:0] right_border_buf_0_14_fu_170;
wire   [7:0] col_buf_0_val_2_0_fu_788_p3;
reg   [7:0] right_border_buf_0_15_fu_174;
wire   [7:0] col_buf_0_val_1_0_fu_770_p3;
reg    ap_block_pp0_stage0_01001;
wire  signed [8:0] stop_row_fu_292_p0;
wire  signed [8:0] sext_ln113_fu_296_p0;
wire  signed [9:0] cols_fu_300_p0;
wire  signed [9:0] sext_ln1174_fu_304_p0;
wire  signed [10:0] sext_ln1174_fu_304_p1;
wire   [10:0] add_ln443_fu_308_p2;
wire  signed [9:0] sext_ln113_fu_296_p1;
wire   [9:0] add_ln443_3_fu_318_p2;
wire  signed [9:0] trunc_ln458_fu_328_p0;
wire  signed [8:0] trunc_ln506_fu_338_p0;
wire   [1:0] trunc_ln506_fu_338_p1;
wire   [1:0] trunc_ln458_fu_328_p1;
wire   [30:0] tmp_fu_376_p4;
wire   [31:0] add_ln506_fu_413_p2;
wire   [0:0] tmp_62_fu_419_p3;
wire   [0:0] icmp_ln118_fu_433_p2;
wire   [0:0] xor_ln118_9_fu_427_p2;
wire   [31:0] add_ln506_5_fu_452_p2;
wire   [0:0] tmp_64_fu_458_p3;
wire   [0:0] icmp_ln118_7_fu_472_p2;
wire   [0:0] xor_ln118_10_fu_466_p2;
wire   [31:0] add_ln506_6_fu_491_p2;
wire   [0:0] tmp_66_fu_497_p3;
wire   [0:0] icmp_ln118_8_fu_511_p2;
wire   [0:0] xor_ln118_11_fu_505_p2;
wire   [1:0] trunc_ln506_3_fu_409_p1;
wire   [0:0] tmp_63_fu_444_p3;
wire   [0:0] and_ln118_fu_438_p2;
wire   [1:0] add_ln118_fu_530_p2;
wire   [1:0] select_ln118_fu_536_p3;
wire   [1:0] select_ln118_11_fu_543_p3;
wire   [0:0] tmp_65_fu_483_p3;
wire   [0:0] and_ln118_7_fu_477_p2;
wire   [1:0] xor_ln118_fu_556_p2;
wire   [1:0] select_ln118_12_fu_562_p3;
wire   [1:0] select_ln118_13_fu_569_p3;
wire   [0:0] tmp_67_fu_522_p3;
wire   [0:0] and_ln118_8_fu_516_p2;
wire   [1:0] add_ln118_3_fu_582_p2;
wire   [1:0] select_ln118_14_fu_588_p3;
wire   [1:0] select_ln118_15_fu_595_p3;
wire   [30:0] tmp_68_fu_619_p4;
wire   [12:0] trunc_ln451_fu_635_p1;
wire   [31:0] ImagLoc_x_fu_639_p2;
wire   [0:0] tmp_69_fu_651_p3;
wire   [0:0] icmp_ln118_9_fu_665_p2;
wire   [0:0] xor_ln118_12_fu_659_p2;
wire   [0:0] tmp_70_fu_676_p3;
wire   [10:0] select_ln121_fu_684_p3;
wire   [12:0] add_ln451_3_fu_645_p2;
wire  signed [12:0] sext_ln121_fu_691_p1;
wire   [1:0] trunc_ln458_3_fu_703_p1;
wire   [0:0] icmp_ln891_fu_629_p2;
wire  signed [31:0] sext_ln118_fu_722_p1;
wire   [7:0] tmp_26_fu_741_p5;
wire   [7:0] tmp_27_fu_759_p5;
wire   [7:0] tmp_28_fu_777_p5;
wire   [7:0] tmp_29_fu_810_p5;
wire   [7:0] tmp_30_fu_828_p5;
wire   [7:0] tmp_31_fu_846_p5;
wire   [0:0] icmp_ln188_fu_870_p2;
wire   [0:0] icmp_ln188_15_fu_890_p2;
wire   [7:0] select_ln188_15_fu_894_p3;
wire   [0:0] icmp_ln188_16_fu_900_p2;
wire   [7:0] select_ln188_16_fu_906_p3;
wire   [0:0] icmp_ln188_17_fu_914_p2;
wire   [0:0] icmp_ln188_18_fu_946_p2;
wire   [7:0] select_ln188_18_fu_950_p3;
wire   [0:0] icmp_ln188_19_fu_956_p2;
wire   [7:0] select_ln188_19_fu_962_p3;
wire   [0:0] icmp_ln188_20_fu_970_p2;
wire   [0:0] icmp_ln188_21_fu_1008_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op129_store_state4;
reg    ap_enable_operation_129;
reg    ap_enable_state4_pp0_iter1_stage0;
reg    ap_enable_operation_127;
reg    ap_enable_operation_145;
reg    ap_enable_state5_pp0_iter2_stage0;
reg    ap_predicate_op148_store_state5;
reg    ap_enable_operation_148;
reg    ap_predicate_op130_store_state4;
reg    ap_enable_operation_130;
wire    ap_enable_operation_125;
wire    ap_enable_operation_142;
reg    ap_predicate_op149_store_state5;
reg    ap_enable_operation_149;
reg    ap_predicate_op132_store_state4;
reg    ap_enable_operation_132;
wire    ap_enable_operation_123;
wire    ap_enable_operation_139;
reg    ap_predicate_op135_store_state4;
reg    ap_enable_operation_135;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_3_address0),
    .ce0(k_buf_0_val_3_ce0),
    .we0(k_buf_0_val_3_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_3_q0),
    .address1(k_buf_0_val_3_address1),
    .ce1(k_buf_0_val_3_ce1),
    .we1(k_buf_0_val_3_we1),
    .d1(p_src_data_stream_V_dout)
);

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_4_address0),
    .ce0(k_buf_0_val_4_ce0),
    .we0(k_buf_0_val_4_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_4_q0),
    .address1(k_buf_0_val_4_address1),
    .ce1(k_buf_0_val_4_ce1),
    .we1(k_buf_0_val_4_we1),
    .d1(k_buf_0_val_3_q0)
);

Dilate203_k_buf_0hbi #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
k_buf_0_val_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(k_buf_0_val_5_address0),
    .ce0(k_buf_0_val_5_ce0),
    .we0(k_buf_0_val_5_we0),
    .d0(p_src_data_stream_V_dout),
    .q0(k_buf_0_val_5_q0),
    .address1(k_buf_0_val_5_address1),
    .ce1(k_buf_0_val_5_ce1),
    .we1(k_buf_0_val_5_we1),
    .d1(k_buf_0_val_4_q0)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U112(
    .din0(right_border_buf_0_s_fu_166),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_7_reg_1198_pp0_iter1_reg),
    .dout(tmp_26_fu_741_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U113(
    .din0(right_border_buf_0_15_fu_174),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_7_reg_1198_pp0_iter1_reg),
    .dout(tmp_27_fu_759_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U114(
    .din0(right_border_buf_0_14_fu_170),
    .din1(8'd0),
    .din2(8'd0),
    .din3(sub_ln493_7_reg_1198_pp0_iter1_reg),
    .dout(tmp_28_fu_777_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U115(
    .din0(col_buf_0_val_0_0_fu_752_p3),
    .din1(col_buf_0_val_1_0_fu_770_p3),
    .din2(col_buf_0_val_2_0_fu_788_p3),
    .din3(sub_ln493_reg_1158),
    .dout(tmp_29_fu_810_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U116(
    .din0(col_buf_0_val_0_0_fu_752_p3),
    .din1(col_buf_0_val_1_0_fu_770_p3),
    .din2(col_buf_0_val_2_0_fu_788_p3),
    .din3(sub_ln493_5_reg_1163),
    .dout(tmp_30_fu_828_p5)
);

top_mux_32_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
top_mux_32_8_1_1_U117(
    .din0(col_buf_0_val_0_0_fu_752_p3),
    .din1(col_buf_0_val_1_0_fu_770_p3),
    .din2(col_buf_0_val_2_0_fu_788_p3),
    .din3(sub_ln493_6_reg_1168),
    .dout(tmp_31_fu_846_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln443_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln443_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((icmp_ln443_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_608_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_9_reg_281 <= j_V_fu_613_p2;
    end else if (((icmp_ln443_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_9_reg_281 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_V_reg_270 <= i_V_reg_1124;
    end else if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_270 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln458_3_reg_1115 <= add_ln458_3_fu_348_p2;
        add_ln458_reg_1100 <= add_ln458_fu_332_p2;
        add_ln507_reg_1105 <= add_ln507_fu_342_p2;
        cols_reg_1085 <= cols_fu_300_p1;
        sext_ln443_3_reg_1095 <= sext_ln443_3_fu_324_p1;
        sext_ln443_reg_1090 <= sext_ln443_fu_314_p1;
        stop_row_reg_1076 <= stop_row_fu_292_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_fu_608_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_9_reg_1182 <= and_ln118_9_fu_670_p2;
        and_ln512_reg_1205 <= and_ln512_fu_717_p2;
        or_ln457_reg_1191 <= or_ln457_fu_707_p2;
        sub_ln493_7_reg_1198 <= sub_ln493_7_fu_712_p2;
        x_reg_1186 <= x_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln118_9_reg_1182_pp0_iter1_reg <= and_ln118_9_reg_1182;
        and_ln512_reg_1205_pp0_iter1_reg <= and_ln512_reg_1205;
        icmp_ln444_reg_1173 <= icmp_ln444_fu_608_p2;
        icmp_ln444_reg_1173_pp0_iter1_reg <= icmp_ln444_reg_1173;
        k_buf_0_val_4_addr_reg_1214 <= zext_ln835_fu_725_p1;
        k_buf_0_val_5_addr_reg_1220 <= zext_ln835_fu_725_p1;
        or_ln457_reg_1191_pp0_iter1_reg <= or_ln457_reg_1191;
        sub_ln493_7_reg_1198_pp0_iter1_reg <= sub_ln493_7_reg_1198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln512_reg_1205_pp0_iter2_reg <= and_ln512_reg_1205_pp0_iter1_reg;
        and_ln512_reg_1205_pp0_iter3_reg <= and_ln512_reg_1205_pp0_iter2_reg;
        and_ln512_reg_1205_pp0_iter4_reg <= and_ln512_reg_1205_pp0_iter3_reg;
        icmp_ln444_reg_1173_pp0_iter2_reg <= icmp_ln444_reg_1173_pp0_iter1_reg;
        icmp_ln444_reg_1173_pp0_iter3_reg <= icmp_ln444_reg_1173_pp0_iter2_reg;
        src_kernel_win_0_va_58_reg_1226 <= src_kernel_win_0_va_58_fu_821_p3;
        src_kernel_win_0_va_58_reg_1226_pp0_iter3_reg <= src_kernel_win_0_va_58_reg_1226;
        src_kernel_win_0_va_58_reg_1226_pp0_iter4_reg <= src_kernel_win_0_va_58_reg_1226_pp0_iter3_reg;
        src_kernel_win_0_va_59_reg_1233 <= src_kernel_win_0_va_59_fu_839_p3;
        src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg <= src_kernel_win_0_va_59_reg_1233;
        src_kernel_win_0_va_60_reg_1240 <= src_kernel_win_0_va_60_fu_857_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_1124 <= i_V_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln879_4_reg_1147 <= icmp_ln879_4_fu_398_p2;
        icmp_ln879_reg_1143 <= icmp_ln879_fu_392_p2;
        icmp_ln887_reg_1129 <= icmp_ln887_fu_365_p2;
        icmp_ln899_4_reg_1151 <= icmp_ln899_4_fu_404_p2;
        icmp_ln899_reg_1138 <= icmp_ln899_fu_386_p2;
        sub_ln493_5_reg_1163 <= sub_ln493_5_fu_577_p2;
        sub_ln493_6_reg_1168 <= sub_ln493_6_fu_603_p2;
        sub_ln493_reg_1158 <= sub_ln493_fu_551_p2;
        xor_ln457_reg_1133 <= xor_ln457_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        right_border_buf_0_14_fu_170 <= col_buf_0_val_2_0_fu_788_p3;
        right_border_buf_0_15_fu_174 <= col_buf_0_val_1_0_fu_770_p3;
        right_border_buf_0_s_fu_166 <= col_buf_0_val_0_0_fu_752_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1205_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln188_17_reg_1253 <= select_ln188_17_fu_920_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1205_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln188_20_reg_1259 <= select_ln188_20_fu_976_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln512_reg_1205_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln188_reg_1247 <= select_ln188_fu_876_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1173_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_kernel_win_0_va_53_fu_146 <= src_kernel_win_0_va_fu_142;
        src_kernel_win_0_va_54_fu_150 <= src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg;
        src_kernel_win_0_va_55_fu_154 <= src_kernel_win_0_va_54_fu_150;
        src_kernel_win_0_va_fu_142 <= src_kernel_win_0_va_58_reg_1226_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln444_reg_1173_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_kernel_win_0_va_56_fu_158 <= src_kernel_win_0_va_60_reg_1240;
        src_kernel_win_0_va_57_fu_162 <= src_kernel_win_0_va_56_fu_158;
    end
end

always @ (*) begin
    if ((icmp_ln444_fu_608_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1173_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_63 = src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_63 = src_kernel_win_0_va_54_fu_150;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1173_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_64 = src_kernel_win_0_va_54_fu_150;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_64 = src_kernel_win_0_va_55_fu_154;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1173_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_65 = src_kernel_win_0_va_60_reg_1240;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_65 = src_kernel_win_0_va_56_fu_158;
    end
end

always @ (*) begin
    if (((icmp_ln444_reg_1173_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_src_kernel_win_0_va_66 = src_kernel_win_0_va_56_fu_158;
    end else begin
        ap_sig_allocacmp_src_kernel_win_0_va_66 = src_kernel_win_0_va_57_fu_162;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce0 = 1'b1;
    end else begin
        k_buf_0_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_ce1 = 1'b1;
    end else begin
        k_buf_0_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_4_reg_1147 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we0 = 1'b1;
    end else begin
        k_buf_0_val_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_3_we1 = 1'b1;
    end else begin
        k_buf_0_val_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce0 = 1'b1;
    end else begin
        k_buf_0_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_ce1 = 1'b1;
    end else begin
        k_buf_0_val_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_reg_1143 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we0 = 1'b1;
    end else begin
        k_buf_0_val_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_4_we1 = 1'b1;
    end else begin
        k_buf_0_val_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_reg_1143 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((or_ln457_reg_1191 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        k_buf_0_val_5_ce0 = 1'b1;
    end else begin
        k_buf_0_val_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_ce1 = 1'b1;
    end else begin
        k_buf_0_val_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_reg_1143 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we0 = 1'b1;
    end else begin
        k_buf_0_val_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182_pp0_iter1_reg) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_buf_0_val_5_we1 = 1'b1;
    end else begin
        k_buf_0_val_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln899_reg_1138 == 1'd0) & (1'd1 == and_ln118_9_reg_1182) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op134_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op128_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln443_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln444_fu_608_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((icmp_ln444_fu_608_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ImagLoc_x_fu_639_p2 = ($signed(32'd4294967295) + $signed(t_V_9_reg_281));

assign add_ln118_3_fu_582_p2 = (2'd1 + trunc_ln506_3_fu_409_p1);

assign add_ln118_fu_530_p2 = ($signed(2'd3) + $signed(trunc_ln506_3_fu_409_p1));

assign add_ln443_3_fu_318_p2 = ($signed(10'd2) + $signed(sext_ln113_fu_296_p1));

assign add_ln443_fu_308_p2 = ($signed(11'd2) + $signed(sext_ln1174_fu_304_p1));

assign add_ln451_3_fu_645_p2 = ($signed(13'd8191) + $signed(trunc_ln451_fu_635_p1));

assign add_ln458_3_fu_348_p2 = ($signed(2'd3) + $signed(trunc_ln458_fu_328_p1));

assign add_ln458_fu_332_p2 = ($signed(11'd2047) + $signed(sext_ln1174_fu_304_p1));

assign add_ln506_5_fu_452_p2 = ($signed(32'd4294967294) + $signed(t_V_reg_270));

assign add_ln506_6_fu_491_p2 = ($signed(32'd4294967293) + $signed(t_V_reg_270));

assign add_ln506_fu_413_p2 = ($signed(32'd4294967295) + $signed(t_V_reg_270));

assign add_ln507_fu_342_p2 = ($signed(2'd3) + $signed(trunc_ln506_fu_338_p1));

assign and_ln118_7_fu_477_p2 = (xor_ln118_10_fu_466_p2 & icmp_ln118_7_fu_472_p2);

assign and_ln118_8_fu_516_p2 = (xor_ln118_11_fu_505_p2 & icmp_ln118_8_fu_511_p2);

assign and_ln118_9_fu_670_p2 = (xor_ln118_12_fu_659_p2 & icmp_ln118_9_fu_665_p2);

assign and_ln118_fu_438_p2 = (xor_ln118_9_fu_427_p2 & icmp_ln118_fu_433_p2);

assign and_ln512_fu_717_p2 = (icmp_ln899_reg_1138 & icmp_ln891_fu_629_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op134_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op128_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op134_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op128_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op134_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op128_read_state4 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op134_read_state4 == 1'b1)) | ((p_src_data_stream_V_empty_n == 1'b0) & (ap_predicate_op128_read_state4 == 1'b1)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter5 = ((1'd1 == and_ln512_reg_1205_pp0_iter4_reg) & (p_dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_operation_123 = (1'b1 == 1'b1);

assign ap_enable_operation_125 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_127 = (or_ln457_reg_1191 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_129 = (ap_predicate_op129_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_130 = (ap_predicate_op130_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_132 = (ap_predicate_op132_store_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_135 = (ap_predicate_op135_store_state4 == 1'b1);
end

assign ap_enable_operation_139 = (1'b1 == 1'b1);

assign ap_enable_operation_142 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_145 = (or_ln457_reg_1191_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_148 = (ap_predicate_op148_store_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_149 = (ap_predicate_op149_store_state5 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op128_read_state4 = ((icmp_ln899_reg_1138 == 1'd0) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op129_store_state4 = ((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_reg_1143 == 1'd1) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op130_store_state4 = ((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_reg_1143 == 1'd1) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op132_store_state4 = ((icmp_ln899_reg_1138 == 1'd0) & (icmp_ln879_4_reg_1147 == 1'd1) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op134_read_state4 = ((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op135_store_state4 = ((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182));
end

always @ (*) begin
    ap_predicate_op148_store_state5 = ((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182_pp0_iter1_reg));
end

always @ (*) begin
    ap_predicate_op149_store_state5 = ((icmp_ln887_reg_1129 == 1'd1) & (icmp_ln899_reg_1138 == 1'd1) & (1'd1 == and_ln118_9_reg_1182_pp0_iter1_reg));
end

assign col_buf_0_val_0_0_fu_752_p3 = ((or_ln457_reg_1191_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_3_q0 : tmp_26_fu_741_p5);

assign col_buf_0_val_1_0_fu_770_p3 = ((or_ln457_reg_1191_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_4_q0 : tmp_27_fu_759_p5);

assign col_buf_0_val_2_0_fu_788_p3 = ((or_ln457_reg_1191_pp0_iter1_reg[0:0] === 1'b1) ? k_buf_0_val_5_q0 : tmp_28_fu_777_p5);

assign cols_fu_300_p0 = p_src_cols_V_dout;

assign cols_fu_300_p1 = cols_fu_300_p0;

assign i_V_fu_359_p2 = (t_V_reg_270 + 32'd1);

assign icmp_ln118_7_fu_472_p2 = (($signed(add_ln506_5_fu_452_p2) < $signed(stop_row_reg_1076)) ? 1'b1 : 1'b0);

assign icmp_ln118_8_fu_511_p2 = (($signed(add_ln506_6_fu_491_p2) < $signed(stop_row_reg_1076)) ? 1'b1 : 1'b0);

assign icmp_ln118_9_fu_665_p2 = (($signed(ImagLoc_x_fu_639_p2) < $signed(cols_reg_1085)) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_433_p2 = (($signed(add_ln506_fu_413_p2) < $signed(stop_row_reg_1076)) ? 1'b1 : 1'b0);

assign icmp_ln188_15_fu_890_p2 = ((src_kernel_win_0_va_60_reg_1240 > select_ln188_reg_1247) ? 1'b1 : 1'b0);

assign icmp_ln188_16_fu_900_p2 = ((ap_sig_allocacmp_src_kernel_win_0_va_64 > select_ln188_15_fu_894_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_17_fu_914_p2 = ((ap_sig_allocacmp_src_kernel_win_0_va_63 > select_ln188_16_fu_906_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_18_fu_946_p2 = ((src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg > select_ln188_17_reg_1253) ? 1'b1 : 1'b0);

assign icmp_ln188_19_fu_956_p2 = ((src_kernel_win_0_va_53_fu_146 > select_ln188_18_fu_950_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_20_fu_970_p2 = ((src_kernel_win_0_va_fu_142 > select_ln188_19_fu_962_p3) ? 1'b1 : 1'b0);

assign icmp_ln188_21_fu_1008_p2 = ((src_kernel_win_0_va_58_reg_1226_pp0_iter4_reg > select_ln188_20_reg_1259) ? 1'b1 : 1'b0);

assign icmp_ln188_fu_870_p2 = ((ap_sig_allocacmp_src_kernel_win_0_va_65 > ap_sig_allocacmp_src_kernel_win_0_va_66) ? 1'b1 : 1'b0);

assign icmp_ln443_fu_354_p2 = ((t_V_reg_270 == sext_ln443_3_reg_1095) ? 1'b1 : 1'b0);

assign icmp_ln444_fu_608_p2 = ((t_V_9_reg_281 == sext_ln443_reg_1090) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_398_p2 = ((t_V_reg_270 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_392_p2 = ((t_V_reg_270 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_365_p2 = ((t_V_reg_270 < stop_row_reg_1076) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_629_p2 = ((tmp_68_fu_619_p4 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln899_4_fu_404_p2 = ((t_V_reg_270 > stop_row_reg_1076) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_386_p2 = ((tmp_fu_376_p4 != 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_613_p2 = (t_V_9_reg_281 + 32'd1);

assign k_buf_0_val_3_address0 = zext_ln835_fu_725_p1;

assign k_buf_0_val_3_address1 = zext_ln835_fu_725_p1;

assign k_buf_0_val_4_address0 = zext_ln835_fu_725_p1;

assign k_buf_0_val_4_address1 = k_buf_0_val_4_addr_reg_1214;

assign k_buf_0_val_5_address0 = zext_ln835_fu_725_p1;

assign k_buf_0_val_5_address1 = k_buf_0_val_5_addr_reg_1220;

assign or_ln457_fu_707_p2 = (xor_ln457_reg_1133 | icmp_ln118_9_fu_665_p2);

assign p_dst_data_stream_V_din = ((icmp_ln188_21_fu_1008_p2[0:0] === 1'b1) ? src_kernel_win_0_va_58_reg_1226_pp0_iter4_reg : select_ln188_20_reg_1259);

assign select_ln118_11_fu_543_p3 = ((and_ln118_fu_438_p2[0:0] === 1'b1) ? add_ln118_fu_530_p2 : select_ln118_fu_536_p3);

assign select_ln118_12_fu_562_p3 = ((tmp_65_fu_483_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1105);

assign select_ln118_13_fu_569_p3 = ((and_ln118_7_fu_477_p2[0:0] === 1'b1) ? xor_ln118_fu_556_p2 : select_ln118_12_fu_562_p3);

assign select_ln118_14_fu_588_p3 = ((tmp_67_fu_522_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1105);

assign select_ln118_15_fu_595_p3 = ((and_ln118_8_fu_516_p2[0:0] === 1'b1) ? add_ln118_3_fu_582_p2 : select_ln118_14_fu_588_p3);

assign select_ln118_fu_536_p3 = ((tmp_63_fu_444_p3[0:0] === 1'b1) ? 2'd0 : add_ln507_reg_1105);

assign select_ln121_fu_684_p3 = ((tmp_70_fu_676_p3[0:0] === 1'b1) ? 11'd0 : add_ln458_reg_1100);

assign select_ln188_15_fu_894_p3 = ((icmp_ln188_15_fu_890_p2[0:0] === 1'b1) ? src_kernel_win_0_va_60_reg_1240 : select_ln188_reg_1247);

assign select_ln188_16_fu_906_p3 = ((icmp_ln188_16_fu_900_p2[0:0] === 1'b1) ? ap_sig_allocacmp_src_kernel_win_0_va_64 : select_ln188_15_fu_894_p3);

assign select_ln188_17_fu_920_p3 = ((icmp_ln188_17_fu_914_p2[0:0] === 1'b1) ? ap_sig_allocacmp_src_kernel_win_0_va_63 : select_ln188_16_fu_906_p3);

assign select_ln188_18_fu_950_p3 = ((icmp_ln188_18_fu_946_p2[0:0] === 1'b1) ? src_kernel_win_0_va_59_reg_1233_pp0_iter3_reg : select_ln188_17_reg_1253);

assign select_ln188_19_fu_962_p3 = ((icmp_ln188_19_fu_956_p2[0:0] === 1'b1) ? src_kernel_win_0_va_53_fu_146 : select_ln188_18_fu_950_p3);

assign select_ln188_20_fu_976_p3 = ((icmp_ln188_20_fu_970_p2[0:0] === 1'b1) ? src_kernel_win_0_va_fu_142 : select_ln188_19_fu_962_p3);

assign select_ln188_fu_876_p3 = ((icmp_ln188_fu_870_p2[0:0] === 1'b1) ? ap_sig_allocacmp_src_kernel_win_0_va_65 : ap_sig_allocacmp_src_kernel_win_0_va_66);

assign sext_ln113_fu_296_p0 = p_src_rows_V_dout;

assign sext_ln113_fu_296_p1 = sext_ln113_fu_296_p0;

assign sext_ln1174_fu_304_p0 = p_src_cols_V_dout;

assign sext_ln1174_fu_304_p1 = sext_ln1174_fu_304_p0;

assign sext_ln118_fu_722_p1 = x_reg_1186;

assign sext_ln121_fu_691_p1 = $signed(select_ln121_fu_684_p3);

assign sext_ln443_3_fu_324_p1 = $signed(add_ln443_3_fu_318_p2);

assign sext_ln443_fu_314_p1 = $signed(add_ln443_fu_308_p2);

assign src_kernel_win_0_va_58_fu_821_p3 = ((icmp_ln899_4_reg_1151[0:0] === 1'b1) ? tmp_29_fu_810_p5 : col_buf_0_val_0_0_fu_752_p3);

assign src_kernel_win_0_va_59_fu_839_p3 = ((icmp_ln899_4_reg_1151[0:0] === 1'b1) ? tmp_30_fu_828_p5 : col_buf_0_val_1_0_fu_770_p3);

assign src_kernel_win_0_va_60_fu_857_p3 = ((icmp_ln899_4_reg_1151[0:0] === 1'b1) ? tmp_31_fu_846_p5 : col_buf_0_val_2_0_fu_788_p3);

assign stop_row_fu_292_p0 = p_src_rows_V_dout;

assign stop_row_fu_292_p1 = stop_row_fu_292_p0;

assign sub_ln493_5_fu_577_p2 = (add_ln507_reg_1105 - select_ln118_13_fu_569_p3);

assign sub_ln493_6_fu_603_p2 = (add_ln507_reg_1105 - select_ln118_15_fu_595_p3);

assign sub_ln493_7_fu_712_p2 = (add_ln458_3_reg_1115 - trunc_ln458_3_fu_703_p1);

assign sub_ln493_fu_551_p2 = (add_ln507_reg_1105 - select_ln118_11_fu_543_p3);

assign tmp_62_fu_419_p3 = add_ln506_fu_413_p2[32'd31];

assign tmp_63_fu_444_p3 = add_ln506_fu_413_p2[32'd31];

assign tmp_64_fu_458_p3 = add_ln506_5_fu_452_p2[32'd31];

assign tmp_65_fu_483_p3 = add_ln506_5_fu_452_p2[32'd31];

assign tmp_66_fu_497_p3 = add_ln506_6_fu_491_p2[32'd31];

assign tmp_67_fu_522_p3 = add_ln506_6_fu_491_p2[32'd31];

assign tmp_68_fu_619_p4 = {{t_V_9_reg_281[31:1]}};

assign tmp_69_fu_651_p3 = ImagLoc_x_fu_639_p2[32'd31];

assign tmp_70_fu_676_p3 = ImagLoc_x_fu_639_p2[32'd31];

assign tmp_fu_376_p4 = {{t_V_reg_270[31:1]}};

assign trunc_ln451_fu_635_p1 = t_V_9_reg_281[12:0];

assign trunc_ln458_3_fu_703_p1 = x_fu_695_p3[1:0];

assign trunc_ln458_fu_328_p0 = p_src_cols_V_dout;

assign trunc_ln458_fu_328_p1 = trunc_ln458_fu_328_p0[1:0];

assign trunc_ln506_3_fu_409_p1 = t_V_reg_270[1:0];

assign trunc_ln506_fu_338_p0 = p_src_rows_V_dout;

assign trunc_ln506_fu_338_p1 = trunc_ln506_fu_338_p0[1:0];

assign x_fu_695_p3 = ((and_ln118_9_fu_670_p2[0:0] === 1'b1) ? add_ln451_3_fu_645_p2 : sext_ln121_fu_691_p1);

assign xor_ln118_10_fu_466_p2 = (tmp_64_fu_458_p3 ^ 1'd1);

assign xor_ln118_11_fu_505_p2 = (tmp_66_fu_497_p3 ^ 1'd1);

assign xor_ln118_12_fu_659_p2 = (tmp_69_fu_651_p3 ^ 1'd1);

assign xor_ln118_9_fu_427_p2 = (tmp_62_fu_419_p3 ^ 1'd1);

assign xor_ln118_fu_556_p2 = (trunc_ln506_3_fu_409_p1 ^ 2'd2);

assign xor_ln457_fu_370_p2 = (icmp_ln887_fu_365_p2 ^ 1'd1);

assign zext_ln835_fu_725_p1 = $unsigned(sext_ln118_fu_722_p1);

endmodule //Dilate205
