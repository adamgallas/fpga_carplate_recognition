-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MedianBlur_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of MedianBlur_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv20_E1000 : STD_LOGIC_VECTOR (19 downto 0) := "11100001000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal line_buffer_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_ce0 : STD_LOGIC;
    signal line_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_ce1 : STD_LOGIC;
    signal line_buffer_1_we1 : STD_LOGIC;
    signal line_buffer_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_2_ce0 : STD_LOGIC;
    signal line_buffer_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_2_ce1 : STD_LOGIC;
    signal line_buffer_2_we1 : STD_LOGIC;
    signal line_buffer_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_3_ce0 : STD_LOGIC;
    signal line_buffer_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_3_ce1 : STD_LOGIC;
    signal line_buffer_3_we1 : STD_LOGIC;
    signal line_buffer_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_4_ce0 : STD_LOGIC;
    signal line_buffer_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_4_ce1 : STD_LOGIC;
    signal line_buffer_4_we1 : STD_LOGIC;
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln149_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal icmp_ln149_reg_464_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_221 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_0_reg_232 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_243 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln149_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln149_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_464_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln149_fu_265_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln151_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_473_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_reg_478_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_1_reg_483_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln149_fu_323_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal line_buffer_1_addr_reg_493 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_2_addr_reg_499 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_3_addr_reg_505 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_4_addr_reg_511 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln172_2_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln172_2_reg_517_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_load_reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_2_load_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_3_load_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_4_load_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_547 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_fu_414_p11 : STD_LOGIC_VECTOR (199 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal grp_median_5_fu_254_window_read : STD_LOGIC_VECTOR (199 downto 0);
    signal grp_median_5_fu_254_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_median_5_fu_254_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call38 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call38 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call38 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call38 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4_ignore_call38 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5_ignore_call38 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6_ignore_call38 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7_ignore_call38 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8_ignore_call38 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9_ignore_call38 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10_ignore_call38 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11_ignore_call38 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp64 : BOOLEAN;
    signal zext_ln157_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_1_fu_132 : STD_LOGIC_VECTOR (199 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln149_1_fu_285_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_291_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln172_fu_277_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_339_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_364_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_374_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_384_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_394_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_404_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln172_1_fu_439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln172_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component median_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        window_read : IN STD_LOGIC_VECTOR (199 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component MedianBlur_5_linedEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_1_U : component MedianBlur_5_linedEe
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_address0,
        ce0 => line_buffer_1_ce0,
        q0 => line_buffer_1_q0,
        address1 => line_buffer_1_addr_reg_493,
        ce1 => line_buffer_1_ce1,
        we1 => line_buffer_1_we1,
        d1 => line_buffer_2_q0);

    line_buffer_2_U : component MedianBlur_5_linedEe
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_2_address0,
        ce0 => line_buffer_2_ce0,
        q0 => line_buffer_2_q0,
        address1 => line_buffer_2_addr_reg_499,
        ce1 => line_buffer_2_ce1,
        we1 => line_buffer_2_we1,
        d1 => line_buffer_3_q0);

    line_buffer_3_U : component MedianBlur_5_linedEe
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_3_address0,
        ce0 => line_buffer_3_ce0,
        q0 => line_buffer_3_q0,
        address1 => line_buffer_3_addr_reg_505,
        ce1 => line_buffer_3_ce1,
        we1 => line_buffer_3_we1,
        d1 => line_buffer_4_q0);

    line_buffer_4_U : component MedianBlur_5_linedEe
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_4_address0,
        ce0 => line_buffer_4_ce0,
        q0 => line_buffer_4_q0,
        address1 => line_buffer_4_addr_reg_511,
        ce1 => line_buffer_4_ce1,
        we1 => line_buffer_4_we1,
        d1 => src_data_stream_V_dout);

    grp_median_5_fu_254 : component median_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        window_read => grp_median_5_fu_254_window_read,
        ap_return => grp_median_5_fu_254_ap_return,
        ap_ce => grp_median_5_fu_254_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_fu_259_p2 = ap_const_lv1_0))) then 
                c_0_reg_243 <= c_fu_355_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_243 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_fu_259_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_221 <= add_ln149_fu_265_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_221 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    r_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_fu_259_p2 = ap_const_lv1_0))) then 
                r_0_reg_232 <= select_ln149_fu_323_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_232 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln149_reg_464 <= icmp_ln149_fu_259_p2;
                icmp_ln149_reg_464_pp0_iter1_reg <= icmp_ln149_reg_464;
                icmp_ln151_reg_473_pp0_iter1_reg <= icmp_ln151_reg_473;
                icmp_ln172_1_reg_483_pp0_iter1_reg <= icmp_ln172_1_reg_483;
                icmp_ln172_2_reg_517_pp0_iter1_reg <= icmp_ln172_2_reg_517;
                icmp_ln172_reg_478_pp0_iter1_reg <= icmp_ln172_reg_478;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln149_reg_464_pp0_iter10_reg <= icmp_ln149_reg_464_pp0_iter9_reg;
                icmp_ln149_reg_464_pp0_iter2_reg <= icmp_ln149_reg_464_pp0_iter1_reg;
                icmp_ln149_reg_464_pp0_iter3_reg <= icmp_ln149_reg_464_pp0_iter2_reg;
                icmp_ln149_reg_464_pp0_iter4_reg <= icmp_ln149_reg_464_pp0_iter3_reg;
                icmp_ln149_reg_464_pp0_iter5_reg <= icmp_ln149_reg_464_pp0_iter4_reg;
                icmp_ln149_reg_464_pp0_iter6_reg <= icmp_ln149_reg_464_pp0_iter5_reg;
                icmp_ln149_reg_464_pp0_iter7_reg <= icmp_ln149_reg_464_pp0_iter6_reg;
                icmp_ln149_reg_464_pp0_iter8_reg <= icmp_ln149_reg_464_pp0_iter7_reg;
                icmp_ln149_reg_464_pp0_iter9_reg <= icmp_ln149_reg_464_pp0_iter8_reg;
                icmp_ln151_reg_473_pp0_iter10_reg <= icmp_ln151_reg_473_pp0_iter9_reg;
                icmp_ln151_reg_473_pp0_iter2_reg <= icmp_ln151_reg_473_pp0_iter1_reg;
                icmp_ln151_reg_473_pp0_iter3_reg <= icmp_ln151_reg_473_pp0_iter2_reg;
                icmp_ln151_reg_473_pp0_iter4_reg <= icmp_ln151_reg_473_pp0_iter3_reg;
                icmp_ln151_reg_473_pp0_iter5_reg <= icmp_ln151_reg_473_pp0_iter4_reg;
                icmp_ln151_reg_473_pp0_iter6_reg <= icmp_ln151_reg_473_pp0_iter5_reg;
                icmp_ln151_reg_473_pp0_iter7_reg <= icmp_ln151_reg_473_pp0_iter6_reg;
                icmp_ln151_reg_473_pp0_iter8_reg <= icmp_ln151_reg_473_pp0_iter7_reg;
                icmp_ln151_reg_473_pp0_iter9_reg <= icmp_ln151_reg_473_pp0_iter8_reg;
                icmp_ln172_1_reg_483_pp0_iter10_reg <= icmp_ln172_1_reg_483_pp0_iter9_reg;
                icmp_ln172_1_reg_483_pp0_iter2_reg <= icmp_ln172_1_reg_483_pp0_iter1_reg;
                icmp_ln172_1_reg_483_pp0_iter3_reg <= icmp_ln172_1_reg_483_pp0_iter2_reg;
                icmp_ln172_1_reg_483_pp0_iter4_reg <= icmp_ln172_1_reg_483_pp0_iter3_reg;
                icmp_ln172_1_reg_483_pp0_iter5_reg <= icmp_ln172_1_reg_483_pp0_iter4_reg;
                icmp_ln172_1_reg_483_pp0_iter6_reg <= icmp_ln172_1_reg_483_pp0_iter5_reg;
                icmp_ln172_1_reg_483_pp0_iter7_reg <= icmp_ln172_1_reg_483_pp0_iter6_reg;
                icmp_ln172_1_reg_483_pp0_iter8_reg <= icmp_ln172_1_reg_483_pp0_iter7_reg;
                icmp_ln172_1_reg_483_pp0_iter9_reg <= icmp_ln172_1_reg_483_pp0_iter8_reg;
                icmp_ln172_2_reg_517_pp0_iter10_reg <= icmp_ln172_2_reg_517_pp0_iter9_reg;
                icmp_ln172_2_reg_517_pp0_iter2_reg <= icmp_ln172_2_reg_517_pp0_iter1_reg;
                icmp_ln172_2_reg_517_pp0_iter3_reg <= icmp_ln172_2_reg_517_pp0_iter2_reg;
                icmp_ln172_2_reg_517_pp0_iter4_reg <= icmp_ln172_2_reg_517_pp0_iter3_reg;
                icmp_ln172_2_reg_517_pp0_iter5_reg <= icmp_ln172_2_reg_517_pp0_iter4_reg;
                icmp_ln172_2_reg_517_pp0_iter6_reg <= icmp_ln172_2_reg_517_pp0_iter5_reg;
                icmp_ln172_2_reg_517_pp0_iter7_reg <= icmp_ln172_2_reg_517_pp0_iter6_reg;
                icmp_ln172_2_reg_517_pp0_iter8_reg <= icmp_ln172_2_reg_517_pp0_iter7_reg;
                icmp_ln172_2_reg_517_pp0_iter9_reg <= icmp_ln172_2_reg_517_pp0_iter8_reg;
                icmp_ln172_reg_478_pp0_iter10_reg <= icmp_ln172_reg_478_pp0_iter9_reg;
                icmp_ln172_reg_478_pp0_iter2_reg <= icmp_ln172_reg_478_pp0_iter1_reg;
                icmp_ln172_reg_478_pp0_iter3_reg <= icmp_ln172_reg_478_pp0_iter2_reg;
                icmp_ln172_reg_478_pp0_iter4_reg <= icmp_ln172_reg_478_pp0_iter3_reg;
                icmp_ln172_reg_478_pp0_iter5_reg <= icmp_ln172_reg_478_pp0_iter4_reg;
                icmp_ln172_reg_478_pp0_iter6_reg <= icmp_ln172_reg_478_pp0_iter5_reg;
                icmp_ln172_reg_478_pp0_iter7_reg <= icmp_ln172_reg_478_pp0_iter6_reg;
                icmp_ln172_reg_478_pp0_iter8_reg <= icmp_ln172_reg_478_pp0_iter7_reg;
                icmp_ln172_reg_478_pp0_iter9_reg <= icmp_ln172_reg_478_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_fu_259_p2 = ap_const_lv1_0))) then
                icmp_ln151_reg_473 <= icmp_ln151_fu_271_p2;
                icmp_ln172_1_reg_483 <= icmp_ln172_1_fu_317_p2;
                icmp_ln172_2_reg_517 <= icmp_ln172_2_fu_349_p2;
                icmp_ln172_reg_478 <= icmp_ln172_fu_301_p2;
                line_buffer_1_addr_reg_493 <= zext_ln157_fu_331_p1(11 - 1 downto 0);
                line_buffer_2_addr_reg_499 <= zext_ln157_fu_331_p1(11 - 1 downto 0);
                line_buffer_3_addr_reg_505 <= zext_ln157_fu_331_p1(11 - 1 downto 0);
                line_buffer_4_addr_reg_511 <= zext_ln157_fu_331_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then
                line_buffer_1_load_reg_527 <= line_buffer_1_q0;
                line_buffer_2_load_reg_532 <= line_buffer_2_q0;
                line_buffer_3_load_reg_537 <= line_buffer_3_q0;
                line_buffer_4_load_reg_542 <= line_buffer_4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then
                tmp_19_reg_547 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464_pp0_iter1_reg = ap_const_lv1_0))) then
                window_1_fu_132 <= window_fu_414_p11;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, icmp_ln149_fu_259_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln149_fu_259_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln149_fu_259_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln149_1_fu_285_p2 <= std_logic_vector(unsigned(r_0_reg_232) + unsigned(ap_const_lv10_1));
    add_ln149_fu_265_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_221) + unsigned(ap_const_lv20_1));
    and_ln172_fu_444_p2 <= (select_ln172_1_fu_439_p3 and icmp_ln172_2_reg_517_pp0_iter10_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln149_reg_464 = ap_const_lv1_0)) or ((dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln149_reg_464 = ap_const_lv1_0)) or ((dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp64_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp64 <= (((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln149_reg_464 = ap_const_lv1_0)) or ((dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln149_reg_464 = ap_const_lv1_0)) or ((dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter11_assign_proc : process(dst_data_stream_V_full_n, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_state13_pp0_stage0_iter11 <= ((dst_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_block_state13_pp0_stage0_iter11_ignore_call38_assign_proc : process(dst_data_stream_V_full_n, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
                ap_block_state13_pp0_stage0_iter11_ignore_call38 <= ((dst_data_stream_V_full_n = ap_const_logic_0) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, icmp_ln149_reg_464)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln149_reg_464 = ap_const_lv1_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call38_assign_proc : process(src_data_stream_V_empty_n, icmp_ln149_reg_464)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call38 <= ((src_data_stream_V_empty_n = ap_const_logic_0) and (icmp_ln149_reg_464 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7_ignore_call38 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln149_fu_259_p2)
    begin
        if ((icmp_ln149_fu_259_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c_fu_355_p2 <= std_logic_vector(unsigned(select_ln172_fu_277_p3) + unsigned(ap_const_lv11_1));

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        grp_median_5_fu_254_ap_return when (and_ln172_fu_444_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln149_reg_464_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464_pp0_iter10_reg = ap_const_lv1_0))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_median_5_fu_254_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp64) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_median_5_fu_254_ap_ce <= ap_const_logic_1;
        else 
            grp_median_5_fu_254_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_median_5_fu_254_window_read <= (((((((((tmp_19_reg_547 & tmp_27_fu_364_p4) & line_buffer_4_load_reg_542) & tmp_28_fu_374_p4) & line_buffer_3_load_reg_537) & tmp_29_fu_384_p4) & line_buffer_2_load_reg_532) & tmp_30_fu_394_p4) & line_buffer_1_load_reg_527) & tmp_31_fu_404_p4);
    icmp_ln149_fu_259_p2 <= "1" when (indvar_flatten_reg_221 = ap_const_lv20_E1000) else "0";
    icmp_ln151_fu_271_p2 <= "1" when (c_0_reg_243 = ap_const_lv11_500) else "0";
    icmp_ln172_1_fu_317_p2 <= "0" when (tmp_18_fu_307_p4 = ap_const_lv8_0) else "1";
    icmp_ln172_2_fu_349_p2 <= "0" when (tmp_20_fu_339_p4 = ap_const_lv9_0) else "1";
    icmp_ln172_fu_301_p2 <= "0" when (tmp_fu_291_p4 = ap_const_lv8_0) else "1";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_address0 <= zext_ln157_fu_331_p1(11 - 1 downto 0);

    line_buffer_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then 
            line_buffer_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_address0 <= zext_ln157_fu_331_p1(11 - 1 downto 0);

    line_buffer_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then 
            line_buffer_2_we1 <= ap_const_logic_1;
        else 
            line_buffer_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_3_address0 <= zext_ln157_fu_331_p1(11 - 1 downto 0);

    line_buffer_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_3_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then 
            line_buffer_3_we1 <= ap_const_logic_1;
        else 
            line_buffer_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_4_address0 <= zext_ln157_fu_331_p1(11 - 1 downto 0);

    line_buffer_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_4_ce1 <= ap_const_logic_1;
        else 
            line_buffer_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_4_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then 
            line_buffer_4_we1 <= ap_const_logic_1;
        else 
            line_buffer_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln149_fu_323_p3 <= 
        add_ln149_1_fu_285_p2 when (icmp_ln151_fu_271_p2(0) = '1') else 
        r_0_reg_232;
    select_ln172_1_fu_439_p3 <= 
        icmp_ln172_reg_478_pp0_iter10_reg when (icmp_ln151_reg_473_pp0_iter10_reg(0) = '1') else 
        icmp_ln172_1_reg_483_pp0_iter10_reg;
    select_ln172_fu_277_p3 <= 
        ap_const_lv11_0 when (icmp_ln151_fu_271_p2(0) = '1') else 
        c_0_reg_243;

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln149_reg_464)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln149_reg_464 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln149_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln149_reg_464 = ap_const_lv1_0))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_18_fu_307_p4 <= r_0_reg_232(9 downto 2);
    tmp_20_fu_339_p4 <= select_ln172_fu_277_p3(10 downto 2);
    tmp_27_fu_364_p4 <= window_1_fu_132(199 downto 168);
    tmp_28_fu_374_p4 <= window_1_fu_132(159 downto 128);
    tmp_29_fu_384_p4 <= window_1_fu_132(119 downto 88);
    tmp_30_fu_394_p4 <= window_1_fu_132(79 downto 48);
    tmp_31_fu_404_p4 <= window_1_fu_132(39 downto 8);
    tmp_fu_291_p4 <= add_ln149_1_fu_285_p2(9 downto 2);
    window_fu_414_p11 <= (((((((((tmp_19_reg_547 & tmp_27_fu_364_p4) & line_buffer_4_load_reg_542) & tmp_28_fu_374_p4) & line_buffer_3_load_reg_537) & tmp_29_fu_384_p4) & line_buffer_2_load_reg_532) & tmp_30_fu_394_p4) & line_buffer_1_load_reg_527) & tmp_31_fu_404_p4);
    zext_ln157_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln172_fu_277_p3),64));
end behav;
