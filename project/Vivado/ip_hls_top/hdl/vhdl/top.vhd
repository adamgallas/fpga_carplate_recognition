-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    buffer_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_EN_A : OUT STD_LOGIC;
    buffer_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_V_Clk_A : OUT STD_LOGIC;
    buffer_V_Rst_A : OUT STD_LOGIC;
    buffer_V_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_EN_B : OUT STD_LOGIC;
    buffer_V_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_V_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    buffer_V_Clk_B : OUT STD_LOGIC;
    buffer_V_Rst_B : OUT STD_LOGIC;
    video_src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    video_src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    video_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    video_dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_src_TVALID : IN STD_LOGIC;
    video_src_TREADY : OUT STD_LOGIC;
    video_dst_TVALID : OUT STD_LOGIC;
    video_dst_TREADY : IN STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.699000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=26,HLS_SYN_DSP=34,HLS_SYN_FF=27688,HLS_SYN_LUT=34480,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal xleft_s : STD_LOGIC_VECTOR (31 downto 0);
    signal xright_s : STD_LOGIC_VECTOR (31 downto 0);
    signal ytop_s : STD_LOGIC_VECTOR (31 downto 0);
    signal ydown_s : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc377_U0_ap_start : STD_LOGIC;
    signal Block_proc377_U0_start_full_n : STD_LOGIC;
    signal Block_proc377_U0_ap_done : STD_LOGIC;
    signal Block_proc377_U0_ap_continue : STD_LOGIC;
    signal Block_proc377_U0_ap_idle : STD_LOGIC;
    signal Block_proc377_U0_ap_ready : STD_LOGIC;
    signal Block_proc377_U0_start_out : STD_LOGIC;
    signal Block_proc377_U0_start_write : STD_LOGIC;
    signal Block_proc377_U0_rgb_img_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc377_U0_rgb_img_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rgb_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc377_U0_rgb_img_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_erode_blur_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc377_U0_erode_blur_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_erode_blur_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc377_U0_erode_blur_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_dilate1_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc377_U0_dilate1_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_dilate1_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc377_U0_dilate1_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate2_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_proc377_U0_rdilate2_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate2_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc377_U0_rdilate2_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate3_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_proc377_U0_rdilate3_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate3_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc377_U0_rdilate3_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate4_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_proc377_U0_rdilate4_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate4_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc377_U0_rdilate4_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate5_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_proc377_U0_rdilate5_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_rdilate5_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc377_U0_rdilate5_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_dilate_copy2_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_proc377_U0_dilate_copy2_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_dilate_copy2_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc377_U0_dilate_copy2_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_resize_dilate_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc377_U0_resize_dilate_rows_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_resize_dilate_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_proc377_U0_resize_dilate_cols_V_out_write : STD_LOGIC;
    signal Block_proc377_U0_xleft_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc377_U0_xleft_out_write : STD_LOGIC;
    signal Block_proc377_U0_xright_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc377_U0_xright_out_write : STD_LOGIC;
    signal Block_proc377_U0_ytop_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc377_U0_ytop_out_write : STD_LOGIC;
    signal Block_proc377_U0_ydown_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc377_U0_ydown_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_video_src_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal CvtColor_U0_ap_start : STD_LOGIC;
    signal CvtColor_U0_ap_done : STD_LOGIC;
    signal CvtColor_U0_ap_continue : STD_LOGIC;
    signal CvtColor_U0_ap_idle : STD_LOGIC;
    signal CvtColor_U0_ap_ready : STD_LOGIC;
    signal CvtColor_U0_start_out : STD_LOGIC;
    signal CvtColor_U0_start_write : STD_LOGIC;
    signal CvtColor_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal CvtColor_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal In_Range_U0_ap_start : STD_LOGIC;
    signal In_Range_U0_ap_done : STD_LOGIC;
    signal In_Range_U0_ap_continue : STD_LOGIC;
    signal In_Range_U0_ap_idle : STD_LOGIC;
    signal In_Range_U0_ap_ready : STD_LOGIC;
    signal In_Range_U0_start_out : STD_LOGIC;
    signal In_Range_U0_start_write : STD_LOGIC;
    signal In_Range_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal In_Range_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal In_Range_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal In_Range_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal In_Range_U0_dst_data_stream_V_write : STD_LOGIC;
    signal MedianBlur_5_U0_ap_start : STD_LOGIC;
    signal MedianBlur_5_U0_ap_done : STD_LOGIC;
    signal MedianBlur_5_U0_ap_continue : STD_LOGIC;
    signal MedianBlur_5_U0_ap_idle : STD_LOGIC;
    signal MedianBlur_5_U0_ap_ready : STD_LOGIC;
    signal MedianBlur_5_U0_start_out : STD_LOGIC;
    signal MedianBlur_5_U0_start_write : STD_LOGIC;
    signal MedianBlur_5_U0_src_data_stream_V_read : STD_LOGIC;
    signal MedianBlur_5_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal MedianBlur_5_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Erode_U0_ap_start : STD_LOGIC;
    signal Erode_U0_ap_done : STD_LOGIC;
    signal Erode_U0_ap_continue : STD_LOGIC;
    signal Erode_U0_ap_idle : STD_LOGIC;
    signal Erode_U0_ap_ready : STD_LOGIC;
    signal Erode_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Erode_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Erode_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Dilate203_U0_ap_start : STD_LOGIC;
    signal Dilate203_U0_ap_done : STD_LOGIC;
    signal Dilate203_U0_ap_continue : STD_LOGIC;
    signal Dilate203_U0_ap_idle : STD_LOGIC;
    signal Dilate203_U0_ap_ready : STD_LOGIC;
    signal Dilate203_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate203_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate203_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate203_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate203_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Resize204_U0_ap_start : STD_LOGIC;
    signal Resize204_U0_ap_done : STD_LOGIC;
    signal Resize204_U0_ap_continue : STD_LOGIC;
    signal Resize204_U0_ap_idle : STD_LOGIC;
    signal Resize204_U0_ap_ready : STD_LOGIC;
    signal Resize204_U0_start_out : STD_LOGIC;
    signal Resize204_U0_start_write : STD_LOGIC;
    signal Resize204_U0_p_src_rows_V_read : STD_LOGIC;
    signal Resize204_U0_p_src_cols_V_read : STD_LOGIC;
    signal Resize204_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Resize204_U0_p_dst_rows_V_read : STD_LOGIC;
    signal Resize204_U0_p_dst_cols_V_read : STD_LOGIC;
    signal Resize204_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize204_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Resize204_U0_p_dst_rows_V_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal Resize204_U0_p_dst_rows_V_out_write : STD_LOGIC;
    signal Resize204_U0_p_dst_cols_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Resize204_U0_p_dst_cols_V_out_write : STD_LOGIC;
    signal Dilate205_U0_ap_start : STD_LOGIC;
    signal Dilate205_U0_ap_done : STD_LOGIC;
    signal Dilate205_U0_ap_continue : STD_LOGIC;
    signal Dilate205_U0_ap_idle : STD_LOGIC;
    signal Dilate205_U0_ap_ready : STD_LOGIC;
    signal Dilate205_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate205_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate205_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate205_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate205_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Dilate206_U0_ap_start : STD_LOGIC;
    signal Dilate206_U0_ap_done : STD_LOGIC;
    signal Dilate206_U0_ap_continue : STD_LOGIC;
    signal Dilate206_U0_ap_idle : STD_LOGIC;
    signal Dilate206_U0_ap_ready : STD_LOGIC;
    signal Dilate206_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate206_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate206_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate206_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate206_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Dilate207_U0_ap_start : STD_LOGIC;
    signal Dilate207_U0_ap_done : STD_LOGIC;
    signal Dilate207_U0_ap_continue : STD_LOGIC;
    signal Dilate207_U0_ap_idle : STD_LOGIC;
    signal Dilate207_U0_ap_ready : STD_LOGIC;
    signal Dilate207_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate207_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate207_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate207_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate207_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Dilate_U0_ap_start : STD_LOGIC;
    signal Dilate_U0_ap_done : STD_LOGIC;
    signal Dilate_U0_ap_continue : STD_LOGIC;
    signal Dilate_U0_ap_idle : STD_LOGIC;
    signal Dilate_U0_ap_ready : STD_LOGIC;
    signal Dilate_U0_start_out : STD_LOGIC;
    signal Dilate_U0_start_write : STD_LOGIC;
    signal Dilate_U0_p_src_rows_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_cols_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_start_out : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_ap_start : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_ap_done : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_ap_continue : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_ap_idle : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_ap_ready : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_buffer_V_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_CACHE_LEN_proc2_U0_buffer_V_EN_A : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_buffer_V_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_CACHE_LEN_proc2_U0_buffer_V_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_CACHE_LEN_proc2_U0_dilate_copy1_data_stream_0_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Resize_U0_ap_start : STD_LOGIC;
    signal Resize_U0_ap_done : STD_LOGIC;
    signal Resize_U0_ap_continue : STD_LOGIC;
    signal Resize_U0_ap_idle : STD_LOGIC;
    signal Resize_U0_ap_ready : STD_LOGIC;
    signal Resize_U0_start_out : STD_LOGIC;
    signal Resize_U0_start_write : STD_LOGIC;
    signal Resize_U0_p_src_rows_V_read : STD_LOGIC;
    signal Resize_U0_p_src_cols_V_read : STD_LOGIC;
    signal Resize_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Resize_U0_p_dst_rows_V_read : STD_LOGIC;
    signal Resize_U0_p_dst_cols_V_read : STD_LOGIC;
    signal Resize_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Resize_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Resize_U0_p_dst_rows_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Resize_U0_p_dst_rows_V_out_write : STD_LOGIC;
    signal Resize_U0_p_dst_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Resize_U0_p_dst_cols_V_out_write : STD_LOGIC;
    signal CvtColor_1_U0_ap_start : STD_LOGIC;
    signal CvtColor_1_U0_ap_done : STD_LOGIC;
    signal CvtColor_1_U0_ap_continue : STD_LOGIC;
    signal CvtColor_1_U0_ap_idle : STD_LOGIC;
    signal CvtColor_1_U0_ap_ready : STD_LOGIC;
    signal CvtColor_1_U0_p_src_rows_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_cols_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal CvtColor_1_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal CvtColor_1_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_ap_start : STD_LOGIC;
    signal Add_Rectangle_U0_ap_done : STD_LOGIC;
    signal Add_Rectangle_U0_ap_continue : STD_LOGIC;
    signal Add_Rectangle_U0_ap_idle : STD_LOGIC;
    signal Add_Rectangle_U0_ap_ready : STD_LOGIC;
    signal Add_Rectangle_U0_start_out : STD_LOGIC;
    signal Add_Rectangle_U0_start_write : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Add_Rectangle_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Add_Rectangle_U0_xleft_read : STD_LOGIC;
    signal Add_Rectangle_U0_xright_read : STD_LOGIC;
    signal Add_Rectangle_U0_ytop_read : STD_LOGIC;
    signal Add_Rectangle_U0_ydown_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_dst_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_dst_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_dst_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal rgb_img_rows_V_c_full_n : STD_LOGIC;
    signal rgb_img_rows_V_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal rgb_img_rows_V_c_empty_n : STD_LOGIC;
    signal rgb_img_cols_V_c_full_n : STD_LOGIC;
    signal rgb_img_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal rgb_img_cols_V_c_empty_n : STD_LOGIC;
    signal erode_blur_rows_V_c_full_n : STD_LOGIC;
    signal erode_blur_rows_V_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal erode_blur_rows_V_c_empty_n : STD_LOGIC;
    signal erode_blur_cols_V_c_full_n : STD_LOGIC;
    signal erode_blur_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal erode_blur_cols_V_c_empty_n : STD_LOGIC;
    signal dilate1_rows_V_c_full_n : STD_LOGIC;
    signal dilate1_rows_V_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal dilate1_rows_V_c_empty_n : STD_LOGIC;
    signal dilate1_cols_V_c_full_n : STD_LOGIC;
    signal dilate1_cols_V_c_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal dilate1_cols_V_c_empty_n : STD_LOGIC;
    signal rdilate2_rows_V_c_full_n : STD_LOGIC;
    signal rdilate2_rows_V_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rdilate2_rows_V_c_empty_n : STD_LOGIC;
    signal rdilate2_cols_V_c_full_n : STD_LOGIC;
    signal rdilate2_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal rdilate2_cols_V_c_empty_n : STD_LOGIC;
    signal rdilate3_rows_V_c_full_n : STD_LOGIC;
    signal rdilate3_rows_V_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rdilate3_rows_V_c_empty_n : STD_LOGIC;
    signal rdilate3_cols_V_c_full_n : STD_LOGIC;
    signal rdilate3_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal rdilate3_cols_V_c_empty_n : STD_LOGIC;
    signal rdilate4_rows_V_c_full_n : STD_LOGIC;
    signal rdilate4_rows_V_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rdilate4_rows_V_c_empty_n : STD_LOGIC;
    signal rdilate4_cols_V_c_full_n : STD_LOGIC;
    signal rdilate4_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal rdilate4_cols_V_c_empty_n : STD_LOGIC;
    signal rdilate5_rows_V_c_full_n : STD_LOGIC;
    signal rdilate5_rows_V_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rdilate5_rows_V_c_empty_n : STD_LOGIC;
    signal rdilate5_cols_V_c_full_n : STD_LOGIC;
    signal rdilate5_cols_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal rdilate5_cols_V_c_empty_n : STD_LOGIC;
    signal dilate_copy2_rows_V_s_full_n : STD_LOGIC;
    signal dilate_copy2_rows_V_s_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal dilate_copy2_rows_V_s_empty_n : STD_LOGIC;
    signal dilate_copy2_cols_V_s_full_n : STD_LOGIC;
    signal dilate_copy2_cols_V_s_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal dilate_copy2_cols_V_s_empty_n : STD_LOGIC;
    signal resize_dilate_rows_V_1_full_n : STD_LOGIC;
    signal resize_dilate_rows_V_1_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal resize_dilate_rows_V_1_empty_n : STD_LOGIC;
    signal resize_dilate_cols_V_1_full_n : STD_LOGIC;
    signal resize_dilate_cols_V_1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal resize_dilate_cols_V_1_empty_n : STD_LOGIC;
    signal xleft_c_full_n : STD_LOGIC;
    signal xleft_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xleft_c_empty_n : STD_LOGIC;
    signal xright_c_full_n : STD_LOGIC;
    signal xright_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal xright_c_empty_n : STD_LOGIC;
    signal ytop_c_full_n : STD_LOGIC;
    signal ytop_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ytop_c_empty_n : STD_LOGIC;
    signal ydown_c_full_n : STD_LOGIC;
    signal ydown_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal ydown_c_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_s_full_n : STD_LOGIC;
    signal rgb_img_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_s_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_1_full_n : STD_LOGIC;
    signal rgb_img_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_1_empty_n : STD_LOGIC;
    signal rgb_img_data_stream_2_full_n : STD_LOGIC;
    signal rgb_img_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rgb_img_data_stream_2_empty_n : STD_LOGIC;
    signal rgb_img_rows_V_c55_full_n : STD_LOGIC;
    signal rgb_img_rows_V_c55_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal rgb_img_rows_V_c55_empty_n : STD_LOGIC;
    signal rgb_img_cols_V_c56_full_n : STD_LOGIC;
    signal rgb_img_cols_V_c56_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal rgb_img_cols_V_c56_empty_n : STD_LOGIC;
    signal hsv_img_data_stream_s_full_n : STD_LOGIC;
    signal hsv_img_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal hsv_img_data_stream_s_empty_n : STD_LOGIC;
    signal hsv_img_data_stream_1_full_n : STD_LOGIC;
    signal hsv_img_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal hsv_img_data_stream_1_empty_n : STD_LOGIC;
    signal hsv_img_data_stream_2_full_n : STD_LOGIC;
    signal hsv_img_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal hsv_img_data_stream_2_empty_n : STD_LOGIC;
    signal binary_hsv_data_stre_full_n : STD_LOGIC;
    signal binary_hsv_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal binary_hsv_data_stre_empty_n : STD_LOGIC;
    signal blur_binary_data_str_full_n : STD_LOGIC;
    signal blur_binary_data_str_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_binary_data_str_empty_n : STD_LOGIC;
    signal erode_blur_data_stre_full_n : STD_LOGIC;
    signal erode_blur_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal erode_blur_data_stre_empty_n : STD_LOGIC;
    signal dilate1_data_stream_s_full_n : STD_LOGIC;
    signal dilate1_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate1_data_stream_s_empty_n : STD_LOGIC;
    signal rdilate2_data_stream_full_n : STD_LOGIC;
    signal rdilate2_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rdilate2_data_stream_empty_n : STD_LOGIC;
    signal rdilate2_rows_V_c57_full_n : STD_LOGIC;
    signal rdilate2_rows_V_c57_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal rdilate2_rows_V_c57_empty_n : STD_LOGIC;
    signal rdilate2_cols_V_c58_full_n : STD_LOGIC;
    signal rdilate2_cols_V_c58_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal rdilate2_cols_V_c58_empty_n : STD_LOGIC;
    signal rdilate3_data_stream_full_n : STD_LOGIC;
    signal rdilate3_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rdilate3_data_stream_empty_n : STD_LOGIC;
    signal rdilate4_data_stream_full_n : STD_LOGIC;
    signal rdilate4_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rdilate4_data_stream_empty_n : STD_LOGIC;
    signal rdilate5_data_stream_full_n : STD_LOGIC;
    signal rdilate5_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rdilate5_data_stream_empty_n : STD_LOGIC;
    signal rdilate6_data_stream_full_n : STD_LOGIC;
    signal rdilate6_data_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rdilate6_data_stream_empty_n : STD_LOGIC;
    signal dilate_copy1_data_st_full_n : STD_LOGIC;
    signal dilate_copy1_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_copy1_data_st_empty_n : STD_LOGIC;
    signal dilate_copy2_data_st_full_n : STD_LOGIC;
    signal dilate_copy2_data_st_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dilate_copy2_data_st_empty_n : STD_LOGIC;
    signal resize_dilate_data_s_full_n : STD_LOGIC;
    signal resize_dilate_data_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal resize_dilate_data_s_empty_n : STD_LOGIC;
    signal resize_dilate_rows_V_full_n : STD_LOGIC;
    signal resize_dilate_rows_V_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal resize_dilate_rows_V_empty_n : STD_LOGIC;
    signal resize_dilate_cols_V_full_n : STD_LOGIC;
    signal resize_dilate_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal resize_dilate_cols_V_empty_n : STD_LOGIC;
    signal output_img_data_stre_full_n : STD_LOGIC;
    signal output_img_data_stre_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_empty_n : STD_LOGIC;
    signal output_img_data_stre_1_full_n : STD_LOGIC;
    signal output_img_data_stre_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_1_empty_n : STD_LOGIC;
    signal output_img_data_stre_2_full_n : STD_LOGIC;
    signal output_img_data_stre_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_data_stre_2_empty_n : STD_LOGIC;
    signal output_img_rec_data_s_full_n : STD_LOGIC;
    signal output_img_rec_data_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_rec_data_s_empty_n : STD_LOGIC;
    signal output_img_rec_data_1_full_n : STD_LOGIC;
    signal output_img_rec_data_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_rec_data_1_empty_n : STD_LOGIC;
    signal output_img_rec_data_2_full_n : STD_LOGIC;
    signal output_img_rec_data_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_img_rec_data_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_proc377_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc377_U0_ap_ready : STD_LOGIC;
    signal Block_proc377_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Dilate203_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate203_U0_full_n : STD_LOGIC;
    signal start_for_Dilate203_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate203_U0_empty_n : STD_LOGIC;
    signal start_for_Resize204_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize204_U0_full_n : STD_LOGIC;
    signal start_for_Resize204_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize204_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate206_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate206_U0_full_n : STD_LOGIC;
    signal start_for_Dilate206_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate206_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate207_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate207_U0_full_n : STD_LOGIC;
    signal start_for_Dilate207_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate207_U0_empty_n : STD_LOGIC;
    signal start_for_Dilate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_full_n : STD_LOGIC;
    signal start_for_Dilate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate_U0_empty_n : STD_LOGIC;
    signal start_for_Resize_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize_U0_full_n : STD_LOGIC;
    signal start_for_Resize_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Resize_U0_empty_n : STD_LOGIC;
    signal start_for_Add_Rectangle_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Rectangle_U0_full_n : STD_LOGIC;
    signal start_for_Add_Rectangle_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Add_Rectangle_U0_empty_n : STD_LOGIC;
    signal start_for_CvtColor_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_U0_empty_n : STD_LOGIC;
    signal start_for_In_Range_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_In_Range_U0_full_n : STD_LOGIC;
    signal start_for_In_Range_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_In_Range_U0_empty_n : STD_LOGIC;
    signal start_for_MedianBlur_5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MedianBlur_5_U0_full_n : STD_LOGIC;
    signal start_for_MedianBlur_5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MedianBlur_5_U0_empty_n : STD_LOGIC;
    signal start_for_Erode_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Erode_U0_full_n : STD_LOGIC;
    signal start_for_Erode_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Erode_U0_empty_n : STD_LOGIC;
    signal Erode_U0_start_full_n : STD_LOGIC;
    signal Erode_U0_start_write : STD_LOGIC;
    signal Dilate203_U0_start_full_n : STD_LOGIC;
    signal Dilate203_U0_start_write : STD_LOGIC;
    signal start_for_Dilate205_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate205_U0_full_n : STD_LOGIC;
    signal start_for_Dilate205_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Dilate205_U0_empty_n : STD_LOGIC;
    signal Dilate205_U0_start_full_n : STD_LOGIC;
    signal Dilate205_U0_start_write : STD_LOGIC;
    signal Dilate206_U0_start_full_n : STD_LOGIC;
    signal Dilate206_U0_start_write : STD_LOGIC;
    signal Dilate207_U0_start_full_n : STD_LOGIC;
    signal Dilate207_U0_start_write : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_CACHE_LEN_proc2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_CACHE_LEN_proc2_U0_full_n : STD_LOGIC;
    signal start_for_Loop_CACHE_LEN_proc2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_CACHE_LEN_proc2_U0_empty_n : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_start_full_n : STD_LOGIC;
    signal Loop_CACHE_LEN_proc2_U0_start_write : STD_LOGIC;
    signal start_for_CvtColor_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_full_n : STD_LOGIC;
    signal start_for_CvtColor_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_CvtColor_1_U0_empty_n : STD_LOGIC;
    signal CvtColor_1_U0_start_full_n : STD_LOGIC;
    signal CvtColor_1_U0_start_write : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_proc377 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        xleft_s : IN STD_LOGIC_VECTOR (31 downto 0);
        xright_s : IN STD_LOGIC_VECTOR (31 downto 0);
        ytop_s : IN STD_LOGIC_VECTOR (31 downto 0);
        ydown_s : IN STD_LOGIC_VECTOR (31 downto 0);
        rgb_img_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        rgb_img_rows_V_out_full_n : IN STD_LOGIC;
        rgb_img_rows_V_out_write : OUT STD_LOGIC;
        rgb_img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        rgb_img_cols_V_out_full_n : IN STD_LOGIC;
        rgb_img_cols_V_out_write : OUT STD_LOGIC;
        erode_blur_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        erode_blur_rows_V_out_full_n : IN STD_LOGIC;
        erode_blur_rows_V_out_write : OUT STD_LOGIC;
        erode_blur_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        erode_blur_cols_V_out_full_n : IN STD_LOGIC;
        erode_blur_cols_V_out_write : OUT STD_LOGIC;
        dilate1_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        dilate1_rows_V_out_full_n : IN STD_LOGIC;
        dilate1_rows_V_out_write : OUT STD_LOGIC;
        dilate1_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        dilate1_cols_V_out_full_n : IN STD_LOGIC;
        dilate1_cols_V_out_write : OUT STD_LOGIC;
        rdilate2_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        rdilate2_rows_V_out_full_n : IN STD_LOGIC;
        rdilate2_rows_V_out_write : OUT STD_LOGIC;
        rdilate2_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        rdilate2_cols_V_out_full_n : IN STD_LOGIC;
        rdilate2_cols_V_out_write : OUT STD_LOGIC;
        rdilate3_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        rdilate3_rows_V_out_full_n : IN STD_LOGIC;
        rdilate3_rows_V_out_write : OUT STD_LOGIC;
        rdilate3_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        rdilate3_cols_V_out_full_n : IN STD_LOGIC;
        rdilate3_cols_V_out_write : OUT STD_LOGIC;
        rdilate4_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        rdilate4_rows_V_out_full_n : IN STD_LOGIC;
        rdilate4_rows_V_out_write : OUT STD_LOGIC;
        rdilate4_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        rdilate4_cols_V_out_full_n : IN STD_LOGIC;
        rdilate4_cols_V_out_write : OUT STD_LOGIC;
        rdilate5_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        rdilate5_rows_V_out_full_n : IN STD_LOGIC;
        rdilate5_rows_V_out_write : OUT STD_LOGIC;
        rdilate5_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        rdilate5_cols_V_out_full_n : IN STD_LOGIC;
        rdilate5_cols_V_out_write : OUT STD_LOGIC;
        dilate_copy2_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        dilate_copy2_rows_V_out_full_n : IN STD_LOGIC;
        dilate_copy2_rows_V_out_write : OUT STD_LOGIC;
        dilate_copy2_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        dilate_copy2_cols_V_out_full_n : IN STD_LOGIC;
        dilate_copy2_cols_V_out_write : OUT STD_LOGIC;
        resize_dilate_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        resize_dilate_rows_V_out_full_n : IN STD_LOGIC;
        resize_dilate_rows_V_out_write : OUT STD_LOGIC;
        resize_dilate_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        resize_dilate_cols_V_out_full_n : IN STD_LOGIC;
        resize_dilate_cols_V_out_write : OUT STD_LOGIC;
        xleft_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        xleft_out_full_n : IN STD_LOGIC;
        xleft_out_write : OUT STD_LOGIC;
        xright_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        xright_out_full_n : IN STD_LOGIC;
        xright_out_write : OUT STD_LOGIC;
        ytop_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ytop_out_full_n : IN STD_LOGIC;
        ytop_out_write : OUT STD_LOGIC;
        ydown_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ydown_out_full_n : IN STD_LOGIC;
        ydown_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        video_src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        video_src_TVALID : IN STD_LOGIC;
        video_src_TREADY : OUT STD_LOGIC;
        video_src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        video_src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        video_src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component In_Range IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component MedianBlur_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Erode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate203 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Resize204 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_dst_rows_V_empty_n : IN STD_LOGIC;
        p_dst_rows_V_read : OUT STD_LOGIC;
        p_dst_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_dst_cols_V_empty_n : IN STD_LOGIC;
        p_dst_cols_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC;
        p_dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        p_dst_rows_V_out_full_n : IN STD_LOGIC;
        p_dst_rows_V_out_write : OUT STD_LOGIC;
        p_dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_dst_cols_V_out_full_n : IN STD_LOGIC;
        p_dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component Dilate205 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate206 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate207 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Loop_CACHE_LEN_proc2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_V_EN_A : OUT STD_LOGIC;
        buffer_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        dilate_copy1_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        dilate_copy1_data_stream_0_V_empty_n : IN STD_LOGIC;
        dilate_copy1_data_stream_0_V_read : OUT STD_LOGIC );
    end component;


    component Resize IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_dst_rows_V_empty_n : IN STD_LOGIC;
        p_dst_rows_V_read : OUT STD_LOGIC;
        p_dst_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_dst_cols_V_empty_n : IN STD_LOGIC;
        p_dst_cols_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC;
        p_dst_rows_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_dst_rows_V_out_full_n : IN STD_LOGIC;
        p_dst_rows_V_out_write : OUT STD_LOGIC;
        p_dst_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        p_dst_cols_V_out_full_n : IN STD_LOGIC;
        p_dst_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component CvtColor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Add_Rectangle IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC;
        xleft_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        xleft_empty_n : IN STD_LOGIC;
        xleft_read : OUT STD_LOGIC;
        xright_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        xright_empty_n : IN STD_LOGIC;
        xright_read : OUT STD_LOGIC;
        ytop_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ytop_empty_n : IN STD_LOGIC;
        ytop_read : OUT STD_LOGIC;
        ydown_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ydown_empty_n : IN STD_LOGIC;
        ydown_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        video_dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        video_dst_TVALID : OUT STD_LOGIC;
        video_dst_TREADY : IN STD_LOGIC;
        video_dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w11_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d11_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d11_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d12_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d12_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d14_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d14_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d14_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w12_d14_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate2DeQ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Resize2Ee0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate2Ffa IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate2Gfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Resize_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Add_RecHfu IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoIfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_In_RangJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_MedianBKfY IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Erode_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Dilate2Lf8 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_DuplicaMgi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_CANgs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_CvtColoOgC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIPgM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        xleft_s : OUT STD_LOGIC_VECTOR (31 downto 0);
        xright_s : OUT STD_LOGIC_VECTOR (31 downto 0);
        ytop_s : OUT STD_LOGIC_VECTOR (31 downto 0);
        ydown_s : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    top_AXILiteS_s_axi_U : component top_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        xleft_s => xleft_s,
        xright_s => xright_s,
        ytop_s => ytop_s,
        ydown_s => ydown_s);

    Block_proc377_U0 : component Block_proc377
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc377_U0_ap_start,
        start_full_n => Block_proc377_U0_start_full_n,
        ap_done => Block_proc377_U0_ap_done,
        ap_continue => Block_proc377_U0_ap_continue,
        ap_idle => Block_proc377_U0_ap_idle,
        ap_ready => Block_proc377_U0_ap_ready,
        start_out => Block_proc377_U0_start_out,
        start_write => Block_proc377_U0_start_write,
        xleft_s => xleft_s,
        xright_s => xright_s,
        ytop_s => ytop_s,
        ydown_s => ydown_s,
        rgb_img_rows_V_out_din => Block_proc377_U0_rgb_img_rows_V_out_din,
        rgb_img_rows_V_out_full_n => rgb_img_rows_V_c_full_n,
        rgb_img_rows_V_out_write => Block_proc377_U0_rgb_img_rows_V_out_write,
        rgb_img_cols_V_out_din => Block_proc377_U0_rgb_img_cols_V_out_din,
        rgb_img_cols_V_out_full_n => rgb_img_cols_V_c_full_n,
        rgb_img_cols_V_out_write => Block_proc377_U0_rgb_img_cols_V_out_write,
        erode_blur_rows_V_out_din => Block_proc377_U0_erode_blur_rows_V_out_din,
        erode_blur_rows_V_out_full_n => erode_blur_rows_V_c_full_n,
        erode_blur_rows_V_out_write => Block_proc377_U0_erode_blur_rows_V_out_write,
        erode_blur_cols_V_out_din => Block_proc377_U0_erode_blur_cols_V_out_din,
        erode_blur_cols_V_out_full_n => erode_blur_cols_V_c_full_n,
        erode_blur_cols_V_out_write => Block_proc377_U0_erode_blur_cols_V_out_write,
        dilate1_rows_V_out_din => Block_proc377_U0_dilate1_rows_V_out_din,
        dilate1_rows_V_out_full_n => dilate1_rows_V_c_full_n,
        dilate1_rows_V_out_write => Block_proc377_U0_dilate1_rows_V_out_write,
        dilate1_cols_V_out_din => Block_proc377_U0_dilate1_cols_V_out_din,
        dilate1_cols_V_out_full_n => dilate1_cols_V_c_full_n,
        dilate1_cols_V_out_write => Block_proc377_U0_dilate1_cols_V_out_write,
        rdilate2_rows_V_out_din => Block_proc377_U0_rdilate2_rows_V_out_din,
        rdilate2_rows_V_out_full_n => rdilate2_rows_V_c_full_n,
        rdilate2_rows_V_out_write => Block_proc377_U0_rdilate2_rows_V_out_write,
        rdilate2_cols_V_out_din => Block_proc377_U0_rdilate2_cols_V_out_din,
        rdilate2_cols_V_out_full_n => rdilate2_cols_V_c_full_n,
        rdilate2_cols_V_out_write => Block_proc377_U0_rdilate2_cols_V_out_write,
        rdilate3_rows_V_out_din => Block_proc377_U0_rdilate3_rows_V_out_din,
        rdilate3_rows_V_out_full_n => rdilate3_rows_V_c_full_n,
        rdilate3_rows_V_out_write => Block_proc377_U0_rdilate3_rows_V_out_write,
        rdilate3_cols_V_out_din => Block_proc377_U0_rdilate3_cols_V_out_din,
        rdilate3_cols_V_out_full_n => rdilate3_cols_V_c_full_n,
        rdilate3_cols_V_out_write => Block_proc377_U0_rdilate3_cols_V_out_write,
        rdilate4_rows_V_out_din => Block_proc377_U0_rdilate4_rows_V_out_din,
        rdilate4_rows_V_out_full_n => rdilate4_rows_V_c_full_n,
        rdilate4_rows_V_out_write => Block_proc377_U0_rdilate4_rows_V_out_write,
        rdilate4_cols_V_out_din => Block_proc377_U0_rdilate4_cols_V_out_din,
        rdilate4_cols_V_out_full_n => rdilate4_cols_V_c_full_n,
        rdilate4_cols_V_out_write => Block_proc377_U0_rdilate4_cols_V_out_write,
        rdilate5_rows_V_out_din => Block_proc377_U0_rdilate5_rows_V_out_din,
        rdilate5_rows_V_out_full_n => rdilate5_rows_V_c_full_n,
        rdilate5_rows_V_out_write => Block_proc377_U0_rdilate5_rows_V_out_write,
        rdilate5_cols_V_out_din => Block_proc377_U0_rdilate5_cols_V_out_din,
        rdilate5_cols_V_out_full_n => rdilate5_cols_V_c_full_n,
        rdilate5_cols_V_out_write => Block_proc377_U0_rdilate5_cols_V_out_write,
        dilate_copy2_rows_V_out_din => Block_proc377_U0_dilate_copy2_rows_V_out_din,
        dilate_copy2_rows_V_out_full_n => dilate_copy2_rows_V_s_full_n,
        dilate_copy2_rows_V_out_write => Block_proc377_U0_dilate_copy2_rows_V_out_write,
        dilate_copy2_cols_V_out_din => Block_proc377_U0_dilate_copy2_cols_V_out_din,
        dilate_copy2_cols_V_out_full_n => dilate_copy2_cols_V_s_full_n,
        dilate_copy2_cols_V_out_write => Block_proc377_U0_dilate_copy2_cols_V_out_write,
        resize_dilate_rows_V_out_din => Block_proc377_U0_resize_dilate_rows_V_out_din,
        resize_dilate_rows_V_out_full_n => resize_dilate_rows_V_1_full_n,
        resize_dilate_rows_V_out_write => Block_proc377_U0_resize_dilate_rows_V_out_write,
        resize_dilate_cols_V_out_din => Block_proc377_U0_resize_dilate_cols_V_out_din,
        resize_dilate_cols_V_out_full_n => resize_dilate_cols_V_1_full_n,
        resize_dilate_cols_V_out_write => Block_proc377_U0_resize_dilate_cols_V_out_write,
        xleft_out_din => Block_proc377_U0_xleft_out_din,
        xleft_out_full_n => xleft_c_full_n,
        xleft_out_write => Block_proc377_U0_xleft_out_write,
        xright_out_din => Block_proc377_U0_xright_out_din,
        xright_out_full_n => xright_c_full_n,
        xright_out_write => Block_proc377_U0_xright_out_write,
        ytop_out_din => Block_proc377_U0_ytop_out_din,
        ytop_out_full_n => ytop_c_full_n,
        ytop_out_write => Block_proc377_U0_ytop_out_write,
        ydown_out_din => Block_proc377_U0_ydown_out_din,
        ydown_out_full_n => ydown_c_full_n,
        ydown_out_write => Block_proc377_U0_ydown_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_CvtColor_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        video_src_TDATA => video_src_TDATA,
        video_src_TVALID => video_src_TVALID,
        video_src_TREADY => AXIvideo2Mat_U0_video_src_TREADY,
        video_src_TKEEP => video_src_TKEEP,
        video_src_TSTRB => video_src_TSTRB,
        video_src_TUSER => video_src_TUSER,
        video_src_TLAST => video_src_TLAST,
        video_src_TID => video_src_TID,
        video_src_TDEST => video_src_TDEST,
        img_rows_V_dout => rgb_img_rows_V_c_dout,
        img_rows_V_empty_n => rgb_img_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => rgb_img_cols_V_c_dout,
        img_cols_V_empty_n => rgb_img_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => rgb_img_data_stream_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => rgb_img_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => rgb_img_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => rgb_img_rows_V_c55_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => rgb_img_cols_V_c56_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    CvtColor_U0 : component CvtColor
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_U0_ap_start,
        start_full_n => start_for_In_Range_U0_full_n,
        ap_done => CvtColor_U0_ap_done,
        ap_continue => CvtColor_U0_ap_continue,
        ap_idle => CvtColor_U0_ap_idle,
        ap_ready => CvtColor_U0_ap_ready,
        start_out => CvtColor_U0_start_out,
        start_write => CvtColor_U0_start_write,
        p_src_rows_V_dout => rgb_img_rows_V_c55_dout,
        p_src_rows_V_empty_n => rgb_img_rows_V_c55_empty_n,
        p_src_rows_V_read => CvtColor_U0_p_src_rows_V_read,
        p_src_cols_V_dout => rgb_img_cols_V_c56_dout,
        p_src_cols_V_empty_n => rgb_img_cols_V_c56_empty_n,
        p_src_cols_V_read => CvtColor_U0_p_src_cols_V_read,
        p_src_data_stream_0_V_dout => rgb_img_data_stream_s_dout,
        p_src_data_stream_0_V_empty_n => rgb_img_data_stream_s_empty_n,
        p_src_data_stream_0_V_read => CvtColor_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => rgb_img_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => rgb_img_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => CvtColor_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => rgb_img_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => rgb_img_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => CvtColor_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => CvtColor_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => hsv_img_data_stream_s_full_n,
        p_dst_data_stream_0_V_write => CvtColor_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => hsv_img_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => CvtColor_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => hsv_img_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => CvtColor_U0_p_dst_data_stream_2_V_write);

    In_Range_U0 : component In_Range
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => In_Range_U0_ap_start,
        start_full_n => start_for_MedianBlur_5_U0_full_n,
        ap_done => In_Range_U0_ap_done,
        ap_continue => In_Range_U0_ap_continue,
        ap_idle => In_Range_U0_ap_idle,
        ap_ready => In_Range_U0_ap_ready,
        start_out => In_Range_U0_start_out,
        start_write => In_Range_U0_start_write,
        src_data_stream_0_V_dout => hsv_img_data_stream_s_dout,
        src_data_stream_0_V_empty_n => hsv_img_data_stream_s_empty_n,
        src_data_stream_0_V_read => In_Range_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => hsv_img_data_stream_1_dout,
        src_data_stream_1_V_empty_n => hsv_img_data_stream_1_empty_n,
        src_data_stream_1_V_read => In_Range_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => hsv_img_data_stream_2_dout,
        src_data_stream_2_V_empty_n => hsv_img_data_stream_2_empty_n,
        src_data_stream_2_V_read => In_Range_U0_src_data_stream_2_V_read,
        dst_data_stream_V_din => In_Range_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => binary_hsv_data_stre_full_n,
        dst_data_stream_V_write => In_Range_U0_dst_data_stream_V_write);

    MedianBlur_5_U0 : component MedianBlur_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MedianBlur_5_U0_ap_start,
        start_full_n => start_for_Erode_U0_full_n,
        ap_done => MedianBlur_5_U0_ap_done,
        ap_continue => MedianBlur_5_U0_ap_continue,
        ap_idle => MedianBlur_5_U0_ap_idle,
        ap_ready => MedianBlur_5_U0_ap_ready,
        start_out => MedianBlur_5_U0_start_out,
        start_write => MedianBlur_5_U0_start_write,
        src_data_stream_V_dout => binary_hsv_data_stre_dout,
        src_data_stream_V_empty_n => binary_hsv_data_stre_empty_n,
        src_data_stream_V_read => MedianBlur_5_U0_src_data_stream_V_read,
        dst_data_stream_V_din => MedianBlur_5_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => blur_binary_data_str_full_n,
        dst_data_stream_V_write => MedianBlur_5_U0_dst_data_stream_V_write);

    Erode_U0 : component Erode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Erode_U0_ap_start,
        ap_done => Erode_U0_ap_done,
        ap_continue => Erode_U0_ap_continue,
        ap_idle => Erode_U0_ap_idle,
        ap_ready => Erode_U0_ap_ready,
        p_src_data_stream_V_dout => blur_binary_data_str_dout,
        p_src_data_stream_V_empty_n => blur_binary_data_str_empty_n,
        p_src_data_stream_V_read => Erode_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Erode_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => erode_blur_data_stre_full_n,
        p_dst_data_stream_V_write => Erode_U0_p_dst_data_stream_V_write);

    Dilate203_U0 : component Dilate203
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate203_U0_ap_start,
        ap_done => Dilate203_U0_ap_done,
        ap_continue => Dilate203_U0_ap_continue,
        ap_idle => Dilate203_U0_ap_idle,
        ap_ready => Dilate203_U0_ap_ready,
        p_src_rows_V_dout => erode_blur_rows_V_c_dout,
        p_src_rows_V_empty_n => erode_blur_rows_V_c_empty_n,
        p_src_rows_V_read => Dilate203_U0_p_src_rows_V_read,
        p_src_cols_V_dout => erode_blur_cols_V_c_dout,
        p_src_cols_V_empty_n => erode_blur_cols_V_c_empty_n,
        p_src_cols_V_read => Dilate203_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => erode_blur_data_stre_dout,
        p_src_data_stream_V_empty_n => erode_blur_data_stre_empty_n,
        p_src_data_stream_V_read => Dilate203_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate203_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => dilate1_data_stream_s_full_n,
        p_dst_data_stream_V_write => Dilate203_U0_p_dst_data_stream_V_write);

    Resize204_U0 : component Resize204
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Resize204_U0_ap_start,
        start_full_n => start_for_Dilate205_U0_full_n,
        ap_done => Resize204_U0_ap_done,
        ap_continue => Resize204_U0_ap_continue,
        ap_idle => Resize204_U0_ap_idle,
        ap_ready => Resize204_U0_ap_ready,
        start_out => Resize204_U0_start_out,
        start_write => Resize204_U0_start_write,
        p_src_rows_V_dout => dilate1_rows_V_c_dout,
        p_src_rows_V_empty_n => dilate1_rows_V_c_empty_n,
        p_src_rows_V_read => Resize204_U0_p_src_rows_V_read,
        p_src_cols_V_dout => dilate1_cols_V_c_dout,
        p_src_cols_V_empty_n => dilate1_cols_V_c_empty_n,
        p_src_cols_V_read => Resize204_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => dilate1_data_stream_s_dout,
        p_src_data_stream_V_empty_n => dilate1_data_stream_s_empty_n,
        p_src_data_stream_V_read => Resize204_U0_p_src_data_stream_V_read,
        p_dst_rows_V_dout => rdilate2_rows_V_c_dout,
        p_dst_rows_V_empty_n => rdilate2_rows_V_c_empty_n,
        p_dst_rows_V_read => Resize204_U0_p_dst_rows_V_read,
        p_dst_cols_V_dout => rdilate2_cols_V_c_dout,
        p_dst_cols_V_empty_n => rdilate2_cols_V_c_empty_n,
        p_dst_cols_V_read => Resize204_U0_p_dst_cols_V_read,
        p_dst_data_stream_V_din => Resize204_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => rdilate2_data_stream_full_n,
        p_dst_data_stream_V_write => Resize204_U0_p_dst_data_stream_V_write,
        p_dst_rows_V_out_din => Resize204_U0_p_dst_rows_V_out_din,
        p_dst_rows_V_out_full_n => rdilate2_rows_V_c57_full_n,
        p_dst_rows_V_out_write => Resize204_U0_p_dst_rows_V_out_write,
        p_dst_cols_V_out_din => Resize204_U0_p_dst_cols_V_out_din,
        p_dst_cols_V_out_full_n => rdilate2_cols_V_c58_full_n,
        p_dst_cols_V_out_write => Resize204_U0_p_dst_cols_V_out_write);

    Dilate205_U0 : component Dilate205
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate205_U0_ap_start,
        ap_done => Dilate205_U0_ap_done,
        ap_continue => Dilate205_U0_ap_continue,
        ap_idle => Dilate205_U0_ap_idle,
        ap_ready => Dilate205_U0_ap_ready,
        p_src_rows_V_dout => rdilate2_rows_V_c57_dout,
        p_src_rows_V_empty_n => rdilate2_rows_V_c57_empty_n,
        p_src_rows_V_read => Dilate205_U0_p_src_rows_V_read,
        p_src_cols_V_dout => rdilate2_cols_V_c58_dout,
        p_src_cols_V_empty_n => rdilate2_cols_V_c58_empty_n,
        p_src_cols_V_read => Dilate205_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => rdilate2_data_stream_dout,
        p_src_data_stream_V_empty_n => rdilate2_data_stream_empty_n,
        p_src_data_stream_V_read => Dilate205_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate205_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => rdilate3_data_stream_full_n,
        p_dst_data_stream_V_write => Dilate205_U0_p_dst_data_stream_V_write);

    Dilate206_U0 : component Dilate206
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate206_U0_ap_start,
        ap_done => Dilate206_U0_ap_done,
        ap_continue => Dilate206_U0_ap_continue,
        ap_idle => Dilate206_U0_ap_idle,
        ap_ready => Dilate206_U0_ap_ready,
        p_src_rows_V_dout => rdilate3_rows_V_c_dout,
        p_src_rows_V_empty_n => rdilate3_rows_V_c_empty_n,
        p_src_rows_V_read => Dilate206_U0_p_src_rows_V_read,
        p_src_cols_V_dout => rdilate3_cols_V_c_dout,
        p_src_cols_V_empty_n => rdilate3_cols_V_c_empty_n,
        p_src_cols_V_read => Dilate206_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => rdilate3_data_stream_dout,
        p_src_data_stream_V_empty_n => rdilate3_data_stream_empty_n,
        p_src_data_stream_V_read => Dilate206_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate206_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => rdilate4_data_stream_full_n,
        p_dst_data_stream_V_write => Dilate206_U0_p_dst_data_stream_V_write);

    Dilate207_U0 : component Dilate207
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate207_U0_ap_start,
        ap_done => Dilate207_U0_ap_done,
        ap_continue => Dilate207_U0_ap_continue,
        ap_idle => Dilate207_U0_ap_idle,
        ap_ready => Dilate207_U0_ap_ready,
        p_src_rows_V_dout => rdilate4_rows_V_c_dout,
        p_src_rows_V_empty_n => rdilate4_rows_V_c_empty_n,
        p_src_rows_V_read => Dilate207_U0_p_src_rows_V_read,
        p_src_cols_V_dout => rdilate4_cols_V_c_dout,
        p_src_cols_V_empty_n => rdilate4_cols_V_c_empty_n,
        p_src_cols_V_read => Dilate207_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => rdilate4_data_stream_dout,
        p_src_data_stream_V_empty_n => rdilate4_data_stream_empty_n,
        p_src_data_stream_V_read => Dilate207_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate207_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => rdilate5_data_stream_full_n,
        p_dst_data_stream_V_write => Dilate207_U0_p_dst_data_stream_V_write);

    Dilate_U0 : component Dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate_U0_ap_start,
        start_full_n => start_for_Duplicate_U0_full_n,
        ap_done => Dilate_U0_ap_done,
        ap_continue => Dilate_U0_ap_continue,
        ap_idle => Dilate_U0_ap_idle,
        ap_ready => Dilate_U0_ap_ready,
        start_out => Dilate_U0_start_out,
        start_write => Dilate_U0_start_write,
        p_src_rows_V_dout => rdilate5_rows_V_c_dout,
        p_src_rows_V_empty_n => rdilate5_rows_V_c_empty_n,
        p_src_rows_V_read => Dilate_U0_p_src_rows_V_read,
        p_src_cols_V_dout => rdilate5_cols_V_c_dout,
        p_src_cols_V_empty_n => rdilate5_cols_V_c_empty_n,
        p_src_cols_V_read => Dilate_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => rdilate5_data_stream_dout,
        p_src_data_stream_V_empty_n => rdilate5_data_stream_empty_n,
        p_src_data_stream_V_read => Dilate_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Dilate_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => rdilate6_data_stream_full_n,
        p_dst_data_stream_V_write => Dilate_U0_p_dst_data_stream_V_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        start_full_n => start_for_Loop_CACHE_LEN_proc2_U0_full_n,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        start_out => Duplicate_U0_start_out,
        start_write => Duplicate_U0_start_write,
        src_data_stream_V_dout => rdilate6_data_stream_dout,
        src_data_stream_V_empty_n => rdilate6_data_stream_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => dilate_copy1_data_st_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => dilate_copy2_data_st_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    Loop_CACHE_LEN_proc2_U0 : component Loop_CACHE_LEN_proc2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_CACHE_LEN_proc2_U0_ap_start,
        ap_done => Loop_CACHE_LEN_proc2_U0_ap_done,
        ap_continue => Loop_CACHE_LEN_proc2_U0_ap_continue,
        ap_idle => Loop_CACHE_LEN_proc2_U0_ap_idle,
        ap_ready => Loop_CACHE_LEN_proc2_U0_ap_ready,
        buffer_V_Addr_A => Loop_CACHE_LEN_proc2_U0_buffer_V_Addr_A,
        buffer_V_EN_A => Loop_CACHE_LEN_proc2_U0_buffer_V_EN_A,
        buffer_V_WEN_A => Loop_CACHE_LEN_proc2_U0_buffer_V_WEN_A,
        buffer_V_Din_A => Loop_CACHE_LEN_proc2_U0_buffer_V_Din_A,
        buffer_V_Dout_A => ap_const_lv32_0,
        dilate_copy1_data_stream_0_V_dout => dilate_copy1_data_st_dout,
        dilate_copy1_data_stream_0_V_empty_n => dilate_copy1_data_st_empty_n,
        dilate_copy1_data_stream_0_V_read => Loop_CACHE_LEN_proc2_U0_dilate_copy1_data_stream_0_V_read);

    Resize_U0 : component Resize
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Resize_U0_ap_start,
        start_full_n => start_for_CvtColor_1_U0_full_n,
        ap_done => Resize_U0_ap_done,
        ap_continue => Resize_U0_ap_continue,
        ap_idle => Resize_U0_ap_idle,
        ap_ready => Resize_U0_ap_ready,
        start_out => Resize_U0_start_out,
        start_write => Resize_U0_start_write,
        p_src_rows_V_dout => dilate_copy2_rows_V_s_dout,
        p_src_rows_V_empty_n => dilate_copy2_rows_V_s_empty_n,
        p_src_rows_V_read => Resize_U0_p_src_rows_V_read,
        p_src_cols_V_dout => dilate_copy2_cols_V_s_dout,
        p_src_cols_V_empty_n => dilate_copy2_cols_V_s_empty_n,
        p_src_cols_V_read => Resize_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => dilate_copy2_data_st_dout,
        p_src_data_stream_V_empty_n => dilate_copy2_data_st_empty_n,
        p_src_data_stream_V_read => Resize_U0_p_src_data_stream_V_read,
        p_dst_rows_V_dout => resize_dilate_rows_V_1_dout,
        p_dst_rows_V_empty_n => resize_dilate_rows_V_1_empty_n,
        p_dst_rows_V_read => Resize_U0_p_dst_rows_V_read,
        p_dst_cols_V_dout => resize_dilate_cols_V_1_dout,
        p_dst_cols_V_empty_n => resize_dilate_cols_V_1_empty_n,
        p_dst_cols_V_read => Resize_U0_p_dst_cols_V_read,
        p_dst_data_stream_V_din => Resize_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => resize_dilate_data_s_full_n,
        p_dst_data_stream_V_write => Resize_U0_p_dst_data_stream_V_write,
        p_dst_rows_V_out_din => Resize_U0_p_dst_rows_V_out_din,
        p_dst_rows_V_out_full_n => resize_dilate_rows_V_full_n,
        p_dst_rows_V_out_write => Resize_U0_p_dst_rows_V_out_write,
        p_dst_cols_V_out_din => Resize_U0_p_dst_cols_V_out_din,
        p_dst_cols_V_out_full_n => resize_dilate_cols_V_full_n,
        p_dst_cols_V_out_write => Resize_U0_p_dst_cols_V_out_write);

    CvtColor_1_U0 : component CvtColor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => CvtColor_1_U0_ap_start,
        ap_done => CvtColor_1_U0_ap_done,
        ap_continue => CvtColor_1_U0_ap_continue,
        ap_idle => CvtColor_1_U0_ap_idle,
        ap_ready => CvtColor_1_U0_ap_ready,
        p_src_rows_V_dout => resize_dilate_rows_V_dout,
        p_src_rows_V_empty_n => resize_dilate_rows_V_empty_n,
        p_src_rows_V_read => CvtColor_1_U0_p_src_rows_V_read,
        p_src_cols_V_dout => resize_dilate_cols_V_dout,
        p_src_cols_V_empty_n => resize_dilate_cols_V_empty_n,
        p_src_cols_V_read => CvtColor_1_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => resize_dilate_data_s_dout,
        p_src_data_stream_V_empty_n => resize_dilate_data_s_empty_n,
        p_src_data_stream_V_read => CvtColor_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_0_V_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => output_img_data_stre_full_n,
        p_dst_data_stream_0_V_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => output_img_data_stre_1_full_n,
        p_dst_data_stream_1_V_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => output_img_data_stre_2_full_n,
        p_dst_data_stream_2_V_write => CvtColor_1_U0_p_dst_data_stream_2_V_write);

    Add_Rectangle_U0 : component Add_Rectangle
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Add_Rectangle_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => Add_Rectangle_U0_ap_done,
        ap_continue => Add_Rectangle_U0_ap_continue,
        ap_idle => Add_Rectangle_U0_ap_idle,
        ap_ready => Add_Rectangle_U0_ap_ready,
        start_out => Add_Rectangle_U0_start_out,
        start_write => Add_Rectangle_U0_start_write,
        src_data_stream_0_V_dout => output_img_data_stre_dout,
        src_data_stream_0_V_empty_n => output_img_data_stre_empty_n,
        src_data_stream_0_V_read => Add_Rectangle_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => output_img_data_stre_1_dout,
        src_data_stream_1_V_empty_n => output_img_data_stre_1_empty_n,
        src_data_stream_1_V_read => Add_Rectangle_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => output_img_data_stre_2_dout,
        src_data_stream_2_V_empty_n => output_img_data_stre_2_empty_n,
        src_data_stream_2_V_read => Add_Rectangle_U0_src_data_stream_2_V_read,
        dst_data_stream_0_V_din => Add_Rectangle_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => output_img_rec_data_s_full_n,
        dst_data_stream_0_V_write => Add_Rectangle_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Add_Rectangle_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => output_img_rec_data_1_full_n,
        dst_data_stream_1_V_write => Add_Rectangle_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Add_Rectangle_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => output_img_rec_data_2_full_n,
        dst_data_stream_2_V_write => Add_Rectangle_U0_dst_data_stream_2_V_write,
        xleft_dout => xleft_c_dout,
        xleft_empty_n => xleft_c_empty_n,
        xleft_read => Add_Rectangle_U0_xleft_read,
        xright_dout => xright_c_dout,
        xright_empty_n => xright_c_empty_n,
        xright_read => Add_Rectangle_U0_xright_read,
        ytop_dout => ytop_c_dout,
        ytop_empty_n => ytop_c_empty_n,
        ytop_read => Add_Rectangle_U0_ytop_read,
        ydown_dout => ydown_c_dout,
        ydown_empty_n => ydown_c_empty_n,
        ydown_read => Add_Rectangle_U0_ydown_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => output_img_rec_data_s_dout,
        img_data_stream_0_V_empty_n => output_img_rec_data_s_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => output_img_rec_data_1_dout,
        img_data_stream_1_V_empty_n => output_img_rec_data_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => output_img_rec_data_2_dout,
        img_data_stream_2_V_empty_n => output_img_rec_data_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        video_dst_TDATA => Mat2AXIvideo_U0_video_dst_TDATA,
        video_dst_TVALID => Mat2AXIvideo_U0_video_dst_TVALID,
        video_dst_TREADY => video_dst_TREADY,
        video_dst_TKEEP => Mat2AXIvideo_U0_video_dst_TKEEP,
        video_dst_TSTRB => Mat2AXIvideo_U0_video_dst_TSTRB,
        video_dst_TUSER => Mat2AXIvideo_U0_video_dst_TUSER,
        video_dst_TLAST => Mat2AXIvideo_U0_video_dst_TLAST,
        video_dst_TID => Mat2AXIvideo_U0_video_dst_TID,
        video_dst_TDEST => Mat2AXIvideo_U0_video_dst_TDEST);

    rgb_img_rows_V_c_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rgb_img_rows_V_out_din,
        if_full_n => rgb_img_rows_V_c_full_n,
        if_write => Block_proc377_U0_rgb_img_rows_V_out_write,
        if_dout => rgb_img_rows_V_c_dout,
        if_empty_n => rgb_img_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    rgb_img_cols_V_c_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rgb_img_cols_V_out_din,
        if_full_n => rgb_img_cols_V_c_full_n,
        if_write => Block_proc377_U0_rgb_img_cols_V_out_write,
        if_dout => rgb_img_cols_V_c_dout,
        if_empty_n => rgb_img_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    erode_blur_rows_V_c_U : component fifo_w11_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_erode_blur_rows_V_out_din,
        if_full_n => erode_blur_rows_V_c_full_n,
        if_write => Block_proc377_U0_erode_blur_rows_V_out_write,
        if_dout => erode_blur_rows_V_c_dout,
        if_empty_n => erode_blur_rows_V_c_empty_n,
        if_read => Dilate203_U0_p_src_rows_V_read);

    erode_blur_cols_V_c_U : component fifo_w12_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_erode_blur_cols_V_out_din,
        if_full_n => erode_blur_cols_V_c_full_n,
        if_write => Block_proc377_U0_erode_blur_cols_V_out_write,
        if_dout => erode_blur_cols_V_c_dout,
        if_empty_n => erode_blur_cols_V_c_empty_n,
        if_read => Dilate203_U0_p_src_cols_V_read);

    dilate1_rows_V_c_U : component fifo_w11_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_dilate1_rows_V_out_din,
        if_full_n => dilate1_rows_V_c_full_n,
        if_write => Block_proc377_U0_dilate1_rows_V_out_write,
        if_dout => dilate1_rows_V_c_dout,
        if_empty_n => dilate1_rows_V_c_empty_n,
        if_read => Resize204_U0_p_src_rows_V_read);

    dilate1_cols_V_c_U : component fifo_w12_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_dilate1_cols_V_out_din,
        if_full_n => dilate1_cols_V_c_full_n,
        if_write => Block_proc377_U0_dilate1_cols_V_out_write,
        if_dout => dilate1_cols_V_c_dout,
        if_empty_n => dilate1_cols_V_c_empty_n,
        if_read => Resize204_U0_p_src_cols_V_read);

    rdilate2_rows_V_c_U : component fifo_w9_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate2_rows_V_out_din,
        if_full_n => rdilate2_rows_V_c_full_n,
        if_write => Block_proc377_U0_rdilate2_rows_V_out_write,
        if_dout => rdilate2_rows_V_c_dout,
        if_empty_n => rdilate2_rows_V_c_empty_n,
        if_read => Resize204_U0_p_dst_rows_V_read);

    rdilate2_cols_V_c_U : component fifo_w10_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate2_cols_V_out_din,
        if_full_n => rdilate2_cols_V_c_full_n,
        if_write => Block_proc377_U0_rdilate2_cols_V_out_write,
        if_dout => rdilate2_cols_V_c_dout,
        if_empty_n => rdilate2_cols_V_c_empty_n,
        if_read => Resize204_U0_p_dst_cols_V_read);

    rdilate3_rows_V_c_U : component fifo_w9_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate3_rows_V_out_din,
        if_full_n => rdilate3_rows_V_c_full_n,
        if_write => Block_proc377_U0_rdilate3_rows_V_out_write,
        if_dout => rdilate3_rows_V_c_dout,
        if_empty_n => rdilate3_rows_V_c_empty_n,
        if_read => Dilate206_U0_p_src_rows_V_read);

    rdilate3_cols_V_c_U : component fifo_w10_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate3_cols_V_out_din,
        if_full_n => rdilate3_cols_V_c_full_n,
        if_write => Block_proc377_U0_rdilate3_cols_V_out_write,
        if_dout => rdilate3_cols_V_c_dout,
        if_empty_n => rdilate3_cols_V_c_empty_n,
        if_read => Dilate206_U0_p_src_cols_V_read);

    rdilate4_rows_V_c_U : component fifo_w9_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate4_rows_V_out_din,
        if_full_n => rdilate4_rows_V_c_full_n,
        if_write => Block_proc377_U0_rdilate4_rows_V_out_write,
        if_dout => rdilate4_rows_V_c_dout,
        if_empty_n => rdilate4_rows_V_c_empty_n,
        if_read => Dilate207_U0_p_src_rows_V_read);

    rdilate4_cols_V_c_U : component fifo_w10_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate4_cols_V_out_din,
        if_full_n => rdilate4_cols_V_c_full_n,
        if_write => Block_proc377_U0_rdilate4_cols_V_out_write,
        if_dout => rdilate4_cols_V_c_dout,
        if_empty_n => rdilate4_cols_V_c_empty_n,
        if_read => Dilate207_U0_p_src_cols_V_read);

    rdilate5_rows_V_c_U : component fifo_w9_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate5_rows_V_out_din,
        if_full_n => rdilate5_rows_V_c_full_n,
        if_write => Block_proc377_U0_rdilate5_rows_V_out_write,
        if_dout => rdilate5_rows_V_c_dout,
        if_empty_n => rdilate5_rows_V_c_empty_n,
        if_read => Dilate_U0_p_src_rows_V_read);

    rdilate5_cols_V_c_U : component fifo_w10_d12_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_rdilate5_cols_V_out_din,
        if_full_n => rdilate5_cols_V_c_full_n,
        if_write => Block_proc377_U0_rdilate5_cols_V_out_write,
        if_dout => rdilate5_cols_V_c_dout,
        if_empty_n => rdilate5_cols_V_c_empty_n,
        if_read => Dilate_U0_p_src_cols_V_read);

    dilate_copy2_rows_V_s_U : component fifo_w9_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_dilate_copy2_rows_V_out_din,
        if_full_n => dilate_copy2_rows_V_s_full_n,
        if_write => Block_proc377_U0_dilate_copy2_rows_V_out_write,
        if_dout => dilate_copy2_rows_V_s_dout,
        if_empty_n => dilate_copy2_rows_V_s_empty_n,
        if_read => Resize_U0_p_src_rows_V_read);

    dilate_copy2_cols_V_s_U : component fifo_w10_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_dilate_copy2_cols_V_out_din,
        if_full_n => dilate_copy2_cols_V_s_full_n,
        if_write => Block_proc377_U0_dilate_copy2_cols_V_out_write,
        if_dout => dilate_copy2_cols_V_s_dout,
        if_empty_n => dilate_copy2_cols_V_s_empty_n,
        if_read => Resize_U0_p_src_cols_V_read);

    resize_dilate_rows_V_1_U : component fifo_w11_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_resize_dilate_rows_V_out_din,
        if_full_n => resize_dilate_rows_V_1_full_n,
        if_write => Block_proc377_U0_resize_dilate_rows_V_out_write,
        if_dout => resize_dilate_rows_V_1_dout,
        if_empty_n => resize_dilate_rows_V_1_empty_n,
        if_read => Resize_U0_p_dst_rows_V_read);

    resize_dilate_cols_V_1_U : component fifo_w12_d14_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_resize_dilate_cols_V_out_din,
        if_full_n => resize_dilate_cols_V_1_full_n,
        if_write => Block_proc377_U0_resize_dilate_cols_V_out_write,
        if_dout => resize_dilate_cols_V_1_dout,
        if_empty_n => resize_dilate_cols_V_1_empty_n,
        if_read => Resize_U0_p_dst_cols_V_read);

    xleft_c_U : component fifo_w32_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_xleft_out_din,
        if_full_n => xleft_c_full_n,
        if_write => Block_proc377_U0_xleft_out_write,
        if_dout => xleft_c_dout,
        if_empty_n => xleft_c_empty_n,
        if_read => Add_Rectangle_U0_xleft_read);

    xright_c_U : component fifo_w32_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_xright_out_din,
        if_full_n => xright_c_full_n,
        if_write => Block_proc377_U0_xright_out_write,
        if_dout => xright_c_dout,
        if_empty_n => xright_c_empty_n,
        if_read => Add_Rectangle_U0_xright_read);

    ytop_c_U : component fifo_w32_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_ytop_out_din,
        if_full_n => ytop_c_full_n,
        if_write => Block_proc377_U0_ytop_out_write,
        if_dout => ytop_c_dout,
        if_empty_n => ytop_c_empty_n,
        if_read => Add_Rectangle_U0_ytop_read);

    ydown_c_U : component fifo_w32_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc377_U0_ydown_out_din,
        if_full_n => ydown_c_full_n,
        if_write => Block_proc377_U0_ydown_out_write,
        if_dout => ydown_c_dout,
        if_empty_n => ydown_c_empty_n,
        if_read => Add_Rectangle_U0_ydown_read);

    rgb_img_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => rgb_img_data_stream_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => rgb_img_data_stream_s_dout,
        if_empty_n => rgb_img_data_stream_s_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_0_V_read);

    rgb_img_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => rgb_img_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => rgb_img_data_stream_1_dout,
        if_empty_n => rgb_img_data_stream_1_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_1_V_read);

    rgb_img_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => rgb_img_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => rgb_img_data_stream_2_dout,
        if_empty_n => rgb_img_data_stream_2_empty_n,
        if_read => CvtColor_U0_p_src_data_stream_2_V_read);

    rgb_img_rows_V_c55_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => rgb_img_rows_V_c55_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => rgb_img_rows_V_c55_dout,
        if_empty_n => rgb_img_rows_V_c55_empty_n,
        if_read => CvtColor_U0_p_src_rows_V_read);

    rgb_img_cols_V_c56_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => rgb_img_cols_V_c56_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => rgb_img_cols_V_c56_dout,
        if_empty_n => rgb_img_cols_V_c56_empty_n,
        if_read => CvtColor_U0_p_src_cols_V_read);

    hsv_img_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_0_V_din,
        if_full_n => hsv_img_data_stream_s_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_0_V_write,
        if_dout => hsv_img_data_stream_s_dout,
        if_empty_n => hsv_img_data_stream_s_empty_n,
        if_read => In_Range_U0_src_data_stream_0_V_read);

    hsv_img_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_1_V_din,
        if_full_n => hsv_img_data_stream_1_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_1_V_write,
        if_dout => hsv_img_data_stream_1_dout,
        if_empty_n => hsv_img_data_stream_1_empty_n,
        if_read => In_Range_U0_src_data_stream_1_V_read);

    hsv_img_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_U0_p_dst_data_stream_2_V_din,
        if_full_n => hsv_img_data_stream_2_full_n,
        if_write => CvtColor_U0_p_dst_data_stream_2_V_write,
        if_dout => hsv_img_data_stream_2_dout,
        if_empty_n => hsv_img_data_stream_2_empty_n,
        if_read => In_Range_U0_src_data_stream_2_V_read);

    binary_hsv_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => In_Range_U0_dst_data_stream_V_din,
        if_full_n => binary_hsv_data_stre_full_n,
        if_write => In_Range_U0_dst_data_stream_V_write,
        if_dout => binary_hsv_data_stre_dout,
        if_empty_n => binary_hsv_data_stre_empty_n,
        if_read => MedianBlur_5_U0_src_data_stream_V_read);

    blur_binary_data_str_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MedianBlur_5_U0_dst_data_stream_V_din,
        if_full_n => blur_binary_data_str_full_n,
        if_write => MedianBlur_5_U0_dst_data_stream_V_write,
        if_dout => blur_binary_data_str_dout,
        if_empty_n => blur_binary_data_str_empty_n,
        if_read => Erode_U0_p_src_data_stream_V_read);

    erode_blur_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Erode_U0_p_dst_data_stream_V_din,
        if_full_n => erode_blur_data_stre_full_n,
        if_write => Erode_U0_p_dst_data_stream_V_write,
        if_dout => erode_blur_data_stre_dout,
        if_empty_n => erode_blur_data_stre_empty_n,
        if_read => Dilate203_U0_p_src_data_stream_V_read);

    dilate1_data_stream_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate203_U0_p_dst_data_stream_V_din,
        if_full_n => dilate1_data_stream_s_full_n,
        if_write => Dilate203_U0_p_dst_data_stream_V_write,
        if_dout => dilate1_data_stream_s_dout,
        if_empty_n => dilate1_data_stream_s_empty_n,
        if_read => Resize204_U0_p_src_data_stream_V_read);

    rdilate2_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize204_U0_p_dst_data_stream_V_din,
        if_full_n => rdilate2_data_stream_full_n,
        if_write => Resize204_U0_p_dst_data_stream_V_write,
        if_dout => rdilate2_data_stream_dout,
        if_empty_n => rdilate2_data_stream_empty_n,
        if_read => Dilate205_U0_p_src_data_stream_V_read);

    rdilate2_rows_V_c57_U : component fifo_w9_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize204_U0_p_dst_rows_V_out_din,
        if_full_n => rdilate2_rows_V_c57_full_n,
        if_write => Resize204_U0_p_dst_rows_V_out_write,
        if_dout => rdilate2_rows_V_c57_dout,
        if_empty_n => rdilate2_rows_V_c57_empty_n,
        if_read => Dilate205_U0_p_src_rows_V_read);

    rdilate2_cols_V_c58_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize204_U0_p_dst_cols_V_out_din,
        if_full_n => rdilate2_cols_V_c58_full_n,
        if_write => Resize204_U0_p_dst_cols_V_out_write,
        if_dout => rdilate2_cols_V_c58_dout,
        if_empty_n => rdilate2_cols_V_c58_empty_n,
        if_read => Dilate205_U0_p_src_cols_V_read);

    rdilate3_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate205_U0_p_dst_data_stream_V_din,
        if_full_n => rdilate3_data_stream_full_n,
        if_write => Dilate205_U0_p_dst_data_stream_V_write,
        if_dout => rdilate3_data_stream_dout,
        if_empty_n => rdilate3_data_stream_empty_n,
        if_read => Dilate206_U0_p_src_data_stream_V_read);

    rdilate4_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate206_U0_p_dst_data_stream_V_din,
        if_full_n => rdilate4_data_stream_full_n,
        if_write => Dilate206_U0_p_dst_data_stream_V_write,
        if_dout => rdilate4_data_stream_dout,
        if_empty_n => rdilate4_data_stream_empty_n,
        if_read => Dilate207_U0_p_src_data_stream_V_read);

    rdilate5_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate207_U0_p_dst_data_stream_V_din,
        if_full_n => rdilate5_data_stream_full_n,
        if_write => Dilate207_U0_p_dst_data_stream_V_write,
        if_dout => rdilate5_data_stream_dout,
        if_empty_n => rdilate5_data_stream_empty_n,
        if_read => Dilate_U0_p_src_data_stream_V_read);

    rdilate6_data_stream_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_V_din,
        if_full_n => rdilate6_data_stream_full_n,
        if_write => Dilate_U0_p_dst_data_stream_V_write,
        if_dout => rdilate6_data_stream_dout,
        if_empty_n => rdilate6_data_stream_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    dilate_copy1_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => dilate_copy1_data_st_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => dilate_copy1_data_st_dout,
        if_empty_n => dilate_copy1_data_st_empty_n,
        if_read => Loop_CACHE_LEN_proc2_U0_dilate_copy1_data_stream_0_V_read);

    dilate_copy2_data_st_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => dilate_copy2_data_st_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => dilate_copy2_data_st_dout,
        if_empty_n => dilate_copy2_data_st_empty_n,
        if_read => Resize_U0_p_src_data_stream_V_read);

    resize_dilate_data_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_p_dst_data_stream_V_din,
        if_full_n => resize_dilate_data_s_full_n,
        if_write => Resize_U0_p_dst_data_stream_V_write,
        if_dout => resize_dilate_data_s_dout,
        if_empty_n => resize_dilate_data_s_empty_n,
        if_read => CvtColor_1_U0_p_src_data_stream_V_read);

    resize_dilate_rows_V_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_p_dst_rows_V_out_din,
        if_full_n => resize_dilate_rows_V_full_n,
        if_write => Resize_U0_p_dst_rows_V_out_write,
        if_dout => resize_dilate_rows_V_dout,
        if_empty_n => resize_dilate_rows_V_empty_n,
        if_read => CvtColor_1_U0_p_src_rows_V_read);

    resize_dilate_cols_V_U : component fifo_w12_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Resize_U0_p_dst_cols_V_out_din,
        if_full_n => resize_dilate_cols_V_full_n,
        if_write => Resize_U0_p_dst_cols_V_out_write,
        if_dout => resize_dilate_cols_V_dout,
        if_empty_n => resize_dilate_cols_V_empty_n,
        if_read => CvtColor_1_U0_p_src_cols_V_read);

    output_img_data_stre_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_0_V_din,
        if_full_n => output_img_data_stre_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_0_V_write,
        if_dout => output_img_data_stre_dout,
        if_empty_n => output_img_data_stre_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_0_V_read);

    output_img_data_stre_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_1_V_din,
        if_full_n => output_img_data_stre_1_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_1_V_write,
        if_dout => output_img_data_stre_1_dout,
        if_empty_n => output_img_data_stre_1_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_1_V_read);

    output_img_data_stre_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => CvtColor_1_U0_p_dst_data_stream_2_V_din,
        if_full_n => output_img_data_stre_2_full_n,
        if_write => CvtColor_1_U0_p_dst_data_stream_2_V_write,
        if_dout => output_img_data_stre_2_dout,
        if_empty_n => output_img_data_stre_2_empty_n,
        if_read => Add_Rectangle_U0_src_data_stream_2_V_read);

    output_img_rec_data_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_0_V_din,
        if_full_n => output_img_rec_data_s_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_0_V_write,
        if_dout => output_img_rec_data_s_dout,
        if_empty_n => output_img_rec_data_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    output_img_rec_data_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_1_V_din,
        if_full_n => output_img_rec_data_1_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_1_V_write,
        if_dout => output_img_rec_data_1_dout,
        if_empty_n => output_img_rec_data_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    output_img_rec_data_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Add_Rectangle_U0_dst_data_stream_2_V_din,
        if_full_n => output_img_rec_data_2_full_n,
        if_write => Add_Rectangle_U0_dst_data_stream_2_V_write,
        if_dout => output_img_rec_data_2_dout,
        if_empty_n => output_img_rec_data_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_Dilate2DeQ_U : component start_for_Dilate2DeQ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate203_U0_din,
        if_full_n => start_for_Dilate203_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Dilate203_U0_dout,
        if_empty_n => start_for_Dilate203_U0_empty_n,
        if_read => Dilate203_U0_ap_ready);

    start_for_Resize2Ee0_U : component start_for_Resize2Ee0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Resize204_U0_din,
        if_full_n => start_for_Resize204_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Resize204_U0_dout,
        if_empty_n => start_for_Resize204_U0_empty_n,
        if_read => Resize204_U0_ap_ready);

    start_for_Dilate2Ffa_U : component start_for_Dilate2Ffa
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate206_U0_din,
        if_full_n => start_for_Dilate206_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Dilate206_U0_dout,
        if_empty_n => start_for_Dilate206_U0_empty_n,
        if_read => Dilate206_U0_ap_ready);

    start_for_Dilate2Gfk_U : component start_for_Dilate2Gfk
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate207_U0_din,
        if_full_n => start_for_Dilate207_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Dilate207_U0_dout,
        if_empty_n => start_for_Dilate207_U0_empty_n,
        if_read => Dilate207_U0_ap_ready);

    start_for_Dilate_U0_U : component start_for_Dilate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate_U0_din,
        if_full_n => start_for_Dilate_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Dilate_U0_dout,
        if_empty_n => start_for_Dilate_U0_empty_n,
        if_read => Dilate_U0_ap_ready);

    start_for_Resize_U0_U : component start_for_Resize_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Resize_U0_din,
        if_full_n => start_for_Resize_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Resize_U0_dout,
        if_empty_n => start_for_Resize_U0_empty_n,
        if_read => Resize_U0_ap_ready);

    start_for_Add_RecHfu_U : component start_for_Add_RecHfu
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Add_Rectangle_U0_din,
        if_full_n => start_for_Add_Rectangle_U0_full_n,
        if_write => Block_proc377_U0_start_write,
        if_dout => start_for_Add_Rectangle_U0_dout,
        if_empty_n => start_for_Add_Rectangle_U0_empty_n,
        if_read => Add_Rectangle_U0_ap_ready);

    start_for_CvtColoIfE_U : component start_for_CvtColoIfE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_U0_din,
        if_full_n => start_for_CvtColor_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_CvtColor_U0_dout,
        if_empty_n => start_for_CvtColor_U0_empty_n,
        if_read => CvtColor_U0_ap_ready);

    start_for_In_RangJfO_U : component start_for_In_RangJfO
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_In_Range_U0_din,
        if_full_n => start_for_In_Range_U0_full_n,
        if_write => CvtColor_U0_start_write,
        if_dout => start_for_In_Range_U0_dout,
        if_empty_n => start_for_In_Range_U0_empty_n,
        if_read => In_Range_U0_ap_ready);

    start_for_MedianBKfY_U : component start_for_MedianBKfY
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MedianBlur_5_U0_din,
        if_full_n => start_for_MedianBlur_5_U0_full_n,
        if_write => In_Range_U0_start_write,
        if_dout => start_for_MedianBlur_5_U0_dout,
        if_empty_n => start_for_MedianBlur_5_U0_empty_n,
        if_read => MedianBlur_5_U0_ap_ready);

    start_for_Erode_U0_U : component start_for_Erode_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Erode_U0_din,
        if_full_n => start_for_Erode_U0_full_n,
        if_write => MedianBlur_5_U0_start_write,
        if_dout => start_for_Erode_U0_dout,
        if_empty_n => start_for_Erode_U0_empty_n,
        if_read => Erode_U0_ap_ready);

    start_for_Dilate2Lf8_U : component start_for_Dilate2Lf8
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Dilate205_U0_din,
        if_full_n => start_for_Dilate205_U0_full_n,
        if_write => Resize204_U0_start_write,
        if_dout => start_for_Dilate205_U0_dout,
        if_empty_n => start_for_Dilate205_U0_empty_n,
        if_read => Dilate205_U0_ap_ready);

    start_for_DuplicaMgi_U : component start_for_DuplicaMgi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Dilate_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_Loop_CANgs_U : component start_for_Loop_CANgs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_CACHE_LEN_proc2_U0_din,
        if_full_n => start_for_Loop_CACHE_LEN_proc2_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_Loop_CACHE_LEN_proc2_U0_dout,
        if_empty_n => start_for_Loop_CACHE_LEN_proc2_U0_empty_n,
        if_read => Loop_CACHE_LEN_proc2_U0_ap_ready);

    start_for_CvtColoOgC_U : component start_for_CvtColoOgC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_CvtColor_1_U0_din,
        if_full_n => start_for_CvtColor_1_U0_full_n,
        if_write => Resize_U0_start_write,
        if_dout => start_for_CvtColor_1_U0_dout,
        if_empty_n => start_for_CvtColor_1_U0_empty_n,
        if_read => CvtColor_1_U0_ap_ready);

    start_for_Mat2AXIPgM_U : component start_for_Mat2AXIPgM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Add_Rectangle_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_proc377_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_proc377_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_proc377_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc377_U0_ap_ready <= ap_sync_Block_proc377_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_proc377_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_proc377_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_proc377_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc377_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_proc377_U0_ap_ready))) then 
                Block_proc377_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc377_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Add_Rectangle_U0_ap_continue <= ap_const_logic_1;
    Add_Rectangle_U0_ap_start <= start_for_Add_Rectangle_U0_empty_n;
    Block_proc377_U0_ap_continue <= ap_const_logic_1;
    Block_proc377_U0_ap_start <= ((ap_sync_reg_Block_proc377_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc377_U0_start_full_n <= (start_for_Resize_U0_full_n and start_for_Resize204_U0_full_n and start_for_Dilate_U0_full_n and start_for_Dilate207_U0_full_n and start_for_Dilate206_U0_full_n and start_for_Dilate203_U0_full_n and start_for_Add_Rectangle_U0_full_n);
    CvtColor_1_U0_ap_continue <= ap_const_logic_1;
    CvtColor_1_U0_ap_start <= start_for_CvtColor_1_U0_empty_n;
    CvtColor_1_U0_start_full_n <= ap_const_logic_1;
    CvtColor_1_U0_start_write <= ap_const_logic_0;
    CvtColor_U0_ap_continue <= ap_const_logic_1;
    CvtColor_U0_ap_start <= start_for_CvtColor_U0_empty_n;
    Dilate203_U0_ap_continue <= ap_const_logic_1;
    Dilate203_U0_ap_start <= start_for_Dilate203_U0_empty_n;
    Dilate203_U0_start_full_n <= ap_const_logic_1;
    Dilate203_U0_start_write <= ap_const_logic_0;
    Dilate205_U0_ap_continue <= ap_const_logic_1;
    Dilate205_U0_ap_start <= start_for_Dilate205_U0_empty_n;
    Dilate205_U0_start_full_n <= ap_const_logic_1;
    Dilate205_U0_start_write <= ap_const_logic_0;
    Dilate206_U0_ap_continue <= ap_const_logic_1;
    Dilate206_U0_ap_start <= start_for_Dilate206_U0_empty_n;
    Dilate206_U0_start_full_n <= ap_const_logic_1;
    Dilate206_U0_start_write <= ap_const_logic_0;
    Dilate207_U0_ap_continue <= ap_const_logic_1;
    Dilate207_U0_ap_start <= start_for_Dilate207_U0_empty_n;
    Dilate207_U0_start_full_n <= ap_const_logic_1;
    Dilate207_U0_start_write <= ap_const_logic_0;
    Dilate_U0_ap_continue <= ap_const_logic_1;
    Dilate_U0_ap_start <= start_for_Dilate_U0_empty_n;
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Erode_U0_ap_continue <= ap_const_logic_1;
    Erode_U0_ap_start <= start_for_Erode_U0_empty_n;
    Erode_U0_start_full_n <= ap_const_logic_1;
    Erode_U0_start_write <= ap_const_logic_0;
    In_Range_U0_ap_continue <= ap_const_logic_1;
    In_Range_U0_ap_start <= start_for_In_Range_U0_empty_n;
    Loop_CACHE_LEN_proc2_U0_ap_continue <= ap_sync_done;
    Loop_CACHE_LEN_proc2_U0_ap_start <= start_for_Loop_CACHE_LEN_proc2_U0_empty_n;
    Loop_CACHE_LEN_proc2_U0_start_full_n <= ap_const_logic_1;
    Loop_CACHE_LEN_proc2_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_sync_done;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    MedianBlur_5_U0_ap_continue <= ap_const_logic_1;
    MedianBlur_5_U0_ap_start <= start_for_MedianBlur_5_U0_empty_n;
    Resize204_U0_ap_continue <= ap_const_logic_1;
    Resize204_U0_ap_start <= start_for_Resize204_U0_empty_n;
    Resize_U0_ap_continue <= ap_const_logic_1;
    Resize_U0_ap_start <= start_for_Resize_U0_empty_n;
    ap_done <= ap_sync_done;
    ap_idle <= (Resize_U0_ap_idle and Resize204_U0_ap_idle and MedianBlur_5_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Loop_CACHE_LEN_proc2_U0_ap_idle and In_Range_U0_ap_idle and Erode_U0_ap_idle and Duplicate_U0_ap_idle and Dilate_U0_ap_idle and Dilate207_U0_ap_idle and Dilate206_U0_ap_idle and Dilate205_U0_ap_idle and Dilate203_U0_ap_idle and CvtColor_U0_ap_idle and CvtColor_1_U0_ap_idle and Block_proc377_U0_ap_idle and Add_Rectangle_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_proc377_U0_ap_ready <= (ap_sync_reg_Block_proc377_U0_ap_ready or Block_proc377_U0_ap_ready);
    ap_sync_continue <= ap_sync_done;
    ap_sync_done <= (Mat2AXIvideo_U0_ap_done and Loop_CACHE_LEN_proc2_U0_ap_done);
    ap_sync_ready <= (ap_sync_Block_proc377_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    buffer_V_Addr_A <= Loop_CACHE_LEN_proc2_U0_buffer_V_Addr_A;
    buffer_V_Addr_B <= ap_const_lv32_0;
    buffer_V_Clk_A <= ap_clk;
    buffer_V_Clk_B <= ap_clk;
    buffer_V_Din_A <= Loop_CACHE_LEN_proc2_U0_buffer_V_Din_A;
    buffer_V_Din_B <= ap_const_lv32_0;
    buffer_V_EN_A <= Loop_CACHE_LEN_proc2_U0_buffer_V_EN_A;
    buffer_V_EN_B <= ap_const_logic_0;
    buffer_V_Rst_A <= ap_rst_n_inv;
    buffer_V_Rst_B <= ap_rst_n_inv;
    buffer_V_WEN_A <= Loop_CACHE_LEN_proc2_U0_buffer_V_WEN_A;
    buffer_V_WEN_B <= (0=>ap_const_logic_0, others=>'-');
    start_for_Add_Rectangle_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_CvtColor_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate203_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate205_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate206_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate207_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Dilate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Erode_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_In_Range_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_CACHE_LEN_proc2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_MedianBlur_5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Resize204_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Resize_U0_din <= (0=>ap_const_logic_1, others=>'-');
    video_dst_TDATA <= Mat2AXIvideo_U0_video_dst_TDATA;
    video_dst_TDEST <= Mat2AXIvideo_U0_video_dst_TDEST;
    video_dst_TID <= Mat2AXIvideo_U0_video_dst_TID;
    video_dst_TKEEP <= Mat2AXIvideo_U0_video_dst_TKEEP;
    video_dst_TLAST <= Mat2AXIvideo_U0_video_dst_TLAST;
    video_dst_TSTRB <= Mat2AXIvideo_U0_video_dst_TSTRB;
    video_dst_TUSER <= Mat2AXIvideo_U0_video_dst_TUSER;
    video_dst_TVALID <= Mat2AXIvideo_U0_video_dst_TVALID;
    video_src_TREADY <= AXIvideo2Mat_U0_video_src_TREADY;
end behav;
