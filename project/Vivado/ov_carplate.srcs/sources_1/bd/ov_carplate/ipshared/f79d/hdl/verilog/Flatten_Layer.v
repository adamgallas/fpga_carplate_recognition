// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Flatten_Layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer5_V_address0,
        layer5_V_ce0,
        layer5_V_q0,
        flatten1_V_address0,
        flatten1_V_ce0,
        flatten1_V_we0,
        flatten1_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] layer5_V_address0;
output   layer5_V_ce0;
input  [11:0] layer5_V_q0;
output  [8:0] flatten1_V_address0;
output   flatten1_V_ce0;
output   flatten1_V_we0;
output  [11:0] flatten1_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer5_V_ce0;
reg flatten1_V_ce0;
reg flatten1_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_150_p2;
reg   [2:0] i_reg_268;
wire    ap_CS_fsm_state2;
wire   [8:0] index_fu_156_p2;
reg   [8:0] index_reg_273;
wire   [0:0] icmp_ln214_fu_144_p2;
wire   [7:0] zext_ln216_fu_162_p1;
reg   [7:0] zext_ln216_reg_278;
wire   [2:0] j_fu_172_p2;
reg   [2:0] j_reg_286;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln220_fu_178_p2;
reg   [8:0] add_ln220_reg_291;
wire   [0:0] icmp_ln216_fu_166_p2;
wire   [9:0] zext_ln218_fu_184_p1;
reg   [9:0] zext_ln218_reg_296;
wire   [4:0] t_fu_194_p2;
reg   [4:0] t_reg_304;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln203_11_fu_245_p2;
reg   [9:0] add_ln203_11_reg_309;
wire   [0:0] icmp_ln218_fu_188_p2;
wire    ap_CS_fsm_state5;
wire   [8:0] add_ln220_1_fu_259_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] i_0_reg_77;
reg   [8:0] index_0_reg_88;
reg   [8:0] index_1_reg_100;
reg   [2:0] j_0_reg_111;
reg   [8:0] index_2_reg_122;
reg   [4:0] t_0_reg_133;
wire   [63:0] zext_ln203_12_fu_250_p1;
wire   [63:0] zext_ln219_fu_254_p1;
wire   [6:0] tmp_s_fu_204_p3;
wire   [7:0] zext_ln203_fu_200_p1;
wire   [7:0] zext_ln203_10_fu_212_p1;
wire   [7:0] add_ln203_fu_216_p2;
wire   [7:0] add_ln203_9_fu_222_p2;
wire   [9:0] zext_ln203_11_fu_227_p1;
wire   [9:0] p_shl_cast_fu_231_p3;
wire   [9:0] add_ln203_10_fu_239_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_77 <= i_reg_268;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_77 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        index_0_reg_88 <= index_reg_273;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_0_reg_88 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        index_1_reg_100 <= add_ln220_reg_291;
    end else if (((icmp_ln214_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        index_1_reg_100 <= index_0_reg_88;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        index_2_reg_122 <= add_ln220_1_fu_259_p2;
    end else if (((icmp_ln216_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        index_2_reg_122 <= index_1_reg_100;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_111 <= j_reg_286;
    end else if (((icmp_ln214_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_111 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_0_reg_133 <= t_reg_304;
    end else if (((icmp_ln216_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        t_0_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln218_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_11_reg_309 <= add_ln203_11_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln220_reg_291 <= add_ln220_fu_178_p2;
        zext_ln218_reg_296[2 : 0] <= zext_ln218_fu_184_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_268 <= i_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln214_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        index_reg_273 <= index_fu_156_p2;
        zext_ln216_reg_278[2 : 0] <= zext_ln216_fu_162_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_286 <= j_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_reg_304 <= t_fu_194_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln214_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln214_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        flatten1_V_ce0 = 1'b1;
    end else begin
        flatten1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        flatten1_V_we0 = 1'b1;
    end else begin
        flatten1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer5_V_ce0 = 1'b1;
    end else begin
        layer5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln214_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln216_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln218_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_10_fu_239_p2 = (zext_ln203_11_fu_227_p1 + p_shl_cast_fu_231_p3);

assign add_ln203_11_fu_245_p2 = (add_ln203_10_fu_239_p2 + zext_ln218_reg_296);

assign add_ln203_9_fu_222_p2 = (add_ln203_fu_216_p2 + zext_ln216_reg_278);

assign add_ln203_fu_216_p2 = (zext_ln203_fu_200_p1 + zext_ln203_10_fu_212_p1);

assign add_ln220_1_fu_259_p2 = (index_2_reg_122 + 9'd1);

assign add_ln220_fu_178_p2 = (index_1_reg_100 + 9'd16);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign flatten1_V_address0 = zext_ln219_fu_254_p1;

assign flatten1_V_d0 = layer5_V_q0;

assign i_fu_150_p2 = (i_0_reg_77 + 3'd1);

assign icmp_ln214_fu_144_p2 = ((i_0_reg_77 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_166_p2 = ((j_0_reg_111 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_188_p2 = ((t_0_reg_133 == 5'd16) ? 1'b1 : 1'b0);

assign index_fu_156_p2 = (index_0_reg_88 + 9'd80);

assign j_fu_172_p2 = (j_0_reg_111 + 3'd1);

assign layer5_V_address0 = zext_ln203_12_fu_250_p1;

assign p_shl_cast_fu_231_p3 = {{add_ln203_9_fu_222_p2}, {2'd0}};

assign t_fu_194_p2 = (t_0_reg_133 + 5'd1);

assign tmp_s_fu_204_p3 = {{t_0_reg_133}, {2'd0}};

assign zext_ln203_10_fu_212_p1 = tmp_s_fu_204_p3;

assign zext_ln203_11_fu_227_p1 = add_ln203_9_fu_222_p2;

assign zext_ln203_12_fu_250_p1 = add_ln203_11_reg_309;

assign zext_ln203_fu_200_p1 = t_0_reg_133;

assign zext_ln216_fu_162_p1 = i_0_reg_77;

assign zext_ln218_fu_184_p1 = j_0_reg_111;

assign zext_ln219_fu_254_p1 = index_2_reg_122;

always @ (posedge ap_clk) begin
    zext_ln216_reg_278[7:3] <= 5'b00000;
    zext_ln218_reg_296[9:3] <= 7'b0000000;
end

endmodule //Flatten_Layer
