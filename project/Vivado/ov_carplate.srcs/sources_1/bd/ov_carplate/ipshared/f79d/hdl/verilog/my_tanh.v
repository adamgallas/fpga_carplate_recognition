// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module my_tanh (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [11:0] x_V;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] tanh_index_V_address0;
reg    tanh_index_V_ce0;
wire   [8:0] tanh_index_V_q0;
wire   [7:0] tanh_value_V_address0;
reg    tanh_value_V_ce0;
wire   [7:0] tanh_value_V_q0;
wire   [0:0] icmp_ln885_fu_179_p2;
reg   [0:0] icmp_ln885_reg_530;
wire   [0:0] p_Result_9_fu_185_p3;
reg   [0:0] p_Result_9_reg_534;
wire   [11:0] tmp_V_3_fu_199_p3;
reg   [11:0] tmp_V_3_reg_539;
reg   [31:0] l_fu_225_p3;
reg   [31:0] l_reg_547;
wire   [10:0] trunc_ln893_fu_233_p1;
reg   [10:0] trunc_ln893_reg_552;
wire   [31:0] or_ln_fu_344_p3;
reg   [31:0] or_ln_reg_557;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln908_fu_352_p2;
reg   [0:0] icmp_ln908_reg_562;
wire   [31:0] add_ln908_fu_358_p2;
reg   [31:0] add_ln908_reg_567;
wire   [31:0] sub_ln908_fu_364_p2;
reg   [31:0] sub_ln908_reg_572;
reg   [62:0] m_7_reg_577;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_6_reg_582;
wire   [0:0] icmp_ln924_1_fu_438_p2;
reg   [0:0] icmp_ln924_1_reg_587;
wire   [63:0] p_Result_11_fu_472_p5;
reg   [63:0] p_Result_11_reg_592;
wire    ap_CS_fsm_state4;
wire   [0:0] or_ln924_fu_490_p2;
reg   [0:0] or_ln924_reg_597;
wire   [63:0] bitcast_ln729_fu_495_p1;
reg   [63:0] bitcast_ln729_reg_602;
wire    ap_CS_fsm_state5;
wire   [0:0] grp_fu_174_p2;
reg   [0:0] and_ln924_reg_607;
wire    ap_CS_fsm_state6;
reg   [0:0] and_ln924_1_reg_611;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln54_fu_499_p2;
reg   [0:0] icmp_ln54_reg_615;
wire    ap_CS_fsm_state8;
wire   [8:0] i_fu_505_p2;
reg   [8:0] i_reg_619;
wire   [63:0] zext_ln55_fu_511_p1;
reg   [63:0] zext_ln55_reg_624;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln1495_fu_520_p2;
reg   [8:0] i_0_reg_138;
reg   [7:0] ap_phi_mux_agg_result_V_0_phi_fu_154_p8;
reg   [7:0] agg_result_V_0_reg_149;
wire    ap_CS_fsm_state10;
reg   [63:0] grp_fu_168_p0;
reg   [63:0] grp_fu_168_p1;
wire   [0:0] grp_fu_168_p2;
wire   [11:0] tmp_V_fu_193_p2;
reg   [11:0] p_Result_s_fu_207_p4;
wire   [31:0] p_Result_10_fu_217_p3;
wire   [31:0] sub_ln894_fu_237_p2;
wire   [31:0] lsb_index_fu_246_p2;
wire   [30:0] tmp_4_fu_252_p4;
wire   [3:0] trunc_ln897_fu_268_p1;
wire   [3:0] sub_ln897_fu_272_p2;
wire   [11:0] zext_ln897_fu_278_p1;
wire   [11:0] lshr_ln897_fu_282_p2;
wire   [11:0] p_Result_4_fu_288_p2;
wire   [0:0] icmp_ln897_fu_262_p2;
wire   [0:0] icmp_ln897_1_fu_293_p2;
wire   [0:0] tmp_5_fu_305_p3;
wire   [11:0] trunc_ln894_fu_242_p1;
wire   [11:0] add_ln899_fu_319_p2;
wire   [0:0] p_Result_3_fu_325_p3;
wire   [0:0] xor_ln899_fu_313_p2;
wire   [0:0] and_ln899_fu_332_p2;
wire   [0:0] a_fu_299_p2;
wire   [0:0] or_ln899_fu_338_p2;
wire   [31:0] zext_ln907_1_fu_373_p1;
wire   [31:0] lshr_ln908_fu_376_p2;
wire   [63:0] m_fu_370_p1;
wire   [63:0] zext_ln908_1_fu_385_p1;
wire   [63:0] zext_ln908_fu_381_p1;
wire   [63:0] shl_ln908_fu_388_p2;
wire   [63:0] zext_ln911_fu_401_p1;
wire   [63:0] m_1_fu_394_p3;
wire   [63:0] m_2_fu_404_p2;
wire   [51:0] trunc_ln3_fu_428_p4;
wire   [10:0] sub_ln915_fu_454_p2;
wire   [10:0] select_ln915_fu_447_p3;
wire   [10:0] add_ln915_fu_459_p2;
wire   [63:0] m_8_fu_444_p1;
wire   [11:0] tmp_1_fu_465_p3;
wire   [0:0] icmp_ln924_fu_484_p2;
wire  signed [11:0] sext_ln1495_fu_516_p1;
reg   [4:0] grp_fu_168_opcode;
reg   [7:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_preg = 8'd0;
end

my_tanh_tanh_indeeOg #(
    .DataWidth( 9 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
tanh_index_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tanh_index_V_address0),
    .ce0(tanh_index_V_ce0),
    .q0(tanh_index_V_q0)
);

my_tanh_tanh_valufYi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
tanh_value_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tanh_value_V_address0),
    .ce0(tanh_value_V_ce0),
    .q0(tanh_value_V_q0)
);

Lenet_HLS_dcmp_64g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
Lenet_HLS_dcmp_64g8j_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p0),
    .din1(grp_fu_168_p1),
    .ce(1'b1),
    .opcode(grp_fu_168_opcode),
    .dout(grp_fu_168_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_return_preg <= ap_phi_mux_agg_result_V_0_phi_fu_154_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_499_p2 == 1'd1)) | ((icmp_ln885_reg_530 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (grp_fu_174_p2 == 1'd1)))) begin
        agg_result_V_0_reg_149 <= 8'd64;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_fu_174_p2 == 1'd1))) begin
        agg_result_V_0_reg_149 <= 8'd192;
    end else if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln54_reg_615 == 1'd0) & (1'd0 == and_ln924_1_reg_611) & (1'd0 == and_ln924_reg_607)) | ((icmp_ln54_reg_615 == 1'd0) & (icmp_ln885_reg_530 == 1'd1))))) begin
        agg_result_V_0_reg_149 <= tanh_value_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1495_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_reg_138 <= i_reg_619;
    end else if (((1'b1 == ap_CS_fsm_state7) & ((grp_fu_174_p2 == 1'd0) | (icmp_ln885_reg_530 == 1'd1)))) begin
        i_0_reg_138 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln908_reg_567 <= add_ln908_fu_358_p2;
        icmp_ln908_reg_562 <= icmp_ln908_fu_352_p2;
        or_ln_reg_557[0] <= or_ln_fu_344_p3[0];
        sub_ln908_reg_572 <= sub_ln908_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_reg_530 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        and_ln924_1_reg_611 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln924_reg_607 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bitcast_ln729_reg_602 <= bitcast_ln729_fu_495_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_619 <= i_fu_505_p2;
        icmp_ln54_reg_615 <= icmp_ln54_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln885_reg_530 <= icmp_ln885_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln924_1_reg_587 <= icmp_ln924_1_fu_438_p2;
        m_7_reg_577 <= {{m_2_fu_404_p2[63:1]}};
        tmp_6_reg_582 <= m_2_fu_404_p2[32'd54];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln885_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        l_reg_547 <= l_fu_225_p3;
        p_Result_9_reg_534 <= x_V[32'd11];
        tmp_V_3_reg_539 <= tmp_V_3_fu_199_p3;
        trunc_ln893_reg_552 <= trunc_ln893_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        or_ln924_reg_597 <= or_ln924_fu_490_p2;
        p_Result_11_reg_592 <= p_Result_11_fu_472_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        zext_ln55_reg_624[8 : 0] <= zext_ln55_fu_511_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (((icmp_ln54_reg_615 == 1'd0) & (1'd0 == and_ln924_1_reg_611) & (1'd0 == and_ln924_reg_607)) | ((icmp_ln54_reg_615 == 1'd0) & (icmp_ln885_reg_530 == 1'd1))))) begin
        ap_phi_mux_agg_result_V_0_phi_fu_154_p8 = tanh_value_V_q0;
    end else begin
        ap_phi_mux_agg_result_V_0_phi_fu_154_p8 = agg_result_V_0_reg_149;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_return = ap_phi_mux_agg_result_V_0_phi_fu_154_p8;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((grp_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_168_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_168_opcode = 5'd4;
    end else begin
        grp_fu_168_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_168_p0 = bitcast_ln729_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_168_p0 = bitcast_ln729_fu_495_p1;
    end else begin
        grp_fu_168_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_168_p1 = 64'd4616189618054758400;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_168_p1 = 64'd13839561654909534208;
    end else begin
        grp_fu_168_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tanh_index_V_ce0 = 1'b1;
    end else begin
        tanh_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tanh_value_V_ce0 = 1'b1;
    end else begin
        tanh_value_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln885_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((icmp_ln885_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_fu_174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((grp_fu_174_p2 == 1'd0) | (icmp_ln885_reg_530 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln54_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln1495_fu_520_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_299_p2 = (icmp_ln897_fu_262_p2 & icmp_ln897_1_fu_293_p2);

assign add_ln899_fu_319_p2 = ($signed(12'd4043) + $signed(trunc_ln894_fu_242_p1));

assign add_ln908_fu_358_p2 = ($signed(32'd4294967242) + $signed(sub_ln894_fu_237_p2));

assign add_ln915_fu_459_p2 = (sub_ln915_fu_454_p2 + select_ln915_fu_447_p3);

assign and_ln899_fu_332_p2 = (xor_ln899_fu_313_p2 & p_Result_3_fu_325_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln729_fu_495_p1 = p_Result_11_reg_592;

assign grp_fu_174_p2 = (or_ln924_reg_597 & grp_fu_168_p2);

assign i_fu_505_p2 = (i_0_reg_138 + 9'd1);

assign icmp_ln1495_fu_520_p2 = (($signed(sext_ln1495_fu_516_p1) > $signed(x_V)) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_499_p2 = ((i_0_reg_138 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln885_fu_179_p2 = ((x_V == 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_1_fu_293_p2 = ((p_Result_4_fu_288_p2 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln897_fu_262_p2 = (($signed(tmp_4_fu_252_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln908_fu_352_p2 = (($signed(lsb_index_fu_246_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln924_1_fu_438_p2 = ((trunc_ln3_fu_428_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln924_fu_484_p2 = ((add_ln915_fu_459_p2 != 11'd2047) ? 1'b1 : 1'b0);


always @ (p_Result_10_fu_217_p3) begin
    if (p_Result_10_fu_217_p3[0] == 1'b1) begin
        l_fu_225_p3 = 32'd0;
    end else if (p_Result_10_fu_217_p3[1] == 1'b1) begin
        l_fu_225_p3 = 32'd1;
    end else if (p_Result_10_fu_217_p3[2] == 1'b1) begin
        l_fu_225_p3 = 32'd2;
    end else if (p_Result_10_fu_217_p3[3] == 1'b1) begin
        l_fu_225_p3 = 32'd3;
    end else if (p_Result_10_fu_217_p3[4] == 1'b1) begin
        l_fu_225_p3 = 32'd4;
    end else if (p_Result_10_fu_217_p3[5] == 1'b1) begin
        l_fu_225_p3 = 32'd5;
    end else if (p_Result_10_fu_217_p3[6] == 1'b1) begin
        l_fu_225_p3 = 32'd6;
    end else if (p_Result_10_fu_217_p3[7] == 1'b1) begin
        l_fu_225_p3 = 32'd7;
    end else if (p_Result_10_fu_217_p3[8] == 1'b1) begin
        l_fu_225_p3 = 32'd8;
    end else if (p_Result_10_fu_217_p3[9] == 1'b1) begin
        l_fu_225_p3 = 32'd9;
    end else if (p_Result_10_fu_217_p3[10] == 1'b1) begin
        l_fu_225_p3 = 32'd10;
    end else if (p_Result_10_fu_217_p3[11] == 1'b1) begin
        l_fu_225_p3 = 32'd11;
    end else if (p_Result_10_fu_217_p3[12] == 1'b1) begin
        l_fu_225_p3 = 32'd12;
    end else if (p_Result_10_fu_217_p3[13] == 1'b1) begin
        l_fu_225_p3 = 32'd13;
    end else if (p_Result_10_fu_217_p3[14] == 1'b1) begin
        l_fu_225_p3 = 32'd14;
    end else if (p_Result_10_fu_217_p3[15] == 1'b1) begin
        l_fu_225_p3 = 32'd15;
    end else if (p_Result_10_fu_217_p3[16] == 1'b1) begin
        l_fu_225_p3 = 32'd16;
    end else if (p_Result_10_fu_217_p3[17] == 1'b1) begin
        l_fu_225_p3 = 32'd17;
    end else if (p_Result_10_fu_217_p3[18] == 1'b1) begin
        l_fu_225_p3 = 32'd18;
    end else if (p_Result_10_fu_217_p3[19] == 1'b1) begin
        l_fu_225_p3 = 32'd19;
    end else if (p_Result_10_fu_217_p3[20] == 1'b1) begin
        l_fu_225_p3 = 32'd20;
    end else if (p_Result_10_fu_217_p3[21] == 1'b1) begin
        l_fu_225_p3 = 32'd21;
    end else if (p_Result_10_fu_217_p3[22] == 1'b1) begin
        l_fu_225_p3 = 32'd22;
    end else if (p_Result_10_fu_217_p3[23] == 1'b1) begin
        l_fu_225_p3 = 32'd23;
    end else if (p_Result_10_fu_217_p3[24] == 1'b1) begin
        l_fu_225_p3 = 32'd24;
    end else if (p_Result_10_fu_217_p3[25] == 1'b1) begin
        l_fu_225_p3 = 32'd25;
    end else if (p_Result_10_fu_217_p3[26] == 1'b1) begin
        l_fu_225_p3 = 32'd26;
    end else if (p_Result_10_fu_217_p3[27] == 1'b1) begin
        l_fu_225_p3 = 32'd27;
    end else if (p_Result_10_fu_217_p3[28] == 1'b1) begin
        l_fu_225_p3 = 32'd28;
    end else if (p_Result_10_fu_217_p3[29] == 1'b1) begin
        l_fu_225_p3 = 32'd29;
    end else if (p_Result_10_fu_217_p3[30] == 1'b1) begin
        l_fu_225_p3 = 32'd30;
    end else if (p_Result_10_fu_217_p3[31] == 1'b1) begin
        l_fu_225_p3 = 32'd31;
    end else begin
        l_fu_225_p3 = 32'd32;
    end
end

assign lsb_index_fu_246_p2 = ($signed(32'd4294967243) + $signed(sub_ln894_fu_237_p2));

assign lshr_ln897_fu_282_p2 = 12'd4095 >> zext_ln897_fu_278_p1;

assign lshr_ln908_fu_376_p2 = zext_ln907_1_fu_373_p1 >> add_ln908_reg_567;

assign m_1_fu_394_p3 = ((icmp_ln908_reg_562[0:0] === 1'b1) ? zext_ln908_fu_381_p1 : shl_ln908_fu_388_p2);

assign m_2_fu_404_p2 = (zext_ln911_fu_401_p1 + m_1_fu_394_p3);

assign m_8_fu_444_p1 = m_7_reg_577;

assign m_fu_370_p1 = tmp_V_3_reg_539;

assign or_ln899_fu_338_p2 = (and_ln899_fu_332_p2 | a_fu_299_p2);

assign or_ln924_fu_490_p2 = (icmp_ln924_fu_484_p2 | icmp_ln924_1_reg_587);

assign or_ln_fu_344_p3 = {{31'd0}, {or_ln899_fu_338_p2}};

assign p_Result_10_fu_217_p3 = {{20'd1048575}, {p_Result_s_fu_207_p4}};

assign p_Result_11_fu_472_p5 = {{tmp_1_fu_465_p3}, {m_8_fu_444_p1[51:0]}};

assign p_Result_3_fu_325_p3 = tmp_V_3_reg_539[add_ln899_fu_319_p2];

assign p_Result_4_fu_288_p2 = (tmp_V_3_reg_539 & lshr_ln897_fu_282_p2);

assign p_Result_9_fu_185_p3 = x_V[32'd11];

integer ap_tvar_int_0;

always @ (tmp_V_3_fu_199_p3) begin
    for (ap_tvar_int_0 = 12 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 11 - 0) begin
            p_Result_s_fu_207_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_207_p4[ap_tvar_int_0] = tmp_V_3_fu_199_p3[11 - ap_tvar_int_0];
        end
    end
end

assign select_ln915_fu_447_p3 = ((tmp_6_reg_582[0:0] === 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1495_fu_516_p1 = $signed(tanh_index_V_q0);

assign shl_ln908_fu_388_p2 = m_fu_370_p1 << zext_ln908_1_fu_385_p1;

assign sub_ln894_fu_237_p2 = (32'd12 - l_reg_547);

assign sub_ln897_fu_272_p2 = (4'd2 - trunc_ln897_fu_268_p1);

assign sub_ln908_fu_364_p2 = (32'd54 - sub_ln894_fu_237_p2);

assign sub_ln915_fu_454_p2 = (11'd6 - trunc_ln893_reg_552);

assign tanh_index_V_address0 = zext_ln55_fu_511_p1;

assign tanh_value_V_address0 = zext_ln55_reg_624;

assign tmp_1_fu_465_p3 = {{p_Result_9_reg_534}, {add_ln915_fu_459_p2}};

assign tmp_4_fu_252_p4 = {{lsb_index_fu_246_p2[31:1]}};

assign tmp_5_fu_305_p3 = lsb_index_fu_246_p2[32'd31];

assign tmp_V_3_fu_199_p3 = ((p_Result_9_fu_185_p3[0:0] === 1'b1) ? tmp_V_fu_193_p2 : x_V);

assign tmp_V_fu_193_p2 = (12'd0 - x_V);

assign trunc_ln3_fu_428_p4 = {{m_2_fu_404_p2[52:1]}};

assign trunc_ln893_fu_233_p1 = l_fu_225_p3[10:0];

assign trunc_ln894_fu_242_p1 = sub_ln894_fu_237_p2[11:0];

assign trunc_ln897_fu_268_p1 = sub_ln894_fu_237_p2[3:0];

assign xor_ln899_fu_313_p2 = (tmp_5_fu_305_p3 ^ 1'd1);

assign zext_ln55_fu_511_p1 = i_0_reg_138;

assign zext_ln897_fu_278_p1 = sub_ln897_fu_272_p2;

assign zext_ln907_1_fu_373_p1 = tmp_V_3_reg_539;

assign zext_ln908_1_fu_385_p1 = sub_ln908_reg_572;

assign zext_ln908_fu_381_p1 = lshr_ln908_fu_376_p2;

assign zext_ln911_fu_401_p1 = or_ln_reg_557;

always @ (posedge ap_clk) begin
    or_ln_reg_557[31:1] <= 31'b0000000000000000000000000000000;
    zext_ln55_reg_624[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //my_tanh
