// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Fullc1_Cal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flatten2_V_address0,
        flatten2_V_ce0,
        flatten2_V_we0,
        flatten2_V_d0,
        flatten2_V_q0,
        flatten1_V_address0,
        flatten1_V_ce0,
        flatten1_V_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] flatten2_V_address0;
output   flatten2_V_ce0;
output   flatten2_V_we0;
output  [11:0] flatten2_V_d0;
input  [11:0] flatten2_V_q0;
output  [8:0] flatten1_V_address0;
output   flatten1_V_ce0;
input  [11:0] flatten1_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flatten2_V_ce0;
reg flatten2_V_we0;
reg[11:0] flatten2_V_d0;
reg flatten1_V_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] bias1_V_address0;
reg    bias1_V_ce0;
wire   [2:0] bias1_V_q0;
wire   [15:0] weight1_V_address0;
reg    weight1_V_ce0;
wire   [5:0] weight1_V_q0;
reg   [11:0] reg_175;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [15:0] add_ln177_fu_180_p2;
reg   [15:0] add_ln177_reg_483;
wire    ap_CS_fsm_state2;
wire   [6:0] i_fu_192_p2;
reg   [6:0] i_reg_491;
wire   [0:0] icmp_ln177_fu_186_p2;
reg   [6:0] flatten2_V_addr_reg_501;
wire   [8:0] j_fu_215_p2;
reg   [8:0] j_reg_509;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln180_fu_209_p2;
reg  signed [5:0] weight1_V_load_reg_524;
wire    ap_CS_fsm_state5;
reg  signed [11:0] flatten1_V_load_reg_529;
wire  signed [18:0] r_V_fu_475_p2;
reg  signed [18:0] r_V_reg_534;
wire   [17:0] trunc_ln1192_fu_247_p1;
reg   [17:0] trunc_ln1192_reg_540;
wire   [4:0] trunc_ln718_fu_250_p1;
reg   [4:0] trunc_ln718_reg_545;
wire   [0:0] overflow_fu_434_p2;
reg   [0:0] overflow_reg_550;
wire    ap_CS_fsm_state7;
wire   [0:0] underflow_fu_458_p2;
reg   [0:0] underflow_reg_554;
wire   [0:0] or_ln340_fu_464_p2;
reg   [0:0] or_ln340_reg_558;
wire    grp_my_tanh_fu_165_ap_start;
wire    grp_my_tanh_fu_165_ap_done;
wire    grp_my_tanh_fu_165_ap_idle;
wire    grp_my_tanh_fu_165_ap_ready;
wire   [7:0] grp_my_tanh_fu_165_ap_return;
reg   [6:0] i_0_reg_131;
wire    ap_CS_fsm_state10;
reg   [15:0] phi_mul_reg_142;
reg   [8:0] j_0_reg_154;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state8;
reg    grp_my_tanh_fu_165_ap_start_reg;
wire   [63:0] zext_ln178_fu_198_p1;
wire   [63:0] zext_ln1116_2_fu_236_p1;
wire   [63:0] zext_ln181_fu_221_p1;
wire  signed [11:0] sext_ln203_fu_204_p1;
wire   [11:0] p_Val2_14_fu_329_p2;
wire  signed [11:0] sext_ln203_1_fu_470_p1;
wire   [15:0] zext_ln1116_fu_226_p1;
wire   [15:0] add_ln1116_fu_230_p2;
wire  signed [17:0] lhs_V_fu_253_p3;
wire  signed [18:0] sext_ln728_fu_261_p1;
(* use_dsp48 = "no" *) wire   [18:0] ret_V_fu_265_p2;
wire   [17:0] add_ln1192_2_fu_270_p2;
wire   [0:0] p_Result_s_fu_275_p3;
wire   [0:0] r_1_fu_293_p2;
wire   [0:0] tmp_38_fu_312_p3;
wire   [0:0] r_fu_306_p2;
wire   [0:0] and_ln415_fu_319_p2;
wire   [11:0] zext_ln415_fu_325_p1;
wire   [11:0] p_Val2_13_fu_283_p4;
wire   [0:0] tmp_39_fu_336_p3;
wire   [0:0] p_Result_20_fu_298_p3;
wire   [0:0] xor_ln416_3_fu_344_p2;
wire   [0:0] tmp_42_fu_372_p3;
wire   [0:0] xor_ln416_4_fu_386_p2;
wire   [0:0] or_ln416_2_fu_392_p2;
wire   [0:0] xor_ln779_fu_380_p2;
wire   [0:0] Range2_all_ones_fu_364_p3;
wire   [0:0] or_ln416_fu_398_p2;
wire   [0:0] carry_2_fu_350_p2;
wire   [0:0] p_Result_21_fu_356_p3;
wire   [0:0] xor_ln785_fu_416_p2;
wire   [0:0] or_ln785_fu_422_p2;
wire   [0:0] xor_ln785_2_fu_428_p2;
wire   [0:0] deleted_ones_fu_404_p2;
wire   [0:0] and_ln781_fu_410_p2;
wire   [0:0] and_ln786_fu_440_p2;
wire   [0:0] or_ln786_fu_446_p2;
wire   [0:0] xor_ln786_fu_452_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_my_tanh_fu_165_ap_start_reg = 1'b0;
end

Fullc1_Cal_bias1_V #(
    .DataWidth( 3 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
bias1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias1_V_address0),
    .ce0(bias1_V_ce0),
    .q0(bias1_V_q0)
);

Fullc1_Cal_weighthbi #(
    .DataWidth( 6 ),
    .AddressRange( 33600 ),
    .AddressWidth( 16 ))
weight1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight1_V_address0),
    .ce0(weight1_V_ce0),
    .q0(weight1_V_q0)
);

my_tanh grp_my_tanh_fu_165(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_my_tanh_fu_165_ap_start),
    .ap_done(grp_my_tanh_fu_165_ap_done),
    .ap_idle(grp_my_tanh_fu_165_ap_idle),
    .ap_ready(grp_my_tanh_fu_165_ap_ready),
    .x_V(reg_175),
    .ap_return(grp_my_tanh_fu_165_ap_return)
);

Lenet_HLS_mul_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 19 ))
Lenet_HLS_mul_mulibs_U23(
    .din0(flatten1_V_load_reg_529),
    .din1(weight1_V_load_reg_524),
    .dout(r_V_fu_475_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_my_tanh_fu_165_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_my_tanh_fu_165_ap_start_reg <= 1'b1;
        end else if ((grp_my_tanh_fu_165_ap_ready == 1'b1)) begin
            grp_my_tanh_fu_165_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_my_tanh_fu_165_ap_done == 1'b1))) begin
        i_0_reg_131 <= i_reg_491;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_131 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_0_reg_154 <= j_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_154 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_my_tanh_fu_165_ap_done == 1'b1))) begin
        phi_mul_reg_142 <= add_ln177_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_142 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln177_reg_483 <= add_ln177_fu_180_p2;
        i_reg_491 <= i_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flatten1_V_load_reg_529 <= flatten1_V_q0;
        weight1_V_load_reg_524 <= weight1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        flatten2_V_addr_reg_501 <= zext_ln178_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_509 <= j_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        or_ln340_reg_558 <= or_ln340_fu_464_p2;
        overflow_reg_550 <= overflow_fu_434_p2;
        underflow_reg_554 <= underflow_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_V_reg_534 <= r_V_fu_475_p2;
        trunc_ln1192_reg_540 <= trunc_ln1192_fu_247_p1;
        trunc_ln718_reg_545 <= trunc_ln718_fu_250_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_175 <= flatten2_V_q0;
    end
end

always @ (*) begin
    if ((((icmp_ln177_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias1_V_ce0 = 1'b1;
    end else begin
        bias1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flatten1_V_ce0 = 1'b1;
    end else begin
        flatten1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (overflow_reg_550 == 1'd1)) | ((overflow_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (underflow_reg_554 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_my_tanh_fu_165_ap_done == 1'b1)))) begin
        flatten2_V_ce0 = 1'b1;
    end else begin
        flatten2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        flatten2_V_d0 = sext_ln203_1_fu_470_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (overflow_reg_550 == 1'd1))) begin
        flatten2_V_d0 = 12'd2047;
    end else if (((overflow_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (underflow_reg_554 == 1'd1))) begin
        flatten2_V_d0 = 12'd2048;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flatten2_V_d0 = p_Val2_14_fu_329_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        flatten2_V_d0 = sext_ln203_fu_204_p1;
    end else begin
        flatten2_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (overflow_reg_550 == 1'd1)) | ((overflow_reg_550 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (or_ln340_reg_558 == 1'd1) & (underflow_reg_554 == 1'd1)) | ((1'b1 == ap_CS_fsm_state10) & (grp_my_tanh_fu_165_ap_done == 1'b1)))) begin
        flatten2_V_we0 = 1'b1;
    end else begin
        flatten2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weight1_V_ce0 = 1'b1;
    end else begin
        weight1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln177_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln180_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_my_tanh_fu_165_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range2_all_ones_fu_364_p3 = ret_V_fu_265_p2[32'd18];

assign add_ln1116_fu_230_p2 = (phi_mul_reg_142 + zext_ln1116_fu_226_p1);

assign add_ln1192_2_fu_270_p2 = ($signed(lhs_V_fu_253_p3) + $signed(trunc_ln1192_reg_540));

assign add_ln177_fu_180_p2 = (phi_mul_reg_142 + 16'd400);

assign and_ln415_fu_319_p2 = (tmp_38_fu_312_p3 & r_fu_306_p2);

assign and_ln781_fu_410_p2 = (carry_2_fu_350_p2 & Range2_all_ones_fu_364_p3);

assign and_ln786_fu_440_p2 = (p_Result_21_fu_356_p3 & deleted_ones_fu_404_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias1_V_address0 = zext_ln178_fu_198_p1;

assign carry_2_fu_350_p2 = (xor_ln416_3_fu_344_p2 & p_Result_20_fu_298_p3);

assign deleted_ones_fu_404_p2 = (or_ln416_fu_398_p2 & Range2_all_ones_fu_364_p3);

assign flatten1_V_address0 = zext_ln181_fu_221_p1;

assign flatten2_V_address0 = flatten2_V_addr_reg_501;

assign grp_my_tanh_fu_165_ap_start = grp_my_tanh_fu_165_ap_start_reg;

assign i_fu_192_p2 = (i_0_reg_131 + 7'd1);

assign icmp_ln177_fu_186_p2 = ((i_0_reg_131 == 7'd84) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_209_p2 = ((j_0_reg_154 == 9'd400) ? 1'b1 : 1'b0);

assign j_fu_215_p2 = (j_0_reg_154 + 9'd1);

assign lhs_V_fu_253_p3 = {{reg_175}, {6'd0}};

assign or_ln340_fu_464_p2 = (underflow_fu_458_p2 | overflow_fu_434_p2);

assign or_ln416_2_fu_392_p2 = (xor_ln416_4_fu_386_p2 | tmp_39_fu_336_p3);

assign or_ln416_fu_398_p2 = (xor_ln779_fu_380_p2 | or_ln416_2_fu_392_p2);

assign or_ln785_fu_422_p2 = (xor_ln785_fu_416_p2 | p_Result_21_fu_356_p3);

assign or_ln786_fu_446_p2 = (and_ln786_fu_440_p2 | and_ln781_fu_410_p2);

assign overflow_fu_434_p2 = (xor_ln785_2_fu_428_p2 & or_ln785_fu_422_p2);

assign p_Result_20_fu_298_p3 = add_ln1192_2_fu_270_p2[32'd17];

assign p_Result_21_fu_356_p3 = p_Val2_14_fu_329_p2[32'd11];

assign p_Result_s_fu_275_p3 = ret_V_fu_265_p2[32'd18];

assign p_Val2_13_fu_283_p4 = {{add_ln1192_2_fu_270_p2[17:6]}};

assign p_Val2_14_fu_329_p2 = (zext_ln415_fu_325_p1 + p_Val2_13_fu_283_p4);

assign r_1_fu_293_p2 = ((trunc_ln718_reg_545 != 5'd0) ? 1'b1 : 1'b0);

assign r_fu_306_p2 = (r_1_fu_293_p2 | p_Result_s_fu_275_p3);

assign ret_V_fu_265_p2 = ($signed(r_V_reg_534) + $signed(sext_ln728_fu_261_p1));

assign sext_ln203_1_fu_470_p1 = $signed(grp_my_tanh_fu_165_ap_return);

assign sext_ln203_fu_204_p1 = $signed(bias1_V_q0);

assign sext_ln728_fu_261_p1 = lhs_V_fu_253_p3;

assign tmp_38_fu_312_p3 = r_V_reg_534[32'd5];

assign tmp_39_fu_336_p3 = p_Val2_14_fu_329_p2[32'd11];

assign tmp_42_fu_372_p3 = ret_V_fu_265_p2[32'd18];

assign trunc_ln1192_fu_247_p1 = r_V_fu_475_p2[17:0];

assign trunc_ln718_fu_250_p1 = r_V_fu_475_p2[4:0];

assign underflow_fu_458_p2 = (xor_ln786_fu_452_p2 & p_Result_s_fu_275_p3);

assign weight1_V_address0 = zext_ln1116_2_fu_236_p1;

assign xor_ln416_3_fu_344_p2 = (tmp_39_fu_336_p3 ^ 1'd1);

assign xor_ln416_4_fu_386_p2 = (p_Result_20_fu_298_p3 ^ 1'd1);

assign xor_ln779_fu_380_p2 = (tmp_42_fu_372_p3 ^ 1'd1);

assign xor_ln785_2_fu_428_p2 = (p_Result_s_fu_275_p3 ^ 1'd1);

assign xor_ln785_fu_416_p2 = (carry_2_fu_350_p2 ^ Range2_all_ones_fu_364_p3);

assign xor_ln786_fu_452_p2 = (or_ln786_fu_446_p2 ^ 1'd1);

assign zext_ln1116_2_fu_236_p1 = add_ln1116_fu_230_p2;

assign zext_ln1116_fu_226_p1 = j_0_reg_154;

assign zext_ln178_fu_198_p1 = i_0_reg_131;

assign zext_ln181_fu_221_p1 = j_0_reg_154;

assign zext_ln415_fu_325_p1 = and_ln415_fu_319_p2;

endmodule //Fullc1_Cal
